[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19471 (util: Make default arg values more specific by hebasto)\n* #19425 (refactor: Get rid of more redundant chain methods by ryanofsky)\n* #19323 (gui: Fix regression in *txoutset* in GUI console by hebasto)\n* #19101 (refactor: remove ::vpwallets and related global variables by ryanofsky)\n* #19099 (refactor: Move wallet methods out of chain.h and node.h by ryanofsky)\n* #19098 (test: Remove duplicate NodeContext hacks by ryanofsky)\n* #18980 (build: Decouple clientversion.cpp from the git repo by hebasto)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* #15936 (Unify bitcoin-qt and bitcoind persistent settings by ryanofsky)\n* #15719 (Wallet passive startup by ryanofsky)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-04T00:27:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-638529365",
      "id" : 638529365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzODUyOTM2NQ==",
      "updated_at" : "2020-07-14T09:27:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638529365",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated d38f790138089b2956207b5e98b74e1e0e116c5c -> 99562989e749e002c07d3cda1f95a5781160b187 ([`pr/ipc-echo.1`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.1) -> [`pr/ipc-echo.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.1..pr/ipc-echo.2)) fixing missing include causing build failures https://travis-ci.org/github/bitcoin/bitcoin/jobs/694309633#L2311\r\nUpdated 99562989e749e002c07d3cda1f95a5781160b187 -> 885f0d104141f0f157f05c02c9e4fb4c2f5c6d57 ([`pr/ipc-echo.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.2) -> [`pr/ipc-echo.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.2..pr/ipc-echo.3)) to fix missing include error https://travis-ci.org/github/bitcoin/bitcoin/jobs/694434815#L2574\r\nRebased 885f0d104141f0f157f05c02c9e4fb4c2f5c6d57 -> 52192725a3ec1f814cf40049de45efffc226cd5b ([`pr/ipc-echo.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.3) -> [`pr/ipc-echo.4`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.3-rebase..pr/ipc-echo.4)) due to conflict with #19176 and reducing Init class dependencies",
      "created_at" : "2020-06-05T13:41:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-639486920",
      "id" : 639486920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTQ4NjkyMA==",
      "updated_at" : "2020-06-11T03:54:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639486920",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-06-09T21:48:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-641600105",
      "id" : 641600105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTYwMDEwNQ==",
      "updated_at" : "2020-06-09T21:48:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641600105",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-06-11T09:41:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-642536017",
      "id" : 642536017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjUzNjAxNw==",
      "updated_at" : "2020-06-11T09:41:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642536017",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440489253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440489253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b12041f\r\n\r\nAFAICT, `addCloseHook` stacks new hook as prefix to previous added one, thus call order is reverse than registering order ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-15T22:50:15Z",
      "diff_hunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_BASE_H\n+#define BITCOIN_INTERFACES_BASE_H\n+\n+#include <cassert>\n+#include <memory>\n+\n+namespace interfaces {\n+\n+class Base;\n+\n+//! Close hook.\n+class CloseHook\n+{\n+public:\n+    virtual ~CloseHook() {}\n+\n+    //! Handle interface being closed or destroyed.\n+    virtual void onClose(Base& interface) {}\n+\n+    std::unique_ptr<CloseHook> m_next_hook;\n+};\n+\n+//! Close hook that encapsulate and deletes a moveable object.\n+template <typename T>\n+class Deleter : public CloseHook\n+{\n+public:\n+    explicit Deleter(T&& value) : m_value(std::move(value)) {}\n+    void onClose(Base& interface) override { T(std::move(m_value)); }\n+    T m_value;\n+};\n+\n+//! Base class for interfaces.\n+class Base\n+{\n+public:\n+    //! Destructor, calls close hooks.\n+    virtual ~Base();\n+\n+    // Call close hooks without waiting for destructor.\n+    void close();\n+\n+    //! Add close hook.\n+    void addCloseHook(std::unique_ptr<CloseHook> close_hook);\n+\n+    std::unique_ptr<CloseHook> m_close_hook;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440489253",
      "id" : 440489253,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4OTI1Mw==",
      "original_commit_id" : "b12041f74de234ad45083be8f86ae714dd5bdfae",
      "original_line" : 51,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/interfaces/base.h",
      "position" : 51,
      "pull_request_review_id" : 431045015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440489253",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440490694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440490694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "643d602\r\n\r\n`LocalInit` isn't really meaningful as a name IMO, if understands well it must implemented both by parent and child processes, but methods called will diverge ? `IPCWrapper` , `IPCSupervisor`, `IPCAccess`, ... ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-15T22:54:58Z",
      "diff_hunk" : "@@ -0,0 +1,47 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Interface allowing multiprocess code to create other interfaces on startup.\n+class Init\n+{\n+public:\n+    virtual ~Init() = default;\n+};\n+\n+//! Specialization of Init for current process.\n+class LocalInit : public Init",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440490694",
      "id" : 440490694,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MDY5NA==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 55,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 55,
      "pull_request_review_id" : 431045015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440490694",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440491394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440491394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "643d602\r\n\r\nDocument `-ipcfd` usage ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-15T22:57:00Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/ipc.h>\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <mp/util.h>\n+#include <tinyformat.h>\n+\n+namespace interfaces {\n+namespace {\n+class IpcProcessImpl : public IpcProcess\n+{\n+public:\n+    IpcProcessImpl(int argc, char* argv[], const char* exe_name, IpcProtocol& protocol)\n+        : m_argc(argc), m_argv(argv), m_exe_name(exe_name), m_protocol(protocol)\n+    {\n+    }\n+    int spawn(const std::string& new_exe_name, int& pid) override\n+    {\n+        return mp::SpawnProcess(pid, [&](int fd) {\n+            fs::path path = m_argc > 0 ? m_argv[0] : \"\";\n+            path.remove_filename();\n+            path.append(new_exe_name);\n+            return std::vector<std::string>{path.string(), \"-ipcfd\", strprintf(\"%i\", fd)};\n+        });\n+    }\n+    int wait(int pid) override { return mp::WaitProcess(pid); }\n+    bool serve(int& exit_status) override\n+    {\n+        if (m_argc != 3 || strcmp(m_argv[1], \"-ipcfd\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440491394",
      "id" : 440491394,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MTM5NA==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 40,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/interfaces/ipc.cpp",
      "position" : 40,
      "pull_request_review_id" : 431045015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440491394",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440493321"
         }
      },
      "author_association" : "MEMBER",
      "body" : "643d602\r\n\r\nMaybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve` being called and thus that's a bit confusing with regards to documentation.",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-15T23:03:09Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_IPC_H\n+#define BITCOIN_INTERFACES_IPC_H\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+\n+#include <memory>\n+\n+namespace interfaces {\n+//! IPC process interface for spawning bitcoin processes and serving requests\n+//! in processes that have been spawned.\n+//!\n+//! There will different implementations of this interface depending on the\n+//! platform (e.g. unix, windows).\n+class IpcProcess\n+{\n+public:\n+    virtual ~IpcProcess() = default;\n+\n+    //! Spawn process and return socket file descriptor for communicating with\n+    //! it.\n+    virtual int spawn(const std::string& new_exe_name, int& pid) = 0;\n+\n+    //! Wait for spawned process to exit and return exit code.\n+    virtual int wait(int pid) = 0;\n+\n+    //! Serve request if current process is a spawned subprocess. Blocks until\n+    //! socket for communicating with the parent process is disconnected.\n+    virtual bool serve(int& exit_status) = 0;\n+};\n+\n+//! IPC protocol interface for calling IPC methods over sockets.\n+//!\n+//! There may be different implementations of this interface for different IPC\n+//! protocols (e.g. Cap'n Proto, gRPC, JSON-RPC, or custom protocols).\n+//!\n+//! An implementation of this interface needs to provide an `interface::Init`\n+//! object that translates method calls into requests sent over a socket, and it\n+//! needs to implement a handler that translates requests received over a socket\n+//! into method calls on a provided `interface::Init` object.\n+class IpcProtocol\n+{\n+public:\n+    virtual ~IpcProtocol() = default;\n+\n+    //! Return Init interface that forwards requests over given socket descriptor.\n+    //! Socket communication is handled on a background thread.\n+    //!\n+    //! @note It could be potentially useful in the future to add\n+    //! std::function<void()> on_disconnect callback argument here. But there\n+    //! isn't an immediate need, because the protocol implementation can clean\n+    //! up its own state (calling ProxyServer destructors, etc) on disconnect,\n+    //! and any client calls will just throw IpcException errors after a\n+    //! disconnect.\n+    virtual std::unique_ptr<Init> connect(int fd) = 0;\n+\n+    //! Handle requests on provided socket descriptor. Socket communication is\n+    //! handled on the current thread. This blocks until the client closes the socket.\n+    //!\n+    //! @note: If this method is called, it needs be called before connect()\n+    //! because for ease of implementation it's inflexible and always runs the\n+    //! event loop in the foreground thread. It can share its event loop with\n+    //! connect() but can't share an event loop that was created by connect().\n+    //! This isn't really a problem because serve() is only called by spawned",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321",
      "id" : 440493321,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzMyMQ==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/interfaces/ipc.h",
      "position" : 68,
      "pull_request_review_id" : 431045015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440493321",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440506337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440506337"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321\r\n\r\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\r\n> \r\n> Maybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve` being called and thus that's a bit confusing with regards to documentation.\r\n\r\nThanks for the review! I'll address the other comments, but just in case there is any question about `serve()` it's called in `main()` here in the `bitcoin-node` executable:\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/pr/ipc-echo.4/src/bitcoind.cpp#L178-L185\r\n\r\nand here in the `bitcoin-wallet` executable:\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/pr/ipc.113/src/bitcoin-wallet.cpp#L80-L88\r\n\r\nIf we wanted to have a separate `bitcoin-echo` executable, it could have a `main()` function just like those examples. I didn't want to have a separate `bitcoin-echo` executable though, just because I thought it'd be confusing to have a kind of pointless `bitcoin-echo` program installed along with `bitcoin-gui` `bitcoin-node` and `bitcoin-wallet`, so I just put the echo functionality inside `bitcoin-node`.",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-15T23:45:35Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_IPC_H\n+#define BITCOIN_INTERFACES_IPC_H\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+\n+#include <memory>\n+\n+namespace interfaces {\n+//! IPC process interface for spawning bitcoin processes and serving requests\n+//! in processes that have been spawned.\n+//!\n+//! There will different implementations of this interface depending on the\n+//! platform (e.g. unix, windows).\n+class IpcProcess\n+{\n+public:\n+    virtual ~IpcProcess() = default;\n+\n+    //! Spawn process and return socket file descriptor for communicating with\n+    //! it.\n+    virtual int spawn(const std::string& new_exe_name, int& pid) = 0;\n+\n+    //! Wait for spawned process to exit and return exit code.\n+    virtual int wait(int pid) = 0;\n+\n+    //! Serve request if current process is a spawned subprocess. Blocks until\n+    //! socket for communicating with the parent process is disconnected.\n+    virtual bool serve(int& exit_status) = 0;\n+};\n+\n+//! IPC protocol interface for calling IPC methods over sockets.\n+//!\n+//! There may be different implementations of this interface for different IPC\n+//! protocols (e.g. Cap'n Proto, gRPC, JSON-RPC, or custom protocols).\n+//!\n+//! An implementation of this interface needs to provide an `interface::Init`\n+//! object that translates method calls into requests sent over a socket, and it\n+//! needs to implement a handler that translates requests received over a socket\n+//! into method calls on a provided `interface::Init` object.\n+class IpcProtocol\n+{\n+public:\n+    virtual ~IpcProtocol() = default;\n+\n+    //! Return Init interface that forwards requests over given socket descriptor.\n+    //! Socket communication is handled on a background thread.\n+    //!\n+    //! @note It could be potentially useful in the future to add\n+    //! std::function<void()> on_disconnect callback argument here. But there\n+    //! isn't an immediate need, because the protocol implementation can clean\n+    //! up its own state (calling ProxyServer destructors, etc) on disconnect,\n+    //! and any client calls will just throw IpcException errors after a\n+    //! disconnect.\n+    virtual std::unique_ptr<Init> connect(int fd) = 0;\n+\n+    //! Handle requests on provided socket descriptor. Socket communication is\n+    //! handled on the current thread. This blocks until the client closes the socket.\n+    //!\n+    //! @note: If this method is called, it needs be called before connect()\n+    //! because for ease of implementation it's inflexible and always runs the\n+    //! event loop in the foreground thread. It can share its event loop with\n+    //! connect() but can't share an event loop that was created by connect().\n+    //! This isn't really a problem because serve() is only called by spawned",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440506337",
      "id" : 440506337,
      "in_reply_to_id" : 440493321,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjMzNw==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/interfaces/ipc.h",
      "position" : 68,
      "pull_request_review_id" : 431065375,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440506337",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447135719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447135719"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440489253\r\n\r\n> [b12041f](https://github.com/bitcoin/bitcoin/commit/b12041f74de234ad45083be8f86ae714dd5bdfae)\r\n> \r\n> AFAICT, `addCloseHook` stacks new hook as prefix to previous added one, thus call order is reverse than registering order ?\r\n\r\nAdded comment, this is analogous to how when multiple variables are declared in a scope, the later variables are destroyed first so destructors can depend on the earlier variables not being destroyed yet. Here later close hooks can rely on earlier close hooks not being called yet.",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-29T17:29:38Z",
      "diff_hunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_BASE_H\n+#define BITCOIN_INTERFACES_BASE_H\n+\n+#include <cassert>\n+#include <memory>\n+\n+namespace interfaces {\n+\n+class Base;\n+\n+//! Close hook.\n+class CloseHook\n+{\n+public:\n+    virtual ~CloseHook() {}\n+\n+    //! Handle interface being closed or destroyed.\n+    virtual void onClose(Base& interface) {}\n+\n+    std::unique_ptr<CloseHook> m_next_hook;\n+};\n+\n+//! Close hook that encapsulate and deletes a moveable object.\n+template <typename T>\n+class Deleter : public CloseHook\n+{\n+public:\n+    explicit Deleter(T&& value) : m_value(std::move(value)) {}\n+    void onClose(Base& interface) override { T(std::move(m_value)); }\n+    T m_value;\n+};\n+\n+//! Base class for interfaces.\n+class Base\n+{\n+public:\n+    //! Destructor, calls close hooks.\n+    virtual ~Base();\n+\n+    // Call close hooks without waiting for destructor.\n+    void close();\n+\n+    //! Add close hook.\n+    void addCloseHook(std::unique_ptr<CloseHook> close_hook);\n+\n+    std::unique_ptr<CloseHook> m_close_hook;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447135719",
      "id" : 447135719,
      "in_reply_to_id" : 440489253,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTcxOQ==",
      "original_commit_id" : "b12041f74de234ad45083be8f86ae714dd5bdfae",
      "original_line" : 51,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/interfaces/base.h",
      "position" : 51,
      "pull_request_review_id" : 439356048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447135719",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136167"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440490694\r\n\r\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\r\n> \r\n> `LocalInit` isn't really meaningful as a name IMO, if understands well it must implemented both by parent and child processes, but methods called will diverge ? `IPCWrapper` , `IPCSupervisor`, `IPCAccess`, ... ?\r\n\r\nI removed LocalInit SpawnProcess method and made it a standalone method to avoid confusion here and added comments describing Init and LocalInit classes. Init interface is just an initial interface exposed by a remote process when you spawn or connect to it. You call Init interface methods to get access to other interfaces. LocalInit is a specialization of Init for the local process. It gives access to the same Init methods, but can also provide local information like the current NodeContext pointer and current executable name.",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-29T17:30:19Z",
      "diff_hunk" : "@@ -0,0 +1,47 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Interface allowing multiprocess code to create other interfaces on startup.\n+class Init\n+{\n+public:\n+    virtual ~Init() = default;\n+};\n+\n+//! Specialization of Init for current process.\n+class LocalInit : public Init",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136167",
      "id" : 447136167,
      "in_reply_to_id" : 440490694,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjE2Nw==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 55,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 55,
      "pull_request_review_id" : 439356048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136167",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136270"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440491394\r\n\r\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\r\n> \r\n> Document `-ipcfd` usage ?\r\n\r\nAdded comment here. It might be good to add to `-help` output too, but I can't easily use ArgsManager::AddArg without losing \"Invalid parameter -ipcfd\" checking, and I don't think there are any uses for `-ipcfd` that wouldn't go through IpcProcess::spawn, where it's just an implementation detail.\r\n",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-29T17:30:29Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/ipc.h>\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <mp/util.h>\n+#include <tinyformat.h>\n+\n+namespace interfaces {\n+namespace {\n+class IpcProcessImpl : public IpcProcess\n+{\n+public:\n+    IpcProcessImpl(int argc, char* argv[], const char* exe_name, IpcProtocol& protocol)\n+        : m_argc(argc), m_argv(argv), m_exe_name(exe_name), m_protocol(protocol)\n+    {\n+    }\n+    int spawn(const std::string& new_exe_name, int& pid) override\n+    {\n+        return mp::SpawnProcess(pid, [&](int fd) {\n+            fs::path path = m_argc > 0 ? m_argv[0] : \"\";\n+            path.remove_filename();\n+            path.append(new_exe_name);\n+            return std::vector<std::string>{path.string(), \"-ipcfd\", strprintf(\"%i\", fd)};\n+        });\n+    }\n+    int wait(int pid) override { return mp::WaitProcess(pid); }\n+    bool serve(int& exit_status) override\n+    {\n+        if (m_argc != 3 || strcmp(m_argv[1], \"-ipcfd\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136270",
      "id" : 447136270,
      "in_reply_to_id" : 440491394,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjI3MA==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 40,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/interfaces/ipc.cpp",
      "position" : 40,
      "pull_request_review_id" : 439356048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136270",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321\r\n\r\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\r\n> \r\n> Maybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve` being called and thus that's a bit confusing with regards to documentation.\r\n\r\nGood idea, added a description of this to the Init interface comment.",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-06-29T17:31:16Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_IPC_H\n+#define BITCOIN_INTERFACES_IPC_H\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+\n+#include <memory>\n+\n+namespace interfaces {\n+//! IPC process interface for spawning bitcoin processes and serving requests\n+//! in processes that have been spawned.\n+//!\n+//! There will different implementations of this interface depending on the\n+//! platform (e.g. unix, windows).\n+class IpcProcess\n+{\n+public:\n+    virtual ~IpcProcess() = default;\n+\n+    //! Spawn process and return socket file descriptor for communicating with\n+    //! it.\n+    virtual int spawn(const std::string& new_exe_name, int& pid) = 0;\n+\n+    //! Wait for spawned process to exit and return exit code.\n+    virtual int wait(int pid) = 0;\n+\n+    //! Serve request if current process is a spawned subprocess. Blocks until\n+    //! socket for communicating with the parent process is disconnected.\n+    virtual bool serve(int& exit_status) = 0;\n+};\n+\n+//! IPC protocol interface for calling IPC methods over sockets.\n+//!\n+//! There may be different implementations of this interface for different IPC\n+//! protocols (e.g. Cap'n Proto, gRPC, JSON-RPC, or custom protocols).\n+//!\n+//! An implementation of this interface needs to provide an `interface::Init`\n+//! object that translates method calls into requests sent over a socket, and it\n+//! needs to implement a handler that translates requests received over a socket\n+//! into method calls on a provided `interface::Init` object.\n+class IpcProtocol\n+{\n+public:\n+    virtual ~IpcProtocol() = default;\n+\n+    //! Return Init interface that forwards requests over given socket descriptor.\n+    //! Socket communication is handled on a background thread.\n+    //!\n+    //! @note It could be potentially useful in the future to add\n+    //! std::function<void()> on_disconnect callback argument here. But there\n+    //! isn't an immediate need, because the protocol implementation can clean\n+    //! up its own state (calling ProxyServer destructors, etc) on disconnect,\n+    //! and any client calls will just throw IpcException errors after a\n+    //! disconnect.\n+    virtual std::unique_ptr<Init> connect(int fd) = 0;\n+\n+    //! Handle requests on provided socket descriptor. Socket communication is\n+    //! handled on the current thread. This blocks until the client closes the socket.\n+    //!\n+    //! @note: If this method is called, it needs be called before connect()\n+    //! because for ease of implementation it's inflexible and always runs the\n+    //! event loop in the foreground thread. It can share its event loop with\n+    //! connect() but can't share an event loop that was created by connect().\n+    //! This isn't really a problem because serve() is only called by spawned",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136782",
      "id" : 447136782,
      "in_reply_to_id" : 440493321,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNjc4Mg==",
      "original_commit_id" : "643d602b3fcb3eac22a2962cff1a0b7019bfebb0",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/interfaces/ipc.h",
      "position" : 68,
      "pull_request_review_id" : 439356048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T18:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447136782",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-14T15:42:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-658254562",
      "id" : 658254562,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1ODI1NDU2Mg==",
      "updated_at" : "2020-07-14T15:42:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658254562",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465326990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465326990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FYI, the logs I get, are they the ones you expect ?\r\n\r\n```\r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client first request from current thread, constructing waiter                                                                                  \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client send Init.construct$Params (threadMap = <external capability>)                                                                          \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client recv Init.construct$Results (threadMap = <external capability>)                                                                         \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client send Init.makeEcho$Params (context = (thread = <external capability>, callbackThread = <external capability>))                          \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client recv Init.makeEcho$Results (result = <external capability>)                                                                             \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client send Echo.echo$Params (context = (thread = <external capability>, callbackThread = <external capability>), echo = \"hello_russ\")         \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client recv Echo.echo$Results (result = \"hello_russ\")                                                                                          \r\n2020-08-04T20:58:04Z\r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client destroy N2mp11ProxyClientIN10interfaces5capnp8messages4EchoEEE                                                                          \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client send Echo.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))                           \r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client recv Echo.destroy$Results ()\r\n2020-08-04T20:58:04Z\r\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client destroy N2mp11ProxyClientIN10interfaces5capnp8messages4InitEEE                                                                          \r\n2020-08-04T20:58:04Z bitcoin-node pid 12889 exited with status 0\r\n```",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T20:59:33Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102\n \n ## Debugging\n \n-After [#10102](https://github.com/bitcoin/bitcoin/pull/10102), the `-debug=ipc` command line option can be used to see requests and responses between processes.\n+The `-debug=ipc` command line option can be used to see requests and responses between processes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465326990",
      "id" : 465326990,
      "line" : 18,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNjk5MA==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 18,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/multiprocess.md",
      "position" : 5,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465326990",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465331663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465331663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shoud the threading model part of the documentation ? AFAICT I can tell you're doing mention to background/foreground threads around `IpcProtocol` documentation. Isn't this dependent of `IpcProtocolImpl` internals ? AFAII, e.g, the client process is going to call interfaces (like `Chain::getHeight`) with overriden virtual methods sending calls to remote server process ? On the client-side, is flow execution blocked until remote answer back ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:09:03Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102\n \n ## Debugging\n \n-After [#10102](https://github.com/bitcoin/bitcoin/pull/10102), the `-debug=ipc` command line option can be used to see requests and responses between processes.\n+The `-debug=ipc` command line option can be used to see requests and responses between processes.\n \n ## Installation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465331663",
      "id" : 465331663,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMTY2Mw==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 20,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/multiprocess.md",
      "position" : 7,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465331663",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465337715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465337715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why does `LocalInit` take a `node()` method ? How is it used ? A `bitcoin-wallet` will never have such context ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:21:47Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Init interface providing access to other interfaces. The Init interface is\n+//! the interface first exposed when a process spawns or connects to another\n+//! process.\n+//!\n+//! When spawning a new process, the steps are:\n+//!\n+//! 1. Client process calls IpcProcess::spawn(), which spawns a new process and\n+//!    returns a socketpair file descriptor for communicating with it.\n+//! 2. Client process calls IpcProtocol::connect() passing the socketpair\n+//!    descriptor, which returns a client Init proxy object calling remote Init\n+//!    interface methods.\n+//! 3. Client process calls client Init proxy object methods to make new client\n+//!    proxy objects calling other remote interfaces. It can also destroy the\n+//!    Init object to shut down the spawned process.\n+//! 4. Spawned process calls IpcProcess::serve(), to read command line arguments\n+//!    and determine whether it is a spawned process and what socketpair file\n+//!    descriptor it should use. It calls IpcProtocol::serve() to handle\n+//!    incoming requests from the socketpair and call Init interface methods, or\n+//!    destroy the Init interface and shut down the process.\n+//!\n+//! When connecting to an existing process, the steps are similar to spawning a\n+//! new process, except a domain socket is created instead of a socketpair, and\n+//! destroying an Init interface doesn't end the process, since there can be\n+//! multiple connections.\n+class Init\n+{\n+public:\n+    virtual ~Init() = default;\n+};\n+\n+//! Specialization of the Init interface for the local process. Container for\n+//! IpcProcess and IpcProtocol objects and current process information.\n+class LocalInit : public Init\n+{\n+public:\n+    LocalInit(const char* exe_name, const char* log_suffix);\n+    ~LocalInit() override;\n+    virtual NodeContext& node();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465337715",
      "id" : 465337715,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNzcxNQ==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 64,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465337715",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465338335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465338335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The documentation you wrote down in review club notes (\"The Init interface is similar to other cross-process C++ interfaces like interfaces::Node, interfaces::Wallet, interfaces::Chain and interfaces::ChainClient, providing virtual methods that can be called from other processes....\") is describing well design goal of `Init` IMO. Maybe just pick it up ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:23:10Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Init interface providing access to other interfaces. The Init interface is",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465338335",
      "id" : 465338335,
      "line" : 22,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzODMzNQ==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 22,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465338335",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465339166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465339166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIRC a socketpair has a default and only-one domain (AF_UNIX), you mean a new connection is free to pick up its domain as there is no the default parent-child socketpair ready to use ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:24:59Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Init interface providing access to other interfaces. The Init interface is\n+//! the interface first exposed when a process spawns or connects to another\n+//! process.\n+//!\n+//! When spawning a new process, the steps are:\n+//!\n+//! 1. Client process calls IpcProcess::spawn(), which spawns a new process and\n+//!    returns a socketpair file descriptor for communicating with it.\n+//! 2. Client process calls IpcProtocol::connect() passing the socketpair\n+//!    descriptor, which returns a client Init proxy object calling remote Init\n+//!    interface methods.\n+//! 3. Client process calls client Init proxy object methods to make new client\n+//!    proxy objects calling other remote interfaces. It can also destroy the\n+//!    Init object to shut down the spawned process.\n+//! 4. Spawned process calls IpcProcess::serve(), to read command line arguments\n+//!    and determine whether it is a spawned process and what socketpair file\n+//!    descriptor it should use. It calls IpcProtocol::serve() to handle\n+//!    incoming requests from the socketpair and call Init interface methods, or\n+//!    destroy the Init interface and shut down the process.\n+//!\n+//! When connecting to an existing process, the steps are similar to spawning a\n+//! new process, except a domain socket is created instead of a socketpair, and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465339166",
      "id" : 465339166,
      "line" : 43,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzOTE2Ng==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 43,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465339166",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465341411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465341411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's unclear who is the \"it\" here calling Init interface methods, still the spawned subprocess ? Or do you mean the spawned subprocess has the option to shutdown itself ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:29:56Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <fs.h>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Base;\n+class IpcProcess;\n+class IpcProtocol;\n+\n+//! Init interface providing access to other interfaces. The Init interface is\n+//! the interface first exposed when a process spawns or connects to another\n+//! process.\n+//!\n+//! When spawning a new process, the steps are:\n+//!\n+//! 1. Client process calls IpcProcess::spawn(), which spawns a new process and\n+//!    returns a socketpair file descriptor for communicating with it.\n+//! 2. Client process calls IpcProtocol::connect() passing the socketpair\n+//!    descriptor, which returns a client Init proxy object calling remote Init\n+//!    interface methods.\n+//! 3. Client process calls client Init proxy object methods to make new client\n+//!    proxy objects calling other remote interfaces. It can also destroy the\n+//!    Init object to shut down the spawned process.\n+//! 4. Spawned process calls IpcProcess::serve(), to read command line arguments\n+//!    and determine whether it is a spawned process and what socketpair file\n+//!    descriptor it should use. It calls IpcProtocol::serve() to handle\n+//!    incoming requests from the socketpair and call Init interface methods, or",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465341411",
      "id" : 465341411,
      "line" : 39,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTQxMQ==",
      "original_commit_id" : "aa4d626db1628d5e29572eccfd7fa2d99edeeb60",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/interfaces/init.h",
      "position" : 39,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465341411",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465342296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465342296"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `init.h` is actually introduced in next commit. Also document `echo.h` if it's a long-standing debug interface ?",
      "commit_id" : "0602f87a085c733f1da38b3b82210c81ef018fd5",
      "created_at" : "2020-08-04T21:32:00Z",
      "diff_hunk" : "@@ -14,4 +14,6 @@ The following interfaces are defined here:\n \n * [`Init`](init.h) â used by multiprocess code to access interfaces above on startup. Added in [#10102](https://github.com/bitcoin/bitcoin/pull/10102).\n \n+* [`Base`](base.h) â base interface class used by multiprocess code for bookkeeping and cleanup. Added in [#10102](https://github.com/bitcoin/bitcoin/pull/10102).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465342296",
      "id" : 465342296,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MjI5Ng==",
      "original_commit_id" : "352a5564e64c63a1962830f7c524841d4b8bf380",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/interfaces/README.md",
      "position" : 4,
      "pull_request_review_id" : 461170607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19160",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-04T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465342296",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
