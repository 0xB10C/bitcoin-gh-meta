[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To simplify the code, one could just use [Fermat's little theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem) here to calculate the modular inverse. The drawback is that it's much slower than the extended Euclidean algorithm, calculating the modinv of a random 3072-bit number takes approx. 100-150ms on my machine, which is at least 1 order of magnitude slower. Not sure if that's an issue and in the case of tests whether performance or readability is more important :-)\r\n\r\n```suggestion\r\ndef modinv(a, n):\r\n    \"\"\"Compute the modular inverse of a prime modulo n using Fermat's little theorem.\"\"\"\r\n    return pow(a, n-2, n)\r\n```",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-02T11:57:14Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249",
      "id" : 433820249,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyMDI0OQ==",
      "original_commit_id" : "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 8,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 20,
      "pull_request_review_id" : 422602841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-05T19:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I see your point, however, given how often these tests run on people's machines and in the CI environment, performance does matter quite a bit. But I think it's a great question to discuss during the PR review club next week :)",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-02T20:25:43Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051",
      "id" : 434155051,
      "in_reply_to_id" : 433820249,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTA1MQ==",
      "original_commit_id" : "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 8,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 20,
      "pull_request_review_id" : 423031205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-05T19:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a super simple test that reimplements the C++ impl unit test in Python. I am working on more exhaustive tests for the next PR in this series.",
      "created_at" : "2020-06-02T20:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-637788531",
      "id" : 637788531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNzc4ODUzMQ==",
      "updated_at" : "2020-06-02T20:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637788531",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, if comprehension is a concern, I suspect that people who are familiar with modular inverses will generally understand both the euclidean and the fermat approach; and to people who aren't familiar with it both will look like black magic.",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-02T22:31:20Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798",
      "id" : 434210798,
      "in_reply_to_id" : 433820249,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc5OA==",
      "original_commit_id" : "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 8,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 20,
      "pull_request_review_id" : 423101289,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-05T19:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@fjahr @sipa: Fair enough! By the way, Python 3.8 introduced support for negative exponents in the modulo (three argument) `pow()` (see https://bugs.python.org/issue36027, https://github.com/python/cpython/pull/13266), internally calculating the modular inverse via the extended Euclidean algorithm. I.e. somewhere in the future it could be just a very simple:\r\n`return pow(a, -1, n)`",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-03T12:57:36Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037",
      "id" : 434546037,
      "in_reply_to_id" : 433820249,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NjAzNw==",
      "original_commit_id" : "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 8,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 20,
      "pull_request_review_id" : 423524324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-05T19:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19145 (Add hash_type options for gettxoutsetinfo by fjahr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-06T02:03:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-639955477",
      "id" : 639955477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTk1NTQ3Nw==",
      "updated_at" : "2020-06-06T02:03:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639955477",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's worth annotating in a TODO: `// Python 3.8: return pow(a, -1, n)` (tested locally with Python 3.8.2)\r\n \r\nI like having the simpler approach here. It's yet another sanity check that our implementation is correct, given the lack of test vectors. But given the performance impact, if it really matters compared to the rest of the test, better leave that as a TODO.",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T10:39:29Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361",
      "id" : 437312361,
      "in_reply_to_id" : 433820249,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM2MQ==",
      "original_commit_id" : "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 8,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 20,
      "pull_request_review_id" : 427012518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-09T13:44:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is duplication of the code in `key.py`. Can you move it into `util.py` or a new `crypto_util.py` instead of repeating it?",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T13:38:51Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868",
      "id" : 437423868,
      "line" : 8,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzg2OA==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 8,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 8,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Calling this function with `bits` < 0 or `bits` > 32  throws. Perhaps call `bits %= 32` to reduce it to a valid value?",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T13:49:14Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307",
      "id" : 437434307,
      "line" : 22,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDMwNw==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 22,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 22,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I suggest you link to the specification for chacha here: https://cr.yp.to/chacha/chacha-20080128.pdf or here: https://tools.ietf.org/html/rfc7539",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T13:53:57Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515",
      "id" : 437439515,
      "line" : 27,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTUxNQ==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 27,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 27,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: remove double spaces",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T13:58:54Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290",
      "id" : 437444290,
      "line" : 28,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDI5MA==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 28,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: this would be slightly easier on the eye with spaces around the operators (see https://www.python.org/dev/peps/pep-0008/#other-recommendations)",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T14:00:02Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217",
      "id" : 437445217,
      "line" : 42,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIxNw==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 42,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Explicitly naming the quarter rounds would make this clearer:\r\n\r\n```suggestion\r\n    QUARTER_ROUNDS = [(0, 4, 8, 12),\r\n                      (1, 5, 9, 13),\r\n                      (2, 6, 10, 14),\r\n                      (3, 7, 11, 15),\r\n                      (0, 5, 10, 15),\r\n                      (1, 6, 11, 12),\r\n                      (2, 7, 8, 13),\r\n                      (3, 4, 9, 14)]\r\n    for a, b, c, d in QUARTER_ROUNDS:\r\n\r\n```",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T14:45:08Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100",
      "id" : 437480100,
      "line" : 28,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEwMA==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 28,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Again, being explicitly about where these magic numbers come from would be nice:\r\n\r\n```suggestion\r\n    # See RFC 7539 section 2.3 for chacha20 parameters\r\n    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\r\n    key_bytes = []\r\n    for i in range(8):\r\n        key_bytes[i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\r\n    INITIALIZATION_VECTOR = [0] * 4\r\n    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\r\n```",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:13:03Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786",
      "id" : 437503786,
      "line" : 42,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMzc4Ng==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 40,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 42,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : 40,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-09T15:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is `pos`? Would `counter` be a better name, since this value is used as the block counter?",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:17:10Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272",
      "id" : 437509272,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTI3Mg==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 44,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/rnd/round/. `rnd` is often used to mean random, which is confusing here.",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:17:39Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899",
      "id" : 437509899,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTg5OQ==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 47,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 47,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this would be clearer as:\r\n\r\n```suggestion\r\n        s = init.copy()\r\n```",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:20:17Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449",
      "id" : 437513449,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzQ0OQ==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 46,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this docstring should indicate that it's hashing using Chacha20\r\n\r\n```suggestion\r\n    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\r\n```",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:39:07Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184",
      "id" : 437529184,
      "line" : 54,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTE4NA==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 54,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 54,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Reference where the algorithm comes from:\r\n\r\n- https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf for the generic algorithm\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html for the specific parameters (chacha20 and 3072-bit digest)",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:40:45Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296",
      "id" : 437530296,
      "line" : 59,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMDI5Ng==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 59,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 59,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should be a unit test in muhash.py. See #18576 for details on the python unit tests.",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-09T15:42:30Z",
      "diff_hunk" : "@@ -241,6 +245,15 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n+        self.log.info(\"Test that MuHash implementation in Python returns the same result as C++\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625",
      "id" : 437531625,
      "line" : 248,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMTYyNQ==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 248,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/rpc_blockchain.py",
      "position" : 15,
      "pull_request_review_id" : 427158195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563"
         }
      },
      "author_association" : "NONE",
      "body" : "Possibly only the first link.  There are slight differences between those two and https://tools.ietf.org/html/rfc8439.  See #19225 ",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-10T13:39:55Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563",
      "id" : 438129563,
      "in_reply_to_id" : 437439515,
      "line" : 27,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyOTU2Mw==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 27,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 27,
      "pull_request_review_id" : 428062608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-10T13:39:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648"
         }
      },
      "author_association" : "NONE",
      "body" : "Also `.copy()` is around twice as fast.",
      "commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "created_at" : "2020-06-10T13:52:06Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648",
      "id" : 438138648,
      "in_reply_to_id" : 437513449,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzODY0OA==",
      "original_commit_id" : "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/muhash.py",
      "position" : 46,
      "pull_request_review_id" : 428074908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-10T13:52:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   }
]
