[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there somewhere more general or useful I should put the two functions in this namespace?",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-26T22:25:14Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_name_registry(new ThreadNameRegistry());\n+\n+namespace {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548289",
      "id" : 184548289,
      "original_commit_id" : "121002fddf40b9c667f962ab40b5d7a5223d4cb4",
      "original_position" : 28,
      "path" : "src/threadnames.cpp",
      "position" : null,
      "pull_request_review_id" : 115769336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T01:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548289",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove or uncomment this block before merge.",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-26T22:25:48Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_name_registry(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Register(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548394",
      "id" : 184548394,
      "original_commit_id" : "121002fddf40b9c667f962ab40b5d7a5223d4cb4",
      "original_position" : 67,
      "path" : "src/threadnames.cpp",
      "position" : 67,
      "pull_request_review_id" : 115769466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T01:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548394",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should lock mutex.",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:46:16Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627159",
      "id" : 184627159,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 102,
      "path" : "src/threadnames.cpp",
      "position" : 102,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627159",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627393"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could be a static function or a function in a anonymous namespace.",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:47:31Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627393",
      "id" : 184627393,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 113,
      "path" : "src/threadnames.cpp",
      "position" : 113,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627393",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627453"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could be a static function or a function in a anonymous namespace.",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:47:49Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string ThreadNameRegistry::GetProcessThreadName()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627453",
      "id" : 184627453,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 129,
      "path" : "src/threadnames.cpp",
      "position" : 129,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627453",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627560"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Argument could be `const std::string& name`?",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:48:18Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627560",
      "id" : 184627560,
      "in_reply_to_id" : 184627393,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 113,
      "path" : "src/threadnames.cpp",
      "position" : 113,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627560",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628415"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shoud also add to `m_name_to_id`?",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:52:03Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628415",
      "id" : 184628415,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 109,
      "path" : "src/threadnames.cpp",
      "position" : 109,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628415",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628534"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why return reference?",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T08:52:37Z",
      "diff_hunk" : "@@ -0,0 +1,50 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADNAMES_H\n+#define BITCOIN_THREADNAMES_H\n+\n+#include <map>\n+#include <mutex>\n+\n+#include <boost/thread.hpp>\n+\n+\n+/**\n+ * Keeps a map of thread IDs to string names and handles system-level thread naming.\n+ */\n+class ThreadNameRegistry\n+{\n+public:\n+    const std::string& GetThreadName();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628534",
      "id" : 184628534,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 20,
      "path" : "src/threadnames.h",
      "position" : 20,
      "pull_request_review_id" : 115862133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T08:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628534",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184710702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184710702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch, thanks. ",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T14:49:05Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184710702",
      "id" : 184710702,
      "in_reply_to_id" : 184628415,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 109,
      "path" : "src/threadnames.cpp",
      "position" : 109,
      "pull_request_review_id" : 115966694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T14:49:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184710702",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thoughts on pulling the `TraceThread` class out of util into the new files you're creating here? Seems like a good home for tracethread and would reduce the clutter in util",
      "created_at" : "2018-04-27T14:49:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-384993376",
      "id" : 384993376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
      "updated_at" : "2018-04-27T14:49:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384993376",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184718471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184718471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd like to be able to unittest the `*Process*` functions eventually, so maybe I should just make them public.",
      "commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "created_at" : "2018-04-27T15:14:02Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184718471",
      "id" : 184718471,
      "in_reply_to_id" : 184627393,
      "original_commit_id" : "fcfba12253e67b635b56fc41173cb90ef60645c3",
      "original_position" : 113,
      "path" : "src/threadnames.cpp",
      "position" : 113,
      "pull_request_review_id" : 115976185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
      "updated_at" : "2018-04-27T15:14:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184718471",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-04-27T16:18:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385020386",
      "id" : 385020386,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
      "updated_at" : "2018-04-27T16:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385020386",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@promag thanks for the review; I've pushed changes incorporating your feedback.\r\n\r\n@skeees I like that idea but maybe we can save it for a future PR? That entails changing a bunch of call sites and I'm worried about introducing a circular dependency between util and threadnames (by way of logging).",
      "created_at" : "2018-04-27T17:38:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385042045",
      "id" : 385042045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
      "updated_at" : "2018-04-27T17:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385042045",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
