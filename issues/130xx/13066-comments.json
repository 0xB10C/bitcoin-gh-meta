[
   {
      "author_association" : "MEMBER",
      "body" : "> The cron job that runs every day would fail because of git checkout a single commit, not a branch.\r\n\r\nMind to elaborate why it wouldn't work on a \"single commit\"?",
      "created_at" : "2018-04-24T13:35:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383932454",
      "id" : 383932454,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13066",
      "updated_at" : "2018-04-24T13:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383932454",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`git rev-parse --abbrev-ref HEAD` does not work with commit, it always returns `HEAD`.\r\nAnd git would not return to latest commit after the script.\r\nBut I don't know if this is the exact reason. I just test on my PC, the script failed to check signature at random commit.",
      "created_at" : "2018-04-24T13:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383937635",
      "id" : 383937635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13066",
      "updated_at" : "2018-04-24T14:09:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383937635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> Also, I modify the current shell script to python, it makes the script speed up a lot.\r\n> The python code tree_sha512sum was copied from github-merge.py\r\n\r\nThanks! Yes, the current implementation has been slow especially the treehash512 checking, my implementation from `github-merge.py` only uses a single call to `ls-tree` which makes it more efficient.\r\n\r\nConcept ACK.\r\n",
      "created_at" : "2018-04-24T15:27:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383975065",
      "id" : 383975065,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13066",
      "updated_at" : "2018-04-24T15:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383975065",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think we should remove the shell script after this has been converted to python. Objections, @TheBlueMatt ?",
      "created_at" : "2018-04-24T15:35:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#issuecomment-383977612",
      "id" : 383977612,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13066",
      "updated_at" : "2018-04-24T15:35:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383977612",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183781782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183781782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't this be `INITIAL_COMMIT` instead of `HEAD`?",
      "commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "created_at" : "2018-04-24T15:40:28Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from sys import stdin,stdout,stderr\n+import subprocess\n+from subprocess import PIPE\n+import hashlib\n+\n+GIT = os.getenv('GIT','git')\n+\n+def tree_sha512sum(commit='HEAD'):\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split() # perms, 'blob', blobid\n+        assert(metadata[1] == b'blob')\n+        name = line[name_sep+1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=PIPE, stdin=PIPE)\n+    overall = hashlib.sha512()\n+    for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert(reply[0] == blob and reply[1] == b'blob')\n+        size = int(reply[2])\n+        # hash the blob data\n+        intern = hashlib.sha512()\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n+                intern.update(piece)\n+            else:\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n+        dig = intern.hexdigest()\n+        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n+        # update overall hash with file hash\n+        overall.update(dig.encode(\"utf-8\"))\n+        overall.update(\"  \".encode(\"utf-8\"))\n+        overall.update(f)\n+        overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n+    return overall.hexdigest()\n+\n+def main():\n+    dir = os.path.dirname(os.path.abspath(__file__))\n+    print(\"Using verify-commits data from \" + dir)\n+\n+    VERIFIED_ROOT = open(dir + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n+    VERIFIED_SHA512_ROOT = open(dir + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n+    REVSIG_ALLOWED = open(dir + \"/allow-revsig-commits\", \"r\").read().splitlines()\n+    DIRTY_ALLOWED = open(dir + \"/allow-dirty-commits\", \"r\").read().splitlines()\n+\n+    CURRENT_COMMIT = \"HEAD\" if len(sys.argv) == 1 else sys.argv[1]\n+\n+    if ' ' in CURRENT_COMMIT:\n+        print(\"Commit must not contain spaces?\", file=sys.stderr)\n+        exit(1)\n+\n+    VERIFY_TREE = True if len(sys.argv) >= 3 and sys.argv[2] == \"--tree-check\" else False\n+    NO_SHA1 = True\n+    PREV_COMMIT = \"\"\n+    INITIAL_COMMIT = CURRENT_COMMIT\n+\n+    BRANCH = subprocess.check_output([GIT,'rev-parse','--abbrev-ref','HEAD'], universal_newlines=True).splitlines()[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183781782",
      "id" : 183781782,
      "original_commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "original_position" : 80,
      "path" : "contrib/verify-commits/verify-commits.py",
      "position" : 80,
      "pull_request_review_id" : 114845376,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066",
      "updated_at" : "2018-04-24T15:40:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183781782",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183783951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183783951"
         }
      },
      "author_association" : "OWNER",
      "body" : "It's a direct transcription from the shell script at least:\r\n```bash\r\nBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"\r\n```",
      "commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "created_at" : "2018-04-24T15:46:15Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from sys import stdin,stdout,stderr\n+import subprocess\n+from subprocess import PIPE\n+import hashlib\n+\n+GIT = os.getenv('GIT','git')\n+\n+def tree_sha512sum(commit='HEAD'):\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split() # perms, 'blob', blobid\n+        assert(metadata[1] == b'blob')\n+        name = line[name_sep+1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=PIPE, stdin=PIPE)\n+    overall = hashlib.sha512()\n+    for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert(reply[0] == blob and reply[1] == b'blob')\n+        size = int(reply[2])\n+        # hash the blob data\n+        intern = hashlib.sha512()\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n+                intern.update(piece)\n+            else:\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n+        dig = intern.hexdigest()\n+        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n+        # update overall hash with file hash\n+        overall.update(dig.encode(\"utf-8\"))\n+        overall.update(\"  \".encode(\"utf-8\"))\n+        overall.update(f)\n+        overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n+    return overall.hexdigest()\n+\n+def main():\n+    dir = os.path.dirname(os.path.abspath(__file__))\n+    print(\"Using verify-commits data from \" + dir)\n+\n+    VERIFIED_ROOT = open(dir + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n+    VERIFIED_SHA512_ROOT = open(dir + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n+    REVSIG_ALLOWED = open(dir + \"/allow-revsig-commits\", \"r\").read().splitlines()\n+    DIRTY_ALLOWED = open(dir + \"/allow-dirty-commits\", \"r\").read().splitlines()\n+\n+    CURRENT_COMMIT = \"HEAD\" if len(sys.argv) == 1 else sys.argv[1]\n+\n+    if ' ' in CURRENT_COMMIT:\n+        print(\"Commit must not contain spaces?\", file=sys.stderr)\n+        exit(1)\n+\n+    VERIFY_TREE = True if len(sys.argv) >= 3 and sys.argv[2] == \"--tree-check\" else False\n+    NO_SHA1 = True\n+    PREV_COMMIT = \"\"\n+    INITIAL_COMMIT = CURRENT_COMMIT\n+\n+    BRANCH = subprocess.check_output([GIT,'rev-parse','--abbrev-ref','HEAD'], universal_newlines=True).splitlines()[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183783951",
      "id" : 183783951,
      "in_reply_to_id" : 183781782,
      "original_commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "original_position" : 80,
      "path" : "contrib/verify-commits/verify-commits.py",
      "position" : 80,
      "pull_request_review_id" : 114847992,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066",
      "updated_at" : "2018-04-24T15:46:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183783951",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183785186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183785186"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, it is a string 'HEAD', it would return a branch name. If you put a commit id, it returns nothing.",
      "commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "created_at" : "2018-04-24T15:49:52Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from sys import stdin,stdout,stderr\n+import subprocess\n+from subprocess import PIPE\n+import hashlib\n+\n+GIT = os.getenv('GIT','git')\n+\n+def tree_sha512sum(commit='HEAD'):\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split() # perms, 'blob', blobid\n+        assert(metadata[1] == b'blob')\n+        name = line[name_sep+1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=PIPE, stdin=PIPE)\n+    overall = hashlib.sha512()\n+    for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert(reply[0] == blob and reply[1] == b'blob')\n+        size = int(reply[2])\n+        # hash the blob data\n+        intern = hashlib.sha512()\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n+                intern.update(piece)\n+            else:\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n+        dig = intern.hexdigest()\n+        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n+        # update overall hash with file hash\n+        overall.update(dig.encode(\"utf-8\"))\n+        overall.update(\"  \".encode(\"utf-8\"))\n+        overall.update(f)\n+        overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n+    return overall.hexdigest()\n+\n+def main():\n+    dir = os.path.dirname(os.path.abspath(__file__))\n+    print(\"Using verify-commits data from \" + dir)\n+\n+    VERIFIED_ROOT = open(dir + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n+    VERIFIED_SHA512_ROOT = open(dir + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n+    REVSIG_ALLOWED = open(dir + \"/allow-revsig-commits\", \"r\").read().splitlines()\n+    DIRTY_ALLOWED = open(dir + \"/allow-dirty-commits\", \"r\").read().splitlines()\n+\n+    CURRENT_COMMIT = \"HEAD\" if len(sys.argv) == 1 else sys.argv[1]\n+\n+    if ' ' in CURRENT_COMMIT:\n+        print(\"Commit must not contain spaces?\", file=sys.stderr)\n+        exit(1)\n+\n+    VERIFY_TREE = True if len(sys.argv) >= 3 and sys.argv[2] == \"--tree-check\" else False\n+    NO_SHA1 = True\n+    PREV_COMMIT = \"\"\n+    INITIAL_COMMIT = CURRENT_COMMIT\n+\n+    BRANCH = subprocess.check_output([GIT,'rev-parse','--abbrev-ref','HEAD'], universal_newlines=True).splitlines()[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183785186",
      "id" : 183785186,
      "in_reply_to_id" : 183781782,
      "original_commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "original_position" : 80,
      "path" : "contrib/verify-commits/verify-commits.py",
      "position" : 80,
      "pull_request_review_id" : 114849592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066",
      "updated_at" : "2018-04-24T15:49:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183785186",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183789095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183789095"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> 'HEAD', it would return a branch name. If you put a commit id, it returns nothing.\r\n\r\nIt always returns a commit id for me.",
      "commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "created_at" : "2018-04-24T16:00:31Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from sys import stdin,stdout,stderr\n+import subprocess\n+from subprocess import PIPE\n+import hashlib\n+\n+GIT = os.getenv('GIT','git')\n+\n+def tree_sha512sum(commit='HEAD'):\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split() # perms, 'blob', blobid\n+        assert(metadata[1] == b'blob')\n+        name = line[name_sep+1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=PIPE, stdin=PIPE)\n+    overall = hashlib.sha512()\n+    for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert(reply[0] == blob and reply[1] == b'blob')\n+        size = int(reply[2])\n+        # hash the blob data\n+        intern = hashlib.sha512()\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n+                intern.update(piece)\n+            else:\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n+        dig = intern.hexdigest()\n+        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n+        # update overall hash with file hash\n+        overall.update(dig.encode(\"utf-8\"))\n+        overall.update(\"  \".encode(\"utf-8\"))\n+        overall.update(f)\n+        overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n+    return overall.hexdigest()\n+\n+def main():\n+    dir = os.path.dirname(os.path.abspath(__file__))\n+    print(\"Using verify-commits data from \" + dir)\n+\n+    VERIFIED_ROOT = open(dir + \"/trusted-git-root\", \"r\").read().splitlines()[0]\n+    VERIFIED_SHA512_ROOT = open(dir + \"/trusted-sha512-root-commit\", \"r\").read().splitlines()[0]\n+    REVSIG_ALLOWED = open(dir + \"/allow-revsig-commits\", \"r\").read().splitlines()\n+    DIRTY_ALLOWED = open(dir + \"/allow-dirty-commits\", \"r\").read().splitlines()\n+\n+    CURRENT_COMMIT = \"HEAD\" if len(sys.argv) == 1 else sys.argv[1]\n+\n+    if ' ' in CURRENT_COMMIT:\n+        print(\"Commit must not contain spaces?\", file=sys.stderr)\n+        exit(1)\n+\n+    VERIFY_TREE = True if len(sys.argv) >= 3 and sys.argv[2] == \"--tree-check\" else False\n+    NO_SHA1 = True\n+    PREV_COMMIT = \"\"\n+    INITIAL_COMMIT = CURRENT_COMMIT\n+\n+    BRANCH = subprocess.check_output([GIT,'rev-parse','--abbrev-ref','HEAD'], universal_newlines=True).splitlines()[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13066#discussion_r183789095",
      "id" : 183789095,
      "in_reply_to_id" : 183781782,
      "original_commit_id" : "902e9f986685d9e428221f7b251b81fa0c3e4fca",
      "original_position" : 80,
      "path" : "contrib/verify-commits/verify-commits.py",
      "position" : 80,
      "pull_request_review_id" : 114854418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13066",
      "updated_at" : "2018-04-24T16:00:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183789095",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
