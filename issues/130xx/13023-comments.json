[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like there's an alphabetic ordering here that may be good to preserve.",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T20:11:28Z",
      "diff_hunk" : "@@ -87,7 +87,8 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  test/validation_block_tests.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249",
      "id" : 182554249,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 6,
      "path" : "src/Makefile.test.include",
      "position" : 6,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T20:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> should *be* required here",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T20:13:05Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703",
      "id" : 182554703,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T20:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be worth parameterizing `Block` with a `bool make_invalid` option to avoid the duplication here, but that's your call.",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T20:23:58Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843",
      "id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 86,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T20:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know we don't have columnar limits in the styleguide, but this line's pretty long...",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T20:24:55Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115",
      "id" : 182558115,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 91,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T20:39:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Braces needed.",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T20:25:49Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380",
      "id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 100,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T20:39:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "clang-format would put those in I believe",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T21:37:33Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318",
      "id" : 182577318,
      "in_reply_to_id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 100,
      "pull_request_review_id" : 113401722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T21:37:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Calling this `ignored` might be more straightforward",
      "commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "created_at" : "2018-04-18T21:37:45Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)\n+        BuildChain(pblock->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+\n+    if (gen_fork) {\n+        blocks.push_back(GoodBlock(root));\n+        BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+{\n+    // build a large-ish chain that's likely to have some forks\n+    std::vector<std::shared_ptr<const CBlock>> blocks;\n+    while (blocks.size() < 50) {\n+        blocks.clear();\n+        BuildChain(Params().GenesisBlock().GetHash(), 100, 5, 10, 5000, blocks);\n+    }\n+\n+    CValidationState state;\n+    std::vector<CBlockHeader> headers;\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+\n+    // Process all the headers so we understand the toplogy of the chain\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+\n+    // subscribe to events (this subscriber will validate event ordering)\n+    TestSubscriber sub(chainActive.Tip()->GetBlockHash());\n+    RegisterValidationInterface(&sub);\n+\n+    // create a bunch of threads that repeatedly process a block generated above at random\n+    // this will create parallelism and randomness inside validation - the ValidationInterface\n+    // will subscribe to events generated during block validation and assert on ordering invariance\n+    boost::thread_group threads;\n+    for (int i = 0; i < 10; i++) {\n+        threads.create_thread([&blocks]() {\n+            bool blah;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357",
      "id" : 182577357,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 135,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 135,
      "pull_request_review_id" : 113401773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-18T21:37:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   }
]
