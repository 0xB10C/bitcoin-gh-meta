[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like there's an alphabetic ordering here that may be good to preserve.",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T20:11:28Z",
      "diff_hunk" : "@@ -87,7 +87,8 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  test/validation_block_tests.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249",
      "id" : 182554249,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 6,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> should *be* required here",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T20:13:05Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703",
      "id" : 182554703,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be worth parameterizing `Block` with a `bool make_invalid` option to avoid the duplication here, but that's your call.",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T20:23:58Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843",
      "id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know we don't have columnar limits in the styleguide, but this line's pretty long...",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T20:24:55Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115",
      "id" : 182558115,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Braces needed.",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T20:25:49Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380",
      "id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "clang-format would put those in I believe",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T21:37:33Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318",
      "id" : 182577318,
      "in_reply_to_id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113401722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Calling this `ignored` might be more straightforward",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-18T21:37:45Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)\n+        BuildChain(pblock->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+\n+    if (gen_fork) {\n+        blocks.push_back(GoodBlock(root));\n+        BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+{\n+    // build a large-ish chain that's likely to have some forks\n+    std::vector<std::shared_ptr<const CBlock>> blocks;\n+    while (blocks.size() < 50) {\n+        blocks.clear();\n+        BuildChain(Params().GenesisBlock().GetHash(), 100, 5, 10, 5000, blocks);\n+    }\n+\n+    CValidationState state;\n+    std::vector<CBlockHeader> headers;\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+\n+    // Process all the headers so we understand the toplogy of the chain\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+\n+    // subscribe to events (this subscriber will validate event ordering)\n+    TestSubscriber sub(chainActive.Tip()->GetBlockHash());\n+    RegisterValidationInterface(&sub);\n+\n+    // create a bunch of threads that repeatedly process a block generated above at random\n+    // this will create parallelism and randomness inside validation - the ValidationInterface\n+    // will subscribe to events generated during block validation and assert on ordering invariance\n+    boost::thread_group threads;\n+    for (int i = 0; i < 10; i++) {\n+        threads.create_thread([&blocks]() {\n+            bool blah;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357",
      "id" : 182577357,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 135,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113401773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086368"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Extracted into FinalizeBlock - its probably worth refactoring BlockAssembler into a builder style class - would make unit tests much easier to write ... maybe one day",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-20T15:25:02Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086368",
      "id" : 183086368,
      "in_reply_to_id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086368",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i agree with you - i originally had this on two lines - and then the linter put it all back on one",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-20T15:25:05Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086382",
      "id" : 183086382,
      "in_reply_to_id" : 182558115,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it doesn't! but i put them in now",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-20T15:25:09Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086405",
      "id" : 183086405,
      "in_reply_to_id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T16:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086405",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated to address reviewer comments and fix a bug that this test seems to have uncovered",
      "created_at" : "2018-04-20T15:27:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-383132743",
      "id" : 383132743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-20T15:27:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383132743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183115412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183115412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, definitely agree. ",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-20T17:14:09Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183115412",
      "id" : 183115412,
      "in_reply_to_id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114058047,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-20T17:14:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183115412",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183487818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183487818"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be good to add a comment here saying why it's important to recompute pindexMostWork each loop iteration (how sync could get stuck otherwise).",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-23T18:07:38Z",
      "diff_hunk" : "@@ -2673,9 +2673,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n \n             CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+            pindexMostWork = FindMostWorkChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183487818",
      "id" : 183487818,
      "original_commit_id" : "26bfdbaddbb9f13864deb7241c6d513f22c5ab62",
      "original_position" : 7,
      "path" : "src/validation.cpp",
      "position" : 7,
      "pull_request_review_id" : 114495677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-23T18:27:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183487818",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183489473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183489473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd think this could be written more simply as:\r\n\r\n```\r\nauto block = make_shared<CBlock>(ptemplate->block);\r\nblock->hashPrevBlock = ...\r\nreturn block;\r\n```\r\n\r\nIt looks like pblock is leaked currently, or is this not the case?",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-23T18:13:15Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183489473",
      "id" : 183489473,
      "original_commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "original_position" : 61,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 61,
      "pull_request_review_id" : 114495677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-23T18:27:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183489473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for opening this PR.  I thought it would be helpful for other reviewers to clarify the (IMO significant) bug here, so that we can properly evaluate fixes.\r\n\r\nIf ActivateBestChain is invoked simultaneously in separate threads, then we can end up at a lower-work tip, and remain stuck until the next block comes in.\r\n\r\n * Suppose in thread 1, we have just been delivered a block that causes us to try to activate two blocks in ABC.  We connect 1 of them in ABCStep, and then release cs_main before connecting the second.\r\n * In thread 2, suppose we have been delivered a 3rd block (say via rpc) that builds on the first two.  It invokes ABC and gets to run after the first block has been connected in thread 1.  It connects one block, releases cs_main, and then connects one more, and finishes.\r\n * When thread 1 gets to run again, the most work chain has advanced, but (before this PR) we don't refresh pindexMostWork (except when we find an invalid block).  Consequently we would invoke ABCStep with a *less work tip* than our current tip(!).  This would cause us to disconnect our tip and return.\r\n\r\nSome travis failures have been observed due to this bug, as seen for instance here: https://travis-ci.org/bitcoin/bitcoin/jobs/370848272.  The test that sometimes fails, `rpc_deprecated.py`, generates blocks on two nodes roughly simultaneously, so one of the nodes is generating blocks in an rpc thread while also processing blocks on the network thread, which I believe is enough to trigger this bug.",
      "created_at" : "2018-04-26T15:53:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-384693081",
      "id" : 384693081,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-26T15:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384693081",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184447870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184447870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This might cause substantial slow-down during IBD or reindex, because currently FindMostWorkChain walks from the candidate tip to the fork point on the current chain to ensure none of the blocks are invalid.  We may be able to optimize that, but we also might want to consider another solution.",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-26T16:13:33Z",
      "diff_hunk" : "@@ -2673,9 +2673,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n \n             CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+            pindexMostWork = FindMostWorkChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184447870",
      "id" : 184447870,
      "in_reply_to_id" : 183487818,
      "original_commit_id" : "26bfdbaddbb9f13864deb7241c6d513f22c5ab62",
      "original_position" : 7,
      "path" : "src/validation.cpp",
      "position" : 7,
      "pull_request_review_id" : 115647578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-26T16:31:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184447870",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184452863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184452863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This method of constructing a bad block is not ideal, because this kind of invalidity is detected well before ConnectBlock.  In order to get better code coverage, I think it would be better to generate different kinds of invalid blocks, to test failure at different points in the validation process.\r\n\r\n(As it is,  I believe this method of making an invalid block is detectable in CheckBlock (merkle-tree fails validation due to duplicate transactions).  It would also fail in CheckBlock for having more than one coinbase, and it would fail in ContextualCheckBlock for having an invalid witness commitment.)",
      "commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "created_at" : "2018-04-26T16:28:47Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n+{\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        ++(pblock->nNonce);\n+    }\n+\n+    return pblock;\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return FinalizeBlock(Block(prev_hash));\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+\n+    // a second coinbase will make this block invalid\n+    pblock->vtx.push_back(pblock->vtx[0]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184452863",
      "id" : 184452863,
      "original_commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 91,
      "pull_request_review_id" : 115647578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-04-26T16:31:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184452863",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have a branch where I changed the test you wrote to produce invalid blocks that would be detected in ConnectBlock, and where I have an alternate fix for the bug you found here, as well as a fix for the bug I mentioned in #13092: https://github.com/sdaftuar/bitcoin/commits/2018-04-alternate-abc-fix.  \r\n\r\nFor fixing the bug here, rather than invoke `FindMostWorkChain` on every loop iteration (which I expect to be very slow during reindex), I instead added a new test: if the tip has changed since the last loop iteration, or if pindexMostWork is no longer in setBlockIndexCandidates, then update pindexMostWork.  (I believe that only the first criteria is actually necessary, but included the second as belt-and-suspenders.)\r\n\r\nI compared this approach during a reindex on my workstation, and saw < 3% slowdown during reindex (some slowdown was expected due to checking setBlockIndexCandidates each time).",
      "created_at" : "2018-04-27T15:22:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-385003478",
      "id" : 385003478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-27T15:22:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385003478",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
