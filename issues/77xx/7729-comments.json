[
   {
      "body" : "Concept ACK.\r\nI just wonder if this makes the wallet code more complex (add another layer).\r\n\r\nMy idea was it to duplicate the current wallet implementation (`cp src/wallet src/newwallet`-approach) and add such things there (after removing the accounts-related code). Also the Bip32 and @CodeShark multi-wallet PR could be added there.\r\n\r\nThe second wallet could come without API stableness (for the first two releases or so) and could be marked as experimental.",
      "created_at" : "2016-03-21T16:14:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199361174",
      "id" : 199361174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-21T16:14:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199361174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> I just wonder if this makes the wallet code more complex (add another layer).\r\n\r\nI disagree:\r\n\r\n- All of this functionality is required anyway to support the GUI.\r\n- Yes, there is some intentional duplication, but only until the account calls are ripped out, which should be one of the next steps.\r\n- There are only added RPC calls in rpcwallet.cpp. The `CWallet` class is not complicated by this.\r\n\r\nThe point here is to give a non-deprecated equivalent to the 'label' system as used in the GUI, so the subset of the 'account system' that people are still allowed to use. This is a required, but up to now missing part of deprecating the account system.\r\n\r\nI'm not trying to rule out any other work that is being done such as multi-wallet support. I think this is pretty much orthogonal. As for alternative wallets, they've been proposed since at least 2012 - but none have materialized yet. And none of this change rules them out.\r\n",
      "created_at" : "2016-03-21T16:17:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199362346",
      "id" : 199362346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-21T16:24:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199362346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> As for alternative wallets, they've been proposed since at least 2012 - but none have materialized yet. And none of this change rules them out.\r\n\r\nYes. I agree.\r\nThis PR has a clear value.",
      "created_at" : "2016-03-21T16:33:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199368604",
      "id" : 199368604,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-21T16:33:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199368604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Note getaccountaddress does not presently get a \"default\" address, it gets an *unused* address with the label, creating one if necessary. This seems useful *only* for mining, since no other context can guarantee an address hasn't been \"used\" but not sent to yet. I can't think of a good way to deprecate this, however.",
      "created_at" : "2016-03-21T19:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036",
      "id" : 199444036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-21T19:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199444036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "> it gets an unused address with the label, creating one if necessary.\r\n\r\nI wonder if we can find a better (or at least simpler, the `GetAccountAddress` function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.",
      "created_at" : "2016-03-22T08:53:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199705726",
      "id" : 199705726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-22T08:54:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199705726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@luke-jr \r\n> I wonder if we can find a better (or at least simpler, the GetAccountAddress function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.\r\n\r\nI thought of the following: you could use two labels, one for the 'active' address, one for the 'normal'. Say `mining_active` and `mining`.\r\n\r\nWhen the miner needs an address it will:\r\n- *addr* = `getaddressesbylabel mining_active` (if no address returned, go to \"if so\" directly below and skip the first)\r\n- `getreceivedbyaddress` - check with wallet that *addr* has been used before (or maybe add a more convenient RPC call for checking a single address)\r\n- If so:\r\n  -  `setlabel <addr> mining`  - move current address to normal label\r\n  - *addr* = `getnewaddress mining_active` - generate new address in `mining_active` label\r\n  - Use *addr* for mining to\r\n- If not:\r\n  - Use *addr* for mining to\r\n\r\nThis is a little bit more involved at the user side, but it avoids special administration (needing to keep around `CAccount` structure per label) at the server side.",
      "created_at" : "2016-03-23T07:10:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-200219840",
      "id" : 200219840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-03-23T07:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200219840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\r\n\r\nAlso, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.",
      "created_at" : "2016-04-07T07:25:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206735494",
      "id" : 206735494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-04-07T07:25:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206735494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "> That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\r\n\r\nI'd suggest to try it. It shouldn't be much slower.\r\n\r\n> Also, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.\r\n\r\nLooks like you're right. `getreceivedbyaccount` doesn't actually return the account balance, but the total number of coins sent to the addresses that make up the account?\r\n\r\n`listreceivedbyaccount`  on the other hand goes over the account tally. But I agree if it only were to show actual transactions sent to addresses belonging to a label it'd be ok.\r\n",
      "created_at" : "2016-04-07T14:19:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206927479",
      "id" : 206927479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-04-07T14:19:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206927479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@luke-jr Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as index?",
      "created_at" : "2016-04-07T14:24:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206929678",
      "id" : 206929678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-04-07T14:24:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206929678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> I'd suggest to try it. It shouldn't be much slower.\r\n\r\n@laanwj getreceivedbyaddress at least would loop over all the wtx... and then there's the additional latency from the back and forth of multiple calls. I haven't tried it yet, though.\r\n\r\n> Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as index?\r\n\r\n@sipa Perhaps, if the wallet had a way to do this. Using the height seems incompatible with gap limits, though?",
      "created_at" : "2016-04-07T14:37:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206934807",
      "id" : 206934807,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-04-07T14:37:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206934807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr I mean the mining software can do derivation, and import the keys into the wallet when a block is found.\r\n\r\n",
      "created_at" : "2016-04-07T14:48:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206938418",
      "id" : 206938418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-04-07T14:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206938418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "The functional test coverage for accounts is minimal or not existent, I think we should move forward with this pull.\r\n\r\nNeeds rebase.",
      "created_at" : "2016-05-22T12:02:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220828728",
      "id" : 220828728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-05-22T12:02:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220828728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Re-Concept ACK.\r\nI think this solution makes more sense than the closed #7830.\r\nNeeds tests, rebase and release-note mentioning.",
      "created_at" : "2016-05-22T12:54:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220830924",
      "id" : 220830924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-05-22T12:54:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220830924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Needs tests.",
      "created_at" : "2016-05-22T16:04:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220840308",
      "id" : 220840308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-05-22T16:04:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220840308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2033945?v=3",
         "events_url" : "https://api.github.com/users/wallclockbuilder/events{/privacy}",
         "followers_url" : "https://api.github.com/users/wallclockbuilder/followers",
         "following_url" : "https://api.github.com/users/wallclockbuilder/following{/other_user}",
         "gists_url" : "https://api.github.com/users/wallclockbuilder/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/wallclockbuilder",
         "id" : 2033945,
         "login" : "wallclockbuilder",
         "organizations_url" : "https://api.github.com/users/wallclockbuilder/orgs",
         "received_events_url" : "https://api.github.com/users/wallclockbuilder/received_events",
         "repos_url" : "https://api.github.com/users/wallclockbuilder/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/wallclockbuilder/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/wallclockbuilder/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/wallclockbuilder"
      }
   },
   {
      "body" : "@wallclockbuilder No shit, have you seen the TODOs at the bottom of the opening post?",
      "created_at" : "2016-06-02T13:13:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287263",
      "id" : 223287263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-06-02T13:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "To be clear I posted this to get comments on the API, is there anything left to be done there? I'm going to write tests when it is clear that this is what we want at all.",
      "created_at" : "2016-06-02T13:15:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287825",
      "id" : 223287825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-06-02T13:16:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> Do not use the deprecated account system and the label system with the same wallet at the same time\r\n> [...]\r\n> optional: a flag in the wallet to prevent use of both the account and label API\r\n\r\nI would not consider this optional. User will always do what you not want them to do.\r\n",
      "created_at" : "2016-07-14T20:05:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-232776422",
      "id" : 232776422,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-07-14T20:05:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/232776422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2016-08-25T12:46:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-242373379",
      "id" : 242373379,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-08-25T12:46:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/242373379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "listtransactions has an \"account\" argument where you now you would pass \"*\" if you need to supply non-default args for count, from, and includeWatchOnly. Will there be a way to query for transactions affecting any address with a given label? Could we tack on a \"label\" argument to listtransactions?",
      "created_at" : "2016-09-24T02:38:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249340313",
      "id" : 249340313,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-09-24T02:39:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249340313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/101534?v=3",
         "events_url" : "https://api.github.com/users/andrewbaine/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewbaine/followers",
         "following_url" : "https://api.github.com/users/andrewbaine/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewbaine/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewbaine",
         "id" : 101534,
         "login" : "andrewbaine",
         "organizations_url" : "https://api.github.com/users/andrewbaine/orgs",
         "received_events_url" : "https://api.github.com/users/andrewbaine/received_events",
         "repos_url" : "https://api.github.com/users/andrewbaine/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewbaine/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewbaine/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewbaine"
      }
   },
   {
      "body" : "I think the account argument of listtransactions could simply be re-used as a label argument. As listing transactions to a label has nothing to do with per-label balances there is no need to drop that particular functionality, ",
      "created_at" : "2016-09-24T05:25:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249346342",
      "id" : 249346342,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-09-24T05:25:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249346342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "repurposing the \"account\" argument to be \"label\" makes sense to me",
      "created_at" : "2016-10-03T15:00:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-251130307",
      "id" : 251130307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-10-03T15:00:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/251130307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/101534?v=3",
         "events_url" : "https://api.github.com/users/andrewbaine/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewbaine/followers",
         "following_url" : "https://api.github.com/users/andrewbaine/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewbaine/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewbaine",
         "id" : 101534,
         "login" : "andrewbaine",
         "organizations_url" : "https://api.github.com/users/andrewbaine/orgs",
         "received_events_url" : "https://api.github.com/users/andrewbaine/received_events",
         "repos_url" : "https://api.github.com/users/andrewbaine/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewbaine/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewbaine/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewbaine"
      }
   },
   {
      "body" : "Fast review ACK (besides needing rebase and the promised tests).\r\nThe API is actually more than I expected but still simple enough, I think.\r\n\r\n > optional: a flag in the wallet to prevent use of both the account and label API\r\n\r\nI'm not sure it's worth to bother. I think we should go ahead and completely remove account functionality within 0.14 instead. But whatever we do, it can be done in a later PR.\r\n",
      "created_at" : "2016-11-17T22:38:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261392305",
      "id" : 261392305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-17T22:38:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261392305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : ">labels are associated with addresses, instead of addresses associated with labels\r\n\r\nDescription nit: not sure I catch the distinction here.  \r\n\r\n>Should there be such a thing as a 'label address'?  \r\n\r\nI'd say no unless there is a compelling use-case that can't be replicated another way.",
      "created_at" : "2016-11-18T14:06:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261539197",
      "id" : 261539197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-18T14:11:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261539197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665805"
         }
      },
      "body" : "would `getnewlabeladdress` be wrong? As-is gave me the impression that this was some static address.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-18T14:27:47Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665805",
      "id" : 88665805,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 17,
      "pull_request_review_id" : 9233413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-18T14:50:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665805",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665910"
         }
      },
      "body" : "perhaps mention `latest unused` or something similar. ",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-18T14:28:21Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665910",
      "id" : 88665910,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 29,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 29,
      "pull_request_review_id" : 9233413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-18T14:50:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88668316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88668316"
         }
      },
      "body" : "I'm not as familiar with accounts as others, but is this type of parameter actually going to be used? When would you want to list labels that go certain directions? I have a feeling labels people choose will reflect this already.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-18T14:42:10Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88668316",
      "id" : 88668316,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 146,
      "pull_request_review_id" : 9233413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-18T14:50:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88668316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88669423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88669423"
         }
      },
      "body" : "it also adds it to the address book if previously unknown, correct?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-18T14:46:58Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88669423",
      "id" : 88669423,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 189,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 189,
      "pull_request_review_id" : 9233413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-18T14:50:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88669423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887049"
         }
      },
      "body" : "The goal of this API is to expose exactly the same functionality that the GUI uses. The GUI distinguishes between different kind of labels (to show sending/receiving addresses), so it should be offered here as well.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-21T12:47:16Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887049",
      "id" : 88887049,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 146,
      "pull_request_review_id" : 9444753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-21T12:47:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887107"
         }
      },
      "body" : "I still think we should get rid of this.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-21T12:47:43Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887107",
      "id" : 88887107,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 29,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 29,
      "pull_request_review_id" : 9444803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-21T12:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> It also may be helpful to give a brief motivation in the OP. What's wrong with accounts, and what label fixes about that. Currently it's a list of differences without clear motivation.\r\n\r\nSee #3816",
      "created_at" : "2016-11-21T12:48:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261928077",
      "id" : 261928077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-21T12:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261928077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887646"
         }
      },
      "body" : "Indeed, that is what setting a label does. If there is no labeling information associated with an address it will create that. We don't want to use the term \"address book\" here I think.\r\n",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-11-21T12:51:30Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887646",
      "id" : 88887646,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 189,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 189,
      "pull_request_review_id" : 9445301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-11-21T12:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "utACK a2557ffb80543af5e92c3db03d257fe594b0d910 needs (trivial) rebase for the new `JSONRPCRequest` object passing.",
      "created_at" : "2016-11-21T12:53:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261929161",
      "id" : 261929161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-21T12:53:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261929161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@laanwj yes I read the issue, but there are some disagreements in that thread about what the actual issue is(malleability being the first issue noted?). I assume it's along the lines of \"people want to watermark addresses, but bitcoind wallet shouldn't try to be an accounting system for those labels\".",
      "created_at" : "2016-11-21T13:09:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261933520",
      "id" : 261933520,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-21T13:09:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261933520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "Hi. When is this new feature expected to be rolled out?",
      "created_at" : "2016-11-22T22:52:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390221",
      "id" : 262390221,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-22T22:52:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1627972?v=3",
         "events_url" : "https://api.github.com/users/motatoes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/motatoes/followers",
         "following_url" : "https://api.github.com/users/motatoes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/motatoes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/motatoes",
         "id" : 1627972,
         "login" : "motatoes",
         "organizations_url" : "https://api.github.com/users/motatoes/orgs",
         "received_events_url" : "https://api.github.com/users/motatoes/received_events",
         "repos_url" : "https://api.github.com/users/motatoes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/motatoes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/motatoes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/motatoes"
      }
   },
   {
      "body" : "@motatoes Like everything, when it's ready. That may be in 0.14.0 or later.",
      "created_at" : "2016-11-22T22:54:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390495",
      "id" : 262390495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-11-22T22:54:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92064042"
         }
      },
      "body" : "This condition should be changed to `if (strOldLabel != strLabel && address == GetAccountAddress(strOldLabel))`, so calling setlabel on an address which already has the same label will just be a no-op, instead of creating an unexpected side effect where the label's default label address gets discarded.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2016-12-12T23:17:30Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses can be deleted,\n+        // and we wouldn't do this, the record would stick around forever.\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldLabel = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldLabel))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042",
      "id" : 92064042,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 216,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 216,
      "pull_request_review_id" : 12573775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2016-12-12T23:17:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92064042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@laanwj , I created an RPC test for this change here: https://github.com/ryanofsky/bitcoin/commit/2dac8eb0d915b4c04764eff100d81718b2cd9a90\r\n\r\nFeel free to incorporate it in this PR, or I could create a separate one.\r\n",
      "created_at" : "2016-12-13T00:00:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-266593020",
      "id" : 266593020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-12-13T00:00:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266593020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Needs rebase",
      "created_at" : "2016-12-16T15:52:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-267624474",
      "id" : 267624474,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2016-12-16T15:52:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267624474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Needs rebase again, sorry for not reviewing after the last rebase.",
      "created_at" : "2017-03-06T22:42:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-284558409",
      "id" : 284558409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2017-03-06T22:42:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284558409",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Concept reACK",
      "created_at" : "2017-03-16T19:39:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-287168649",
      "id" : 287168649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2017-03-16T19:39:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287168649",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Needs rebase. Concept ACK",
      "created_at" : "2017-03-24T21:13:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-289144410",
      "id" : 289144410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
      "updated_at" : "2017-03-24T21:13:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289144410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108552368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108552368"
         }
      },
      "body" : "Is the label optional or required?\r\n\r\nIf it's required update L2675 to `if (fHelp || params.size() != 2)` and L2693-2695 to `std::string strLabel = AccountFromValue(params[1]);`, if optional update the docstring.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:26:10Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108552368",
      "id" : 108552368,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 192,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 192,
      "pull_request_review_id" : 29591055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:26:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108552368",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553186"
         }
      },
      "body" : "Braces please!",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:31:01Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses can be deleted,\n+        // and we wouldn't do this, the record would stick around forever.\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldLabel = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldLabel))\n+                DeleteAccount(strOldLabel);\n+        }\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+    }\n+    else\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"send\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553186",
      "id" : 108553186,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 222,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 222,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553186",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553757"
         }
      },
      "body" : "Does the order of push_back matter here? Might be cleaner to lump all `if (verbose)` under one branch...",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:34:31Z",
      "diff_hunk" : "@@ -2537,13 +2537,13 @@ UniValue getlabeladdress(const UniValue& params, bool fHelp)\n /** Convert CAddressBookData to JSON record.\n  * The verbosity of the output is configurable based on the command.\n  */\n-static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n {\n     UniValue ret(UniValue::VOBJ);\n-    if (includeName)\n+    if (verbose)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553757",
      "id" : 108553757,
      "original_commit_id" : "e21f890df601ead1169fc2b888202e425d2dff72",
      "original_position" : 9,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553757",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554842"
         }
      },
      "body" : "It seems like L2529-2534 could be a one or two liner, rather than 4 (and maybe get rid of the whitespace).",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:41:28Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554842",
      "id" : 108554842,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 45,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 45,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554974"
         }
      },
      "body" : "does a builtin for range loop work here?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:42:28Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554974",
      "id" : 108554974,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554974",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555197"
         }
      },
      "body" : "Can this not be a for range loop?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:43:56Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555197",
      "id" : 108555197,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 128,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 128,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555197",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555517"
         }
      },
      "body" : "can use for range?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:45:55Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555517",
      "id" : 108555517,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 170,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 170,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555517",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555561"
         }
      },
      "body" : "can use for range?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:46:07Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555561",
      "id" : 108555561,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 175,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 175,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555561",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555711"
         }
      },
      "body" : "validate the purpose string?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:47:12Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555711",
      "id" : 108555711,
      "original_commit_id" : "d036fa44112df0c9faf76a1d69767b45a37e391b",
      "original_position" : 167,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 167,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555711",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556412"
         }
      },
      "body" : "This behavior is probably just to mirror prior behavior, but perhaps a better alternative would be to create a fresh address for the account & allow deleting of account via another mechanism.",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:51:51Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556412",
      "id" : 108556412,
      "original_commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "original_position" : 210,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 210,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556412",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556848"
         }
      },
      "body" : "What's the correct behavior when address is watchonly?",
      "commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "created_at" : "2017-03-28T22:54:19Z",
      "diff_hunk" : "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556848",
      "id" : 108556848,
      "original_commit_id" : "a2557ffb80543af5e92c3db03d257fe594b0d910",
      "original_position" : 208,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 208,
      "pull_request_review_id" : 29591895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
      "updated_at" : "2017-03-28T22:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556848",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
