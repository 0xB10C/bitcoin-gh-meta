[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804068683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What would happen if this function was empty? If it builds, then the changes here are minimal and build-system only and wouldn't need to concern itself with (C++) code yet.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:13:30Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804068683",
      "id" : 804068683,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584v7R1L",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 44,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wouldn't the code be easier to read by replacing this with `return;` and letting a destructor of an object that lives in this scope take care of the cleanup?",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:18:10Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072128",
      "id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7SrA",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "wrong argument names?",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:19:08Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;\n+    } else {\n+        auto maybe_verify_error = VerifyLoadedChainstate(std::ref(chainman),\n+                                                         false,\n+                                                         false,\n+                                                         chainparams.GetConsensus(),\n+                                                         DEFAULT_CHECKBLOCKS,\n+                                                         DEFAULT_CHECKLEVEL,\n+                                                         /*get_unix_time_seconds=*/static_cast<int64_t(*)()>(GetTime));\n+        if (maybe_verify_error.has_value()) {\n+            std::cerr << \"Failed to verify loaded Chain state from your datadir.\" << std::endl;\n+            goto epilogue;\n+        }\n+    }\n+\n+    for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, nullptr)) {\n+            std::cerr << \"Failed to connect best block (\" << state.ToString() << \")\" << std::endl;\n+            goto epilogue;\n+        }\n+    }\n+\n+    std::cout << \"Hello! I'm going to print out some information about your datadir.\" << std::endl;\n+    std::cout << \"\\t\" << \"Path: \" << gArgs.GetDataDirNet() << std::endl;\n+    std::cout << \"\\t\" << \"Reindexing: \" << std::boolalpha << fReindex.load() << std::noboolalpha << std::endl;\n+    std::cout << \"\\t\" << \"Snapshot Active: \" << std::boolalpha << chainman.IsSnapshotActive() << std::noboolalpha << std::endl;\n+    std::cout << \"\\t\" << \"Active Height: \" << chainman.ActiveHeight() << std::endl;\n+    std::cout << \"\\t\" << \"Active IBD: \" << std::boolalpha << chainman.ActiveChainstate().IsInitialBlockDownload() << std::noboolalpha << std::endl;\n+    {\n+        CBlockIndex* tip = chainman.ActiveTip();\n+        if (tip) {\n+            std::cout << \"\\t\" << tip->ToString() << std::endl;\n+        }\n+    }\n+\n+    for (std::string line; std::getline(std::cin, line); ) {\n+        if (line.empty()) {\n+            std::cerr << \"Empty line found\" << std::endl;\n+            break;\n+        }\n+\n+        std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n+        CBlock& block = *blockptr;\n+\n+        if (!DecodeHexBlk(block, line)) {\n+            std::cerr << \"Block decode failed\" << std::endl;\n+            break;\n+        }\n+\n+        if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+            std::cerr << \"Block does not start with a coinbase\" << std::endl;\n+            break;\n+        }\n+\n+        uint256 hash = block.GetHash();\n+        {\n+            LOCK(cs_main);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+            if (pindex) {\n+                if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                    std::cerr << \"duplicate\" << std::endl;\n+                    break;\n+                }\n+                if (pindex->nStatus & BLOCK_FAILED_MASK) {\n+                    std::cerr << \"duplicate-invalid\" << std::endl;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        {\n+            LOCK(cs_main);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n+            if (pindex) {\n+                UpdateUncommittedBlockStructures(block, pindex, chainparams.GetConsensus());\n+            }\n+        }\n+\n+        bool new_block;\n+        auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n+        RegisterSharedValidationInterface(sc);\n+        bool accepted = chainman.ProcessNewBlock(chainparams, blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712",
      "id" : 804072712,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7S0I",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 190,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : null,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Would it be appropriate to add a CI job that enables --enable-experimental-util-chainstate?\r\n\r\nDo you need to add one? What about adding it to the existing nowallet task?",
      "created_at" : "2022-02-10T20:25:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035466827",
      "id" : 1035466827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849t_hL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035466827/reactions"
      },
      "updated_at" : "2022-02-10T20:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035466827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804077679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If it's empty, then we would be able to remove all files in `libbitcoinkernel_la_SOURCES` and it would still compile and link. It being not empty is to enforce that we've linked at least the set of files necessary for this functionality.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:26:24Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804077679",
      "id" : 804077679,
      "in_reply_to_id" : 804068683,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584v7UBv",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 44,
      "pull_request_review_id" : 879400703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804078881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unfortunately, with our codebase right now if we don't do the shutdown process in a very carefully sequenced way, there will be nullptr dereferences and other undefined behaviour.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:28:08Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804078881",
      "id" : 804078881,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7UUh",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879402362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:28:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed 518c876efe...1d9faa8fc7:\r\n- Addressed https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712",
      "created_at" : "2022-02-10T20:33:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035477804",
      "id" : 1035477804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uCMs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035477804/reactions"
      },
      "updated_at" : "2022-02-10T20:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035477804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke \r\n> Do you need to add one? What about adding it to the existing nowallet task?\r\n\r\nI'm happy to add it to the existing nowallet task if you think it's appropriate! Lmk!",
      "created_at" : "2022-02-10T20:34:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035479455",
      "id" : 1035479455,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uCmf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035479455/reactions"
      },
      "updated_at" : "2022-02-10T20:34:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035479455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804088493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't mean to reorder the sequence. It is just a suggestion to remove `goto`, which in my eyes is impossible to review. I am convinced that any code using `goto` can be rewritten in a way that doesn't use `goto` and is at the same time easier to read. I can look into this in the future, unless someone beats me to it.",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-10T20:42:02Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804088493",
      "id" : 804088493,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7Wqt",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879421212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T21:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm happy to add it to the existing nowallet task if you think it's appropriate! Lmk!\r\n\r\nYeah, I don't think there are any downsides and only upsides to it, right?",
      "created_at" : "2022-02-10T20:42:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035491348",
      "id" : 1035491348,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uFgU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035491348/reactions"
      },
      "updated_at" : "2022-02-10T20:42:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035491348",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From ci:\r\n\r\n```\r\nclientversion.cpp:19:10: fatal error: 'obj/build.h' file not found\r\n#include <obj/build.h>\r\n         ^~~~~~~~~~~~~\r\n1 error generated.",
      "created_at" : "2022-02-10T21:49:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035557645",
      "id" : 1035557645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uVsN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035557645/reactions"
      },
      "updated_at" : "2022-02-10T21:49:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035557645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804422582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in the ci commit: pls remove the @MarcoFalke ",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T07:59:57Z",
      "diff_hunk" : "@@ -259,13 +259,13 @@ task:\n     FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n \n task:\n-  name: '[no wallet] [bionic]'\n+  name: '[no wallet, libbitcoinkernel] [bionic]'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804422582",
      "id" : 804422582,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584v8oO2",
      "original_commit_id" : "d8f2e52387cb3572dc0a898a33f671aea65d78ad",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : ".cirrus.yml",
      "position" : 5,
      "pull_request_review_id" : 879860676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T07:59:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24301](https://github.com/bitcoin/bitcoin/pull/24301) (build: header-only Boost by fanquake)\n* [#24164](https://github.com/bitcoin/bitcoin/pull/24164) (build: Bump minimum required clang/libc++ to 8.0 by MarcoFalke)\n* [#24115](https://github.com/bitcoin/bitcoin/pull/24115) (ARMv8 SHA2 Intrinsics by prusnak)\n* [#23670](https://github.com/bitcoin/bitcoin/pull/23670) (build: Build test binaries in `make check`, not in `make` by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-02-11T12:04:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1036146181",
      "id" : 1036146181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849wlYF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036146181/reactions"
      },
      "updated_at" : "2022-02-11T12:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036146181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804782700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804782700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"build: Add example bitcoin-chainstate executable\" (01840e6161396ed0ab30a122921f67b8dce45499)\r\n\r\nWould be nicer to print a \"Usage:\" message",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T15:55:17Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804782700",
      "id" : 804782700,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584v-AJs",
      "original_commit_id" : "01840e6161396ed0ab30a122921f67b8dce45499",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 45,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804782700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804782700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804793259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804793259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"build: Add example bitcoin-chainstate executable\" (01840e6161396ed0ab30a122921f67b8dce45499)\r\n\r\nThe LoadChainstate and VerifyLoadedChainstate calls here would be cleaner with  b7c7f64dc86f0fcdf07cb1e765f7cccc3a3c8897 suggested in https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-825684290 and would let this code print specific error messages instead failing generically and discarding the return codes.",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T16:06:53Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804793259",
      "id" : 804793259,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII584v-Cur",
      "original_commit_id" : "01840e6161396ed0ab30a122921f67b8dce45499",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 94,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804793259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804793259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804806173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804806173"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't mean to reorder the sequence. It is just a suggestion to remove `goto`, which in my eyes is impossible to review.\r\n\r\nIMO, it is ok to use goto in a limited way to exit a block, and not worse than `break`. This can be cleaner and better than more convoluted alternatives and there are good practices build around it https://www.kernel.org/doc/html/latest/process/coding-style.html#centralized-exiting-of-functions",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T16:21:45Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804806173",
      "id" : 804806173,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v-F4d",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804806173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804806173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804811990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804811990"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"build: Add example bitcoin-chainstate executable\" (01840e6161396ed0ab30a122921f67b8dce45499)\r\n\r\nShould add the commit description \"The bitcoin-chainstate executable serves to...\" to the top of this file so it is not lost in git history. Or `bitcoin-chainstate` could accept \"-help\" option and describe its purpose there.",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T16:28:21Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804811990",
      "id" : 804811990,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII584v-HTW",
      "original_commit_id" : "01840e6161396ed0ab30a122921f67b8dce45499",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 1,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804811990/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804811990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804814204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804814204"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"build: Add example bitcoin-chainstate executable\" (01840e6161396ed0ab30a122921f67b8dce45499)\r\n\r\nI think it would be clearer to drop these using statements, and use the full names symbol below. Especially because `node::fIndex` looks like a local variable, not a global variable without the namespace component.",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T16:30:48Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804814204",
      "id" : 804814204,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII584v-H18",
      "original_commit_id" : "01840e6161396ed0ab30a122921f67b8dce45499",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 18,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 20,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804814204/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 18,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804814204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804821073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804821073"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"f\" (e5579f11b702ad978cd4f672b362e6346c699234)\r\n\r\nI don't think `extern` belongs here. Maybe if you drop the `extern` you could drop the visibility attribute as well?",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T16:38:17Z",
      "diff_hunk" : "@@ -19,7 +19,7 @@ using node::fReindex;\n using node::LoadChainstate;\n using node::VerifyLoadedChainstate;\n \n-const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+__attribute__ ((visibility(\"default\"))) const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804821073",
      "id" : 804821073,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII584v-JhR",
      "original_commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "original_line" : 22,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 5,
      "pull_request_review_id" : 880364209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804821073/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T16:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804821073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804851213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804851213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we should be using the style guide of the kernel (a project written in C) for a project written in C++.\r\n\r\nBut given that the code here isn't used for anything after compilation (other than to prove that linking works), I think any style is fine here.",
      "commit_id" : "c5d2125744e38436f2ac8c0ff5806ff197392658",
      "created_at" : "2022-02-11T17:13:45Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804851213",
      "id" : 804851213,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v-Q4N",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 880461560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804851213/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T17:13:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804851213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804923112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804923112"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed the \"@\" from the commit message, is that sufficient?",
      "commit_id" : "c5d2125744e38436f2ac8c0ff5806ff197392658",
      "created_at" : "2022-02-11T18:53:59Z",
      "diff_hunk" : "@@ -259,13 +259,13 @@ task:\n     FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n \n task:\n-  name: '[no wallet] [bionic]'\n+  name: '[no wallet, libbitcoinkernel] [bionic]'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804923112",
      "id" : 804923112,
      "in_reply_to_id" : 804422582,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584v-ibo",
      "original_commit_id" : "d8f2e52387cb3572dc0a898a33f671aea65d78ad",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : ".cirrus.yml",
      "position" : 5,
      "pull_request_review_id" : 880561912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804923112/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T18:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804923112",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804924995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804924995"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You're right! I've removed it.\r\n\r\nHowever, we still need the visibility attribute for the reasons detailed in the commit message for 7f7f92f81d06b0a3888fad102d3bc09a64483995",
      "commit_id" : "c5d2125744e38436f2ac8c0ff5806ff197392658",
      "created_at" : "2022-02-11T18:56:45Z",
      "diff_hunk" : "@@ -19,7 +19,7 @@ using node::fReindex;\n using node::LoadChainstate;\n using node::VerifyLoadedChainstate;\n \n-const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+__attribute__ ((visibility(\"default\"))) const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804924995",
      "id" : 804924995,
      "in_reply_to_id" : 804821073,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-i5D",
      "original_commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "original_line" : 22,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : null,
      "pull_request_review_id" : 880564455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804924995/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T18:56:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804924995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804945496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804945496"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: remove x and add missing \"quotes\" like everywhere else?",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T19:29:52Z",
      "diff_hunk" : "@@ -1622,6 +1630,10 @@ AC_MSG_CHECKING([whether to build bitcoin-util])\n AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test $build_bitcoin_util = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_util)\n \n+AC_MSG_CHECKING([whether to build experimental bitcoin-chainstate])\n+AM_CONDITIONAL([BUILD_BITCOIN_CHAINSTATE], [test x$build_bitcoin_chainstate = xyes])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804945496",
      "id" : 804945496,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-n5Y",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 1634,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 880593623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804945496/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T19:38:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804945496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804947111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804947111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Maybe remove this TODO and either create a review comment (after merge) on 21726, or create a tracking comment in the parent b-cs issue?",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T19:32:18Z",
      "diff_hunk" : "@@ -764,6 +768,102 @@ bitcoin_util_LDADD = \\\n bitcoin_util_LDADD += $(BOOST_LIBS)\n #\n \n+# bitcoin-chainstate binary #\n+#\n+# TODO: Remove blockfilter.cpp and index/blockfilterindex.cpp after merge of\n+#       \"Improve Indices on pruned nodes via prune blockers\" #21726",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804947111",
      "id" : 804947111,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-oSn",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 774,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 880593623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804947111/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T19:38:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804947111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804950143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804950143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "question: This means that the \"util library\" will be compiled twice? Maybe it could make sense to split libutil out from libcommon and make libkernel depend on libutil?\r\n\r\nSimilarly, the consensus stuff will be compiled twice. Maybe it could make sense to remove consensus stuff from libnode and instead make libnode depend on libkernel?",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T19:37:15Z",
      "diff_hunk" : "@@ -764,6 +768,102 @@ bitcoin_util_LDADD = \\\n bitcoin_util_LDADD += $(BOOST_LIBS)\n #\n \n+# bitcoin-chainstate binary #\n+#\n+# TODO: Remove blockfilter.cpp and index/blockfilterindex.cpp after merge of\n+#       \"Improve Indices on pruned nodes via prune blockers\" #21726\n+bitcoin_chainstate_SOURCES = \\\n+  bitcoin-chainstate.cpp \\\n+  arith_uint256.cpp \\\n+  blockfilter.cpp \\\n+  chain.cpp \\\n+  chainparamsbase.cpp \\\n+  chainparams.cpp \\\n+  clientversion.cpp \\\n+  coins.cpp \\\n+  compat/glibcxx_sanity.cpp \\\n+  compressor.cpp \\\n+  consensus/merkle.cpp \\\n+  consensus/tx_check.cpp \\\n+  consensus/tx_verify.cpp \\\n+  core_read.cpp \\\n+  dbwrapper.cpp \\\n+  deploymentinfo.cpp \\\n+  deploymentstatus.cpp \\\n+  flatfile.cpp \\\n+  fs.cpp \\\n+  hash.cpp \\\n+  index/base.cpp \\\n+  index/blockfilterindex.cpp \\\n+  index/coinstatsindex.cpp \\\n+  init/common.cpp \\\n+  key.cpp \\\n+  logging.cpp \\\n+  netaddress.cpp \\\n+  node/blockstorage.cpp \\\n+  node/chainstate.cpp \\\n+  node/coinstats.cpp \\\n+  node/ui_interface.cpp \\\n+  policy/feerate.cpp \\\n+  policy/fees.cpp \\\n+  policy/packages.cpp \\\n+  policy/policy.cpp \\\n+  policy/rbf.cpp \\\n+  policy/settings.cpp \\\n+  pow.cpp \\\n+  primitives/block.cpp \\\n+  primitives/transaction.cpp \\\n+  pubkey.cpp \\\n+  random.cpp \\\n+  randomenv.cpp \\\n+  scheduler.cpp \\\n+  script/interpreter.cpp \\\n+  script/script.cpp \\\n+  script/script_error.cpp \\\n+  script/sigcache.cpp \\\n+  script/standard.cpp \\\n+  shutdown.cpp \\\n+  signet.cpp \\\n+  support/cleanse.cpp \\\n+  support/lockedpool.cpp \\\n+  sync.cpp \\\n+  threadinterrupt.cpp \\\n+  timedata.cpp \\\n+  txdb.cpp \\\n+  txmempool.cpp \\\n+  uint256.cpp \\\n+  util/asmap.cpp \\\n+  util/bytevectorhash.cpp \\\n+  util/getuniquepath.cpp \\\n+  util/hasher.cpp \\\n+  util/moneystr.cpp \\\n+  util/rbf.cpp \\\n+  util/serfloat.cpp \\\n+  util/settings.cpp \\\n+  util/strencodings.cpp \\\n+  util/syscall_sandbox.cpp \\\n+  util/system.cpp \\\n+  util/thread.cpp \\\n+  util/threadnames.cpp \\\n+  util/time.cpp \\\n+  util/tokenpipe.cpp \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804950143",
      "id" : 804950143,
      "line" : 846,
      "node_id" : "PRRC_kwDOABII584v-pB_",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 846,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 90,
      "pull_request_review_id" : 880593623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804950143/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T19:38:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804950143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804983020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804983020"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> This means that the \"util library\" will be compiled twice?\r\n\r\nYes, as it stands currently at least these few files of the util library will be compiled twice.\r\n\r\n> Maybe it could make sense to split libutil out from libcommon and make libkernel depend on libutil?\r\n\r\nUnfortunately, there are plenty of `util/*.cpp` that libbitcoinkernel doesn't use, and I wish to prevent any futher coupling in that regard especially since the files under `util/*.cpp` are largely unrelated.\r\n\r\n> Maybe it could make sense to remove consensus stuff from libnode and instead make libnode depend on libkernel?\r\n\r\nUnfortunately `bitcoin-chainstate` or `libbitcoinkernel` requires quite a lot of `.cpp` files that `libnode` doesn't, and also vice versa (both ends of the venn diagram are non-empty). So there's no clear hierarchy that we can establish without linking in a large number of unnecessary `.cpp` files which I want to prevent.\r\n\r\nThe following invocation (in a shell that supports process substitution) will print all the `.cpp` that `bitcoin-chainstate`/`libbitcoinkernel` requires but `libnode` doesn't:\r\n```sh\r\ncomm -23 <(make --no-print-directory -C src print-bitcoin_chainstate_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u) \\\r\n         <(make --no-print-directory -C src print-libbitcoin_node_a_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u)\r\n```\r\n\r\n```sh\r\narith_uint256.cpp\r\nbitcoin-chainstate.cpp\r\nchainparamsbase.cpp\r\nchainparams.cpp\r\nclientversion.cpp\r\ncoins.cpp\r\ncompat/glibcxx_sanity.cpp\r\ncompressor.cpp\r\nconsensus/merkle.cpp\r\nconsensus/tx_check.cpp\r\ncore_read.cpp\r\ndeploymentinfo.cpp\r\nfs.cpp\r\nhash.cpp\r\ninit/common.cpp\r\nkey.cpp\r\nlogging.cpp\r\nnetaddress.cpp\r\npolicy/feerate.cpp\r\npolicy/policy.cpp\r\nprimitives/block.cpp\r\nprimitives/transaction.cpp\r\npubkey.cpp\r\nrandom.cpp\r\nrandomenv.cpp\r\nscheduler.cpp\r\nscript/interpreter.cpp\r\nscript/script.cpp\r\nscript/script_error.cpp\r\nscript/standard.cpp\r\nsupport/cleanse.cpp\r\nsupport/lockedpool.cpp\r\nsync.cpp\r\nthreadinterrupt.cpp\r\nuint256.cpp\r\nutil/asmap.cpp\r\nutil/bytevectorhash.cpp\r\nutil/getuniquepath.cpp\r\nutil/hasher.cpp\r\nutil/moneystr.cpp\r\nutil/rbf.cpp\r\nutil/serfloat.cpp\r\nutil/settings.cpp\r\nutil/strencodings.cpp\r\nutil/syscall_sandbox.cpp\r\nutil/system.cpp\r\nutil/thread.cpp\r\nutil/threadnames.cpp\r\nutil/time.cpp\r\nutil/tokenpipe.cpp\r\nwarnings.cpp\r\n```\r\n\r\nAll the `.cpp` that `libnode` requires but `bitcoin-chainstate`/`libbitcoinkernel` doesn't:\r\n```sh\r\ncomm -13 <(make --no-print-directory -C src print-bitcoin_chainstate_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u) \\\r\n         <(make --no-print-directory -C src print-libbitcoin_node_a_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u)\r\n```\r\n\r\n```sh\r\naddrdb.cpp\r\naddrman.cpp\r\nbanman.cpp\r\nblockencodings.cpp\r\nhttprpc.cpp\r\nhttpserver.cpp\r\ni2p.cpp\r\nindex/txindex.cpp\r\ninit.cpp\r\nmapport.cpp\r\nnet.cpp\r\nnet_processing.cpp\r\nnode/caches.cpp\r\nnode/coin.cpp\r\nnode/context.cpp\r\nnode/interfaces.cpp\r\nnode/miner.cpp\r\nnode/minisketchwrapper.cpp\r\nnode/psbt.cpp\r\nnode/transaction.cpp\r\nnoui.cpp\r\nrest.cpp\r\nrpc/blockchain.cpp\r\nrpc/mining.cpp\r\nrpc/misc.cpp\r\nrpc/net.cpp\r\nrpc/rawtransaction.cpp\r\nrpc/server.cpp\r\nrpc/server_util.cpp\r\ntorcontrol.cpp\r\ntxorphanage.cpp\r\ntxrequest.cpp\r\nwallet/init.cpp\r\n```\r\n\r\nHowever, if we perform a similar analysis on `libbitcoinconsensus.la` we'll see that it compiles the `crypto/*.cpp` files, which can be eliminated by https://github.com/bitcoin/bitcoin/pull/24322/commits/7c2b41e9f81e52cb30efc2d90ebb4b414b97617f, after that change there's just `script/bitcoinconsensus.cpp` left.\r\n\r\n**Potential followup PR:** Extract out a `libbitcoinconensus_internal.la` which doesn't include `script/bitcoinconsensus.cpp` that `libbitcoinkernel` can link against and avoid unnecessary compilation.\r\n\r\n```sh\r\ncomm -13 <(make --no-print-directory -C src print-bitcoin_chainstate_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u) \\\r\n         <(make --no-print-directory -C src print-libbitcoinconsensus_la_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u)\r\n```\r\n\r\n```sh\r\ncrypto/aes.cpp\r\ncrypto/chacha20.cpp\r\ncrypto/chacha_poly_aead.cpp\r\ncrypto/hkdf_sha256_32.cpp\r\ncrypto/hmac_sha256.cpp\r\ncrypto/hmac_sha512.cpp\r\ncrypto/muhash.cpp\r\ncrypto/poly1305.cpp\r\ncrypto/ripemd160.cpp\r\ncrypto/sha1.cpp\r\ncrypto/sha256.cpp\r\ncrypto/sha256_sse4.cpp\r\ncrypto/sha3.cpp\r\ncrypto/sha512.cpp\r\ncrypto/siphash.cpp\r\nscript/bitcoinconsensus.cpp\r\n```\r\n\r\n-----\r\n\r\n## Appendix \r\n\r\nFor reference, here's the `.cpp` comparison for `libcommon`:\r\n\r\nAll the `.cpp` that `bitcoin-chainstate`/`libbitcoinkernel` requires but `libcommon` doesn't:\r\n\r\n```sh\r\ncomm -23 <(make --no-print-directory -C src print-bitcoin_chainstate_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u) \\\r\n         <(make --no-print-directory -C src print-libbitcoin_common_a_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u)\r\n```\r\n\r\n```sh\r\narith_uint256.cpp\r\nbitcoin-chainstate.cpp\r\nblockfilter.cpp\r\nchain.cpp\r\nchainparamsbase.cpp\r\nclientversion.cpp\r\ncompat/glibcxx_sanity.cpp\r\nconsensus/merkle.cpp\r\nconsensus/tx_check.cpp\r\nconsensus/tx_verify.cpp\r\ndbwrapper.cpp\r\ndeploymentstatus.cpp\r\nflatfile.cpp\r\nfs.cpp\r\nhash.cpp\r\nindex/base.cpp\r\nindex/blockfilterindex.cpp\r\nindex/coinstatsindex.cpp\r\nlogging.cpp\r\nnode/blockstorage.cpp\r\nnode/chainstate.cpp\r\nnode/coinstats.cpp\r\nnode/ui_interface.cpp\r\npolicy/fees.cpp\r\npolicy/packages.cpp\r\npolicy/rbf.cpp\r\npolicy/settings.cpp\r\npow.cpp\r\nprimitives/block.cpp\r\nprimitives/transaction.cpp\r\npubkey.cpp\r\nrandom.cpp\r\nrandomenv.cpp\r\nscript/interpreter.cpp\r\nscript/script.cpp\r\nscript/script_error.cpp\r\nscript/sigcache.cpp\r\nshutdown.cpp\r\nsignet.cpp\r\nsupport/cleanse.cpp\r\nsupport/lockedpool.cpp\r\nsync.cpp\r\nthreadinterrupt.cpp\r\ntimedata.cpp\r\ntxdb.cpp\r\ntxmempool.cpp\r\nuint256.cpp\r\nutil/asmap.cpp\r\nutil/bytevectorhash.cpp\r\nutil/getuniquepath.cpp\r\nutil/hasher.cpp\r\nutil/moneystr.cpp\r\nutil/rbf.cpp\r\nutil/serfloat.cpp\r\nutil/settings.cpp\r\nutil/strencodings.cpp\r\nutil/syscall_sandbox.cpp\r\nutil/system.cpp\r\nutil/thread.cpp\r\nutil/threadnames.cpp\r\nutil/time.cpp\r\nutil/tokenpipe.cpp\r\nvalidation.cpp\r\nvalidationinterface.cpp\r\nversionbits.cpp\r\n```\r\n\r\nAll the `.cpp` that `libcommon` requires but `bitcoin-chainstate`/`libbitcoinkernel` doesn't:\r\n\r\n```sh\r\ncomm -13 <(make --no-print-directory -C src print-bitcoin_chainstate_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u) \\\r\n         <(make --no-print-directory -C src print-libbitcoin_common_a_SOURCES | cut -d= -f2 | tr ' ' '\\n' | grep -v '\\.h$' | sort -u)\r\n```\r\n\r\n```sh\r\nbase58.cpp\r\nbech32.cpp\r\ncommon/bloom.cpp\r\ncore_write.cpp\r\nexternal_signer.cpp\r\nkey_io.cpp\r\nmerkleblock.cpp\r\nnetbase.cpp\r\nnet_permissions.cpp\r\nnet_types.cpp\r\noutputtype.cpp\r\nprotocol.cpp\r\npsbt.cpp\r\nrpc/external_signer.cpp\r\nrpc/rawtransaction_util.cpp\r\nrpc/util.cpp\r\nscript/descriptor.cpp\r\nscript/sign.cpp\r\nscript/signingprovider.cpp\r\n```",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T20:27:06Z",
      "diff_hunk" : "@@ -764,6 +768,102 @@ bitcoin_util_LDADD = \\\n bitcoin_util_LDADD += $(BOOST_LIBS)\n #\n \n+# bitcoin-chainstate binary #\n+#\n+# TODO: Remove blockfilter.cpp and index/blockfilterindex.cpp after merge of\n+#       \"Improve Indices on pruned nodes via prune blockers\" #21726\n+bitcoin_chainstate_SOURCES = \\\n+  bitcoin-chainstate.cpp \\\n+  arith_uint256.cpp \\\n+  blockfilter.cpp \\\n+  chain.cpp \\\n+  chainparamsbase.cpp \\\n+  chainparams.cpp \\\n+  clientversion.cpp \\\n+  coins.cpp \\\n+  compat/glibcxx_sanity.cpp \\\n+  compressor.cpp \\\n+  consensus/merkle.cpp \\\n+  consensus/tx_check.cpp \\\n+  consensus/tx_verify.cpp \\\n+  core_read.cpp \\\n+  dbwrapper.cpp \\\n+  deploymentinfo.cpp \\\n+  deploymentstatus.cpp \\\n+  flatfile.cpp \\\n+  fs.cpp \\\n+  hash.cpp \\\n+  index/base.cpp \\\n+  index/blockfilterindex.cpp \\\n+  index/coinstatsindex.cpp \\\n+  init/common.cpp \\\n+  key.cpp \\\n+  logging.cpp \\\n+  netaddress.cpp \\\n+  node/blockstorage.cpp \\\n+  node/chainstate.cpp \\\n+  node/coinstats.cpp \\\n+  node/ui_interface.cpp \\\n+  policy/feerate.cpp \\\n+  policy/fees.cpp \\\n+  policy/packages.cpp \\\n+  policy/policy.cpp \\\n+  policy/rbf.cpp \\\n+  policy/settings.cpp \\\n+  pow.cpp \\\n+  primitives/block.cpp \\\n+  primitives/transaction.cpp \\\n+  pubkey.cpp \\\n+  random.cpp \\\n+  randomenv.cpp \\\n+  scheduler.cpp \\\n+  script/interpreter.cpp \\\n+  script/script.cpp \\\n+  script/script_error.cpp \\\n+  script/sigcache.cpp \\\n+  script/standard.cpp \\\n+  shutdown.cpp \\\n+  signet.cpp \\\n+  support/cleanse.cpp \\\n+  support/lockedpool.cpp \\\n+  sync.cpp \\\n+  threadinterrupt.cpp \\\n+  timedata.cpp \\\n+  txdb.cpp \\\n+  txmempool.cpp \\\n+  uint256.cpp \\\n+  util/asmap.cpp \\\n+  util/bytevectorhash.cpp \\\n+  util/getuniquepath.cpp \\\n+  util/hasher.cpp \\\n+  util/moneystr.cpp \\\n+  util/rbf.cpp \\\n+  util/serfloat.cpp \\\n+  util/settings.cpp \\\n+  util/strencodings.cpp \\\n+  util/syscall_sandbox.cpp \\\n+  util/system.cpp \\\n+  util/thread.cpp \\\n+  util/threadnames.cpp \\\n+  util/time.cpp \\\n+  util/tokenpipe.cpp \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804983020",
      "id" : 804983020,
      "in_reply_to_id" : 804950143,
      "line" : 846,
      "node_id" : "PRRC_kwDOABII584v-xDs",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 846,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 90,
      "pull_request_review_id" : 880646549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804983020/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T20:27:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804983020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804988164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988164"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done as of 9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T20:36:21Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804988164",
      "id" : 804988164,
      "in_reply_to_id" : 804814204,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-yUE",
      "original_commit_id" : "01840e6161396ed0ab30a122921f67b8dce45499",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : 18,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : null,
      "pull_request_review_id" : 880653946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988164/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-11T20:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804988455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988455"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done as of 9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T20:36:50Z",
      "diff_hunk" : "@@ -1622,6 +1630,10 @@ AC_MSG_CHECKING([whether to build bitcoin-util])\n AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test $build_bitcoin_util = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_util)\n \n+AC_MSG_CHECKING([whether to build experimental bitcoin-chainstate])\n+AM_CONDITIONAL([BUILD_BITCOIN_CHAINSTATE], [test x$build_bitcoin_chainstate = xyes])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804988455",
      "id" : 804988455,
      "in_reply_to_id" : 804945496,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-yYn",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 1634,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 880654501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988455/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T20:36:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804988455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804989115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804989115"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Comment removed as of 9050346f04d0435ad71d93ba1df4f5c126c0337b\r\nAdded to \"Project-wide TODOs\": https://github.com/bitcoin/bitcoin/issues/24303",
      "commit_id" : "9050346f04d0435ad71d93ba1df4f5c126c0337b",
      "created_at" : "2022-02-11T20:38:05Z",
      "diff_hunk" : "@@ -764,6 +768,102 @@ bitcoin_util_LDADD = \\\n bitcoin_util_LDADD += $(BOOST_LIBS)\n #\n \n+# bitcoin-chainstate binary #\n+#\n+# TODO: Remove blockfilter.cpp and index/blockfilterindex.cpp after merge of\n+#       \"Improve Indices on pruned nodes via prune blockers\" #21726",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804989115",
      "id" : 804989115,
      "in_reply_to_id" : 804947111,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v-yi7",
      "original_commit_id" : "da9056423079bcbdcfb23133a6063c37469d58b1",
      "original_line" : 774,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 880655528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804989115/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T20:38:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804989115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   }
]
