[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804068683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What would happen if this function was empty? If it builds, then the changes here are minimal and build-system only and wouldn't need to concern itself with (C++) code yet.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:13:30Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804068683",
      "id" : 804068683,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584v7R1L",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 44,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804068683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wouldn't the code be easier to read by replacing this with `return;` and letting a destructor of an object that lives in this scope take care of the cleanup?",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:18:10Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072128",
      "id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7SrA",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "wrong argument names?",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:19:08Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;\n+    } else {\n+        auto maybe_verify_error = VerifyLoadedChainstate(std::ref(chainman),\n+                                                         false,\n+                                                         false,\n+                                                         chainparams.GetConsensus(),\n+                                                         DEFAULT_CHECKBLOCKS,\n+                                                         DEFAULT_CHECKLEVEL,\n+                                                         /*get_unix_time_seconds=*/static_cast<int64_t(*)()>(GetTime));\n+        if (maybe_verify_error.has_value()) {\n+            std::cerr << \"Failed to verify loaded Chain state from your datadir.\" << std::endl;\n+            goto epilogue;\n+        }\n+    }\n+\n+    for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, nullptr)) {\n+            std::cerr << \"Failed to connect best block (\" << state.ToString() << \")\" << std::endl;\n+            goto epilogue;\n+        }\n+    }\n+\n+    std::cout << \"Hello! I'm going to print out some information about your datadir.\" << std::endl;\n+    std::cout << \"\\t\" << \"Path: \" << gArgs.GetDataDirNet() << std::endl;\n+    std::cout << \"\\t\" << \"Reindexing: \" << std::boolalpha << fReindex.load() << std::noboolalpha << std::endl;\n+    std::cout << \"\\t\" << \"Snapshot Active: \" << std::boolalpha << chainman.IsSnapshotActive() << std::noboolalpha << std::endl;\n+    std::cout << \"\\t\" << \"Active Height: \" << chainman.ActiveHeight() << std::endl;\n+    std::cout << \"\\t\" << \"Active IBD: \" << std::boolalpha << chainman.ActiveChainstate().IsInitialBlockDownload() << std::noboolalpha << std::endl;\n+    {\n+        CBlockIndex* tip = chainman.ActiveTip();\n+        if (tip) {\n+            std::cout << \"\\t\" << tip->ToString() << std::endl;\n+        }\n+    }\n+\n+    for (std::string line; std::getline(std::cin, line); ) {\n+        if (line.empty()) {\n+            std::cerr << \"Empty line found\" << std::endl;\n+            break;\n+        }\n+\n+        std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n+        CBlock& block = *blockptr;\n+\n+        if (!DecodeHexBlk(block, line)) {\n+            std::cerr << \"Block decode failed\" << std::endl;\n+            break;\n+        }\n+\n+        if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+            std::cerr << \"Block does not start with a coinbase\" << std::endl;\n+            break;\n+        }\n+\n+        uint256 hash = block.GetHash();\n+        {\n+            LOCK(cs_main);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+            if (pindex) {\n+                if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                    std::cerr << \"duplicate\" << std::endl;\n+                    break;\n+                }\n+                if (pindex->nStatus & BLOCK_FAILED_MASK) {\n+                    std::cerr << \"duplicate-invalid\" << std::endl;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        {\n+            LOCK(cs_main);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n+            if (pindex) {\n+                UpdateUncommittedBlockStructures(block, pindex, chainparams.GetConsensus());\n+            }\n+        }\n+\n+        bool new_block;\n+        auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n+        RegisterSharedValidationInterface(sc);\n+        bool accepted = chainman.ProcessNewBlock(chainparams, blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712",
      "id" : 804072712,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7S0I",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 190,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : null,
      "pull_request_review_id" : 879388173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804072712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Would it be appropriate to add a CI job that enables --enable-experimental-util-chainstate?\r\n\r\nDo you need to add one? What about adding it to the existing nowallet task?",
      "created_at" : "2022-02-10T20:25:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035466827",
      "id" : 1035466827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849t_hL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035466827/reactions"
      },
      "updated_at" : "2022-02-10T20:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035466827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804077679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If it's empty, then we would be able to remove all files in `libbitcoinkernel_la_SOURCES` and it would still compile and link. It being not empty is to enforce that we've linked at least the set of files necessary for this functionality.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:26:24Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804077679",
      "id" : 804077679,
      "in_reply_to_id" : 804068683,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584v7UBv",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 44,
      "pull_request_review_id" : 879400703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804077679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804078881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unfortunately, with our codebase right now if we don't do the shutdown process in a very carefully sequenced way, there will be nullptr dereferences and other undefined behaviour.",
      "commit_id" : "1d9faa8fc7187c61a45764ea2e4c919f02b891d7",
      "created_at" : "2022-02-10T20:28:08Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804078881",
      "id" : 804078881,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7UUh",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879402362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T20:28:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804078881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed 518c876efe...1d9faa8fc7:\r\n- Addressed https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804072712",
      "created_at" : "2022-02-10T20:33:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035477804",
      "id" : 1035477804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uCMs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035477804/reactions"
      },
      "updated_at" : "2022-02-10T20:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035477804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke \r\n> Do you need to add one? What about adding it to the existing nowallet task?\r\n\r\nI'm happy to add it to the existing nowallet task if you think it's appropriate! Lmk!",
      "created_at" : "2022-02-10T20:34:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035479455",
      "id" : 1035479455,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uCmf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035479455/reactions"
      },
      "updated_at" : "2022-02-10T20:34:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035479455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804088493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't mean to reorder the sequence. It is just a suggestion to remove `goto`, which in my eyes is impossible to review. I am convinced that any code using `goto` can be rewritten in a way that doesn't use `goto` and is at the same time easier to read. I can look into this in the future, unless someone beats me to it.",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-10T20:42:02Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+#include <iostream> // for cout and shit\n+#include <functional> // for std::function\n+#include <filesystem>\n+\n+#include <node/chainstate.h>          // for LoadChainstate\n+#include <init/common.h>              // for SetGlobals, UnsetGlobals\n+#include <validation.h>               // for ChainstateManager, InitScriptExecutionCache, StopScriptCheckWorkerThreads, UpdateUncommittedBlockStructures, BlockManager, DEFAULT_CHECKBLOCKS, DEFAULT_CHECKLEVEL\n+#include <validationinterface.h>      // for GetMainSignals, cs_main, CMainSignals, RegisterSharedValidationInterface, UnregisterSharedValidationInterface, CValidationInterface\n+#include <core_io.h>                  // for DecodeHexBlk\n+#include <consensus/validation.h>     // for BlockValidationState\n+#include <chainparams.h>              // for Params, SelectParams, CChainParams\n+#include <node/blockstorage.h>        // for fReindex\n+#include <util/system.h>              // for gArgs, ArgsManager\n+#include <util/thread.h>              // for TraceThread\n+#include <scheduler.h>                // for CScheduler\n+#include <script/sigcache.h>          // for InitSignatureCache\n+\n+using node::fReindex;\n+using node::LoadChainstate;\n+using node::VerifyLoadedChainstate;\n+\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+// Adapted from rpc/mining.cpp\n+class submitblock_StateCatcher final : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    BlockValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+\n+int main(int argc, char* argv[]) {\n+    assert(argc == 2);\n+    std::filesystem::path abs_datadir = std::filesystem::absolute(argv[1]);\n+    std::filesystem::create_directories(abs_datadir);\n+    gArgs.ForceSetArg(\"-datadir\", abs_datadir.string());\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = Params();\n+\n+    init::SetGlobals();  // ECC_Start, etc.\n+\n+    // Initialize signatureCache cuz it's used by...\n+    //     <- VerifyECDSASignature\n+    //     <- CheckECDSASignature\n+    //     <- EvalChecksigPreTapscript\n+    //     <- EvalScript\n+    //     <- VerifyScript\n+    //     <- CScriptCheck::()\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitSignatureCache();\n+\n+    // Initialize g_scriptExecutionCache{,Hasher} cuz it's used by...\n+    //     <- CheckInputScripts\n+    //     <- ConnectBlock\n+    //     <- ConnectTip\n+    //     <- ActivateBestChainStep\n+    //     <- ActivateBestChain\n+    //     <- ProcessNewBlock\n+    InitScriptExecutionCache();\n+\n+    // START scheduler for RegisterSharedValidationInterface\n+    CScheduler scheduler{};\n+    // Start the lightweight task scheduler thread\n+    scheduler.m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { scheduler.serviceQueue(); });\n+\n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, std::chrono::minutes{1});\n+    // END scheduler for RegisterSharedValidationInterface\n+\n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n+    ChainstateManager chainman;\n+\n+    auto rv = LoadChainstate(false,\n+                             std::ref(chainman),\n+                             nullptr,\n+                             false,\n+                             chainparams.GetConsensus(),\n+                             false,\n+                             2 << 20,\n+                             2 << 22,\n+                             (450 << 20) - (2 << 20) - (2 << 22),\n+                             false,\n+                             false,\n+                             [](){ return false; });\n+    if (rv.has_value()) {\n+        std::cerr << \"Failed to load Chain state from your datadir.\" << std::endl;\n+        goto epilogue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804088493",
      "id" : 804088493,
      "in_reply_to_id" : 804072128,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584v7Wqt",
      "original_commit_id" : "518c876efe10be5271e218e026db6892c1936f19",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/bitcoin-chainstate.cpp",
      "position" : 108,
      "pull_request_review_id" : 879421212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T21:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804088493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm happy to add it to the existing nowallet task if you think it's appropriate! Lmk!\r\n\r\nYeah, I don't think there are any downsides and only upsides to it, right?",
      "created_at" : "2022-02-10T20:42:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035491348",
      "id" : 1035491348,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uFgU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035491348/reactions"
      },
      "updated_at" : "2022-02-10T20:42:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035491348",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From ci:\r\n\r\n```\r\nclientversion.cpp:19:10: fatal error: 'obj/build.h' file not found\r\n#include <obj/build.h>\r\n         ^~~~~~~~~~~~~\r\n1 error generated.",
      "created_at" : "2022-02-10T21:49:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1035557645",
      "id" : 1035557645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849uVsN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035557645/reactions"
      },
      "updated_at" : "2022-02-10T21:49:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035557645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804422582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in the ci commit: pls remove the @MarcoFalke ",
      "commit_id" : "e5579f11b702ad978cd4f672b362e6346c699234",
      "created_at" : "2022-02-11T07:59:57Z",
      "diff_hunk" : "@@ -259,13 +259,13 @@ task:\n     FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n \n task:\n-  name: '[no wallet] [bionic]'\n+  name: '[no wallet, libbitcoinkernel] [bionic]'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#discussion_r804422582",
      "id" : 804422582,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584v8oO2",
      "original_commit_id" : "d8f2e52387cb3572dc0a898a33f671aea65d78ad",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : ".cirrus.yml",
      "position" : 5,
      "pull_request_review_id" : 879860676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24304",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T07:59:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804422582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24301](https://github.com/bitcoin/bitcoin/pull/24301) (build: header-only Boost by fanquake)\n* [#24164](https://github.com/bitcoin/bitcoin/pull/24164) (build: Bump minimum required clang/libc++ to 8.0 by MarcoFalke)\n* [#24115](https://github.com/bitcoin/bitcoin/pull/24115) (ARMv8 SHA2 Intrinsics by prusnak)\n* [#23670](https://github.com/bitcoin/bitcoin/pull/23670) (build: Build test binaries in `make check`, not in `make` by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-02-11T12:04:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24304#issuecomment-1036146181",
      "id" : 1036146181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24304",
      "node_id" : "IC_kwDOABII5849wlYF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036146181/reactions"
      },
      "updated_at" : "2022-02-11T12:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036146181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
