[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25109](https://github.com/bitcoin/bitcoin/pull/25109) (Strengthen AssertLockNotHeld assertions by ajtowns)\n* [#24931](https://github.com/bitcoin/bitcoin/pull/24931) (Strengthen thread safety assertions by ajtowns)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-02-17T08:18:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1042683448",
      "id" : 1042683448,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII584-JhY4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042683448/reactions"
      },
      "updated_at" : "2022-05-12T20:33:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042683448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810664739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810664739"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c1349291159b97de03160dfe4cbd9be7053b9dba maybe, if I understand correctly:\r\n```diff\r\n      * Wait for readiness for input (recv) or output (send).\r\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\r\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\r\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\r\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\r\n      * indicates which of the requested events occurred (`ERR` will be added, even if\r\n      * not requested, if an exceptional event occurs on the socket).\r\n-     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\r\n-     * @return true on success and false otherwise\r\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\r\n      */\r\n```\r\n",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T18:20:17Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810664739",
      "id" : 810664739,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII584wUcMj",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 144,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 36,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810664739/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810664739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fc4bfdf maybe, if I understand correctly:\r\n\r\n```diff\r\n-     * to the events that actually occur.\r\n-     * A timeout is indicated by return value of `true` and all `what[].occurred`\r\n-     * being set to 0.\r\n-     * @return true on success and false otherwise\r\n+     * for the events that actually occurred.\r\n+     * @return true on success (or timeout, if all `what[].occurred` are returned as 0), false otherwise\r\n      */\r\n```\r\n",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:05:45Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.\n+     * @param[in,out] what Wait for the requested events on these sockets and set `occurred`\n+     * to the events that actually occur.\n+     * A timeout is indicated by return value of `true` and all `what[].occurred`\n+     * being set to 0.\n+     * @return true on success and false otherwise\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670150",
      "id" : 810670150,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII584wUdhG",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 199,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 91,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fc4bfdf s/much/long|amount of time/",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:06:36Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670249",
      "id" : 810670249,
      "line" : 193,
      "node_id" : "PRRC_kwDOABII584wUdip",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 193,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 85,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670249/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fc4bfdf the writing here seems ambiguous to me as to whether \"not\" applies only to \"destroyed\" or also to \"the underlying socket closed\"",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:09:10Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670587",
      "id" : 810670587,
      "line" : 184,
      "node_id" : "PRRC_kwDOABII584wUdn7",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 184,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 76,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670587/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674255"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674255"
         }
      },
      "author_association" : "MEMBER",
      "body" : "af45eee `what` is an in-param\r\n```suggestion\r\n    void SocketHandlerListening(const Sock::WaitData& what);\r\n```",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:40:04Z",
      "diff_hunk" : "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerListening(const std::set<SOCKET>& recv_set);\n+    void SocketHandlerListening(Sock::WaitData& what);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674255",
      "id" : 810674255,
      "line" : 1018,
      "node_id" : "PRRC_kwDOABII584wUehP",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1018,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 55,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674255/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "af45eee `what` is an in-param\r\n```suggestion\r\nvoid CConnman::SocketHandlerListening(const Sock::WaitData& what);\r\n```",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:40:39Z",
      "diff_hunk" : "@@ -1659,13 +1537,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n     }\n }\n \n-void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n+void CConnman::SocketHandlerListening(Sock::WaitData& what)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674375",
      "id" : 810674375,
      "line" : 1540,
      "node_id" : "PRRC_kwDOABII584wUejH",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1540,
      "original_position" : 226,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 226,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674375/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "af45eee `what` is an in-param\r\n```suggestion\r\n    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what);\r\n```",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:43:23Z",
      "diff_hunk" : "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674678",
      "id" : 810674678,
      "line" : 1012,
      "node_id" : "PRRC_kwDOABII584wUen2",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1012,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 47,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674678/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674714"
         }
      },
      "author_association" : "MEMBER",
      "body" : "af45eee `what` is an in-param\r\n```suggestion\r\nvoid CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\r\n```",
      "commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "created_at" : "2022-02-20T19:43:53Z",
      "diff_hunk" : "@@ -1407,170 +1406,46 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        what.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return what;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::WaitData what;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        what = GenerateWaitSockets(snap.Nodes());\n+        if (what.empty() || !what.begin()->first->WaitMany(timeout, what)) {\n+            interruptNet.sleep_for(timeout);\n+        }\n \n         // Service (send/receive) each of the already connected nodes.\n-        SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n+        SocketHandlerConnected(snap.Nodes(), what);\n     }\n \n     // Accept new connections from listening sockets.\n-    SocketHandlerListening(recv_set);\n+    SocketHandlerListening(what);\n }\n \n-void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                      const std::set<SOCKET>& recv_set,\n-                                      const std::set<SOCKET>& send_set,\n-                                      const std::set<SOCKET>& error_set)\n+void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674714",
      "id" : 810674714,
      "line" : 1448,
      "node_id" : "PRRC_kwDOABII584wUeoa",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1448,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 201,
      "pull_request_review_id" : 888069918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674714/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-20T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674714",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`af45eeea03...c9420b3cce`: address suggestions",
      "created_at" : "2022-03-10T10:17:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1063891023",
      "id" : 1063891023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII584_abBP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063891023/reactions"
      },
      "updated_at" : "2022-03-10T10:17:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063891023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562424"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:17:59Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562424",
      "id" : 823562424,
      "in_reply_to_id" : 810664739,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII584xFpC4",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 154,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 38,
      "pull_request_review_id" : 905612560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:17:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562583"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:18:09Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.\n+     * @param[in,out] what Wait for the requested events on these sockets and set `occurred`\n+     * to the events that actually occur.\n+     * A timeout is indicated by return value of `true` and all `what[].occurred`\n+     * being set to 0.\n+     * @return true on success and false otherwise\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562583",
      "id" : 823562583,
      "in_reply_to_id" : 810670150,
      "line" : 208,
      "node_id" : "PRRC_kwDOABII584xFpFX",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 208,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : 92,
      "pull_request_review_id" : 905612763,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562583/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:18:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:18:17Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562731",
      "id" : 823562731,
      "in_reply_to_id" : 810670249,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpHr",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 193,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : null,
      "pull_request_review_id" : 905612953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562731/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:18:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562898"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Reworded.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:18:29Z",
      "diff_hunk" : "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562898",
      "id" : 823562898,
      "in_reply_to_id" : 810670587,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpKS",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 184,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/util/sock.h",
      "position" : null,
      "pull_request_review_id" : 905613183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562898/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:18:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562992"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:18:36Z",
      "diff_hunk" : "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerListening(const std::set<SOCKET>& recv_set);\n+    void SocketHandlerListening(Sock::WaitData& what);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562992",
      "id" : 823562992,
      "in_reply_to_id" : 810674255,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpLw",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1018,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 905613319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562992/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:18:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563225"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:18:52Z",
      "diff_hunk" : "@@ -1659,13 +1537,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n     }\n }\n \n-void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n+void CConnman::SocketHandlerListening(Sock::WaitData& what)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563225",
      "id" : 823563225,
      "in_reply_to_id" : 810674375,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpPZ",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1540,
      "original_position" : 226,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 905613662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:19:02Z",
      "diff_hunk" : "@@ -1407,170 +1406,46 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        what.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return what;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::WaitData what;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        what = GenerateWaitSockets(snap.Nodes());\n+        if (what.empty() || !what.begin()->first->WaitMany(timeout, what)) {\n+            interruptNet.sleep_for(timeout);\n+        }\n \n         // Service (send/receive) each of the already connected nodes.\n-        SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n+        SocketHandlerConnected(snap.Nodes(), what);\n     }\n \n     // Accept new connections from listening sockets.\n-    SocketHandlerListening(recv_set);\n+    SocketHandlerListening(what);\n }\n \n-void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                      const std::set<SOCKET>& recv_set,\n-                                      const std::set<SOCKET>& send_set,\n-                                      const std::set<SOCKET>& error_set)\n+void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563382",
      "id" : 823563382,
      "in_reply_to_id" : 810674714,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpR2",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1448,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 905613872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563382/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:19:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563526"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-03-10T10:19:13Z",
      "diff_hunk" : "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563526",
      "id" : 823563526,
      "in_reply_to_id" : 810674678,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xFpUG",
      "original_commit_id" : "af45eeea037770229b7358b93d4cb8e256d7de19",
      "original_line" : 1012,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 905614116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563526/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-10T10:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-26T10:07:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1109606521",
      "id" : 1109606521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII585CI0B5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1109606521/reactions"
      },
      "updated_at" : "2022-04-26T10:07:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1109606521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`c9420b3cce...ca8dcfabb7`: rebase due to conflicts\r\n\r\nInvalidates ACK from @jonatack \r\n",
      "created_at" : "2022-04-27T15:55:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1111171482",
      "id" : 1111171482,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII585COyGa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111171482/reactions"
      },
      "updated_at" : "2022-04-27T15:55:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111171482",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r860680159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860680159"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you agree, maybe change the names of the `what` method params to ones that are more descriptive and unique (e.g. `socket_data`, `wait_sockets`, `wait_data`, `sockets_ready_for_io`, etc.) and for the `what` localvars, either the same or i.e. `s` where unimportant.",
      "commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "created_at" : "2022-04-28T09:29:10Z",
      "diff_hunk" : "@@ -1013,23 +994,17 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set)\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r860680159",
      "id" : 860680159,
      "line" : 1005,
      "node_id" : "PRRC_kwDOABII584zTO_f",
      "original_commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "original_line" : 1005,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 53,
      "pull_request_review_id" : 956134590,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860680159/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-28T09:47:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860680159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-16T13:05:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1127648192",
      "id" : 1127648192,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII585DNovA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1127648192/reactions"
      },
      "updated_at" : "2022-05-16T13:05:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1127648192",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`ca8dcfabb7...6747729cb8`: rebase due to conflicts and rename `WaitData` to `EventsPerSock`\r\n\r\nInvalidates ACK from @jonatack",
      "created_at" : "2022-05-19T13:22:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1131682426",
      "id" : 1131682426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
      "node_id" : "IC_kwDOABII585DdBp6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131682426/reactions"
      },
      "updated_at" : "2022-05-19T13:22:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131682426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r877052961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877052961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed to `EventsPerSock`. That map contains, per socket, the requested and the occurred events (just like `poll(2)`). And the variables then become the blatant `events_per_sock` ;-)",
      "commit_id" : "6747729cb850914d925f9c4a7a809fff547da746",
      "created_at" : "2022-05-19T13:25:31Z",
      "diff_hunk" : "@@ -1013,23 +994,17 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set)\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r877052961",
      "id" : 877052961,
      "in_reply_to_id" : 860680159,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840RsQh",
      "original_commit_id" : "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "original_line" : 1005,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 978569277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877052961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-19T13:25:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877052961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
