[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809712076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809712076"
         }
      },
      "author_association" : "MEMBER",
      "body" : "CI fails sequentially. Maybe due to this?",
      "commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "created_at" : "2022-02-18T06:37:50Z",
      "diff_hunk" : "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809712076",
      "id" : 809712076,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII584wQznM",
      "original_commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "original_line" : 304,
      "original_position" : 460,
      "original_start_line" : null,
      "path" : "src/test/getarg_tests.cpp",
      "position" : 460,
      "pull_request_review_id" : 886878567,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809712076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T06:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809712076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809805365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809805365"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line turns off the logger buffering feature: https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L68\r\n\r\nso that https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L267 is `false` and the logger callbacks are called\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L278-L280\r\n\r\nI have tried to run locally `src/test/test_bitcoin --log_level=all --run_test=getarg_tests` and it passes. However, ` src/test/test_bitcoin` does not pass for me so you are right and it can be reasonably reproduced. Also as one may expect variable `s` is empty (https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/test/getarg_tests.cpp#L307).",
      "commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "created_at" : "2022-02-18T09:11:43Z",
      "diff_hunk" : "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809805365",
      "id" : 809805365,
      "in_reply_to_id" : 809712076,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII584wRKY1",
      "original_commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "original_line" : 304,
      "original_position" : 460,
      "original_start_line" : null,
      "path" : "src/test/getarg_tests.cpp",
      "position" : 460,
      "pull_request_review_id" : 887006984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809805365/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T09:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809805365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809890814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809890814"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So the error is because of this line https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L53 as `m_print_to_file` is `true` sometimes so the callback is not called.",
      "commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "created_at" : "2022-02-18T10:52:15Z",
      "diff_hunk" : "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809890814",
      "id" : 809890814,
      "in_reply_to_id" : 809712076,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII584wRfP-",
      "original_commit_id" : "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "original_line" : 304,
      "original_position" : 460,
      "original_start_line" : null,
      "path" : "src/test/getarg_tests.cpp",
      "position" : 460,
      "pull_request_review_id" : 887122676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809890814/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T10:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809890814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   }
]
