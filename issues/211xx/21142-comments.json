[
   {
      "author_association" : "MEMBER",
      "body" : "Not ready, please review #21062 first.",
      "created_at" : "2021-02-10T17:55:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776897969",
      "id" : 776897969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3Njg5Nzk2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-10T17:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776897969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21380 (versionbits: Refactor and add fuzzing harness by ajtowns)\n* #21377 (Speedy trial support for versionbits by ajtowns)\n* #19259 (fuzz: Add fuzzing harness for LoadMempool(...) and DumpMempool(...) by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-02-10T19:09:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776943189",
      "id" : 776943189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3Njk0MzE4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-15T14:17:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776943189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: very nice to see the mempool logic more thoroughly fuzzed!",
      "created_at" : "2021-02-10T21:06:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777035750",
      "id" : 777035750,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3NzAzNTc1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-10T21:06:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777035750",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2021-02-11T13:51:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777472660",
      "id" : 777472660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3NzQ3MjY2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-11T13:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777472660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK e4e253d73007e0b680d2a473327c6fd66de4d86c\r\n\r\n* Very nice to see the mempool logic more thoroughly fuzzed!\r\n* Achieves good coverage quickly.\r\n* Touches only `src/test/fuzz/`.",
      "created_at" : "2021-02-28T20:13:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-787514951",
      "id" : 787514951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4NzUxNDk1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-28T20:13:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787514951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://bitcoincore.reviews/21142",
      "created_at" : "2021-03-12T08:21:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-797320050",
      "id" : 797320050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzMyMDA1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T08:21:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797320050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-03-15T18:54:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-799670491",
      "id" : 799670491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5OTY3MDQ5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-15T18:54:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799670491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was wondering if RBF'ed transactions would be in `removed`, but then realized it wouldn't hit RBF stuff since you only use inputs from `outpoints`. Maybe add `Assert(res.m_replaced_transactions.size() == 0)`?",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T00:20:26Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635",
      "id" : 595626635,
      "line" : 178,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYyNjYzNQ==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 178,
      "original_position" : 175,
      "original_start_line" : 174,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 178,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 177,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Naming suggestions for clarity\r\n\r\n```suggestion\r\n        const auto insert_tx = [](auto& created_in_tx, auto& spent_by_tx, const auto& tx) {\r\n            for (size_t i{0}; i < tx->vout.size(); ++i) {\r\n                Assert(created_in_tx.emplace(tx->GetHash(), i).second);\r\n            }\r\n            for (const auto& in : tx->vin) {\r\n                Assert(spent_by_tx.insert(in.prevout).second);\r\n            }\r\n        };\r\n        // Add created outpoints, remove spent outpoints\r\n        {\r\n            std::set<COutPoint> spent_outpoints;\r\n            for (const auto& removed_tx : removed) {\r\n                insert_tx(/* created_in_tx */ spent, /* spent_by_tx */ outpoints, /* tx */ removed_tx);\r\n            }\r\n            for (const auto& added_tx : added) {\r\n                insert_tx(/* created_in_tx */ outpoints, /* spent_by_tx */ spent, /* tx */ added_tx);\r\n            }\r\n            for (const auto& p : spent) {\r\n```",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T00:35:59Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907",
      "id" : 595631907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzMTkwNw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 198,
      "original_position" : 195,
      "original_start_line" : 178,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why does `num_out` need to be in the range [1, outpoints.size()]?",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T00:52:52Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690",
      "id" : 595637690,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzY5MA==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : 114,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not have an `amount_left` and pull amounts from `ConsumeIntegralInRange<CAmount>(0, amount_left)`?",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T00:53:36Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917",
      "id" : 595637917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzkxNw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 140,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-17T14:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Question: I know it's a test, but does it make sense for any of these values to be 0? ð® I'm also wondering why 200 is the max instead of something closer to the default values?",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T01:10:33Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616",
      "id" : 595643616,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY0MzYxNg==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : 94,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, renamed `pop` to `spent`. `tx_outs` to `created_by_tx`. `tx_ins` to `spent_by_tx`.",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T14:50:26Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657",
      "id" : 596090657,
      "in_reply_to_id" : 595631907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MDY1Nw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 198,
      "original_position" : 195,
      "original_start_line" : 178,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614402773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Limited to 2*outputs.size",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T14:50:53Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187",
      "id" : 596091187,
      "in_reply_to_id" : 595637690,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTE4Nw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : 114,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614403360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:50:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made it to pick the fee instead of the output amounts. They are now all constant for each tx",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T14:51:49Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996",
      "id" : 596091996,
      "in_reply_to_id" : 595637917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTk5Ng==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 140,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614404528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-17T14:51:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "* I want to set it small enough so that the fuzz engine can quickly hit the limit without having to produce megabytes of transactions first.\r\n* Changed all maxima to be multiples of the default values, except for maxmempool, which is in [0,200]",
      "commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "created_at" : "2021-03-17T14:54:35Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609",
      "id" : 596094609,
      "in_reply_to_id" : 595643616,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5NDYwOQ==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : 94,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614408154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-17T14:55:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
