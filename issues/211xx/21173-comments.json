[
   {
      "author_association" : "MEMBER",
      "body" : "One nice property of the current version in `master` is that it doesn't use pointer arithmetic.\r\n\r\nFrom the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-keep-use-of-pointers-simple-and-straightforward):\r\n\r\n> Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.",
      "created_at" : "2021-02-15T10:52:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779138472",
      "id" : 779138472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3OTEzODQ3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-15T10:52:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779138472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The compiler should be able to produce the same binary with the pointer arithmetic replaced by `std::string::operator[](unsinged)`, no?",
      "created_at" : "2021-02-15T11:08:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779148414",
      "id" : 779148414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3OTE0ODQxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-15T11:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779148414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I didn't know there was no pointer arithmetic in `master`! I've played with a few variants:\r\n\r\n### Variant 1\r\n```cpp\r\n// 63,621,136.00 ns/op\r\nauto it = rv.begin();\r\nfor (uint8_t v: s) {\r\n    *it++ = hexmap[v >> 4];\r\n    *it++ = hexmap[v & 15];\r\n}\r\nassert(it == rv.end());\r\n```\r\n\r\nThis has basically has the same speed for me. `it` is basically a pointer in disguise, so I'm not sure anything is gained here. Having a simple `assert` after the loop is nice though.\r\n\r\n### Variant 2\r\n\r\nOr this, but it's a bit slower and not better in my opinion:\r\n\r\n```cpp\r\n// 65,479,162.00 ns/op\r\nsize_t i = 0;\r\nfor (uint8_t v: s) {\r\n    rv[i++] = hexmap[v >> 4];\r\n    rv[i++] = hexmap[v & 15];\r\n}\r\nassert(i == rv.size());\r\n```\r\n\r\n### Variant 3\r\nOr another variant:\r\n\r\n```cpp\r\n// 65,187,171.00 ns/op\r\nfor (size_t i = 0; i < rv.size(); i += 2) {\r\n    auto v = s[i / 2];\r\n    rv[i] = hexmap[v >> 4];\r\n    rv[i + 1] = hexmap[v & 15];\r\n};\r\n```\r\n",
      "created_at" : "2021-02-15T11:49:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779170806",
      "id" : 779170806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3OTE3MDgwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-15T11:49:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779170806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576354897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576354897"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it allowed to write to a `std::string`'s backing memory? I vaguely remember it was not, but maybe that was pre C++11.",
      "commit_id" : "987192d5fc2e1b5f390c909e9798ed13362afe47",
      "created_at" : "2021-02-15T17:58:51Z",
      "diff_hunk" : "@@ -579,13 +579,13 @@ std::string Capitalize(std::string str)\n \n std::string HexStr(const Span<const uint8_t> s)\n {\n-    std::string rv;\n+    std::string rv(s.size() * 2, '\\0');\n     static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n                                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(s.size() * 2);\n+    auto* out = rv.data();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576354897",
      "id" : 576354897,
      "line" : 585,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NDg5Nw==",
      "original_commit_id" : "987192d5fc2e1b5f390c909e9798ed13362afe47",
      "original_line" : 585,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/util/strencodings.cpp",
      "position" : 9,
      "pull_request_review_id" : 590677536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-15T17:58:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576354897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm surprised this is so much faster. I mean, theoretically, `reserve` should effectively do this right?\r\n\r\nEdit: If I have to chose I think I like Variant 1 above most. Yes, an iterator is basically pointer arithmetic, but it looks cleaner than the pointer to `data()`, and \"proves\" it is allowed behavior.",
      "created_at" : "2021-02-15T17:59:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779376904",
      "id" : 779376904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3OTM3NjkwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-15T18:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779376904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576392149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576392149"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Before C++11 it was not guaranteed by the standard that std::string's memory is contiguous, but as far as I know all implementations did that anyways. It is certainly allowed since C++11",
      "commit_id" : "987192d5fc2e1b5f390c909e9798ed13362afe47",
      "created_at" : "2021-02-15T19:39:11Z",
      "diff_hunk" : "@@ -579,13 +579,13 @@ std::string Capitalize(std::string str)\n \n std::string HexStr(const Span<const uint8_t> s)\n {\n-    std::string rv;\n+    std::string rv(s.size() * 2, '\\0');\n     static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n                                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(s.size() * 2);\n+    auto* out = rv.data();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576392149",
      "id" : 576392149,
      "in_reply_to_id" : 576354897,
      "line" : 585,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM5MjE0OQ==",
      "original_commit_id" : "987192d5fc2e1b5f390c909e9798ed13362afe47",
      "original_line" : 585,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/util/strencodings.cpp",
      "position" : 9,
      "pull_request_review_id" : 590719286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-15T19:39:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576392149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`push_back` is actually really slow, even when reserve already prepared the capacity. For each call it needs to check capacity, increase the size, set the data, and maybe also a check if it is small-string optimization. With an pointer / iterator this is much cheaper. \r\n\r\nSee the generated assembler code here: https://godbolt.org/z/zv1aP6 For `HexStr_variant1` the compiler can generate a very tight loop, only a single branch, and it looks to me like clang++ even unrolls it. The push_back variant produces a lot more code",
      "created_at" : "2021-02-15T19:58:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779423323",
      "id" : 779423323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3OTQyMzMyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-15T19:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779423323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   }
]
