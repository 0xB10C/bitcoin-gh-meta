[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187078556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187078556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add batch support?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T15:24:18Z",
      "diff_hunk" : "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187078556",
      "id" : 187078556,
      "original_commit_id" : "f3f96027ebf05c267fb19e4bd37562c35dc025e3",
      "original_position" : 24,
      "path" : "src/logging.cpp",
      "position" : 24,
      "pull_request_review_id" : 118785692,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187078556",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nMy thoughts on your open questions:\r\n\r\n- Do we want this behavior by default?\r\n[JN] Yes\r\n- Do we want to allow an opt-out configuration option that makes log processing synchronous again\r\n[JN] Yes\r\n- The ring buffer implementation allows either overwriting existing data or blocking when at full capacity. In the case of logging, I've set it to block and wait for capacity instead of dropping messages. Does this seem right?\r\n[JN] I think there are at least three options here:\r\n    1. overwrite existing data\r\n    2. drop new messages\r\n    3. block\r\nI'd go with (2), but push a final message to the ring buffer saying `Logging buffer full - dropping new log messages`, and then when the ring buffer is accepting messages again, push a message saying `Logging buffer accepting new messages`. That makes it very clear to anyone reading the log that messages were dropped between timestamp A and timestamp B.",
      "created_at" : "2018-05-09T15:32:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387779854",
      "id" : 387779854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-09T15:32:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387779854",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK!\r\n\r\nAgree with @jnewbery regarding the open questions.\r\n\r\nBenchmarks would be interesting.",
      "created_at" : "2018-05-09T17:48:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387820199",
      "id" : 387820199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-09T17:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387820199",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Wouldn't blocking be the status-quo and thus preferable for now?",
      "created_at" : "2018-05-09T18:17:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387829283",
      "id" : 387829283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-09T18:17:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387829283",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192208"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do we really need the size type template parameter? Especially if you are passing an int through as a value. `size_t` makes more sense to me since std::array is size_t and signed sizes (int) also make no sense.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:17:09Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192208",
      "id" : 187192208,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 23,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192208",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192592"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192592"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "constexpr ? I guess inline helps some here.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:19:09Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192592",
      "id" : 187192592,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 38,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192592",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193169"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it doesn't make sense why having these (`m_insert_at_idx`and `m_read_at_idx`) as std::atomic is necessary if they are protected by the mutex",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:22:18Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193169",
      "id" : 187193169,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 111,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193169",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193683"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if the object is movable it will be moved and the value will be empty already but if it's not movable and it's copied then I guess there's no big deal letting the data present? Seems unnecessary to construct an empty object in a free slot again.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:25:00Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;\n+\n+    /** Index of the next element to read. */\n+    std::atomic<ST> m_read_at_idx;\n+\n+    /** Set to signal that we should stop waiting for elements in, e.g., PollForOne(). */\n+    std::atomic<bool> m_stop_waiting;\n+\n+    /** Notifies when a read has happened. */\n+    std::condition_variable m_read_condvar;\n+\n+    /** Protects access to m_buffer, m_size, m_insert_at_idx, m_read_at_idx. */\n+    mutable std::mutex m_lock;\n+\n+    /**\n+     * Pop an element off the front of the buffer and return it. Assumes caller\n+     * holds m_lock.\n+     */\n+    value_type AssumeLockedPopFront()\n+    {\n+        assert(m_size > 0);\n+\n+        value_type data = std::move(m_buffer[m_read_at_idx]);\n+        m_buffer[m_read_at_idx] = value_type();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193683",
      "id" : 187193683,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 134,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193683",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187194522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187194522"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think having a move version of PushBack with const v& ref push back would make more sense to avoid unnecessary copying.\r\n`PushBack(value_type&& v)` and `PushBack(const value_type& v)` ",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:28:50Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187194522",
      "id" : 187194522,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 51,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187194522",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187197537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187197537"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`LogArgs& s` to avoid copies",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:45:26Z",
      "diff_hunk" : "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs s : log_buffer.PopAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187197537",
      "id" : 187197537,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 31,
      "path" : "src/logging.cpp",
      "position" : null,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187197537",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187199539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187199539"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I feel we should use dynamic/heap memory for this for the following reasons:\r\n\r\n1. This is only allocated once on start up and is of fixed size.\r\n2. Passing a large value to this array can potentially have 2 problems:\r\n   1. In the stack it can overflow (if used later by someone else)\r\n   2. In global/static data it will grow the executable size. \r\n\r\nAnyway just what I feel. Maybe std::array is okay in this case though. I'm just imagining uses of this class further down the line ",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-09T22:57:46Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187199539",
      "id" : 187199539,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 105,
      "path" : "src/ringbuffer.h",
      "position" : 104,
      "pull_request_review_id" : 118924109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187199539",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187394393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187394393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. Shouldn't `const value_type&` bind to both rvalues and lvalues, though?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T17:07:29Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187394393",
      "id" : 187394393,
      "in_reply_to_id" : 187194522,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 51,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119167054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187394393",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, agree. Fixed.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:14Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423121",
      "id" : 187423121,
      "in_reply_to_id" : 187192208,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 23,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119202230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423121",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:20Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423152",
      "id" : 187423152,
      "in_reply_to_id" : 187192592,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 38,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119202274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, fixed.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:28Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423208",
      "id" : 187423208,
      "in_reply_to_id" : 187193169,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 111,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119202339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423208",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree, fixed.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:39Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;\n+\n+    /** Index of the next element to read. */\n+    std::atomic<ST> m_read_at_idx;\n+\n+    /** Set to signal that we should stop waiting for elements in, e.g., PollForOne(). */\n+    std::atomic<bool> m_stop_waiting;\n+\n+    /** Notifies when a read has happened. */\n+    std::condition_variable m_read_condvar;\n+\n+    /** Protects access to m_buffer, m_size, m_insert_at_idx, m_read_at_idx. */\n+    mutable std::mutex m_lock;\n+\n+    /**\n+     * Pop an element off the front of the buffer and return it. Assumes caller\n+     * holds m_lock.\n+     */\n+    value_type AssumeLockedPopFront()\n+    {\n+        assert(m_size > 0);\n+\n+        value_type data = std::move(m_buffer[m_read_at_idx]);\n+        m_buffer[m_read_at_idx] = value_type();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423274",
      "id" : 187423274,
      "in_reply_to_id" : 187193683,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 134,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119202417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423274",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:49Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423322",
      "id" : 187423322,
      "in_reply_to_id" : 187194522,
      "original_commit_id" : "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "original_position" : 51,
      "path" : "src/ringbuffer.h",
      "position" : null,
      "pull_request_review_id" : 119202481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423322",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch, fixed.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T18:47:56Z",
      "diff_hunk" : "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs s : log_buffer.PopAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423354",
      "id" : 187423354,
      "in_reply_to_id" : 187197537,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 31,
      "path" : "src/logging.cpp",
      "position" : null,
      "pull_request_review_id" : 119202517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187446772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187446772"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm going to leave this as-is for now since I don't think it's a real problem, but if you have thoughts to the contrary I'm curious to hear.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T20:16:51Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187446772",
      "id" : 187446772,
      "in_reply_to_id" : 187199539,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 105,
      "path" : "src/ringbuffer.h",
      "position" : 104,
      "pull_request_review_id" : 119231039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187446772",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've pushed changes that address @donaloconnor's good feedback (thanks, Donal).\r\n\r\nStill trying to decide what to do re: blocking vs. dropping messages; I'm inclined towards the approach that @jnewbery suggests since it seems to be the safest.",
      "created_at" : "2018-05-10T20:30:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388176097",
      "id" : 388176097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-10T20:30:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388176097",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187450684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187450684"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds good to me thanks! I went a bit overboard with the comments anyway.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T20:30:42Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187450684",
      "id" : 187450684,
      "in_reply_to_id" : 187199539,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 105,
      "path" : "src/ringbuffer.h",
      "position" : 104,
      "pull_request_review_id" : 119235762,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187450684",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187451048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187451048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, I thought your feedback was very useful - thanks!",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-10T20:31:53Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187451048",
      "id" : 187451048,
      "in_reply_to_id" : 187199539,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 105,
      "path" : "src/ringbuffer.h",
      "position" : 104,
      "pull_request_review_id" : 119236189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-11T19:53:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187451048",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784319"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784319"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "consider making these template parameter names less abbreviated",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:07:06Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784319",
      "id" : 187784319,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 23,
      "path" : "src/ringbuffer.h",
      "position" : 23,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784319",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784407"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this is fine - if you want it on the heap you can alloc the entire `RingBuffer` on the heap",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:11:52Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784407",
      "id" : 187784407,
      "in_reply_to_id" : 187199539,
      "original_commit_id" : "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "original_position" : 105,
      "path" : "src/ringbuffer.h",
      "position" : 104,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784407",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784436"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this approach seems strange - why not just use another condition variable the same way you do when you push things to the buffer?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:14:02Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784436",
      "id" : 187784436,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 79,
      "path" : "src/ringbuffer.h",
      "position" : 79,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784436",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "inline seems overkill here?\r\n",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:19:43Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784541",
      "id" : 187784541,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 33,
      "path" : "src/ringbuffer.h",
      "position" : 33,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784541",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784547"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "sufficient here to just do the size check?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:20:33Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784547",
      "id" : 187784547,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 97,
      "path" : "src/ringbuffer.h",
      "position" : 97,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784547",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784588"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "also - if you wanna do the size_t stuff tradition / precedence would suggest doing `using size_type = size_t`",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:22:53Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784588",
      "id" : 187784588,
      "in_reply_to_id" : 187784541,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 33,
      "path" : "src/ringbuffer.h",
      "position" : 33,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784588",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "more simply written as `if(m_size == S) Increment else ++size ?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:26:06Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784616",
      "id" : 187784616,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 60,
      "path" : "src/ringbuffer.h",
      "position" : 60,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784616",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784633"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if you are doing this just to handle interruption on shutdown - you can do the boost::thread::interrupt() boost::condition_var and catch a boost::thread_interrupted exception instead of polling in a loop - its another option",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:27:04Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784633",
      "id" : 187784633,
      "in_reply_to_id" : 187784436,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 79,
      "path" : "src/ringbuffer.h",
      "position" : 79,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784633",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784645"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "why a pointer here? if you want to show that this function can fail consider this signature: `bool PollForOne(value_type& popped)` ",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:28:34Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784645",
      "id" : 187784645,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 77,
      "path" : "src/ringbuffer.h",
      "position" : 77,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784645",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "needs update",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:28:43Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784650",
      "id" : 187784650,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 75,
      "path" : "src/ringbuffer.h",
      "position" : 75,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784650",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784723"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "afaict this method is unsafe right now `AssumeLockedPopFront` (called internally) will assert if the buffer is empty - and there is no way currently to guarantee that I only call this method when there is something to pop",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:33:31Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784723",
      "id" : 187784723,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 39,
      "path" : "src/ringbuffer.h",
      "position" : 39,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784723",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784818"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "consider dropping m_read_at_idx - it can be expressed as a method `(m_insert_at_idx + m_size) % MaxSize()` - one less variable to ensure that you properly update",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:39:57Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784818",
      "id" : 187784818,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 29,
      "path" : "src/ringbuffer.h",
      "position" : 29,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "can preallocate to `m_size`",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:43:48Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784855",
      "id" : 187784855,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 95,
      "path" : "src/ringbuffer.h",
      "position" : 95,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784855",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "also - you could just do this as two range copies one from read_at to min(read_at + m_size, S) and another from 0 to m_size - the size of the stuff you copied previously",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:45:52Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784881",
      "id" : 187784881,
      "in_reply_to_id" : 187784547,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 97,
      "path" : "src/ringbuffer.h",
      "position" : 97,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784881",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784950"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "you might as well make this a class instead of essentially a static object. who knows when we might want to have separate instances logging different modules to different log files and its very easy to just make this a class now",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:51:27Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784950",
      "id" : 187784950,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 15,
      "path" : "src/logging.cpp",
      "position" : 15,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784950",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784956"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "much clearer to just have a start method, or RAII the class if you can?",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:52:04Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784956",
      "id" : 187784956,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 38,
      "path" : "src/logging.cpp",
      "position" : 38,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think you want to `std::forward` here and declare the arg `const std::string&&`",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-12T22:52:46Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784965",
      "id" : 187784965,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 41,
      "path" : "src/logging.cpp",
      "position" : 41,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784965",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "to handle shutdown safely you need to have a way to interrupt writers who might be waiting for empty space too",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T15:52:34Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805383",
      "id" : 187805383,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 67,
      "path" : "src/ringbuffer.h",
      "position" : 67,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805383",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805588"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if for whatever reason there are more logs generated after you've flushed in this method - they wont ever get to the file.\r\nI think you mentioned somewhere having an option to enable synchronous logging. You should probably flip that flag that here so if something happens to get logged after the async logger is shut down it makes its way into the file, added benefit that you can be a bit less careful about when in the shutdown sequence the logger is terminated",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T15:59:01Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));\n+    }\n+\n+    void Shutdown()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805588",
      "id" : 187805588,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 44,
      "path" : "src/logging.cpp",
      "position" : 44,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805588",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think if you do shutdown here it will only work for coind but not qt but in init.cpp it will for both? not entirely sure though\r\n",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T16:00:44Z",
      "diff_hunk" : "@@ -191,5 +191,10 @@ int main(int argc, char* argv[])\n     // Connect bitcoind signal handlers\n     noui_connect();\n \n-    return (AppInit(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n+    int status = AppInit(argc, argv);\n+\n+    if (!status) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805627",
      "id" : 187805627,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 7,
      "path" : "src/bitcoind.cpp",
      "position" : 7,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805931"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh - why do in both? if you are just concerned about capturing all logs, see my comment on the Shutdown() method below",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T16:12:35Z",
      "diff_hunk" : "@@ -291,6 +291,7 @@ void Shutdown()\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n+    async_logging::Shutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805931",
      "id" : 187805931,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805931",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806063"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "same thing as in a prior comment - use a forward with an rvalue reference",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T16:18:11Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806063",
      "id" : 187806063,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 56,
      "path" : "src/ringbuffer.h",
      "position" : 56,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think you are doing an unnecessary copy here",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-13T16:19:04Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806094",
      "id" : 187806094,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 83,
      "path" : "src/ringbuffer.h",
      "position" : 83,
      "pull_request_review_id" : 119560417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-13T16:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187972826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187972826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that we're trying to move away from `boost`'s thread stuff, but I think your general suggestion holds - we can probably just flip a condition variable + boolean in `Shutdown()` to get the same sort of behavior. The polling was a pretty gross hack.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:25:52Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187972826",
      "id" : 187972826,
      "in_reply_to_id" : 187784436,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 79,
      "path" : "src/ringbuffer.h",
      "position" : 79,
      "pull_request_review_id" : 119857563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:25:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187972826",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187973666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187973666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yeah, that totally makes sense.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:27:55Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187973666",
      "id" : 187973666,
      "in_reply_to_id" : 187784645,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 77,
      "path" : "src/ringbuffer.h",
      "position" : 77,
      "pull_request_review_id" : 119858604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187973666",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that works. Let's say we instantiate a buffer with `MaxSize() == 10` and add 5 elements, making `m_insert_at_idx == 5`. I'd want to start reading from index 0, but your formula gives me `5 + 4 % 10` = 9, which isn't right. Maybe I'm missing something here.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:34:21Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976253",
      "id" : 187976253,
      "in_reply_to_id" : 187784818,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 29,
      "path" : "src/ringbuffer.h",
      "position" : 29,
      "pull_request_review_id" : 119861738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:34:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976253",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, fair point.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:35:02Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976482",
      "id" : 187976482,
      "in_reply_to_id" : 187784950,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 15,
      "path" : "src/logging.cpp",
      "position" : 15,
      "pull_request_review_id" : 119862020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:35:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976482",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yeah, thanks.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:36:29Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976982",
      "id" : 187976982,
      "in_reply_to_id" : 187784965,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 41,
      "path" : "src/logging.cpp",
      "position" : 41,
      "pull_request_review_id" : 119862633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:36:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976982",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187977225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187977225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, good point.",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:37:12Z",
      "diff_hunk" : "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));\n+    }\n+\n+    void Shutdown()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187977225",
      "id" : 187977225,
      "in_reply_to_id" : 187805588,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 44,
      "path" : "src/logging.cpp",
      "position" : 44,
      "pull_request_review_id" : 119862931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:37:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187977225",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187978434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187978434"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh sorry - i flipped them - `m_insert_at_idx == (m_read_at_idx + m_size) % MaxSize()`\r\n",
      "commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "created_at" : "2018-05-14T14:40:26Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187978434",
      "id" : 187978434,
      "in_reply_to_id" : 187784818,
      "original_commit_id" : "354aac5a692ae727480821b6174b25fbc0134b21",
      "original_position" : 29,
      "path" : "src/ringbuffer.h",
      "position" : 29,
      "pull_request_review_id" : 119864479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
      "updated_at" : "2018-05-14T14:40:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187978434",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the thorough review and good feedback here, @skeees. I'll address most of your comments in an upcoming push.\r\n\r\nSadly, the benchmarks aren't looking good on this one. Either my implementation of the ringbuffer is dog slow or this Concept is eminently NACKable. \r\n\r\nDoing an IBD to height 250,000 from one (chain-synced) virtual machine to another (unsynced) over my local network, this PR performed roughly 77% _slower_ than master `196c5a` (9m31s vs. 16m57s). That's a baffling deficit but I've been able to reproduce it consistently.\r\n\r\nI'm going to try applying @TheBlueMatt's previous work (https://github.com/bitcoinfibre/bitcoinfibre/commit/6b6a3aef0663775b63bac7d0aa07ec5fc4eb9fc9) to master and see if that performs any better. If it doesn't, I'm going to just abandon async logging and continue work on a periodic benchmarking system.",
      "created_at" : "2018-05-14T14:56:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388847174",
      "id" : 388847174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-14T14:56:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388847174",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd do some profiling / tweaking before you abandon this entirely. I'd think this should be at a minimum equivalent - and potentially substantially faster than the current way things are logged.",
      "created_at" : "2018-05-14T15:16:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388854505",
      "id" : 388854505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-14T15:16:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388854505",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@TheBlueMatt's patch (https://github.com/jamesob/bitcoin/commit/7ab904ad933a7cec5c29cf4daf3f91efff93c676) is better than mine, but still a minute (i.e. 10%) slower than `master` on an SSD:\r\n\r\n### `master`\r\n```\r\nvagrant@bench:/tmp/2018-05-09-master-6186a/bitcoin$ time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=250000\r\n\r\nreal    9m33.070s\r\nuser    8m9.261s\r\nsys     3m47.927s\r\n```\r\n\r\n### `bluematt-asynclog`\r\n```\r\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ rm -rf data && mkdir data && time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoi\r\nn.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=250000\r\n\r\nreal    10m26.887s\r\nuser    9m3.219s\r\nsys     4m49.201s\r\n```",
      "created_at" : "2018-05-14T18:59:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388926277",
      "id" : 388926277,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
      "updated_at" : "2018-05-14T18:59:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388926277",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
