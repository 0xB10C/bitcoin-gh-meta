[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems the `lint` target fails in the Travis CI.",
      "created_at" : "2020-05-05T08:46:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-623933451",
      "id" : 623933451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18877",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzkzMzQ1MQ==",
      "updated_at" : "2020-05-05T08:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623933451",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18698 (Make g_chainman internal to validation by MarcoFalke)\n* #18638 (net: Use mockable time for ping/pong, add tests by MarcoFalke)\n* #18242 (Add BIP324 encrypted p2p transport de-/serializer (only used in tests) by jonasschnelli)\n* #18000 (Index for UTXO Set Statistics by fjahr)\n* #17479 (Return BlockValidationState from ProcessNewBlock if CheckBlock/AcceptBlock fails by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-05T09:25:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-623950453",
      "id" : 623950453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18877",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzk1MDQ1Mw==",
      "updated_at" : "2020-05-06T03:03:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623950453",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420393465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420393465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`g_enabled_filter_types.count(BlockFilterType::BASIC)`? otherwise `#include <algorithm>`.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-05T20:42:43Z",
      "diff_hunk" : "@@ -986,6 +987,16 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {\n+        const bool index_enabled = std::find(g_enabled_filter_types.begin(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420393465",
      "id" : 420393465,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MzQ2NQ==",
      "original_commit_id" : "493eb3bd47628610627d805ca520b9a0187b5240",
      "original_line" : 992,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 406139827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420393465",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420531180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420531180"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good suggestion. Taken.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T03:52:17Z",
      "diff_hunk" : "@@ -986,6 +987,16 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {\n+        const bool index_enabled = std::find(g_enabled_filter_types.begin(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r420531180",
      "id" : 420531180,
      "in_reply_to_id" : 420393465,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMTE4MA==",
      "original_commit_id" : "493eb3bd47628610627d805ca520b9a0187b5240",
      "original_line" : 992,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 406289036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420531180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note to reviewers: the Travis failures are timeouts and can be ignored. This PR is ready for review.",
      "created_at" : "2020-05-06T03:52:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-624428221",
      "id" : 624428221,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18877",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDQyODIyMQ==",
      "updated_at" : "2020-05-06T03:52:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624428221",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421010893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421010893"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Update `allNetMessageTypes` as per namespace comment.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T18:41:33Z",
      "diff_hunk" : "@@ -234,6 +234,20 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * getcfcheckpt requests evenly spaced compact filter headers, enabling\n+ * parallelized download and validation of the headers between them.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFCHECKPT;\n+/**\n+ * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n+ * evenly spaced filter headers for blocks on the requested chain.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *CFCHECKPT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421010893",
      "id" : 421010893,
      "line" : 250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDg5Mw==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 250,
      "original_position" : 17,
      "original_start_line" : 237,
      "path" : "src/protocol.h",
      "position" : 17,
      "pull_request_review_id" : 406888129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : 237,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421010893",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421021746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421021746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be worth separating these checks. Otherwise, the logging is not quite accurate when `-peercfilters` is not set.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T18:59:13Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421021746",
      "id" : 421021746,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTc0Ng==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1999,
      "original_position" : 52,
      "original_start_line" : 1991,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 406888129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421021746",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421029307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421029307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also use `const` here for consistency with `stop_index`?",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T19:12:02Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421029307",
      "id" : 421029307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyOTMwNw==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1989,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 406888129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421029307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421043128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421043128"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Given block heights are of type `int` in `CBlockIndex`, perhaps `height` and `CFCHECKPT_INTERVAL` should be `int` as well instead of `uint32_t`.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T19:36:37Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a cfcheckpt request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+                                   stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+\n+    // Populate headers.\n+    const CBlockIndex* block_index = stop_index;\n+    for (int i = headers.size() - 1; i >= 0; i--) {\n+        uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+        block_index = block_index->GetAncestor(height);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421043128",
      "id" : 421043128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MzEyOA==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2056,
      "original_position" : 109,
      "original_start_line" : 2050,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 406888129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421043128",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421057005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421057005"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "s/cfcheckpt/getcfcheckpt",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-06T20:01:22Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a cfcheckpt request.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421057005",
      "id" : 421057005,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA1NzAwNQ==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2024,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 406888129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421057005",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421330556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421330556"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the following scenario plausible ? Client receives from peers block H1 as tip and goes offline. H1 is reorg'ed out of the active chain. After a month, Client goes back and try to start filter-sync through checkpoints. Sending H1 will be rejected as per `BlockRequestAllowed` we reject reorg'ed out block older than a month, but has been part of the active chain and dutifully announced.\r\n\r\nIt maybe a marginal issue, but at least comment should mention that stop block should have been connected to the active chain in the last month.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T08:29:42Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421330556",
      "id" : 421330556,
      "line" : 2006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzMDU1Ng==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2006,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 59,
      "pull_request_review_id" : 407256641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421330556",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421344230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421344230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this test verify the following spec requirement \"StopHash MUST be known to belong to a block accepted by the receiving peer. This is the case if the peer had previously sent a headers or inv message with any descendent blocks\" ?\r\n\r\nThis point is unclear to me with regards to the receiver requirement, what should we do in case of peer asking for a `StopHash` non-yet-announced to them. Do we check `StopHash` inferior ou equal to its `pindexBestHeaderSent` somewhere ?",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T08:51:29Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421344230",
      "id" : 421344230,
      "line" : 24,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDIzMA==",
      "original_commit_id" : "fccc85728deec37acfb3d325409a9397b9397834",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 24,
      "pull_request_review_id" : 407256641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421344230",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421612318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421612318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `-peercfilters` isn't set, the resulting error message below would be confusing I think.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T15:53:22Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421612318",
      "id" : 421612318,
      "line" : 1993,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxMjMxOA==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1993,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 46,
      "pull_request_review_id" : 407610013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:56:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421612318",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on master to fix the spurious travis failures, and addressed @jkczyz's review comments. Thanks for the review!",
      "created_at" : "2020-05-07T16:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625343964",
      "id" : 625343964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18877",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTM0Mzk2NA==",
      "updated_at" : "2020-05-07T16:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625343964",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421629462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421629462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:18:59Z",
      "diff_hunk" : "@@ -234,6 +234,20 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * getcfcheckpt requests evenly spaced compact filter headers, enabling\n+ * parallelized download and validation of the headers between them.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFCHECKPT;\n+/**\n+ * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n+ * evenly spaced filter headers for blocks on the requested chain.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *CFCHECKPT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421629462",
      "id" : 421629462,
      "in_reply_to_id" : 421010893,
      "line" : 250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTQ2Mg==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 250,
      "original_position" : 17,
      "original_start_line" : 237,
      "path" : "src/protocol.h",
      "position" : 17,
      "pull_request_review_id" : 407631865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : 237,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421629462",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421631968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421631968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think changing the log text to \"peer x requested unsupported block filter type\" addresses your concern (either `-peercfilters` is unset and they've requested any block filter type, or `-peercfilters` is set and they've requested a block filter type that isn't basic).\r\n\r\nLater on we'll switch this logic to use `GetLocalServices` instead: https://github.com/bitcoin/bitcoin/pull/18876/commits/5c23d400fec93c1a52e42a6d0c08f7164bbb268b#diff-eff7adeaec73a769788bb78858815c91R2038.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:22:58Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421631968",
      "id" : 421631968,
      "in_reply_to_id" : 421021746,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMTk2OA==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1999,
      "original_position" : 52,
      "original_start_line" : 1991,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 407635068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421631968",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:23:03Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632032",
      "id" : 421632032,
      "in_reply_to_id" : 421029307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMjAzMg==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1989,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 407635139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632032",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632090"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:23:08Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a cfcheckpt request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+                                   stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+\n+    // Populate headers.\n+    const CBlockIndex* block_index = stop_index;\n+    for (int i = headers.size() - 1; i >= 0; i--) {\n+        uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+        block_index = block_index->GetAncestor(height);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632090",
      "id" : 421632090,
      "in_reply_to_id" : 421043128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMjA5MA==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2056,
      "original_position" : 109,
      "original_start_line" : 2050,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 407635208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632090",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632124"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:23:12Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a cfcheckpt request.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421632124",
      "id" : 421632124,
      "in_reply_to_id" : 421057005,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMjEyNA==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2024,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 407635257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421632124",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421636285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421636285"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    // Basic filters index must be enabled to serve compact filters\r\n    // because it is the only available filter option for now\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:29:32Z",
      "diff_hunk" : "@@ -994,6 +995,12 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Basic filters index must be enabled to serve compact filters",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421636285",
      "id" : 421636285,
      "line" : 998,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzNjI4NQ==",
      "original_commit_id" : "48bc8ff2ca06dade1b24feafd75b59f51e05dd45",
      "original_line" : 998,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 12,
      "pull_request_review_id" : 407610013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:56:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421636285",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421648046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421648046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it matters. If a BIP 157 client pre-emptively requests a filter header for a block that the server hasn't yet accepted, then they would be disconnected.\r\n\r\nGenerally we don't consider block propagation timing to be a privacy/topology leak, since new block events are rare and too expensive to be controlled by an observer.\r\n\r\nRequesting a block that the server hasn't accepted yet is logically equivalent to requesting a non-existent block, which is tested in p2p_cfilters.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:48:36Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421648046",
      "id" : 421648046,
      "in_reply_to_id" : 421344230,
      "line" : 24,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0ODA0Ng==",
      "original_commit_id" : "fccc85728deec37acfb3d325409a9397b9397834",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 24,
      "pull_request_review_id" : 407655285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421648046",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421649572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421649572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, that's possible. A client should always request the filter headers from a recently sync'ed block headers chain.\r\n\r\nI was going to update the comment to say something like \"Check that the stop block exists and is either in the best chain or was re-orged out less than a month ago\", but I don't like repeating program logic in a comment, especially if it's located far from the code, since any changes in the logic would make the comment obsolete. Instead I've changed it to \"Check that the stop block exists and the peer would be allowed to fetch it.\" Anyone reading the code can look up BlockRequestAllowed() for the exact conditions.",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:51:01Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421649572",
      "id" : 421649572,
      "in_reply_to_id" : 421330556,
      "line" : 2006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0OTU3Mg==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 2006,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 59,
      "pull_request_review_id" : 407657158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T16:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421649572",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed @ariard's review comments.",
      "created_at" : "2020-05-07T16:51:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#issuecomment-625372467",
      "id" : 625372467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18877",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTM3MjQ2Nw==",
      "updated_at" : "2020-05-07T16:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625372467",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421654189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421654189"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i.e. I agree with what @jkczyz was saying earlier I think but just saw you addressed it now",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T16:58:29Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421654189",
      "id" : 421654189,
      "in_reply_to_id" : 421612318,
      "line" : 1993,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDE4OQ==",
      "original_commit_id" : "bd1a924b34afb9b70bbe7012461ac8681788dad6",
      "original_line" : 1993,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 46,
      "pull_request_review_id" : 407662825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T17:01:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421654189",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421678792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421678792"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`CFCHECKPT_INTERVAL` is set to 1000, but perhaps add a static assert sanity check against division by zero (as well as against a `height` of zero on line 2055).\r\n```diff\r\n+    static_assert(CFCHECKPT_INTERVAL !=0);\r\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T17:39:46Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,\n+                                      const uint256& stop_hash,\n+                                      const CBlockIndex*& stop_index,\n+                                      const BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and the peer would be allowed to fetch it.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a getcfcheckpt request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    const BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+                                   stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421678792",
      "id" : 421678792,
      "line" : 2050,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODc5Mg==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 2050,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 103,
      "pull_request_review_id" : 407693752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421678792",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421683976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421683976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Current idiom in the test suite:\r\n```diff\r\n-        node0.send_message(request)\r\n-        node0.sync_with_ping(timeout=5)\r\n+        node0.send_and_ping(message=request, timeout=5)\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T17:48:28Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        self.sync_blocks(timeout=600)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421683976",
      "id" : 421683976,
      "line" : 59,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4Mzk3Ng==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 59,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 59,
      "pull_request_review_id" : 407693752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421683976",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421773505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421773505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it be preferable to reference to const here?\r\n```diff\r\n-                                      BlockFilterType filter_type,\r\n+                                      const BlockFilterType& filter_type,\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T20:27:52Z",
      "diff_hunk" : "@@ -1965,6 +1969,107 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421773505",
      "id" : 421773505,
      "line" : 1986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3MzUwNQ==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 1986,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 407693752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421773505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421789997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421789997"
         }
      },
      "author_association" : "MEMBER",
      "body" : "idem\r\n```diff\r\n-        node0.send_message(request)\r\n-        node0.sync_with_ping()\r\n+        node0.send_and_ping(request)\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T20:58:41Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        self.sync_blocks(timeout=600)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        self.log.info(\"Reorg node 0 to a new chain.\")\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_blocks(timeout=600)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on active chain.\")\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421789997",
      "id" : 421789997,
      "line" : 79,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTk5Nw==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 79,
      "pull_request_review_id" : 407693752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421789997",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421790143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421790143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "and here as well\r\n```diff\r\n-        node0.send_message(request)\r\n-        node0.sync_with_ping()\r\n+        node0.send_and_ping(request)\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T20:58:58Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        self.sync_blocks(timeout=600)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        self.log.info(\"Reorg node 0 to a new chain.\")\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_blocks(timeout=600)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on active chain.\")\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+\n+        main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n+        tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on stale chain.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421790143",
      "id" : 421790143,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MDE0Mw==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 97,
      "pull_request_review_id" : 407693752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T21:15:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421790143",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421828302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421828302"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        assert_equal(response.stop_hash, request.stop_hash)\r\n        assert_equal(len(response.headers), 2)\r\n```",
      "commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "created_at" : "2020-05-07T22:21:27Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex and -peercfilters can serve\n+cfcheckpts.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    msg_getcfcheckpt,\n+)\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        self.sync_blocks(timeout=600)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        self.log.info(\"Reorg node 0 to a new chain.\")\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_blocks(timeout=600)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        self.log.info(\"Check that peers can fetch cfcheckpt on active chain.\")\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18877#discussion_r421828302",
      "id" : 421828302,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODMwMg==",
      "original_commit_id" : "2a15f9943c065547e896aa221bcf26e7db8bd318",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 82,
      "pull_request_review_id" : 407877712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18877",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T22:33:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421828302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
