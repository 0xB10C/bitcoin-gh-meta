[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Relevant context from Microsoft using this in production: http://lists.llvm.org/pipermail/cfe-dev/2020-April/065244.html",
      "created_at" : "2020-05-05T19:04:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624246811",
      "id" : 624246811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI0NjgxMQ==",
      "updated_at" : "2020-05-05T19:04:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624246811",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Doing so would hurt the usefulness of running valgrind on release binaries, which afaik is the only way to test for these kinds of issues being present in unmodified executables that will actually run in production.",
      "created_at" : "2020-05-05T19:08:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624249303",
      "id" : 624249303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI0OTMwMw==",
      "updated_at" : "2020-05-05T19:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624249303",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Carl's email link mentioned \"pattern initialization\" which seems like an appealing alternative here. Googling it turned up this description: https://reviews.llvm.org/D54604 \"[Pattern initialization] is the recommended initialization approach. Pattern initialization's goal is to initialize automatic variables with values which will likely transform logic bugs into crashes down the line, are easily recognizable in a crash dump, without being values which programmers can rely on for useful program semantics. At the same time, pattern initialization tries to generate code which will optimize well.\"",
      "created_at" : "2020-05-05T19:16:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624253496",
      "id" : 624253496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI1MzQ5Ng==",
      "updated_at" : "2020-05-05T19:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624253496",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this is a trade-off between \"cure\" and \"side effect of cure\".\r\n\r\nAssuming the presence of an uninitialized read in our code base: what is the worst-case scenario for our _users_ of a.) using `-ftrivial-auto-var-init=zero` and b.) not using `-ftrivial-auto-var-init=zero` in production builds?\r\n\r\nMy take:\r\n\r\nThe disease we are fighting is uninitialized reads which may be exploited by an attacker to read memory content to bypass ASLR or leak secrets. (Potentially disastrous for our users.)\r\n\r\nA cure (`-ftrivial-auto-var-init=zero`) has been presented.\r\n\r\nUsing it means that the disease is cured (no more reading of uninitialized memory to bypass ASLR or leak secrets), but it comes with a nasty side effect (`valgrind` can no longer be used to detect uninitialized reads in production binaries).\r\n\r\nHow do we handle this trade-off? Personally I share the view of the security engineers in the Chrome, Android, Windows, iOS and macOS teams who have all started using the equivalent of `-ftrivial-auto-var-init=zero` in some form for their production builds: the cure is worth using despite said unfortunate side-effect :)\r\n\r\nAm I missing any negative side effects, or is the description of `-ftrivial-auto-var-init=zero` as a \"cure\" unfair in some way? WDYT? Discussion is healthy :)",
      "created_at" : "2020-05-05T21:19:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624312392",
      "id" : 624312392,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMxMjM5Mg==",
      "updated_at" : "2020-05-05T21:19:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624312392",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think both use cases are valid (1) wanting to run valgrind on release builds and (2) wanting to run the release build with auto-init. However they are mutually exclusive, as mentioned by me and also sipa.\r\n\r\nA solution would be to offer both builds, but I'd say that puts too much burden on the user to pick the right build. Maybe the \"valgrind release\" should not be offered as prominently as the auto-init release?",
      "created_at" : "2020-05-05T21:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624320880",
      "id" : 624320880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMyMDg4MA==",
      "updated_at" : "2020-05-05T21:39:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624320880",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke That defeats the purpose - if users aren't going to run the same release binaries as the optimally-valgrindable ones.\r\n\r\nI'm not saying either is preferable - I see both sides too - but there is a tradeoff here.",
      "created_at" : "2020-05-05T21:42:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624322352",
      "id" : 624322352,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMyMjM1Mg==",
      "updated_at" : "2020-05-05T21:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624322352",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, in that case I can't follow what the purpose is. I see those use cases:\r\n\r\n* A developer running any version of Bitcoin Core in valgrind: Motivation is to detect and fix bugs.\r\n* A user running a release of Bitcoin Core in valgrind: Motivation is to crash the node before any undefined behaviour could happen in production. Motivation could also be to test the code in valgrind and then run in production without valgrind.\r\n* A user running a release of Bitcoin Core with auto-init: Motivation is to avoid undefined behavior, but opt in to some unknown defined behaviour. This could be an option where the user does not have access to valgrind or similar.\r\n* A user running a release of Bitcoin Core as it is shipped today (without ever running it in valgrind): With the alternatives presented above, I don't see why this would be preferable.",
      "created_at" : "2020-05-05T22:03:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624330949",
      "id" : 624330949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMzMDk0OQ==",
      "updated_at" : "2020-05-05T22:03:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624330949",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is your point that some users running in valgrind are going to make it safer for users not running in valgrind, because they might report bugs they find? If yes, we should make sure that at least one person is actually doing that and actually reporting bugs they find.",
      "created_at" : "2020-05-05T22:10:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624333419",
      "id" : 624333419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMzMzQxOQ==",
      "updated_at" : "2020-05-05T22:10:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624333419",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My point is that discoverability of some bugs depends on the exact compilation. Changing the compilation flags changes the binary, which may make some bugs visible or invisible. This includes -ftrivial-auto-var-init=zero, which may result in bugs being present in the binary that aren't present in a binary without (but won't crash or trigger any other easily detectable sign). People running valgrind on a valgrind-optimized binary without zero initialization may not discover it because it's not present in their binary, and people running valgrind on the zero-initialized version may not discover it because valgrind's ability to detect issues is reduced in those. Just in general, the advantage of valgrind over other analysis tools is that has the ability to detect issues present in the exact binaries we release - introducing a separate valgrind-optimized version removes that advantage.\r\n\r\nThat said, again, I also see the advantage of reducing risk by initializing all variables even if it comes with a reduction in ability to detect issues.",
      "created_at" : "2020-05-05T22:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624343610",
      "id" : 624343610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM0MzYxMA==",
      "updated_at" : "2020-05-05T22:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624343610",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems gcc doesn't actually have an -ftrivial-auto-var-init option? So this discussion seems moot, at least for Linux/Windows binaries?",
      "created_at" : "2020-05-05T22:40:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624344055",
      "id" : 624344055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM0NDA1NQ==",
      "updated_at" : "2020-05-05T22:40:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624344055",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It seems gcc doesn't actually have an -ftrivial-auto-var-init option? So this discussion seems moot, at least for Linux/Windows binaries?\r\n\r\nThe version of Clang we use for macOS builds (6.0.1) wont support this either, as it wasn't introduced into Clang until [8.0.0](https://releases.llvm.org/8.0.0/tools/clang/docs/ReleaseNotes.html).",
      "created_at" : "2020-05-05T23:36:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624361185",
      "id" : 624361185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM2MTE4NQ==",
      "updated_at" : "2020-05-05T23:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624361185",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
