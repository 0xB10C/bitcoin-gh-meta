[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concrete example patch + txvalid vectors. Without the patch the first example would fail because of the DISCOURAGE rules kicking ON with CTV off. The second example would fail becuase when the DISCOURAGE rule is excluded, turning it off to check for failure fails when the CTV rule is on. These kinda sound like the same case, but they're a bit different...\r\n\r\n```json\r\n[\"Check that CTV is Processed with a Taproot Spend\"],\r\n[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\r\n\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\r\n\"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\r\n[\"Check that CTV upgradability works (taproot)\"],\r\n[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\r\n\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\r\n\"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\r\n```\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/transaction_tests.cpp b/src/test/transaction_tests.cpp\r\nindex df2071d2b..717e30276 100644\r\n--- a/src/test/transaction_tests.cpp\r\n+++ b/src/test/transaction_tests.cpp\r\n@@ -198,11 +198,19 @@ BOOST_AUTO_TEST_CASE(tx_valid)\r\n         std::string strTest = test.write();\r\n         if (test[0].isArray())\r\n         {\r\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\r\n+            const size_t size = test.size();\r\n+            const bool default_args = size == 3;\r\n+            const bool has_skip_exclude_one = size == 5;\r\n+            const bool has_extra_flags = size == 4;\r\n+            const bool size_correct = default_args || has_extra_flags || has_skip_exclude_one;\r\n+            const bool extra_flags_correct = !has_extra_flags || test[3].isStr();\r\n+            const bool skip_exclude_one_correct = !has_skip_exclude_one  || test[4].isBool();\r\n+            if (!size_correct || !test[1].isStr() || !test[2].isStr() || !extra_flags_correct || !skip_exclude_one_correct)\r\n             {\r\n                 BOOST_ERROR(\"Bad test: \" << strTest);\r\n                 continue;\r\n             }\r\n+            const bool skip_exclude_one = has_skip_exclude_one? test[4].get_bool() : false;\r\n \r\n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\r\n             std::map<COutPoint, int64_t> mapprevOutValues;\r\n@@ -243,33 +251,36 @@ BOOST_AUTO_TEST_CASE(tx_valid)\r\n \r\n             PrecomputedTransactionData txdata(tx);\r\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\r\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\r\n \r\n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\r\n             if (~verify_flags != FillFlags(~verify_flags)) {\r\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\r\n             }\r\n \r\n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\r\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid */ true),\r\n                                 \"Tx unexpectedly failed: \" << strTest);\r\n \r\n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\r\n             for (const auto& [name, flag] : mapFlagNames) {\r\n                 // Removing individual flags\r\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\r\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\r\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\r\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\r\n                 }\r\n                 // Removing random combinations of flags\r\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\r\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\r\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\r\n                     BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\r\n                 }\r\n             }\r\n \r\n             // Check that flags are maximal: transaction should fail if any unset flags are set.\r\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\r\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\r\n-                    BOOST_ERROR(\"Too many flags unset: \" << strTest);\r\n+            if (!skip_exclude_one) {\r\n+                for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\r\n+                    if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\r\n+                        BOOST_ERROR(\"Too many flags unset: \" << strTest);\r\n+                    }\r\n                 }\r\n             }\r\n         }\r\n```",
      "created_at" : "2021-09-02T21:07:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912057632",
      "id" : 912057632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842XOUg",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-02T21:07:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912057632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to make sure I understand you correctly, please correct me if this is inaccurate:\r\n\r\nYour test is a valid OP_CTV transaction, and this is what we get when passing in these combinations of script verification flags\r\n```\r\nDISCOURAGE_NOPS      CHECKTEMPLATEVERIFY   expected result   your result\r\n      on                 on                 success            fail\r\n      on                 off                success            fail\r\n      off                on                 success            success\r\n      off                off                success            success\r\n```\r\n(Edit: I realized that NOP4 should no longer be gated by DISCOURAGE_UPGRADEABLE_NOPS, https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626)\r\n\r\nThe transaction_tests framework expects the set of excluded flags to be minimal, i.e. removing any more flags should be fine, but adding any flags should make it fail. Flags are specified as _excluded_ and the default passed in is everything in `STANDARD_SCRIPT_VERIFY_FLAGS`. If your test is failing the flag maximality check when you specify exclude=`DISCOURAGE_UPGRADEABLE_NOPS`, that means either:\r\n\r\n- It passed in an extra flag and it didn't fail. This means your test needs to be more specific.\r\n- It removed an extra flag and it failed. Note that if it removed CTV and it failed, this means CTV isn't a soft fork. There are other possibilities as well.\r\n",
      "created_at" : "2021-09-03T10:49:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912446130",
      "id" : 912446130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842YtKy",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T11:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912446130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You're missing what's going on. DISCOURAGE_UPGRADABLE_NOPS is a non consensus flag.\r\n\r\nYou should be able to e.g. test the following script spend:\r\n\r\n`<H> CTV`\r\n\r\nin the correct txn for H.\r\n\r\n- When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is OFF and DISCOURAGE is OFF it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is ON it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is OFF it will pass.\r\n\r\nTherefore we must either set either VERIFY_CTV is always on, or DISCOURAGE is always off and skip the DISCOURAGE minimal test.\r\n\r\nNow consider the spend:\r\n\r\n`1 CTV`\r\n\r\n- When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is OFF and DISCOURAGE is OFF it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is ON and DISCOURAGE is OFF it will pass.\r\n\r\nTherefore, if we would like to test this, we need to specify that just DISCOURAGE is OFF (covered by existing behavior). \r\n\r\n\r\nThis is also why we cannot use FillFlags or TrimFlags afaict, since we don't know if the transaction is intended to succeed or fail (<H> CTV or 1 CTV) so we can't infer the correct fill.\r\n\r\n\r\nWe cannot simply change the line back to the form that does not reture discourage upgradable because we need to discourage using such features to protect old mining nodes during a soft fork upgrade in the future.\r\n\r\nThis was botched with CSV; if we wanted to add a new CSV type that uses the disabled flag, we would have to wait to age out old mining nodes for it to be safe for them to continue to mine on the network. Hence my patch to fix it, so we get a head start on that arduous process.",
      "created_at" : "2021-09-03T18:30:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912730697",
      "id" : 912730697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ZypJ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T18:30:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912730697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "No, I think we have a miscommunication here. When I say a flag is a soft fork, I mean that applying the flag can only restrict the space of acceptable scripts - see #10699\r\n\r\n> in the correct txn for H.\r\n    When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n    When VERIFY_CTV is ON and DISCOURAGE is ON it will pass.\r\n\r\nIn the example you're giving here, VERIFY_CTV is not a soft fork, since applying it to this transaction causes it to go from invalid to valid. Thus, I don't think it is the right approach. If you want templates to be upgradeable, you can version them and discourage greater versions, allow an extra field and discourage using it, etc.\r\n\r\n> We cannot simply change the line back to the form that does not reture discourage upgradable because we need to discourage using such features to protect old mining nodes during a soft fork upgrade in the future.\r\n\r\nI agree with protecting old nodes that haven't upgraded in soft forks, but I still don't understand why you're doing it this way. IIUC since #5000 they should be discouraging NOP4 in policy already.",
      "created_at" : "2021-09-04T13:42:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912976502",
      "id" : 912976502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842aup2",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-04T13:42:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912976502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hard forks / soft fork only applies in that way to consensus flags, not standardness. DISCOURAGE_UPGRADABLE_NOPS is never used in consensus.\r\n\r\nTaproot does something sorta similar currently, albeit in Input standardness rather than interpreter although the distinction is immaterial.\r\n\r\n```c++\r\n    // Check for non-standard pay-to-script-hash in inputs\r\n    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\r\n    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\r\n        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\r\n    }\r\n```\r\n\r\nTherefore when taproot_active goes from false -> true, a transaction goes from invalid to valid. It's still a soft fork.\r\n\r\n\r\nPart of the reason why we need the discourage in the case that SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH is not set is (if it helps to reason about it) what if CTV never gets activated? We should perfectly preserve the old NOP semantics of discouraging it.",
      "created_at" : "2021-09-04T15:16:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912990346",
      "id" : 912990346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ayCK",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-04T15:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912990346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Something else that might help to see this more clearly:\r\n\r\nThe (current BIP119) code for CTV & NOPs:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    // if flags not enabled; treat as a NOP4\r\n                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\r\n                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                        break;\r\n                    }\r\n\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n\r\n                    // If the argument was not 32 bytes, treat as OP_NOP4:\r\n                    switch (stack.back().size()) {\r\n                        case 32:\r\n                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // future upgrade can add semantics for this opcode with different length args\r\n                            // so discourage use when applicable\r\n                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                            }\r\n                    }\r\n                }\r\n                break;\r\n\r\n                case OP_NOP1: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n\r\n                    // If the argument was not 32 bytes, treat as OP_NOP4:\r\n                    switch (stack.back().size()) {\r\n                        case 32:\r\n                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // future upgrade can add semantics for this opcode with different length args\r\n                            // so discourage use when applicable\r\n                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                            }\r\n                    }\r\n                }\r\n                break;\r\n```\r\nThe (pruned) code if CTV is never set.\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    // if flags not enabled; treat as a NOP4\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n\r\n                case OP_NOP1: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nWhich is the same as the current (master branch) code:\r\n\r\n```c++\r\n                case OP_NOP1: case OP_NOP4: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set and the argument is known to be 32 bytes:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n                    if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                        return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                    }\r\n                }\r\n                break;\r\n\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set and the argument is known to not be 32 bytes:\r\n\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                    }\r\n                 }                }\r\n                break;\r\n```\r\n\r\nThe list below (I hope?) makes it more plain to see:\r\n\r\n- When CTV is not active, the semantics are entirely identical to CTV being NOP4.\r\n  - During Consensus, Always Passes\r\n  - During Standardness, Always Fails (DISCOURAGE_UPGRADABLE_NOPS)\r\n- When CTV is active, there must always be at least 1 element on the stack (according to @roconnor-blockstream it is a very good thing if opcodes never take a variable # of things off the stack, so we do not allow CTV with an empty stack to have a meaning).\r\n  - During Consensus, Passes if >=1 element on stack\r\n  - During Standardness, Passes if >=1 element on stack\r\n- When CTV is active, and the argument is 32 bytes, we apply CTV rules\r\n  - During Consensus, Passes if CTV Hash Matches TXN\r\n  - During Standardness, Passes if CTV Hash Matches TXN\r\n- When CTV is active, and the argument is not 32 bytes, we continue to treat as a NOP (I could probably clarify the situation a bit better here by making a new flag -- DISCOURAGE_UPGRADABLE_TEMPLATE_PROGRAM, but the first DISCOURAGE_UPGRADABLE_NOP check still causes this problem by itself).\r\n  - During Consensus, always passes\r\n  - During Standardness, always fails (DISCOURAGE_UPGRADABLE_NOPS)\r\n\r\nTherefore we're only ever adding cases where something can fail in consensus, and standardness is more strict that consensus.",
      "created_at" : "2021-09-04T15:40:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912993667",
      "id" : 912993667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ay2D",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-04T15:41:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912993667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
