[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23810](https://github.com/bitcoin/bitcoin/pull/23810) (refactor: destroy all C-style casts; use modern C++ casts, enforce via `-Wold-style-cast` by PastaPastaPasta)\n* [#23417](https://github.com/bitcoin/bitcoin/pull/23417) (wallet, spkm: Move key management from DescriptorScriptPubKeyMan to wallet level KeyManager by achow101)\n* [#23171](https://github.com/bitcoin/bitcoin/pull/23171) (qa: test descriptors with mixed xpubs and const pubkeys by darosior)\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n* [#19602](https://github.com/bitcoin/bitcoin/pull/19602) (wallet: Migrate legacy wallets to descriptor wallets by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-08-30T22:28:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-908748127",
      "id" : 908748127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5842KmVf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908748127/reactions"
      },
      "updated_at" : "2021-12-18T22:57:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908748127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Strong concept ACK!\r\n\r\nGlad this is getting a fix.  As discussed in 17190 and OP, there's more improvements that can come after this.\r\n",
      "created_at" : "2021-09-01T05:48:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-909916556",
      "id" : 909916556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5842PDmM",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-01T05:48:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909916556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept and Approach ACK. I plan on updating the test and docs introduced in #22067 to take advantage of this in a follow up PR. So I will try to do a more thorough review and testing of this after that is merged and I start on the followup based on this branch. (or if it looks like this will get merged first I will do that earlier)",
      "created_at" : "2021-09-03T19:10:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-912752496",
      "id" : 912752496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5842Z39w",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T19:10:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912752496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Note that the path specifier is different from what was proposed. It uses angle brackets and the semicolon because these are unused characters available in the character set and I wanted to avoid conflicts with characters already in use in descriptors.\r\n\r\n`{0,1}` seems more readable and would at least be a subset of [BIP 88](https://github.com/bitcoin/bips/blob/master/bip-0088.mediawiki). The conflict is with taproot descriptors, which use `{` and `,` for nesting the scripts.\r\n\r\nAs an example `tr([00000000/1']xpub/{0,1}/*,{pk([00000000/2']xpub/{0,1}/*),pk([00000000/3']xpub/{0,1}/*)})` doesn't look terrible to me. How much does it really complicate the parsing code? They're always either inside `()` of a descriptor function like `pkh()` or within `[]` of an origin (if we even allow that).\r\n\r\nAllowing a mix of hardened and unhardened like `<0;1h>` seems unnecessary to me and might make alternative implementations more complicated (though perhaps it's trivial; I haven't tried).",
      "created_at" : "2021-09-29T09:36:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-930013431",
      "id" : 930013431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5843buD3",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T09:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930013431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The conflict is with taproot descriptors, which use `{` and `,` for nesting the scripts.\r\n\r\nThe conflict is actually with the `,` in a variety of descriptors. The particular issue I had run into was using `,` in a `multi()` descriptor. Since `,` is used to separate the components of `multi()`, the parser would look for the next `,` for the next item to parse. If we use `,` for the multipath specifier, then it would run into that and parse too little. The parser could be changed to not do that, but that was more work than to just use unused characters. `{` did not cause any issues, but to make it easier for other implementations which may be parsing differently, I decided to go with a different character as well.",
      "created_at" : "2021-09-29T17:16:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-930374136",
      "id" : 930374136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5843dGH4",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T17:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930374136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm doing some more review/testing of this PR, but when I checkout this PR and rebase to master, I get build error:\r\n```bash\r\nwallet/rpcwallet.cpp:3387:45: error: no viable conversion from 'std::pair<std::unique_ptr<Descriptor>, std::unique_ptr<Descriptor> >' to 'std::unique_ptr<Descriptor>'\r\n  std::unique_ptr<Descriptor> desc = Parse(desc_str, desc_out, error, true);\r\n```",
      "created_at" : "2021-10-18T19:09:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946080177",
      "id" : 946080177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844ZAmx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946080177/reactions"
      },
      "updated_at" : "2021-10-18T19:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946080177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the silent merge conflict.",
      "created_at" : "2021-10-18T20:58:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946159692",
      "id" : 946159692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844ZUBM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946159692/reactions"
      },
      "updated_at" : "2021-10-18T20:58:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946159692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "So in my tests, from this multipath descriptor string: `f\"wsh(sortedmulti(M},{f'/<0;1>/*,'.join(xpubs)}/<0;1>/*))\"`\r\n\r\nI have a descriptor that looks like this:\r\n\r\n```python\r\n{\r\n  'descriptor': 'wsh(sortedmulti(2,tpubDCcZnBitiPCBqsdLWx8Lkc2BrsvVTdZU2Gcioi8yY76HrGSvp4oWyxZ5GUKGVcjdv4wzWbfntfLdcEEfVRamhSgwi1ZxgfNtayQ2QEEjfTv/0/*,tpubDCMtV5vMS9Zn2paRcw7o83ytLY7WHMCGYRSDxhz7HWnZ4ix19EQpi7g3wvYxEvuoXRfLy5XpXJP5VEr7qPzS92TWnVrBMPJYzfupdACC6vP/0/*,tpubDDBi5pEGAmG7k8t2udh8vbYb1Zpwnt5E9bxd86z6xR66r6tYH1aXy5J3kxR2NDBWhVzgcyiAjFw3kCbkf8YcxDx4wjsnvKjKu3SfPVi4dzf/0/*))#shfp6kvs', \r\n  'descriptor_change': 'wsh(sortedmulti(2,tpubDCcZnBitiPCBqsdLWx8Lkc2BrsvVTdZU2Gcioi8yY76HrGSvp4oWyxZ5GUKGVcjdv4wzWbfntfLdcEEfVRamhSgwi1ZxgfNtayQ2QEEjfTv/1/*,tpubDCMtV5vMS9Zn2paRcw7o83ytLY7WHMCGYRSDxhz7HWnZ4ix19EQpi7g3wvYxEvuoXRfLy5XpXJP5VEr7qPzS92TWnVrBMPJYzfupdACC6vP/1/*,tpubDDBi5pEGAmG7k8t2udh8vbYb1Zpwnt5E9bxd86z6xR66r6tYH1aXy5J3kxR2NDBWhVzgcyiAjFw3kCbkf8YcxDx4wjsnvKjKu3SfPVi4dzf/1/*))#ghxep260', \r\n  'checksum': 'e82r9xv3', \r\n  'isrange': True, \r\n  'issolvable': True, \r\n  'hasprivatekeys': False\r\n}\r\n```\r\n\r\nBut now, `multisig.getrawchangeaddress()` fails with error: `This wallet has no available keys (-4)`:\r\n```shell\r\n2021-10-18T22:26:50.595000Z TestFramework (INFO): Check that every participant's multisig generates the same addresses...\r\n2021-10-18T22:26:50.602000Z TestFramework (ERROR): JSONRPC error\r\nTraceback (most recent call last):\r\n  File \"/Users/michaeldietz/Documents/bitcoin/test/functional/test_framework/test_framework.py\", line 132, in main\r\n    self.run_test()\r\n  File \"/Users/michaeldietz/Documents/bitcoin/test/functional/wallet_multisig_descriptor_psbt.py\", line 95, in run_test\r\n    change_addresses = [multisig.getrawchangeaddress() for multisig in participants[\"multisigs\"]]\r\n  File \"/Users/michaeldietz/Documents/bitcoin/test/functional/wallet_multisig_descriptor_psbt.py\", line 95, in <listcomp>\r\n    change_addresses = [multisig.getrawchangeaddress() for multisig in participants[\"multisigs\"]]\r\n  File \"/Users/michaeldietz/Documents/bitcoin/test/functional/test_framework/coverage.py\", line 49, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/Users/michaeldietz/Documents/bitcoin/test/functional/test_framework/authproxy.py\", line 144, in __call__\r\n    raise JSONRPCException(response['error'], status)\r\ntest_framework.authproxy.JSONRPCException: Error: This wallet has no available keys (-4)\r\n```\r\n\r\nAny ideas? I am updating #22067 to use multipath descriptors and using it as a chance to test this PR more",
      "created_at" : "2021-10-18T22:32:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946220198",
      "id" : 946220198,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844Ziym",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946220198/reactions"
      },
      "updated_at" : "2021-10-18T22:32:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946220198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@mjdietzx `importdescriptors` is probably failing. You should check the result of the import and see if there are any errors.\r\n\r\nIs your branch pushed so I can have a look?",
      "created_at" : "2021-10-18T22:52:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946228642",
      "id" : 946228642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844Zk2i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946228642/reactions"
      },
      "updated_at" : "2021-10-18T22:54:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946228642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In my code I actually have:\r\n\r\n```python\r\nresult = multisig.importdescriptors([\r\n                {\r\n                    \"desc\": descriptor[\"descriptor\"],\r\n                    \"active\": True,\r\n                    \"timestamp\": \"now\",\r\n                },\r\n            ])\r\n            assert all(r[\"success\"] for r in result)\r\n```\r\n\r\nAnd that doesn't catch any errors. I will push my branch shortly and reply w/ it",
      "created_at" : "2021-10-18T22:56:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946230118",
      "id" : 946230118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844ZlNm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946230118/reactions"
      },
      "updated_at" : "2021-10-18T22:56:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946230118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I had an error in my tests - it seems everything in this PR is working properly.\r\n\r\nThis works:\r\n```python\r\nresult = multisig.importdescriptors([\r\n  {\r\n    \"desc\": descsum_create(f\"wsh(sortedmulti({self.M},{f'/<0;1>/*,'.join(xpubs)}/<0;1>/*))\"),\r\n    \"active\": True,\r\n    \"timestamp\": \"now\",\r\n  },\r\n])\r\n```\r\n\r\nre the error I posted eariler, I was trying to do this (using `getdescriptorinfo` instead of `descsum_create`):\r\n```python\r\ndescriptor = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/<0;1>/*,'.join(xpubs)}/<0;1>/*))\")\r\nresult = multisig.importdescriptors([\r\n    {\r\n        \"desc\": descriptor[\"descriptor\"],\r\n        \"active\": True,\r\n        \"timestamp\": \"now\",\r\n    },\r\n])\r\n```\r\n\r\nBut I was not importing or doing anything with `descriptor[\"descriptor_change\"]`, hence the (obvious in hindsight) error.\r\n\r\n---\r\n\r\nWe used `getdescriptorinfo` instead of `descsum_create` so `test/functional/wallet_multisig_descriptor_psbt.py` will only use node functions without an additional script for the checksum (see review of #22067 for more info). I wonder if this is useful user feedback at all @achow101? I'm specifically wondering about the interface of `getdescriptorinfo` now, and if it would make sense to return something like:\r\n```js\r\n{\r\n  descriptor // still the multipath descriptor, similar to output of descsum_create\r\n  // now the broken out descriptors:\r\n  descriptor_receiving\r\n  descriptor_change\r\n // ... and the other fields are unchanged\r\n}\r\n```",
      "created_at" : "2021-10-18T23:41:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946250177",
      "id" : 946250177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844ZqHB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946250177/reactions"
      },
      "updated_at" : "2021-10-18T23:41:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946250177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> We used `getdescriptorinfo` instead of `descsum_create` so `test/functional/wallet_multisig_descriptor_psbt.py` will only use node functions without an additional script for the checksum (see review of #22067 for more info). I wonder if this is useful user feedback at all @achow101? I'm specifically wondering about the interface of `getdescriptorinfo` now, and if it would make sense to return something like:\r\n\r\nThe `checksum` field is for that purpose. You can concatenate the descriptor input, `#`, and that checksum.",
      "created_at" : "2021-10-18T23:50:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-946253347",
      "id" : 946253347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844Zq4j",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946253347/reactions"
      },
      "updated_at" : "2021-10-18T23:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946253347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731789078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731789078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nscript/descriptor.cpp:1298:36: error: moving a temporary object prevents copy elision [-Werror,-Wpessimizing-move]\r\n            internal_keys.second = std::move(internal_keys.first->Clone());\r\n                                   ^\r\nscript/descriptor.cpp:1298:36: note: remove std::move call here\r\n            internal_keys.second = std::move(internal_keys.first->Clone());",
      "commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "created_at" : "2021-10-19T12:00:39Z",
      "diff_hunk" : "@@ -980,178 +1090,220 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n         split.pop_back();\n         type = DeriveType::HARDENED;\n     }\n-    if (!ParseKeyPath(split, path, error)) return nullptr;\n+    if (!ParseKeyPath(split, path, error, true)) return {nullptr, nullptr};\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n     }\n-    return std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path), type);\n+    return {\n+        std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path.first), type),\n+        path.second ? std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path.second.value()), type) : nullptr\n+    };\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::pair<std::unique_ptr<PubkeyProvider>, std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n     auto origin_split = Split(sp, ']');\n     if (origin_split.size() > 2) {\n         error = \"Multiple ']' characters found for a single pubkey\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (origin_split.size() == 1) return ParsePubkeyInner(key_exp_index, origin_split[0], ctx, out, error);\n     if (origin_split[0].empty() || origin_split[0][0] != '[') {\n         error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\",\n                           origin_split[0].empty() ? /** empty, implies split char */ ']' : origin_split[0][0]);\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n     if (slash_split[0].size() != 8) {\n         error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n     if (!IsHex(fpr_hex)) {\n         error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n-    auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], ctx, out, error);\n-    if (!provider) return nullptr;\n-    return std::make_unique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n+    std::pair<KeyPath, std::optional<KeyPath>> path;\n+    if (!ParseKeyPath(slash_split, path, error)) return {nullptr, nullptr};\n+    info.path = path.first;\n+    auto providers = ParsePubkeyInner(key_exp_index, origin_split[1], ctx, out, error);\n+    if (!providers.first) return {nullptr, nullptr};\n+    return {\n+        std::make_unique<OriginPubkeyProvider>(key_exp_index, info, std::move(providers.first)),\n+        providers.second ? std::make_unique<OriginPubkeyProvider>(key_exp_index, info, std::move(providers.second)) : nullptr\n+    };\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::pair<std::unique_ptr<DescriptorImpl>, std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n     auto expr = Expr(sp);\n     bool sorted_multi = false;\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<PKDescriptor>(std::move(pubkey), ctx == ParseScriptContext::P2TR);\n+        return {\n+            std::make_unique<PKDescriptor>(std::move(pubkeys.first), ctx == ParseScriptContext::P2TR),\n+            pubkeys.second ? std::make_unique<PKDescriptor>(std::move(pubkeys.second), ctx == ParseScriptContext::P2TR) : nullptr\n+        };\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<PKHDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<PKHDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<PKHDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"pkh\", expr)) {\n         error = \"Can only have pkh at top level, in sh(), or in wsh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<ComboDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<ComboDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<ComboDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"combo\", expr)) {\n         error = \"Can only have combo() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr))) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n-        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        std::pair<std::vector<std::unique_ptr<PubkeyProvider>>, std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n         if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n             error = strprintf(\"Multi threshold '%s' is not valid\", std::string(threshold.begin(), threshold.end()));\n-            return nullptr;\n+            return {nullptr, nullptr};\n         }\n         size_t script_size = 0;\n+        bool has_multipath = false;\n         while (expr.size()) {\n             if (!Const(\",\", expr)) {\n                 error = strprintf(\"Multi: expected ',', got '%c'\", expr[0]);\n-                return nullptr;\n+                return {nullptr, nullptr};\n             }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(key_exp_index, arg, ctx, out, error);\n-            if (!pk) return nullptr;\n-            script_size += pk->GetSize() + 1;\n-            providers.emplace_back(std::move(pk));\n+            auto pks = ParsePubkey(key_exp_index, arg, ctx, out, error);\n+            if (!pks.first) return {nullptr, nullptr};\n+            if (pks.second) {\n+                has_multipath = true;\n+            }\n+            script_size += pks.first->GetSize() + 1;\n+            providers.second.emplace_back(pks.second ? std::move(pks.second) : std::move(pks.first->Clone()));\n+            providers.first.emplace_back(std::move(pks.first));\n             key_exp_index++;\n         }\n-        if (providers.empty() || providers.size() > MAX_PUBKEYS_PER_MULTISIG) {\n-            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and %d keys, inclusive\", providers.size(), MAX_PUBKEYS_PER_MULTISIG);\n-            return nullptr;\n+        assert(providers.first.size() == providers.second.size());\n+        if (providers.first.empty() || providers.first.size() > MAX_PUBKEYS_PER_MULTISIG) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and %d keys, inclusive\", providers.first.size(), MAX_PUBKEYS_PER_MULTISIG);\n+            return {nullptr, nullptr};\n         } else if (thres < 1) {\n             error = strprintf(\"Multisig threshold cannot be %d, must be at least 1\", thres);\n-            return nullptr;\n-        } else if (thres > providers.size()) {\n-            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified\", thres, providers.size());\n-            return nullptr;\n+            return {nullptr, nullptr};\n+        } else if (thres > providers.first.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified\", thres, providers.first.size());\n+            return {nullptr, nullptr};\n         }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) {\n-                error = strprintf(\"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());\n-                return nullptr;\n+            if (providers.first.size() > 3) {\n+                error = strprintf(\"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.first.size());\n+                return {nullptr, nullptr};\n             }\n         }\n         if (ctx == ParseScriptContext::P2SH) {\n             // This limits the maximum number of compressed pubkeys to 15.\n             if (script_size + 3 > MAX_SCRIPT_ELEMENT_SIZE) {\n                 error = strprintf(\"P2SH script is too large, %d bytes is larger than %d bytes\", script_size + 3, MAX_SCRIPT_ELEMENT_SIZE);\n-                return nullptr;\n+                return {nullptr, nullptr};\n             }\n         }\n-        return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+        return {\n+            std::make_unique<MultisigDescriptor>(thres, std::move(providers.first), sorted_multi),\n+            has_multipath ? std::make_unique<MultisigDescriptor>(thres, std::move(providers.second), sorted_multi) : nullptr\n+        };\n     } else if (Func(\"sortedmulti\", expr) || Func(\"multi\", expr)) {\n         error = \"Can only have multi/sortedmulti at top level, in sh(), or in wsh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         key_exp_index++;\n-        return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<WPKHDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<WPKHDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"wpkh\", expr)) {\n         error = \"Can only have wpkh() at top level or inside sh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2SH, out, error);\n-        if (!desc || expr.size()) return nullptr;\n-        return std::make_unique<SHDescriptor>(std::move(desc));\n+        if (!desc.first || expr.size()) return {nullptr, nullptr};\n+        return {\n+            std::make_unique<SHDescriptor>(std::move(desc.first)),\n+            desc.second ? std::make_unique<SHDescriptor>(std::move(desc.second)) : nullptr\n+        };\n     } else if (Func(\"sh\", expr)) {\n         error = \"Can only have sh() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wsh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2WSH, out, error);\n-        if (!desc || expr.size()) return nullptr;\n-        return std::make_unique<WSHDescriptor>(std::move(desc));\n+        if (!desc.first || expr.size()) return {nullptr, nullptr};\n+        return {\n+            std::make_unique<WSHDescriptor>(std::move(desc.first)),\n+            desc.second ? std::make_unique<WSHDescriptor>(std::move(desc.second)) : nullptr\n+        };\n     } else if (Func(\"wsh\", expr)) {\n         error = \"Can only have wsh() at top level or inside sh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n         CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n         if (!IsValidDestination(dest)) {\n             error = \"Address is not valid\";\n-            return nullptr;\n+            return {nullptr, nullptr};\n         }\n-        return std::make_unique<AddressDescriptor>(std::move(dest));\n+        return {\n+            std::make_unique<AddressDescriptor>(std::move(dest)),\n+            nullptr\n+        };\n     } else if (Func(\"addr\", expr)) {\n         error = \"Can only have addr() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"tr\", expr)) {\n         auto arg = Expr(expr);\n-        auto internal_key = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n-        if (!internal_key) return nullptr;\n+        auto internal_keys = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n+        if (!internal_keys.first) return {nullptr, nullptr};\n+        bool has_multipath = (bool)internal_keys.second;\n+        if (!has_multipath) {\n+            internal_keys.second = std::move(internal_keys.first->Clone());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731789078",
      "id" : 731789078,
      "line" : 1298,
      "node_id" : "PRRC_kwDOABII584rnjcW",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 1298,
      "original_position" : 599,
      "original_start_line" : null,
      "path" : "src/script/descriptor.cpp",
      "position" : 599,
      "pull_request_review_id" : 783173808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731789078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T12:00:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731789078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731951961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731951961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm still not convinced this is the best interface for `getdescriptorinfo`\r\n\r\nI'd expect `descriptor` to always be the full descriptor (whether multipath or not). In the case of multipath, I'd then expect two optional attributes `descriptor_receiving` and `descriptor_change` to be present in the response.",
      "commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "created_at" : "2021-10-19T14:50:05Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731951961",
      "id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584roLNZ",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783396550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731951961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T14:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731951961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731952329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731952329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `descriptor_change` should be optional",
      "commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "created_at" : "2021-10-19T14:50:25Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731952329",
      "id" : 731952329,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584roLTJ",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783396550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731952329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T14:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731952329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731955977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731955977"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it worth having an assertion that if `desc.second` is defined, then `desc.first` must also be defined here?\r\n\r\nThen for L31,L32 should we be asserting that `desc.first->IsRange() == desc.second->IsRange()` and `desc.first->IsSolvable() == desc.second->IsSolvable()`?",
      "commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "created_at" : "2021-10-19T14:53:30Z",
      "diff_hunk" : "@@ -21,10 +21,15 @@ FUZZ_TARGET_INIT(descriptor_parse, initialize_descriptor_parse)\n     std::string error;\n     for (const bool require_checksum : {true, false}) {\n         const auto desc = Parse(descriptor, signing_provider, error, require_checksum);\n-        if (desc) {\n-            (void)desc->ToString();\n-            (void)desc->IsRange();\n-            (void)desc->IsSolvable();\n+        if (desc.first) {\n+            (void)desc.first->ToString();\n+            (void)desc.first->IsRange();\n+            (void)desc.first->IsSolvable();\n+        }\n+        if (desc.second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r731955977",
      "id" : 731955977,
      "line" : 29,
      "node_id" : "PRRC_kwDOABII584roMMJ",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 29,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/test/fuzz/descriptor_parse.cpp",
      "position" : 13,
      "pull_request_review_id" : 783396550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731955977/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T14:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731955977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732073045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732073045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`descriptor` cannot currently be the multipath descriptor as generating the string output for one is not yet implemented. I'm not sure on a good approach for doing that yet.",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T17:02:12Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732073045",
      "id" : 732073045,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rooxV",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783557256,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732073045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T17:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732073045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732105971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732105971"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T17:45:09Z",
      "diff_hunk" : "@@ -980,178 +1090,220 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n         split.pop_back();\n         type = DeriveType::HARDENED;\n     }\n-    if (!ParseKeyPath(split, path, error)) return nullptr;\n+    if (!ParseKeyPath(split, path, error, true)) return {nullptr, nullptr};\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n     }\n-    return std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path), type);\n+    return {\n+        std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path.first), type),\n+        path.second ? std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path.second.value()), type) : nullptr\n+    };\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::pair<std::unique_ptr<PubkeyProvider>, std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n     auto origin_split = Split(sp, ']');\n     if (origin_split.size() > 2) {\n         error = \"Multiple ']' characters found for a single pubkey\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (origin_split.size() == 1) return ParsePubkeyInner(key_exp_index, origin_split[0], ctx, out, error);\n     if (origin_split[0].empty() || origin_split[0][0] != '[') {\n         error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\",\n                           origin_split[0].empty() ? /** empty, implies split char */ ']' : origin_split[0][0]);\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n     if (slash_split[0].size() != 8) {\n         error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n     if (!IsHex(fpr_hex)) {\n         error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n-    auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], ctx, out, error);\n-    if (!provider) return nullptr;\n-    return std::make_unique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n+    std::pair<KeyPath, std::optional<KeyPath>> path;\n+    if (!ParseKeyPath(slash_split, path, error)) return {nullptr, nullptr};\n+    info.path = path.first;\n+    auto providers = ParsePubkeyInner(key_exp_index, origin_split[1], ctx, out, error);\n+    if (!providers.first) return {nullptr, nullptr};\n+    return {\n+        std::make_unique<OriginPubkeyProvider>(key_exp_index, info, std::move(providers.first)),\n+        providers.second ? std::make_unique<OriginPubkeyProvider>(key_exp_index, info, std::move(providers.second)) : nullptr\n+    };\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::pair<std::unique_ptr<DescriptorImpl>, std::unique_ptr<DescriptorImpl>> ParseScript(uint32_t& key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n     auto expr = Expr(sp);\n     bool sorted_multi = false;\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<PKDescriptor>(std::move(pubkey), ctx == ParseScriptContext::P2TR);\n+        return {\n+            std::make_unique<PKDescriptor>(std::move(pubkeys.first), ctx == ParseScriptContext::P2TR),\n+            pubkeys.second ? std::make_unique<PKDescriptor>(std::move(pubkeys.second), ctx == ParseScriptContext::P2TR) : nullptr\n+        };\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<PKHDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<PKHDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<PKHDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"pkh\", expr)) {\n         error = \"Can only have pkh at top level, in sh(), or in wsh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ctx, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         ++key_exp_index;\n-        return std::make_unique<ComboDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<ComboDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<ComboDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"combo\", expr)) {\n         error = \"Can only have combo() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr))) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n-        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        std::pair<std::vector<std::unique_ptr<PubkeyProvider>>, std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n         if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n             error = strprintf(\"Multi threshold '%s' is not valid\", std::string(threshold.begin(), threshold.end()));\n-            return nullptr;\n+            return {nullptr, nullptr};\n         }\n         size_t script_size = 0;\n+        bool has_multipath = false;\n         while (expr.size()) {\n             if (!Const(\",\", expr)) {\n                 error = strprintf(\"Multi: expected ',', got '%c'\", expr[0]);\n-                return nullptr;\n+                return {nullptr, nullptr};\n             }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(key_exp_index, arg, ctx, out, error);\n-            if (!pk) return nullptr;\n-            script_size += pk->GetSize() + 1;\n-            providers.emplace_back(std::move(pk));\n+            auto pks = ParsePubkey(key_exp_index, arg, ctx, out, error);\n+            if (!pks.first) return {nullptr, nullptr};\n+            if (pks.second) {\n+                has_multipath = true;\n+            }\n+            script_size += pks.first->GetSize() + 1;\n+            providers.second.emplace_back(pks.second ? std::move(pks.second) : std::move(pks.first->Clone()));\n+            providers.first.emplace_back(std::move(pks.first));\n             key_exp_index++;\n         }\n-        if (providers.empty() || providers.size() > MAX_PUBKEYS_PER_MULTISIG) {\n-            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and %d keys, inclusive\", providers.size(), MAX_PUBKEYS_PER_MULTISIG);\n-            return nullptr;\n+        assert(providers.first.size() == providers.second.size());\n+        if (providers.first.empty() || providers.first.size() > MAX_PUBKEYS_PER_MULTISIG) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and %d keys, inclusive\", providers.first.size(), MAX_PUBKEYS_PER_MULTISIG);\n+            return {nullptr, nullptr};\n         } else if (thres < 1) {\n             error = strprintf(\"Multisig threshold cannot be %d, must be at least 1\", thres);\n-            return nullptr;\n-        } else if (thres > providers.size()) {\n-            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified\", thres, providers.size());\n-            return nullptr;\n+            return {nullptr, nullptr};\n+        } else if (thres > providers.first.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified\", thres, providers.first.size());\n+            return {nullptr, nullptr};\n         }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) {\n-                error = strprintf(\"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());\n-                return nullptr;\n+            if (providers.first.size() > 3) {\n+                error = strprintf(\"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.first.size());\n+                return {nullptr, nullptr};\n             }\n         }\n         if (ctx == ParseScriptContext::P2SH) {\n             // This limits the maximum number of compressed pubkeys to 15.\n             if (script_size + 3 > MAX_SCRIPT_ELEMENT_SIZE) {\n                 error = strprintf(\"P2SH script is too large, %d bytes is larger than %d bytes\", script_size + 3, MAX_SCRIPT_ELEMENT_SIZE);\n-                return nullptr;\n+                return {nullptr, nullptr};\n             }\n         }\n-        return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+        return {\n+            std::make_unique<MultisigDescriptor>(thres, std::move(providers.first), sorted_multi),\n+            has_multipath ? std::make_unique<MultisigDescriptor>(thres, std::move(providers.second), sorted_multi) : nullptr\n+        };\n     } else if (Func(\"sortedmulti\", expr) || Func(\"multi\", expr)) {\n         error = \"Can only have multi/sortedmulti at top level, in sh(), or in wsh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n-        if (!pubkey) return nullptr;\n+        auto pubkeys = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n+        if (!pubkeys.first) return {nullptr, nullptr};\n         key_exp_index++;\n-        return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n+        return {\n+            std::make_unique<WPKHDescriptor>(std::move(pubkeys.first)),\n+            pubkeys.second ? std::make_unique<WPKHDescriptor>(std::move(pubkeys.second)) : nullptr\n+        };\n     } else if (Func(\"wpkh\", expr)) {\n         error = \"Can only have wpkh() at top level or inside sh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2SH, out, error);\n-        if (!desc || expr.size()) return nullptr;\n-        return std::make_unique<SHDescriptor>(std::move(desc));\n+        if (!desc.first || expr.size()) return {nullptr, nullptr};\n+        return {\n+            std::make_unique<SHDescriptor>(std::move(desc.first)),\n+            desc.second ? std::make_unique<SHDescriptor>(std::move(desc.second)) : nullptr\n+        };\n     } else if (Func(\"sh\", expr)) {\n         error = \"Can only have sh() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wsh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2WSH, out, error);\n-        if (!desc || expr.size()) return nullptr;\n-        return std::make_unique<WSHDescriptor>(std::move(desc));\n+        if (!desc.first || expr.size()) return {nullptr, nullptr};\n+        return {\n+            std::make_unique<WSHDescriptor>(std::move(desc.first)),\n+            desc.second ? std::make_unique<WSHDescriptor>(std::move(desc.second)) : nullptr\n+        };\n     } else if (Func(\"wsh\", expr)) {\n         error = \"Can only have wsh() at top level or inside sh()\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n         CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n         if (!IsValidDestination(dest)) {\n             error = \"Address is not valid\";\n-            return nullptr;\n+            return {nullptr, nullptr};\n         }\n-        return std::make_unique<AddressDescriptor>(std::move(dest));\n+        return {\n+            std::make_unique<AddressDescriptor>(std::move(dest)),\n+            nullptr\n+        };\n     } else if (Func(\"addr\", expr)) {\n         error = \"Can only have addr() at top level\";\n-        return nullptr;\n+        return {nullptr, nullptr};\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"tr\", expr)) {\n         auto arg = Expr(expr);\n-        auto internal_key = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n-        if (!internal_key) return nullptr;\n+        auto internal_keys = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n+        if (!internal_keys.first) return {nullptr, nullptr};\n+        bool has_multipath = (bool)internal_keys.second;\n+        if (!has_multipath) {\n+            internal_keys.second = std::move(internal_keys.first->Clone());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732105971",
      "id" : 732105971,
      "in_reply_to_id" : 731789078,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rowzz",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 1298,
      "original_position" : 599,
      "original_start_line" : null,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 783599617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732105971/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T17:45:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732105971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732107085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732107085"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T17:46:42Z",
      "diff_hunk" : "@@ -21,10 +21,15 @@ FUZZ_TARGET_INIT(descriptor_parse, initialize_descriptor_parse)\n     std::string error;\n     for (const bool require_checksum : {true, false}) {\n         const auto desc = Parse(descriptor, signing_provider, error, require_checksum);\n-        if (desc) {\n-            (void)desc->ToString();\n-            (void)desc->IsRange();\n-            (void)desc->IsSolvable();\n+        if (desc.first) {\n+            (void)desc.first->ToString();\n+            (void)desc.first->IsRange();\n+            (void)desc.first->IsSolvable();\n+        }\n+        if (desc.second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732107085",
      "id" : 732107085,
      "in_reply_to_id" : 731955977,
      "line" : 29,
      "node_id" : "PRRC_kwDOABII584roxFN",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 29,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/test/fuzz/descriptor_parse.cpp",
      "position" : 13,
      "pull_request_review_id" : 783601101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732107085/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T17:46:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732107085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732230299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732230299"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Are you saying something like:\r\n\r\n- The multipath `descriptor` string input to `getdescriptorinfo` is parsed/expanded to the two descriptors\r\n- Now each of these descriptors is converted back `ToString` and returned as `descriptor` (first) and `descriptor_change` (second)\r\n\r\nAnd that we currently don't have a way to go from the two parsed/expanded descriptors back to the single multipath descriptor string?\r\n\r\nThat does sound tricky, just trying to make sure I understand",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T20:44:27Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732230299",
      "id" : 732230299,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rpPKb",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783767116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732230299/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T20:44:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732230299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732248223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732248223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, that is correct.",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T21:12:58Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732248223",
      "id" : 732248223,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rpTif",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783791358,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732248223/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T21:12:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732248223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732254681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732254681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, so what's the downside of something like:\r\n- Each of these parsed descriptors is converted back `ToString` and returned as `descriptor_receiving` (first) and descriptor_change (second)\r\n- The same multipath `descriptor` string input to `getdescriptorinfo` is just returned for the `descriptor` output (with a checksum added)",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-19T21:24:00Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r732254681",
      "id" : 732254681,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rpVHZ",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 783799807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732254681/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T21:24:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732254681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981897"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've been thinking through the response returned here. It doesn't seem ideal that the shape of this response differs between a single descriptor and a multipath descriptor. Ie this returns an array of addresses if we pass in a descriptor, but it returns an object if we pass in a multipath descriptor.\r\n\r\nHave you thought through an api where the response is more uniform and \"feels\" the same for both types? I don't necessarily know a better way to do it, wondering if you've thought this through though",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T15:24:24Z",
      "diff_hunk" : "@@ -221,11 +256,30 @@ static RPCHelpMan deriveaddresses()\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n                 {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n-            RPCResult{\n-                RPCResult::Type::ARR, \"\", \"\",\n-                {\n-                    {RPCResult::Type::STR, \"address\", \"the derived addresses\"},\n-                }\n+            {\n+                RPCResult{\"for single derivation descriptors\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981897",
      "id" : 734981897,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII584rzu8J",
      "original_commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "original_line" : 260,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 80,
      "pull_request_review_id" : 787400636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981897/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T15:26:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981967"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Related to my above comment, if the response is uniform we could potentially simplify this a bit and have a single return at the end of the function",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T15:25:40Z",
      "diff_hunk" : "@@ -259,31 +314,16 @@ static RPCHelpMan deriveaddresses()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n     }\n \n-    UniValue addresses(UniValue::VARR);\n-\n-    for (int i = range_begin; i <= range_end; ++i) {\n-        FlatSigningProvider provider;\n-        std::vector<CScript> scripts;\n-        if (!desc->Expand(i, key_provider, scripts, provider)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n-        }\n-\n-        for (const CScript &script : scripts) {\n-            CTxDestination dest;\n-            if (!ExtractDestination(script, dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor does not have a corresponding address\"));\n-            }\n-\n-            addresses.push_back(EncodeDestination(dest));\n-        }\n-    }\n+    UniValue addresses = DeriveAddresses(desc.get(), range_begin, range_end, key_provider);\n \n-    // This should not be possible, but an assert seems overkill:\n-    if (addresses.empty()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Unexpected empty result\");\n+    if (descs.second) {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"receive\", addresses);\n+        obj.pushKV(\"change\", DeriveAddresses(descs.second.get(), range_begin, range_end, key_provider));\n+        return obj;\n+    } else {\n+        return addresses;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734981967",
      "id" : 734981967,
      "line" : 325,
      "node_id" : "PRRC_kwDOABII584rzu9P",
      "original_commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "original_line" : 325,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 149,
      "pull_request_review_id" : 787400636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981967/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T15:26:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734981967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734982142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734982142"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 could you entertain me on this, if nothing else it'll help me understand this better as I finish up my review",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T15:27:43Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r734982142",
      "id" : 734982142,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rzu_-",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 787400859,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734982142/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T15:27:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734982142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735017916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735017916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The primary reason for having the two different return results is to maintain backwards compatibility with anyone who may be using the RPC now.",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T20:35:47Z",
      "diff_hunk" : "@@ -221,11 +256,30 @@ static RPCHelpMan deriveaddresses()\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n                 {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n-            RPCResult{\n-                RPCResult::Type::ARR, \"\", \"\",\n-                {\n-                    {RPCResult::Type::STR, \"address\", \"the derived addresses\"},\n-                }\n+            {\n+                RPCResult{\"for single derivation descriptors\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735017916",
      "id" : 735017916,
      "in_reply_to_id" : 734981897,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII584rz3u8",
      "original_commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "original_line" : 260,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 80,
      "pull_request_review_id" : 787432610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735017916/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T20:35:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735017916",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735018483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735018483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "#15986 provides a bit more context for this.\r\n\r\nThere are a few reasons I would prefer to not change the behavior of the `descriptor` result. The first is for backwards compatibility. This RPC may already be used in a way that expects the canonicalized descriptor produced by `getdescriptorinfo` in the `descriptor` field. Additionally, if a descriptor with a private key were provided, if we were to just output that same string again, then we would be echoing private keys which is something that we want to avoid doing.",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T20:41:36Z",
      "diff_hunk" : "@@ -170,6 +170,7 @@ static RPCHelpMan getdescriptorinfo()\n                 RPCResult::Type::OBJ, \"\", \"\",\n                 {\n                     {RPCResult::Type::STR, \"descriptor\", \"The descriptor in canonical form, without private keys\"},\n+                    {RPCResult::Type::STR, \"descriptor_change\", \"The change descriptor in canonical form, without private keys. Only if the provided descriptor specifies derivation paths for both receiving and change.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735018483",
      "id" : 735018483,
      "in_reply_to_id" : 731951961,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII584rz33z",
      "original_commit_id" : "f4a9ed5583e0852c78e876bfc6d7d517c7875f03",
      "original_line" : 173,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 4,
      "pull_request_review_id" : 787432976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735018483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T20:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735018483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Review ACK 796c439. I also lightly used/tested this by running #23308 on top of this as additional test coverage.",
      "created_at" : "2021-10-23T21:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950223294",
      "id" : 950223294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844o0G-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950223294/reactions"
      },
      "updated_at" : "2021-10-23T21:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950223294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735034342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735034342"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, I figured there'd need to be a deprecation process if we wanted to do this. Anyways, if you think it's enough of an improvement to warrant that I'd be happy to do give it a go as a followup PR. Just lmk",
      "commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "created_at" : "2021-10-23T22:00:41Z",
      "diff_hunk" : "@@ -221,11 +256,30 @@ static RPCHelpMan deriveaddresses()\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n                 {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n-            RPCResult{\n-                RPCResult::Type::ARR, \"\", \"\",\n-                {\n-                    {RPCResult::Type::STR, \"address\", \"the derived addresses\"},\n-                }\n+            {\n+                RPCResult{\"for single derivation descriptors\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#discussion_r735034342",
      "id" : 735034342,
      "in_reply_to_id" : 734981897,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII584rz7vm",
      "original_commit_id" : "796c439b8c4d90cb7ac4ae98016104ac6cbe0340",
      "original_line" : 260,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/misc.cpp",
      "position" : 80,
      "pull_request_review_id" : 787449380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735034342/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-23T22:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735034342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think there may be another silent merge conflict w/ master:\r\n\r\n```bash\r\nwallet/test/util.cpp:33:37: error: no viable conversion from 'std::pair<std::unique_ptr<Descriptor>, std::unique_ptr<Descriptor> >' to 'std::unique_ptr<Descriptor>'\r\n        std::unique_ptr<Descriptor> desc = Parse(\"combo(\" + EncodeSecret(key) + \")\", provider, error, /* require_checksum=*/ false);\r\n```\r\n\r\nCan you try rebasing again?",
      "created_at" : "2021-10-24T17:57:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950366689",
      "id" : 950366689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844pXHh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950366689/reactions"
      },
      "updated_at" : "2021-10-24T17:57:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950366689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased again",
      "created_at" : "2021-10-24T22:23:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950405427",
      "id" : 950405427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844pgkz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950405427/reactions"
      },
      "updated_at" : "2021-10-24T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950405427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "reACK a6ff1c7",
      "created_at" : "2021-10-24T23:41:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-950417960",
      "id" : 950417960,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5844pjoo",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950417960/reactions"
      },
      "updated_at" : "2021-10-24T23:41:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/950417960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-11-25T07:42:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-978914994",
      "id" : 978914994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5846WQ6y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978914994/reactions"
      },
      "updated_at" : "2021-11-25T07:42:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978914994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-12-08T05:22:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-988509716",
      "id" : 988509716,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII584663YU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988509716/reactions"
      },
      "updated_at" : "2021-12-08T05:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988509716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For the record: recently we updated the Trezor stack (Firmware + Suite) to support Taproot and we used descriptors with ranges from this proposal for accounts, e.g. `tr([5c9e228d/86'/0'/0']xpub6Bw885JisRbcKmowfBvMmCxaFHodKn1VpmRmctmJJoM8D4DzyP4qJv8ZdD9V9r3SSGjmK2KJEDnvLH6f1Q4HrobEvnCeKydNvf1eir3RHZk/<0;1>/*)#4swej4wz`",
      "created_at" : "2021-12-09T19:55:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-990193914",
      "id" : 990193914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5847BSj6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990193914/reactions"
      },
      "updated_at" : "2021-12-09T19:55:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990193914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-12-10T01:30:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-990499890",
      "id" : 990499890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5847CdQy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990499890/reactions"
      },
      "updated_at" : "2021-12-10T01:30:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990499890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-12-14T09:44:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-993356981",
      "id" : 993356981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5847NWy1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993356981/reactions"
      },
      "updated_at" : "2021-12-14T09:44:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993356981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Would like to test but don't know how, as this PR doesn't yet change how descriptors are stored or outputted. Any ideas?",
      "created_at" : "2021-12-21T13:41:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22838#issuecomment-998789409",
      "id" : 998789409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
      "node_id" : "IC_kwDOABII5847iFEh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998789409/reactions"
      },
      "updated_at" : "2021-12-21T13:41:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998789409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   }
]
