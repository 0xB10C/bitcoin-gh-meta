[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738380554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need to reorder `coins_to_uncache, test_accept` to `test_accept, coins_to_uncache` here. It makes your static ctors inconsistent in their argument ordering.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:17:49Z",
      "diff_hunk" : "@@ -1019,9 +1092,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ true };\n-\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, test_accept, coins_to_uncache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738380554",
      "id" : 738380554,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAssK",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1095,
      "original_position" : 498,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738385962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is a little bit stranded now that the `txdata` variable has been removed. Perhaps just remove the first sentence?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:23:41Z",
      "diff_hunk" : "@@ -919,30 +996,30 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n+    if (m_rbf && !ReplacementChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+\n     // Only compute the precomputed transaction data if we need to verify",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738385962",
      "id" : 738385962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAuAq",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1005,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738399598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\r\n```\r\n```suggestion\r\n        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\r\n```",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:38:04Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738399598",
      "id" : 738399598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAxVu",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 814,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738409406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: the `tx_` is a bit redundant here. This is a member of the `Workspace` object which is a collection of data relating to a single candidate transaction.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:48:08Z",
      "diff_hunk" : "@@ -484,6 +519,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_tx_limit_descendants;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738409406",
      "id" : 738409406,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAzu-",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 529,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738458528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there any performance penalty in doing this lookup twice? I suspect it's not too bad since each of the lookups are into a boost::multi_index::hashed_unique map, which has an amortized complexity of O(1) (https://www.boost.org/doc/libs/1_56_0/libs/multi_index/doc/reference/hash_indices.html#lookup).\r\n\r\nEven so, it seems a shame to have to query the mempool twice for the same data. Could this set be stored in the `Workspace` object to avoid the second lookup?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T14:35:00Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738458528",
      "id" : 738458528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sA_ug",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 844,
      "original_position" : 269,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:15:58Z",
      "diff_hunk" : "@@ -1019,9 +1092,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ true };\n-\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, test_accept, coins_to_uncache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498714",
      "id" : 738498714,
      "in_reply_to_id" : 738380554,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJia",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1095,
      "original_position" : 498,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792020775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:15:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed first sentence",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:08Z",
      "diff_hunk" : "@@ -919,30 +996,30 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n+    if (m_rbf && !ReplacementChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+\n     // Only compute the precomputed transaction data if we need to verify",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498871",
      "id" : 738498871,
      "in_reply_to_id" : 738385962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJk3",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1005,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792020982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:24Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499125",
      "id" : 738499125,
      "in_reply_to_id" : 738399598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJo1",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 814,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792021313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hok, took out the `tx_`",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:49Z",
      "diff_hunk" : "@@ -484,6 +519,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_tx_limit_descendants;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499521",
      "id" : 738499521,
      "in_reply_to_id" : 738409406,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJvB",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 529,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792021856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "added a `m_iters_conflicting` to the `workspace` struct",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:17:11Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499868",
      "id" : 738499868,
      "in_reply_to_id" : 738458528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJ0c",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 844,
      "original_position" : 269,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792022334,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review @jnewbery, took your suggestions",
      "created_at" : "2021-10-28T15:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-953947619",
      "id" : 953947619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII58443BXj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953947619/reactions"
      },
      "updated_at" : "2021-10-28T15:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953947619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738537426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: you could also comment the `m_all_conflicting` member below to emphasize that it contains the conflicts with all descendants. And perhaps rename the members to `m_direct_conflicts` and `m_all_conflicts` to highlight that difference.\r\n\r\nAlso, the `m_conflicts` member above is only used in `PreChecks()`, so could be a local variable in that function rather than a member of `Workspace`.\r\n\r\nPerhaps it makes sense to clean all of that up in the _[validation] cache iterators to mempool conflicts_ commit?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:59:11Z",
      "diff_hunk" : "@@ -467,13 +496,21 @@ class MemPoolAccept\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n     struct Workspace {\n-        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        explicit Workspace(const CTransactionRef& ptx, size_t limit_descendants, size_t limit_descendant_size) :\n+            m_ptx(ptx), m_hash(ptx->GetHash()),\n+            m_limit_descendants{limit_descendants},\n+            m_limit_descendant_size{limit_descendant_size} {}\n         std::set<uint256> m_conflicts;\n+        /** Iterators to mempool entries that this transaction directly conflicts with. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738537426",
      "id" : 738537426,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII584sBS_S",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 504,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 48,
      "pull_request_review_id" : 792074604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:59:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r739138737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This parameter isn't used in this PR or #22674. I suggest leaving it out until it's used in #22290 (and I think there, you can just pass the vector of `Workspace`s and not the vector of `CTransactionRef`s, since the `Workspace`s contain the `CTransactionRef`s)",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-29T11:01:52Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n \n-        // Check if it's economically rational to mine this transaction rather than the ones it\n-        // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n-        for (CTxMemPool::txiter it : allConflicting) {\n-            nConflictingFees += it->GetModifiedFee();\n-            nConflictingSize += it->GetTxSize();\n-        }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+    CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n+    // It's possible that the replacement pays more fees than its direct conflicts but not more\n+    // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+    // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+    // more economically rational to mine. Before we go digging through the mempool for all\n+    // transactions that would need to be removed (direct conflicts and all descendants), check\n+    // that the replacement transaction pays more than its direct conflicts.\n+    if (const auto err_string{PaysMoreThanConflicts(ws.m_iters_conflicting, newFeeRate, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n+    }\n+\n+    // Calculate all conflicting entries and enforce BIP125 Rule #5.\n+    if (const auto err_string{GetEntriesForConflicts(tx, m_pool, ws.m_iters_conflicting, ws.m_all_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"too many potential replacements\", *err_string);\n+    }\n+    // Enforce BIP125 Rule #2.\n+    if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"replacement-adds-unconfirmed\", *err_string);\n+    }\n+    // Check if it's economically rational to mine this transaction rather than the ones it\n+    // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n+    for (CTxMemPool::txiter it : ws.m_all_conflicting) {\n+        ws.m_conflicting_fees += it->GetModifiedFee();\n+        ws.m_conflicting_size += it->GetTxSize();\n+    }\n+    if (const auto err_string{PaysForRBF(ws.m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n+                                         ::incrementalRelayFee, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n     }\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         std::vector<Workspace>& workspaces,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r739138737",
      "id" : 739138737,
      "line" : 882,
      "node_id" : "PRRC_kwDOABII584sDlyx",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 882,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 322,
      "pull_request_review_id" : 792904885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-29T11:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
