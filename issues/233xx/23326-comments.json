[
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors\r\n\r\nMy thinking was that once it's deemed ready, we'd forward port the MuSig(2) support in secp256k1-zkp to libsecp256k1. That'd solve the issue of implementation compatibility.\r\n\r\nBeyond that, there are indeed a number of things that need to be decided:\r\n\r\n* How to integrate into descriptors. One possibility is to only support an `agg` fragment as leaf key (e.g. `agg(xpub1/.../*,xpub2/.../*)`), but it's also possible I think to support treating `agg` of xpubs as a new \"xpub\" itself (e.g. `agg(xpub1/...,xpub2/...)/*`) for example by defining the aggregated chaincode as a hash of the child chaincodes. This complicates signing further, however, though I don't think there are fundamental problems with this (I've had some discussions with @jonasnick with this).\r\n\r\n* Signing support feels like it'd be pretty much orthogonal to the descriptors integration. My thinking is that there is no need to restrict it - whatever our descriptors signing logic support will pretty much automatically be supported by MuSig signing code once we have it. `tr()` descriptors right now are very limited (only key path, and `pk(X)` leaves), but if that gets extended, all places that were key expressions are supported in there should also deal fine with MuSig keys.\r\n\r\n* I think you're misunderstanding how the pre-generated nonce variant of MuSig2 works. It isn't sufficient to generate the nonces ahead of time - they also need to be distributed to the co-signers ahead of time (in such a way that they know which nonce is going to be used with which signing attempt, **before** that signing attempt is made). This is both logistically hard (it's essentially incompatible with descriptors, as you can't go and generate/pay to addresses before nonce material has been exchanged), and a huge footgun (all participants need to increment positions in lockstep, make sure never to reuse, need to re-distribute nonces in case of loss of key material; backups are a huge hazard, ...). In my view, this variant is for very specialized applications where latency matters, and you have a well-defined protocol between known-to-be-online co-signers already that it can be integrated into (e.g. I can imagine Lightning using them). In a more \"general purpose\" setting like Bitcoin Core should probably cater to, it feels much safer & saner to stick to the non-interactive setup + 2-round signing version of the protocol.\r\n\r\n* PSBT extensions need to be defined for both rounds (for announcing which public nonces every co-signing is going to use, and for the partial signatures).",
      "created_at" : "2021-10-20T17:47:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947898104",
      "id" : 947898104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844f8b4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947898104/reactions"
      },
      "updated_at" : "2021-10-20T17:47:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947898104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> it's deemed ready, we'd forward port the MuSig(2) support in secp256k1-zkp to libsecp256k1. \r\n\r\nThat makes sense, but I suspect more people will review the secp256k1 PR, and more practical issues will come to light, if there's a (draft) Bitcoin Core integration. So it's a bit of chicken-egg.\r\n\r\n> It isn't sufficient to generate the nonces ahead of time - they also need to be distributed to the co-signers ahead of time (in such a way that they know which nonce is going to be used with which signing attempt, before that signing attempt is made)\r\n\r\nAh, the first constraint might be solvable by exporting it along with descriptors (which hardware wallets should store anyway for change detection). But the second constraint makes that a lot more complicated. \r\n\r\n> it feels much safer & saner to stick to the non-interactive setup + 2-round signing version of the protocol\r\n\r\nThat makes sense. Two rounds is annoying when any physical travel is involved, but it does seem much more realistic to implement in the near term. For a simple computer + hardware wallet setup two rounds are no problem; just a matter of calling HWI twice.\r\n\r\nI updated the description to reflect this.",
      "created_at" : "2021-10-20T18:47:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947942068",
      "id" : 947942068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
      "node_id" : "IC_kwDOABII5844gHK0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947942068/reactions"
      },
      "updated_at" : "2021-10-20T18:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947942068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
