[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20799 (net processing: Only support version 2 compact blocks by jnewbery)\n* #20362 (test: Implicitly sync after generate* to preempt races and intermittent test failures by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-26T09:32:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767419355",
      "id" : 767419355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NzQxOTM1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-01T14:02:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767419355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-01-26T16:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767670763",
      "id" : 767670763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NzY3MDc2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T16:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767670763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The linter was failing on all pull requests with the same error when I pushed so it is likely unrelated to the commits here and will get resolved with the next push. Ready for review.",
      "created_at" : "2021-01-26T20:11:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767798617",
      "id" : 767798617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2Nzc5ODYxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T20:11:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767798617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dhruv Rebase on `master` and the `boost/thread/mutex.hpp` warning will go away: it was fixed in #21010 :)",
      "created_at" : "2021-01-26T21:08:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767828931",
      "id" : 767828931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NzgyODkzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T21:08:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767828931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased against master and linter is passing. Thanks, @practicalswift.",
      "created_at" : "2021-01-26T22:20:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767865079",
      "id" : 767865079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2Nzg2NTA3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T22:20:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767865079",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565553753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565553753"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `insuficiently` -> `insufficiently`",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-01-27T18:52:44Z",
      "diff_hunk" : "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {\n+                // block is insuficiently validated for a segwit client",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565553753",
      "id" : 565553753,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU1Mzc1Mw==",
      "original_commit_id" : "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "original_line" : 4390,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577657131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-27T21:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565553753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18324680?v=4",
         "events_url" : "https://api.github.com/users/ccdle12/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ccdle12/followers",
         "following_url" : "https://api.github.com/users/ccdle12/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ccdle12/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ccdle12",
         "id" : 18324680,
         "login" : "ccdle12",
         "node_id" : "MDQ6VXNlcjE4MzI0Njgw",
         "organizations_url" : "https://api.github.com/users/ccdle12/orgs",
         "received_events_url" : "https://api.github.com/users/ccdle12/received_events",
         "repos_url" : "https://api.github.com/users/ccdle12/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ccdle12/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ccdle12"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565558170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565558170"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: since we are always using the `NODE_WITNESS` flag, would it make sense to pass it on initialization for [nLocalServices](https://github.com/dhruv/bitcoin/blob/rewindblockindex-2021/src/init.cpp#L899)?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-01-27T18:59:31Z",
      "diff_hunk" : "@@ -1821,11 +1818,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n-        // Advertise witness capabilities.\n-        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-    }\n+    nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565558170",
      "id" : 565558170,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU1ODE3MA==",
      "original_commit_id" : "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "original_line" : 1821,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 577657131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-27T21:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565558170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18324680?v=4",
         "events_url" : "https://api.github.com/users/ccdle12/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ccdle12/followers",
         "following_url" : "https://api.github.com/users/ccdle12/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ccdle12/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ccdle12",
         "id" : 18324680,
         "login" : "ccdle12",
         "node_id" : "MDQ6VXNlcjE4MzI0Njgw",
         "organizations_url" : "https://api.github.com/users/ccdle12/orgs",
         "received_events_url" : "https://api.github.com/users/ccdle12/received_events",
         "repos_url" : "https://api.github.com/users/ccdle12/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ccdle12/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ccdle12"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-01-27T19:25:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768520278",
      "id" : 768520278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2ODUyMDI3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-27T19:25:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768520278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636451"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-01-27T21:12:23Z",
      "diff_hunk" : "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {\n+                // block is insuficiently validated for a segwit client",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636451",
      "id" : 565636451,
      "in_reply_to_id" : 565553753,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYzNjQ1MQ==",
      "original_commit_id" : "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "original_line" : 4390,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577761956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-27T21:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636600"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That makes sense. Thanks!",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-01-27T21:12:42Z",
      "diff_hunk" : "@@ -1821,11 +1818,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n-        // Advertise witness capabilities.\n-        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-    }\n+    nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636600",
      "id" : 565636600,
      "in_reply_to_id" : 565558170,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYzNjYwMA==",
      "original_commit_id" : "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "original_line" : 1821,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 577762152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-27T21:12:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636600",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review @ccdle12. Comments addressed. Ready for further review.",
      "created_at" : "2021-01-27T21:13:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768580874",
      "id" : 768580874,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2ODU4MDg3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-27T21:13:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768580874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Makes sense, if the rationale was simply to ensure the block gets redownloaded.\r\n\r\nIf we focus on validation, however, we would want this around for Taproot. But I'm not sure that's what its purpose is.\r\n\r\nRe-validating blocks on upgrade seems like a feature we don't have today, and should be implemented separately from this (without redownloading).\r\n\r\n(Therefore, Concept ACK)",
      "created_at" : "2021-01-28T21:30:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769411959",
      "id" : 769411959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTQxMTk1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-28T21:30:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769411959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr You're right, the removed code erases insufficiently validated blocks (which do not have witness data and can't be properly validated by a segwit-aware node) and re-downloads them. AFAICT, with Taproot, the post-activation blocks will have witness data, so we'll need to implement a different function to re-validate the insufficiently validated blocks after upgrade.",
      "created_at" : "2021-01-29T02:29:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769531849",
      "id" : 769531849,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTUzMTg0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-29T02:29:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769531849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2021-02-01T22:24:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-771202654",
      "id" : 771202654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3MTIwMjY1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-01T22:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771202654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568664358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568664358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This isn't true. `NeedsIBD()` grabs cs_main and holds throughout. You could change it to requires cs_main, then run this entire block under one cs_main lock.",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-02T14:53:04Z",
      "diff_hunk" : "@@ -1687,26 +1687,23 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n+            bool needs_ibd{false};\n+            // Can't hold cs_main while calling NeedsIBD, so retrieve the relevant",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568664358",
      "id" : 568664358,
      "line" : 1691,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NDM1OA==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 1691,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 16,
      "pull_request_review_id" : 581426224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T14:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568664358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make `[nodiscard]`?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-02T14:54:07Z",
      "diff_hunk" : "@@ -673,7 +673,7 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+    bool NeedsIBD(const CChainParams& params) LOCKS_EXCLUDED(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665203",
      "id" : 568665203,
      "line" : 676,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTIwMw==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 676,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 5,
      "pull_request_review_id" : 581426224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T14:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps just annotate this function as requiring cs_main and assert that it's held.",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-02T14:54:31Z",
      "diff_hunk" : "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665552",
      "id" : 568665552,
      "line" : 4387,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTU1Mg==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 4387,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 122,
      "pull_request_review_id" : 581426224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T14:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you use a range based for loop since you're iterating over all members of this container?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-02T14:54:54Z",
      "diff_hunk" : "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665869",
      "id" : 568665869,
      "line" : 4388,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTg2OQ==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 4388,
      "original_position" : 137,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 137,
      "pull_request_review_id" : 581426224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T14:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569358290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569358290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we really need to iterate on the whole block index from genesis ?\r\n\r\nSegwit activation height has been hardcoded by #16060. I think you can start the witness-valid iteration from the hardcoded height, whatever the network, minus one ?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-03T12:02:36Z",
      "diff_hunk" : "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569358290",
      "id" : 569358290,
      "line" : 4389,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTM1ODI5MA==",
      "original_commit_id" : "bf5c3e132775f648b3b1ca5608406fb34e0cbf45",
      "original_line" : 4389,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 138,
      "pull_request_review_id" : 582290452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T13:25:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569358290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569402143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569402143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you commit-split the changes around `segwithheight` from the ones around `NODE_WITNESS` ? Better to review any changes in net_processing on their own. ",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-03T13:14:29Z",
      "diff_hunk" : "@@ -461,11 +461,8 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n         int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n-        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+        if (height < 0 || height >= std::numeric_limits<int>::max()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569402143",
      "id" : 569402143,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwMjE0Mw==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 464,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 5,
      "pull_request_review_id" : 582290452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T13:25:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569402143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569407592"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569407592"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is buggy. Always setting `NODE_WITNESS` to our local service flags doesn't mean we will never meet peers which aren't advertising it. Of course it's unlikely there is that much of those peers deployed but otherwise I believe we'll wrongly unserialize received txn.",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-03T13:22:17Z",
      "diff_hunk" : "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569407592",
      "id" : 569407592,
      "line" : 1951,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwNzU5Mg==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 1951,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 14,
      "pull_request_review_id" : 582290452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T13:25:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569407592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569408004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569408004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe better to defer those change to #20799, which will achieve the same IIRC but can be reasoned on their own ?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-03T13:22:57Z",
      "diff_hunk" : "@@ -2717,7 +2716,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n+        if (nCMPCTBLOCKVersion == 1 || nCMPCTBLOCKVersion == 2) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569408004",
      "id" : 569408004,
      "line" : 2719,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwODAwNA==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 2719,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 33,
      "pull_request_review_id" : 582290452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T13:25:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569408004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569445746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569445746"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why do you think this is buggy? We'll unserialize using `MSG_WITNESS_FLAG` iff `fHaveWitness` is set to true, which happens if the peer includes `NODE_WITNESS` in its version message.",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-03T14:15:19Z",
      "diff_hunk" : "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569445746",
      "id" : 569445746,
      "in_reply_to_id" : 569407592,
      "line" : 1951,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0NTc0Ng==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 1951,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 14,
      "pull_request_review_id" : 582407379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T14:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569445746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570231459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570231459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think we unserialize if `fAllowWitness=true`, `MSG_WITNESS_FLAG` is used by a getdata sender to require serialization of witnesses but not at unserialization itself?\r\n\r\nThat said, you're right that `fHaveWitness` implies they advertise their local services with `NODE_WITNESS`. And those ones are static so it should be good. Further, the conditional could be already reduced to `fHaveWitness` check only, a test node with `-segwitheight== std::numeric_limits<int>::max()` will have `fHaveWitness=false` ?",
      "commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "created_at" : "2021-02-04T13:42:23Z",
      "diff_hunk" : "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570231459",
      "id" : 570231459,
      "in_reply_to_id" : 569407592,
      "line" : 1951,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDIzMTQ1OQ==",
      "original_commit_id" : "79970c929131855666995564f7dfc3c62f5d5d31",
      "original_line" : 1951,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 14,
      "pull_request_review_id" : 583401585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-04T13:42:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570231459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
