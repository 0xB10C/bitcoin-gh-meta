[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21055 ([Bundle 3/n] Prune remaining g_chainman usage in validation functions by dongcarl)\n* #21003 (test: Move MakeNoLogFileContext to libtest_util, and use it in bench by MarcoFalke)\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n* #20750 ([Bundle 2/n] Prune g_chainman usage in mempool-related validation functions by dongcarl)\n* #20158 (tree-wide: De-globalize ChainstateManager by dongcarl)\n* #19381 (Fix UBSan warnings triggered when loading corrupt mempool.dat files by rajarshimaitra)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-02-02T08:03:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771447185",
      "id" : 771447185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3MTQ0NzE4NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-02T08:03:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771447185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568552045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568552045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "15c82d3\r\n\r\nCan you drop the `state.IsInvalid()` here ? I think `TX_MISSING_INPUTS`always implies an invalid state (L664, `src/validation.cpp`).",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T12:10:12Z",
      "diff_hunk" : "@@ -972,12 +972,8 @@ static RPCHelpMan testmempoolaccept()\n         fees.pushKV(\"base\", ValueFromAmount(fee));\n         result_0.pushKV(\"fees\", fees);\n     } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n-            } else {\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\n-            }\n+        if (state.IsInvalid() && state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568552045",
      "id" : 568552045,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU1MjA0NQ==",
      "original_commit_id" : "15c82d3ae7fedac50192defd06b8095b172767ff",
      "original_line" : 975,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568552045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568568878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568568878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nWhat do you think about making `bypass_limits` part of the new `MempoolAcceptResult` ?\r\n\r\nActually we don't have _a_ mempool acceptance evaluation. The set of rules verified is already configurable by passing `bypass_limits=true` to ATMP. This flag will latch feerate and size checks (L729 and L1018 in `src/validation.cpp`). A consumer of this cleaner interface might be interested with the effective set of rules enforced. And consumer might not be ATMP caller who initially picked up the options.\r\n\r\nIt would be judicious if we introduce future configurable options in the future like `bypass_timelocks`.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T12:38:20Z",
      "diff_hunk" : "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568568878",
      "id" : 568568878,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU2ODg3OA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1049,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568568878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568583132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568583132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nI don't know about returning \"allowed\"=false for `max_raw_tx_fee` violation. \"allowed\" is documented as \"If the mempool allows this tx to be inserted\". Your transaction might be mempool valid but doesn't pass the client belt-and-suspender, a different check. \r\n\r\nAlso it would be nice to return \"base\" and \"fees\" to let the transaction construction builder adapt the feerate to something passing `max_raw_tx_fee`.\r\n\r\nNote, that's independent from refactoring, more a undersight of #19339.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:01:29Z",
      "diff_hunk" : "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568583132",
      "id" : 568583132,
      "line" : 959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4MzEzMg==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 959,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 36,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568583132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568597344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568597344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nI don't think that's a good idea to encumber code path like `UpdateMempoolForReorg` with `std::optional`. If this `nullopt` will throw an exception. And we do have the failure/unfinished constructor allowing `m_accepted` to be initialized to nullopt, even if AFAICT such constructor is never called with `finished=bad`for now ? \r\n\r\nI know there is a discussion about `std::optional` usage [here](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885) but could we restrain its usage to only `m_base_fee`/`m_replaced_transaction` ? They would be `nullopt` if `m_accepted=false`.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:24:27Z",
      "diff_hunk" : "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568597344",
      "id" : 568597344,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU5NzM0NA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 384,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568597344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568603650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568603650"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nNote, you might have a slight performance regression due to `emplace-back` memory allocation if container capacity is too small. Before this change, this potential reallocation wasn't the default.\r\n\r\nI think that's okay `replaced_transactions` was already existent in the most busiest code path `ProcessMessage`. ",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:33:59Z",
      "diff_hunk" : "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568603650",
      "id" : 568603650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwMzY1MA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1005,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568603650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568608455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568608455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\n\"Evaluate a transaction mempool acceptance. If `test_accept`= false, add the transaction to the mempool\".",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:41:01Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568608455",
      "id" : 568608455,
      "line" : 219,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwODQ1NQ==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 219,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 61,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568608455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568609416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568609416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nSee other comment about `std::optional` usage, but at least indicate what does `m_accept = false` mean.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:42:16Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568609416",
      "id" : 568609416,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYwOTQxNg==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 190,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568609416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568610708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568610708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nAs this interface aims to be consumed by higher users, maybe comment those variables, like \"evicted transactions per BIP 125 rules\", \"Raw base fees expressed in satoshis\".\r\n\r\n",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:44:13Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568610708",
      "id" : 568610708,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYxMDcwOA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 203,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 45,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568610708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568616246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568616246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "abc6ff1\r\n\r\nI think we should commit to a clearer terminology. Validity is always wholesome, a transaction or package is either valid or not. But validity is function of a mempool acceptance evaluation and this is configurable (`bypass_limit`), stateful (e.g mempool min feerate), depends if the transaction is part of a package, etc.\r\n\r\nIf we follow this line, maybe we should rename `m_accepted` to `m_valid` and have only binary state (true, false). The interface could be extended in the future to indicate it's part of a package, and we may have a TxValidationState for package children to inherit the invalidity (`PACKAGE_INVALID_PARENT`).",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T13:51:56Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568616246",
      "id" : 568616246,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYxNjI0Ng==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 188,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 581277343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568616246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568627847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568627847"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What do you think of changing `m_accepted` to an enum to encompass states beyond valid/invalid? Something like \r\n\r\n```c\r\nenum class ResultType : uint8_t {\r\n        UNSET, //!> Not fully validated, quit early for whatever reason.\r\n        INVALID, //!> Invalid.\r\n        VALID, //!> Valid.\r\n        VALID_BYPASSED, //!> some kind of limits bypassed\r\n}\r\n```\r\nThis would leave room for bypassing timelocks as well. We probably don't need to include more details than \"valid albeit some rules were bypassed,\" because the caller should already know what args they called ATMP with.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T14:07:35Z",
      "diff_hunk" : "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568627847",
      "id" : 568627847,
      "in_reply_to_id" : 568568878,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNzg0Nw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1049,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581377350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568627847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568679552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568679552"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree ð¢ I was a bit naive when I wrote that. But it's not part of this PR, so maybe we can discuss elsewhere",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T15:11:29Z",
      "diff_hunk" : "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568679552",
      "id" : 568679552,
      "in_reply_to_id" : 568583132,
      "line" : 959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY3OTU1Mg==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 959,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 36,
      "pull_request_review_id" : 581446784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568679552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Teeny rebase for the compiler warnings and changed from `std::optional<bool> m_accepted` to an enum `ResultType m_result_type` so there's no risk of throwing for bad optional access.",
      "created_at" : "2021-02-02T15:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#issuecomment-771718763",
      "id" : 771718763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21062",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3MTcxODc2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-02T15:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771718763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697583"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added comments",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T15:33:05Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697583",
      "id" : 568697583,
      "in_reply_to_id" : 568610708,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5NzU4Mw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 203,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 45,
      "pull_request_review_id" : 581470788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added!",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T15:33:37Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568697968",
      "id" : 568697968,
      "in_reply_to_id" : 568608455,
      "line" : 219,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5Nzk2OA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 219,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 61,
      "pull_request_review_id" : 581471344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568697968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698350"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "switched it back to `push_back` to adhere to my promise of \"pure refactor\"",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T15:34:07Z",
      "diff_hunk" : "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698350",
      "id" : 568698350,
      "in_reply_to_id" : 568603650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODM1MA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1005,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581471836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698793"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Check now? I think it's better with enum ",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-02T15:34:43Z",
      "diff_hunk" : "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r568698793",
      "id" : 568698793,
      "in_reply_to_id" : 568597344,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODc5Mw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 384,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 581472474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-02T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568698793",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569322797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569322797"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See my other comment but I would keep a binary state for validity. I don't think `TxValidationResult`/`BlockValidationResult` are great examples, it makes it harder to reason on once you multiply states. \r\n\r\nLet's keep this suggestion in mind for now, it's not a must for this PR. We'll see if we need to introduce something like this if we have situation where we have one aware caller and multiple blind consumers.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:03:06Z",
      "diff_hunk" : "@@ -1031,46 +1025,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569322797",
      "id" : 569322797,
      "in_reply_to_id" : 568568878,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyMjc5Nw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1049,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 582245103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569322797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569324575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569324575"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Tracked #21074 ",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:05:51Z",
      "diff_hunk" : "@@ -946,32 +946,27 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(mempool, std::move(tx),\n+                                                  false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n+    if (accept_result.m_accepted.value()) {\n+        const CAmount fee = accept_result.m_base_fees.value();\n+        // Check that fee does not exceed maximum fee\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569324575",
      "id" : 569324575,
      "in_reply_to_id" : 568583132,
      "line" : 959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyNDU3NQ==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 959,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 36,
      "pull_request_review_id" : 582247391,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569324575",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569328926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569328926"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think switching to `push_back` still do an automatic reallocation of the allocated storage if container capacity is too short. See https://www.cplusplus.com/reference/vector/vector/emplace_back/ and https://www.cplusplus.com/reference/vector/vector/push_back/.\r\n\r\nMy point was underscoring that the allocation was previously conditional of `m_replaced_transaction` pointer being opt-in by ATMP caller. After this change it's not anymore. Again I don't think that matters that most. ",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:12:53Z",
      "diff_hunk" : "@@ -1007,8 +1002,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n                 (int)entry->GetTxSize() - (int)nConflictingSize);\n-        if (args.m_replaced_transactions)\n-            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+        args.m_replaced_transactions.emplace_back(it->GetSharedTx());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569328926",
      "id" : 569328926,
      "in_reply_to_id" : 568603650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyODkyNg==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 1005,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 582252972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:12:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569328926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569329362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569329362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you added the unit in comment (satoshi) ? I swear once you start to deal with fee computation you spend your time thinking if you're dealing with apples or oranges :)",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:13:38Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569329362",
      "id" : 569329362,
      "in_reply_to_id" : 568610708,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMyOTM2Mg==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 203,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 45,
      "pull_request_review_id" : 582253568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:13:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569329362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569330388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To be precise, I think `bypass_limits` also overrides some feerate check (L729 in `src/validation.cpp`).",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:15:18Z",
      "diff_hunk" : "@@ -181,12 +181,41 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+* When m_accepted = nullopt, the transaction was not fully validated\n+* (may be valid or invalid), e.g. when it is part of a package that\n+* failed validation for an earlier transaction.\n+*/\n+struct MempoolAcceptResult {\n+    // Tri-state\n+    std::optional<bool> m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure or unfinished case */\n+    explicit MempoolAcceptResult(TxValidationState state, bool finished=true) :\n+        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+            m_accepted = finished ? std::optional<bool>(false) : nullopt;\n+        }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state,\n+                                 std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_accepted(true), m_state(state),\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569330388",
      "id" : 569330388,
      "in_reply_to_id" : 568608455,
      "line" : 219,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMzMDM4OA==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 219,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 61,
      "pull_request_review_id" : 582254874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:15:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569330388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569333497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569333497"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we really need an enum and can't we rely only on a boolean ? Maybe you can point me to a branch how you're using UNFINISHED because we don't use it with this PR ?",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T11:20:35Z",
      "diff_hunk" : "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569333497",
      "id" : 569333497,
      "in_reply_to_id" : 568597344,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMzMzQ5Nw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 384,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 582258885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T11:20:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569333497",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569667269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569667269"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Haven't published the branch yet but the idea is to return a `std::vector<MempoolAcceptResult>` from `ProcessNewPackage`, quit early when a tx fails, and set the not-fully-validated txns in the package to `UNFINISHED`. See [comment](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639)?",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-03T19:00:39Z",
      "diff_hunk" : "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r569667269",
      "id" : 569667269,
      "in_reply_to_id" : 568597344,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY2NzI2OQ==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 384,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 582700613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-03T19:00:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569667269",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r570234607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570234607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `UNFINISHED`/not_fully_validated to mark package partial failure doesn't bring further value compared to unvalid. Do you plan to consume this `UNFINISHED` in a special way ? Otherwise we can just extend `TxValidationResult` with a `PACKAGE_PARENT_FAILED` instead of yet-another-state variable.",
      "commit_id" : "bc992b7a394629137929647998149f18fea5ab29",
      "created_at" : "2021-02-04T13:47:02Z",
      "diff_hunk" : "@@ -380,10 +380,8 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+            !AcceptToMemoryPool(mempool, *it, true /* bypass_limits */).m_accepted.value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21062#discussion_r570234607",
      "id" : 570234607,
      "in_reply_to_id" : 568597344,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDIzNDYwNw==",
      "original_commit_id" : "abc6ff1c02eae4da8deab777cff9c85247b99db2",
      "original_line" : 384,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 583405851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21062",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-02-04T13:47:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570234607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
