[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, nice work!",
      "created_at" : "2020-11-25T09:29:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322",
      "id" : 733583322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzU4MzMyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-25T09:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733583322",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21936 (fuzz: Terminate immediately if a fuzzing harness tries to create a TCP socket (belt and suspenders) by practicalswift)\n* #21789 (refactor: Remove ::Params() global from CChainState by MarcoFalke)\n* #21763 (test: Run AppInitSanityChecks before all tests by MarcoFalke)\n* #21538 (fuzz: Add fuzzing syscall sandbox: detect use of unexpected syscalls when fuzzing (\"syscall sanitizer\") by practicalswift)\n* #20892 (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n* #20744 ([POC] Use std::filesystem. Remove Boost Filesystem & System by fanquake)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-25T15:48:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733788354",
      "id" : 733788354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzc4ODM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-17T20:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733788354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Very cool, Concept ACK",
      "created_at" : "2020-11-25T18:58:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713",
      "id" : 733893713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzg5MzcxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-25T18:58:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733893713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, however I have some things to improve:\r\n\r\n1. Why must it be a compile time feature? Can't we just add a cmdline option called `-enable-seccomp`. See Chromiums `--enable-unveil`.\r\n2. Don't be that seccomp specific in terms of autotools configuration and naming. Keep in mind that there is also `pledge(2)` on OpenBSD which could be a nice addition as well.",
      "created_at" : "2020-11-26T20:01:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734461063",
      "id" : 734461063,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDQ2MTA2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-26T20:01:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734461063",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Freeking awesome!  Before loading the diff I was going to suggest that you subset the calls by thread, but I see you've already done that.",
      "created_at" : "2020-11-27T00:08:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734512344",
      "id" : 734512344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDUxMjM0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-27T00:08:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734512344",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not make syscomp opt-out? I think secure by default is a better idea :-)",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-27T06:05:34Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564",
      "id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODU2NA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 539726171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532276155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532276155"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe it would make sense to default it to on in linux in master and if there is concern that it's not mature yet, switch it to warning only or disable it before a release.  This is the sort of thing that should be default-on unless it turns out to have bad performance consequences (and maybe even then, depending on how bad they are).",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-29T22:11:08Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532276155",
      "id" : 532276155,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjE1NQ==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 540527629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532276155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IIRC there was a discussion about something similar here #17419\r\nHowever it is a bit weird and in transparent IMO to have things enabled in a dev build and others in a release build (beside some warnings of course).",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-30T06:59:25Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288",
      "id" : 532381288,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MTI4OA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 540637781,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r537078878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537078878"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I didn't really intended to go as far as suggesting some differences between \"dev build\" and \"release build\" on an ongoing basis so much as just being eager to turn it off if there are issues.  Otherwise you get a compatibility chicken and egg:  You don't know if it will cause problems for some users without deploying it, but you don't want to deploy it unless you know it won't cause problems.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-12-06T16:53:08Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r537078878",
      "id" : 537078878,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3ODg3OA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 545727434,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537078878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This should be tested for review by adding a vulnerability and see if it was exploitable.  I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.",
      "created_at" : "2020-12-06T16:54:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-739530537",
      "id" : 739530537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTUzMDUzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-06T16:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739530537",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.\r\n\r\nMaybe the UPnP vulnerability (TALOS-2015-0035, CVE-2015-6031)? I should still have a PoC exploit somewhere. I think downgrading UPnP should be enough to reintroduce it.\r\n\r\nI don't currently have the time to play around with this but if someone is interested I can dig it up.",
      "created_at" : "2020-12-17T12:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-747401906",
      "id" : 747401906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NzQwMTkwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-17T12:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747401906",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note to self:\r\n\r\nWe should probably use `SECCOMP_RET_KILL_PROCESS` action (kill the entire process) instead of `SECCOMP_RET_KILL_THREAD/SECCOMP_RET_KILL` (kill the task) on syscall violation.\r\n\r\nThe `SECCOMP_RET_KILL_PROCESS` action was introduced in Linux 4.14. Could read `/proc/sys/kernel/seccomp/actions_avail` to see available actions.\r\n\r\nPerhaps this feature should be possible to enable only for systems running Linux 4.14 or newer.\r\n\r\nContext: https://lkml.org/lkml/2017/8/11/807",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-12-20T21:19:40Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834",
      "id" : 546437834,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzNzgzNA==",
      "original_commit_id" : "dbad7bdb947da66b60db057c5b03c11819438257",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/compat/seccomp-bpf.h",
      "position" : null,
      "pull_request_review_id" : 556062566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't currently have the time to play around with this but if someone is interested I can dig it up.\r\n\r\nAs people have asked, here you go: https://dev.visucore.com/bitcoin/2015_10_upnpc_poc.tar.xz\r\n\r\nIt's my entire working environment and contains my exploit (`poc*.py`), some notes, someone else's exploit (`upnp_exploit1.py`), and some exploitable binaries.\r\n\r\nIf you have any questions feel free to ask on IRC though I literally haven't looked at it for 5 years.",
      "created_at" : "2021-01-14T09:35:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-760076956",
      "id" : 760076956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDA3Njk1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T09:35:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760076956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another self-review:\r\n\r\nInstead of opt-ing out of debug mode via an environment variable we should make it the other way around: the debug mode should be opt-in via `--enable-debug`.\r\n\r\nIn other words: `SECCOMP_RET_KILL_PROCESS` should be the default action, and `SECCOMP_RET_TRAP` should only be used if compiled with `--enable-debug`.\r\n\r\nBackground:\r\n\r\nWhen using `SECCOMP_RET_KILL_PROCESS` the kernel immediately kills off the offending process in case of a syscall violation.\r\n\r\nWhen using `SECCOMP_RET_TRAP` the kernel sends a `SIGSYS` signal to the offending process in case of a syscall violation: that allows us to print a user-friendly error message via a signal handler. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this `SECCOMP_RET_TRAP` mode should really only be used when debugging.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-02-10T20:38:39Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971",
      "id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDA1OTk3MQ==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 588032516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure on this. I do think feedback to the user is very important. I am slightly worried when if our syscall profile isn't 100% up to date (my experience is that this can *easily* happen especially with dynamically linked glibc), something starts killing the process without any means to diagnose or debug, that's extremely frustrating.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T14:44:28Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523",
      "id" : 595237523,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTIzNzUyMw==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 613335228,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think enabling it by default should be considered in the PR first introducing this. It is absolutely something that needs experimentation and testing and fine-tuning, in different environments.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T14:55:59Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356",
      "id" : 595250356,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1MDM1Ng==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 613351768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now using `SECCOMP_RET_KILL_PROCESS`.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T15:13:14Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898",
      "id" : 595266898,
      "in_reply_to_id" : 546437834,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI2Njg5OA==",
      "original_commit_id" : "dbad7bdb947da66b60db057c5b03c11819438257",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/compat/seccomp-bpf.h",
      "position" : null,
      "pull_request_review_id" : 613374088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This makes sense I guess, I suppose we can think of a way to make external signing work within a sandbox, but the obvious and most secure is to disable the creation of external processes.\r\n\r\nAs for notifications: just use ZMQ, or RPC based polling. No need to support process based notifications in sandbox mode imo, if you're taking security seriously you wouldn't expose that kind of escape hatch.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T15:45:44Z",
      "diff_hunk" : "@@ -1220,7 +1231,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+AC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986",
      "id" : 595297986,
      "line" : 1262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI5Nzk4Ng==",
      "original_commit_id" : "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "original_line" : 1262,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 30,
      "pull_request_review_id" : 613415315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I guess this is the classical trade-off between security vs debuggability/ease-of-use :)\r\n\r\nMaking `SECCOMP_RET_KILL_PROCESS` the default is slightly better from a security perspective (no risk that the attacker is getting a \"second chance\" via the signal handler) whereas making `SECCOMP_RET_TRAP` the default is slightly better from a debuggability/ease-of-use perspective.\r\n\r\nI'll let others chime in here: I'll happily adjust to the consensus opinion :)\r\n\r\nThe following shows the differences in output between the two modes of operation in case of a simulated syscall violation.\r\n\r\nWhen using `./configure --enable-syscall-sandbox`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[â¦]-dirty (release build)\r\nâ¦\r\nBad system call (core dumped)\r\n```\r\n\r\nWhen using `./configure --enable-syscall-sandbox --enable-debug`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox --enable-debug\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[â¦]-dirty (debug build)\r\nâ¦\r\nERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\n2021-03-16T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```\r\n",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T19:11:12Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885",
      "id" : 595468885,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQ2ODg4NQ==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 613631493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "After a few months in draft mode this PR is now ready for code review: no longer marked as draft! :)",
      "created_at" : "2021-03-23T19:45:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-805185134",
      "id" : 805185134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwNTE4NTEzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-23T19:45:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805185134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, thanks for working on this!",
      "created_at" : "2021-03-28T14:28:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532",
      "id" : 808904532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwODkwNDUzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-28T14:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808904532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-13T08:05:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-818535548",
      "id" : 818535548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODUzNTU0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T08:05:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818535548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-27T11:17:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-827528561",
      "id" : 827528561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNzUyODU2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-27T11:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827528561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-05T15:50:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-832804754",
      "id" : 832804754,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjgwNDc1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T15:50:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832804754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-15T09:11:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-841627443",
      "id" : 841627443,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0MTYyNzQ0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-15T09:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841627443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj Now updated to default to debug mode as you suggested :)\r\n\r\nUpdated OP to describe the two modes of operation:\r\n* Debug mode (enabled via `configure` flag `--with-syscall-sandbox`): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.`) and `std::terminate` is called. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this mode should really only be used when debugging.\r\n* Kill without debug mode (enabled via `configure` flag `--with-syscall-sandbox=kill-without-debug`): If a non-allowlisted syscall is called the kernel will immediately kill the offending process.\r\n\r\n",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-05-15T11:44:11Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180",
      "id" : 632935180,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE4MA==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 660332428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-15T11:44:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj Thanks for reviewing. I believe all feedback has be addressed (sorry it took a while). Let me know if there is anything more I can do :)",
      "created_at" : "2021-05-20T19:27:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845414778",
      "id" : 845414778,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTQxNDc3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-20T19:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845414778",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
