[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, nice work!",
      "created_at" : "2020-11-25T09:29:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322",
      "id" : 733583322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzU4MzMyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-25T09:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733583322",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21943 by vasild\n* #21878 by vasild\n* #20892 by achow101\n* #16365 by LarryRuane\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-25T15:48:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733788354",
      "id" : 733788354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzc4ODM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-10T03:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733788354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Very cool, Concept ACK",
      "created_at" : "2020-11-25T18:58:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713",
      "id" : 733893713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzg5MzcxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-25T18:58:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733893713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, however I have some things to improve:\r\n\r\n1. Why must it be a compile time feature? Can't we just add a cmdline option called `-enable-seccomp`. See Chromiums `--enable-unveil`.\r\n2. Don't be that seccomp specific in terms of autotools configuration and naming. Keep in mind that there is also `pledge(2)` on OpenBSD which could be a nice addition as well.",
      "created_at" : "2020-11-26T20:01:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734461063",
      "id" : 734461063,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDQ2MTA2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-26T20:01:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734461063",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Freeking awesome!  Before loading the diff I was going to suggest that you subset the calls by thread, but I see you've already done that.",
      "created_at" : "2020-11-27T00:08:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734512344",
      "id" : 734512344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDUxMjM0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-27T00:08:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734512344",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not make syscomp opt-out? I think secure by default is a better idea :-)",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-27T06:05:34Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564",
      "id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODU2NA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 539726171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531398564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532276155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532276155"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe it would make sense to default it to on in linux in master and if there is concern that it's not mature yet, switch it to warning only or disable it before a release.  This is the sort of thing that should be default-on unless it turns out to have bad performance consequences (and maybe even then, depending on how bad they are).",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-29T22:11:08Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532276155",
      "id" : 532276155,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjE1NQ==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 540527629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532276155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IIRC there was a discussion about something similar here #17419\r\nHowever it is a bit weird and in transparent IMO to have things enabled in a dev build and others in a release build (beside some warnings of course).",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-11-30T06:59:25Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288",
      "id" : 532381288,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MTI4OA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 540637781,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532381288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r537078878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537078878"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I didn't really intended to go as far as suggesting some differences between \"dev build\" and \"release build\" on an ongoing basis so much as just being eager to turn it off if there are issues.  Otherwise you get a compatibility chicken and egg:  You don't know if it will cause problems for some users without deploying it, but you don't want to deploy it unless you know it won't cause problems.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-12-06T16:53:08Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r537078878",
      "id" : 537078878,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3ODg3OA==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 545727434,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537078878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This should be tested for review by adding a vulnerability and see if it was exploitable.  I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.",
      "created_at" : "2020-12-06T16:54:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-739530537",
      "id" : 739530537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTUzMDUzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-06T16:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739530537",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.\r\n\r\nMaybe the UPnP vulnerability (TALOS-2015-0035, CVE-2015-6031)? I should still have a PoC exploit somewhere. I think downgrading UPnP should be enough to reintroduce it.\r\n\r\nI don't currently have the time to play around with this but if someone is interested I can dig it up.",
      "created_at" : "2020-12-17T12:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-747401906",
      "id" : 747401906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NzQwMTkwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-17T12:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747401906",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note to self:\r\n\r\nWe should probably use `SECCOMP_RET_KILL_PROCESS` action (kill the entire process) instead of `SECCOMP_RET_KILL_THREAD/SECCOMP_RET_KILL` (kill the task) on syscall violation.\r\n\r\nThe `SECCOMP_RET_KILL_PROCESS` action was introduced in Linux 4.14. Could read `/proc/sys/kernel/seccomp/actions_avail` to see available actions.\r\n\r\nPerhaps this feature should be possible to enable only for systems running Linux 4.14 or newer.\r\n\r\nContext: https://lkml.org/lkml/2017/8/11/807",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2020-12-20T21:19:40Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834",
      "id" : 546437834,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzNzgzNA==",
      "original_commit_id" : "dbad7bdb947da66b60db057c5b03c11819438257",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/compat/seccomp-bpf.h",
      "position" : null,
      "pull_request_review_id" : 556062566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546437834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't currently have the time to play around with this but if someone is interested I can dig it up.\r\n\r\nAs people have asked, here you go: https://dev.visucore.com/bitcoin/2015_10_upnpc_poc.tar.xz\r\n\r\nIt's my entire working environment and contains my exploit (`poc*.py`), some notes, someone else's exploit (`upnp_exploit1.py`), and some exploitable binaries.\r\n\r\nIf you have any questions feel free to ask on IRC though I literally haven't looked at it for 5 years.",
      "created_at" : "2021-01-14T09:35:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-760076956",
      "id" : 760076956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDA3Njk1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T09:35:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760076956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another self-review:\r\n\r\nInstead of opt-ing out of debug mode via an environment variable we should make it the other way around: the debug mode should be opt-in via `--enable-debug`.\r\n\r\nIn other words: `SECCOMP_RET_KILL_PROCESS` should be the default action, and `SECCOMP_RET_TRAP` should only be used if compiled with `--enable-debug`.\r\n\r\nBackground:\r\n\r\nWhen using `SECCOMP_RET_KILL_PROCESS` the kernel immediately kills off the offending process in case of a syscall violation.\r\n\r\nWhen using `SECCOMP_RET_TRAP` the kernel sends a `SIGSYS` signal to the offending process in case of a syscall violation: that allows us to print a user-friendly error message via a signal handler. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this `SECCOMP_RET_TRAP` mode should really only be used when debugging.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-02-10T20:38:39Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971",
      "id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDA1OTk3MQ==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 588032516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574059971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure on this. I do think feedback to the user is very important. I am slightly worried when if our syscall profile isn't 100% up to date (my experience is that this can *easily* happen especially with dynamically linked glibc), something starts killing the process without any means to diagnose or debug, that's extremely frustrating.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T14:44:28Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523",
      "id" : 595237523,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTIzNzUyMw==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 613335228,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595237523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think enabling it by default should be considered in the PR first introducing this. It is absolutely something that needs experimentation and testing and fine-tuning, in different environments.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T14:55:59Z",
      "diff_hunk" : "@@ -67,6 +67,16 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_ENABLE([syscall-sandbox],\n+  [AS_HELP_STRING([--enable-syscall-sandbox],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356",
      "id" : 595250356,
      "in_reply_to_id" : 531398564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI1MDM1Ng==",
      "original_commit_id" : "54df39b5c42ebf572d325c1991e5d911577b711d",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 613351768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595250356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now using `SECCOMP_RET_KILL_PROCESS`.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T15:13:14Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+/*\n+ * seccomp example for x86 (32-bit and 64-bit) with BPF macros\n+ *\n+ * Copyright (c) 2012 The Chromium OS Authors <chromium-os-dev@chromium.org>\n+ * Authors:\n+ *  Will Drewry <wad@chromium.org>\n+ *  Kees Cook <keescook@chromium.org>\n+ *\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+#ifndef _SECCOMP_BPF_H_\n+#define _SECCOMP_BPF_H_\n+\n+#define _GNU_SOURCE 1\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <errno.h>\n+#include <signal.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <sys/prctl.h>\n+#ifndef PR_SET_NO_NEW_PRIVS\n+# define PR_SET_NO_NEW_PRIVS 38\n+#endif\n+\n+#include <linux/unistd.h>\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#ifdef HAVE_LINUX_SECCOMP_H\n+# include <linux/seccomp.h>\n+#endif\n+#ifndef SECCOMP_MODE_FILTER\n+# define SECCOMP_MODE_FILTER    2 /* uses user-supplied filter. */\n+# define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898",
      "id" : 595266898,
      "in_reply_to_id" : 546437834,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI2Njg5OA==",
      "original_commit_id" : "dbad7bdb947da66b60db057c5b03c11819438257",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/compat/seccomp-bpf.h",
      "position" : null,
      "pull_request_review_id" : 613374088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595266898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This makes sense I guess, I suppose we can think of a way to make external signing work within a sandbox, but the obvious and most secure is to disable the creation of external processes.\r\n\r\nAs for notifications: just use ZMQ, or RPC based polling. No need to support process based notifications in sandbox mode imo, if you're taking security seriously you wouldn't expose that kind of escape hatch.",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T15:45:44Z",
      "diff_hunk" : "@@ -1220,7 +1231,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+AC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986",
      "id" : 595297986,
      "line" : 1262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI5Nzk4Ng==",
      "original_commit_id" : "af327aac2ed542b9f1ba26cf8fd0105d8e68659f",
      "original_line" : 1262,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 30,
      "pull_request_review_id" : 613415315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595297986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I guess this is the classical trade-off between security vs debuggability/ease-of-use :)\r\n\r\nMaking `SECCOMP_RET_KILL_PROCESS` the default is slightly better from a security perspective (no risk that the attacker is getting a \"second chance\" via the signal handler) whereas making `SECCOMP_RET_TRAP` the default is slightly better from a debuggability/ease-of-use perspective.\r\n\r\nI'll let others chime in here: I'll happily adjust to the consensus opinion :)\r\n\r\nThe following shows the differences in output between the two modes of operation in case of a simulated syscall violation.\r\n\r\nWhen using `./configure --enable-syscall-sandbox`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[â¦]-dirty (release build)\r\nâ¦\r\nBad system call (core dumped)\r\n```\r\n\r\nWhen using `./configure --enable-syscall-sandbox --enable-debug`:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ ./configure --enable-syscall-sandbox --enable-debug\r\n$ make\r\n$ src/bitcoind\r\n2021-03-16T12:34:56Z Bitcoin Core version v21.99.0-[â¦]-dirty (debug build)\r\nâ¦\r\nERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\n2021-03-16T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```\r\n",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-03-16T19:11:12Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885",
      "id" : 595468885,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQ2ODg4NQ==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 613631493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-28T11:43:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595468885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "After a few months in draft mode this PR is now ready for code review: no longer marked as draft! :)",
      "created_at" : "2021-03-23T19:45:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-805185134",
      "id" : 805185134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwNTE4NTEzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-23T19:45:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805185134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, thanks for working on this!",
      "created_at" : "2021-03-28T14:28:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532",
      "id" : 808904532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwODkwNDUzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-28T14:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808904532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-13T08:05:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-818535548",
      "id" : 818535548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODUzNTU0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T08:05:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818535548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-27T11:17:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-827528561",
      "id" : 827528561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNzUyODU2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-27T11:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827528561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-05T15:50:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-832804754",
      "id" : 832804754,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjgwNDc1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T15:50:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832804754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-15T09:11:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-841627443",
      "id" : 841627443,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0MTYyNzQ0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-15T09:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841627443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj Now updated to default to debug mode as you suggested :)\r\n\r\nUpdated OP to describe the two modes of operation:\r\n* Debug mode (enabled via `configure` flag `--with-syscall-sandbox`): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.`) and `std::terminate` is called. Note that the attacker may be able to control the execution in the signal handler (although still with restricted syscall access), so this mode should really only be used when debugging.\r\n* Kill without debug mode (enabled via `configure` flag `--with-syscall-sandbox=kill-without-debug`): If a non-allowlisted syscall is called the kernel will immediately kill the offending process.\r\n\r\n",
      "commit_id" : "48482ed072bac847e3ed0deb025b27ad73c6ac02",
      "created_at" : "2021-05-15T11:44:11Z",
      "diff_hunk" : "@@ -0,0 +1,450 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <compat/seccomp-bpf.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/filter.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = (ucontext_t*)(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_THREAD,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFork();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetSocketName();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);\n+        allowed_syscalls.insert(__NR_madvise);\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier);\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);\n+        allowed_syscalls.insert(__NR_mmap);\n+        allowed_syscalls.insert(__NR_mprotect);\n+        allowed_syscalls.insert(__NR_munlock);\n+        allowed_syscalls.insert(__NR_munmap);\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1);\n+        allowed_syscalls.insert(__NR_epoll_ctl);\n+        allowed_syscalls.insert(__NR_epoll_pwait);\n+        allowed_syscalls.insert(__NR_epoll_wait);\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2);\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);\n+        allowed_syscalls.insert(__NR_chdir);\n+        allowed_syscalls.insert(__NR_chmod);\n+        allowed_syscalls.insert(__NR_fallocate);\n+        allowed_syscalls.insert(__NR_fchmod);\n+        allowed_syscalls.insert(__NR_fchown);\n+        allowed_syscalls.insert(__NR_fdatasync);\n+        allowed_syscalls.insert(__NR_flock);\n+        allowed_syscalls.insert(__NR_fstat);\n+        allowed_syscalls.insert(__NR_fsync);\n+        allowed_syscalls.insert(__NR_ftruncate);\n+        allowed_syscalls.insert(__NR_getcwd);\n+        allowed_syscalls.insert(__NR_getdents);\n+        allowed_syscalls.insert(__NR_getdents64);\n+        allowed_syscalls.insert(__NR_lstat);\n+        allowed_syscalls.insert(__NR_mkdir);\n+        allowed_syscalls.insert(__NR_open);\n+        allowed_syscalls.insert(__NR_openat);\n+        allowed_syscalls.insert(__NR_readlink);\n+        allowed_syscalls.insert(__NR_rename);\n+        allowed_syscalls.insert(__NR_rmdir);\n+        allowed_syscalls.insert(__NR_stat);\n+        allowed_syscalls.insert(__NR_statfs);\n+        allowed_syscalls.insert(__NR_unlink);\n+    }\n+\n+    void AllowFork()\n+    {\n+        allowed_syscalls.insert(__NR_fork);\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);\n+        allowed_syscalls.insert(__NR_set_robust_list);\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);\n+        allowed_syscalls.insert(__NR_lseek);\n+        allowed_syscalls.insert(__NR_poll);\n+        allowed_syscalls.insert(__NR_ppoll);\n+        allowed_syscalls.insert(__NR_pread64);\n+        allowed_syscalls.insert(__NR_pwrite64);\n+        allowed_syscalls.insert(__NR_read);\n+        allowed_syscalls.insert(__NR_readv);\n+        allowed_syscalls.insert(__NR_recvfrom);\n+        allowed_syscalls.insert(__NR_recvmsg);\n+        allowed_syscalls.insert(__NR_sendmmsg);\n+        allowed_syscalls.insert(__NR_sendmsg);\n+        allowed_syscalls.insert(__NR_sendto);\n+        allowed_syscalls.insert(__NR_write);\n+        allowed_syscalls.insert(__NR_writev);\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom);\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);\n+        allowed_syscalls.insert(__NR_geteuid);\n+        allowed_syscalls.insert(__NR_getgid);\n+        allowed_syscalls.insert(__NR_getpid);\n+        allowed_syscalls.insert(__NR_getppid);\n+        allowed_syscalls.insert(__NR_getresgid);\n+        allowed_syscalls.insert(__NR_getresuid);\n+        allowed_syscalls.insert(__NR_gettid);\n+        allowed_syscalls.insert(__NR_getuid);\n+    }\n+\n+    void AllowGetSocketName()\n+    {\n+        allowed_syscalls.insert(__NR_getsockname);\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);\n+        allowed_syscalls.insert(__NR_clock_gettime);\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit);\n+        allowed_syscalls.insert(__NR_getrusage);\n+        allowed_syscalls.insert(__NR_prlimit64);\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo);\n+        allowed_syscalls.insert(__NR_uname);\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall);\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);\n+        allowed_syscalls.insert(__NR_accept4);\n+        allowed_syscalls.insert(__NR_bind);\n+        allowed_syscalls.insert(__NR_connect);\n+        allowed_syscalls.insert(__NR_getpeername);\n+        allowed_syscalls.insert(__NR_getsockopt);\n+        allowed_syscalls.insert(__NR_listen);\n+        allowed_syscalls.insert(__NR_pipe);\n+        allowed_syscalls.insert(__NR_pipe2);\n+        allowed_syscalls.insert(__NR_setsockopt);\n+        allowed_syscalls.insert(__NR_socket);\n+        allowed_syscalls.insert(__NR_socketpair);\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);\n+        allowed_syscalls.insert(__NR_dup);\n+        allowed_syscalls.insert(__NR_dup2);\n+        allowed_syscalls.insert(__NR_fcntl);\n+        allowed_syscalls.insert(__NR_shutdown);\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl);\n+        allowed_syscalls.insert(__NR_prctl);\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);\n+        allowed_syscalls.insert(__NR_exit);\n+        allowed_syscalls.insert(__NR_exit_group);\n+        allowed_syscalls.insert(__NR_tgkill);\n+        allowed_syscalls.insert(__NR_wait4);\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);\n+        allowed_syscalls.insert(__NR_sched_getparam);\n+        allowed_syscalls.insert(__NR_sched_getscheduler);\n+        allowed_syscalls.insert(__NR_sched_setscheduler);\n+        allowed_syscalls.insert(__NR_sched_yield);\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);\n+        allowed_syscalls.insert(__NR_rt_sigprocmask);\n+        allowed_syscalls.insert(__NR_rt_sigreturn);\n+        allowed_syscalls.insert(__NR_sigaltstack);\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep);\n+        allowed_syscalls.insert(__NR_nanosleep);\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask);\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // Validate architecture (see VALIDATE_ARCHITECTURE in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+        // Examine syscall (see EXAMINE_SYSCALL in compat/seccomp-bpf.h)\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // Allow syscall (see ALLOW_SYSCALL in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_THREAD:\n+            // Kill the thread immediately (see KILL_PROCESS in compat/seccomp-bpf.h)\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+    InstallSyscallSandboxDebugHandler();\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_UPNP: // Thread: upnp\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxDefaultAction default_action = std::getenv(\"EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD\") != nullptr ? SyscallSandboxDefaultAction::KILL_THREAD : SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180",
      "id" : 632935180,
      "in_reply_to_id" : 574059971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjkzNTE4MA==",
      "original_commit_id" : "3bb52b667783e2e74e680bcc33d416b636115e6a",
      "original_line" : 417,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 660332428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-15T11:44:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632935180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj Thanks for reviewing. I believe all feedback has be addressed (sorry it took a while). Let me know if there is anything more I can do :)",
      "created_at" : "2021-05-20T19:27:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845414778",
      "id" : 845414778,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTQxNDc3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-20T19:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845414778",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-21T08:54:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845796990",
      "id" : 845796990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTc5Njk5MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-21T08:54:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845796990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK!",
      "created_at" : "2021-05-21T11:40:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875",
      "id" : 845890875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTg5MDg3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-21T11:40:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845890875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, great work!",
      "created_at" : "2021-05-27T03:31:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645",
      "id" : 849291645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTI5MTY0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-27T03:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849291645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643342730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nIt seems like `-sandbox=<mode>` should be a runtime option, not a build option. This way we can build and one distribute one binary with experimental sandbox support that can be disabled or enabled in different modes, instead of having to build multiple binaries with hardcoded sandbox modes.\r\n\r\nThere still would need to be a `--with-seccomp` option to be able to build on platforms without BPF, but the implementation and use of `--with-seccomp` should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.",
      "commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "created_at" : "2021-06-01T17:28:56Z",
      "diff_hunk" : "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643342730",
      "id" : 643342730,
      "line" : 75,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM0MjczMA==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 5,
      "pull_request_review_id" : 673399903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T18:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643342730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643361032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nNot important, but instead of hardcoding the syscall order for one platform in a packed vector, it could be less fragile to populate a `std::map<int, std::string>` of the syscalls using `SYS` or `__NR` macros, see https://stackoverflow.com/questions/23249373/how-to-obtain-linux-syscall-name-from-the-syscall-number, https://unix.stackexchange.com/questions/338650/why-are-linux-system-call-numbers-in-x86-and-x86-64-different. It should also cut back the record breaking 4301 character line length.",
      "commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "created_at" : "2021-06-01T17:51:16Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643361032",
      "id" : 643361032,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2MTAzMg==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : 50,
      "pull_request_review_id" : 673399903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T18:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643361032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643364191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nI don't understand why these DisableFurtherSyscallSandboxRestrictions calls are added to so many binaries. It seems like they could significantly lessen the effects of sandboxing. It might make sense if there were TODO comments saying what needs to be done to remove these, or just general comments explaining why they are needed.",
      "commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "created_at" : "2021-06-01T17:55:52Z",
      "diff_hunk" : "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643364191",
      "id" : 643364191,
      "line" : 1029,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM2NDE5MQ==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 1029,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 13,
      "pull_request_review_id" : 673399903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T18:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643364191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643370871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nUse of std::atomic here does not seem to make sense. If multiple threads can call InstallSyscallSandboxDebugHandler for the first time simultaneously, then a `Mutex` and `LOCK` need to be used to prevent the later threads from returning before the first thread finishes calling `sigaction` and `sigprocmask`. If multiple threads can't call InstallSyscallSandboxDebugHandler for the first time simultaneously, then this can just be a normal bool instead of an atomic bool.",
      "commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "created_at" : "2021-06-01T18:06:15Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643370871",
      "id" : 643370871,
      "line" : 76,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MDg3MQ==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : 76,
      "pull_request_review_id" : 673399903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T18:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643370871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643373661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\r\n\r\nThroughout this file is there a reason error handling code can't use normal InitError or LogPrintf functions or raise exceptions, to send errors to debug.log and the GUI instead of bypassing them and going to stderr?",
      "commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "created_at" : "2021-06-01T18:10:11Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643373661",
      "id" : 643373661,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzM3MzY2MQ==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : 88,
      "pull_request_review_id" : 673399903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T18:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643373661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645694853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point! Now addressed.\r\n\r\n> It should also cut back the record breaking 4301 character line length.\r\n\r\n:D",
      "commit_id" : "3939d882fcb6cb10ddc51bb0bd807bbe86b90acc",
      "created_at" : "2021-06-04T16:15:20Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645694853",
      "id" : 645694853,
      "in_reply_to_id" : 643361032,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTY5NDg1Mw==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 676460530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-04T16:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645694853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645717458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The `DisableFurtherSyscallSandboxRestrictions` is (or rather: was) used to make any further/future `EnableSyscallSandbox` calls that be into no-ops.\r\n\r\nIn other words to \"lock\" the sandbox to the sandbox policy currently loaded. (Or disable the sandbox if no sandbox is loaded: in other words a call to `DisableFurtherSyscallSandboxRestrictions` without any preceding `EnableSyscallSandbox`.)\r\n\r\nThe quoted code above for example loads the `SyscallSandboxPolicy::INITIALIZATION` policy on `bitcoin-cli` startup and then locks that policy so that no matter what functions that `bitcoin-cli` may call that uses `EnableSyscallSandbox` we're guaranteed to run under `SyscallSandboxPolicy::INITIALIZATION`.\r\n\r\n`SyscallSandboxPolicy::INITIALIZATION` is the super-set of all sandbox policies in Bitcoin Core, so the code above basically says \"limit me to the syscall set we expect to be used in (any part of) Bitcoin Core, but make sure no further syscall sandbox restrictions are done in code I may call\" (in other words: ignore any upcoming `EnableSyscallSandbox` calls).\r\n\r\nThe above is how it used to be, and I agree that was a bit confusing, so I've now updated things:\r\n\r\nInstead of enabling the sandbox on first call to `void EnableSyscallSandbox(policy)`  I've now added a separate setup function `bool SetupSyscallSandbox(â¦)` (called at most once per binary) to enable the sandbox, and added a separate `void SetSyscallSandboxPolicy(policy)` to load a specific policy.\r\n\r\nIn other words the sandbox is opt-in via `bool SetupSyscallSandbox(â¦)`.\r\n\r\nA call to `SetupSyscallSandbox(â¦)` is made in `bitcoind` if `-sandbox=<mode>` is used.\r\n\r\nIn this PR I'm now limiting the syscall sandbox support to the `bitcoind` binary to keep things focused. I suggest we wait with the other binaries to keep things focused. We can gradually enable the sandbox for other binaries over time in future PR:s as we see fit when we've gained some experience with the experimental `bitcoind` syscall sandbox support. Sounds reasonable? :)",
      "commit_id" : "3939d882fcb6cb10ddc51bb0bd807bbe86b90acc",
      "created_at" : "2021-06-04T16:52:18Z",
      "diff_hunk" : "@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645717458",
      "id" : 645717458,
      "in_reply_to_id" : 643364191,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTcxNzQ1OA==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 1029,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 676491381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-04T16:52:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645717458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645860988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed: in the updated code there is no need for locking at all since the setup is done in `SetupSyscallSandbox` which is guaranteed to only be called once. And you're absolutely right that `std::atomic<bool>` did not make much sense here :)",
      "commit_id" : "3939d882fcb6cb10ddc51bb0bd807bbe86b90acc",
      "created_at" : "2021-06-04T21:22:00Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645860988",
      "id" : 645860988,
      "in_reply_to_id" : 643370871,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2MDk4OA==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 676675684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-04T21:22:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645860988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645864786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point. The initialization/setup logic has now been moved to `init.cpp` and it is now using the expected `InitError` and `LogPrintf`. `SetSyscallSandboxPolicy` is now throwing `std::runtime_error` in case of errors.",
      "commit_id" : "3939d882fcb6cb10ddc51bb0bd807bbe86b90acc",
      "created_at" : "2021-06-04T21:26:59Z",
      "diff_hunk" : "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645864786",
      "id" : 645864786,
      "in_reply_to_id" : 643373661,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg2NDc4Ng==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 676678108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-04T21:26:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645864786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645886534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great feedback. Thanks!\r\n\r\nI've now added a `-sandbox=<mode>` parameter. `--with-syscall-sandbox` has been renamed `--with-sandbox`.\r\n\r\nAvailable `-sandbox` modes are:\r\n* `-sandbox=disallow-and-log` (disallow unexpected syscalls and log the violation, then continue execution)\r\n* `-sandbox=log-and-kill` (log the violation and kill the process)\r\n* `-sandbox=kill` (kill the process immediately in case of a violation (without any logging))\r\n\r\nTo enable the syscall sandbox `--with-sandbox` is required at compile time _and_ `-sandbox=<mode>` needs to be specified at run time.\r\n\r\nThis dual opt-in approach is chosen since this is an experimental feature. We can consider relaxing this in the future when this feature has matured and has been extensively tested in many different environments. Note that `--with-sandbox=no` (no sandbox support) is intentionally the default.\r\n\r\n> There still would need to be a --with-seccomp option to be able to build on platforms without BPF, but the implementation and use of --with-seccomp should simpler than this option and not require complicating the build with system/boost process/multiprocess interactions.\r\n\r\nAdding `-sandbox=<mode>` allowed for a much simpler `--with-sandbox`, but note that the system/boost process/multiprocess interaction is still there and I'm not sure what the best approach would be if we were to get rid of it:\r\n\r\n```\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-external-signer (which uses execve) are currently incompatible.)\r\nâ¦\r\nAC_MSG_ERROR(The options --with-sandbox (which does not allow execve) and --enable-multiprocess (which uses execve) are currently incompatible.)\r\nâ¦\r\nAC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])\r\n```\r\n\r\nIsn't say `--with-sandbox` (no `execve`) and `--enable-external-signer` (yes `execve`) mutually exclusive by design? :) \r\n\r\nOr is the suggestion to `InitError` if any \"`execve`/`HAVE_SYSTEM` depending\" option is passed to `bitcoind` when `-sandbox=<mode>` is used?\r\n\r\nAlso, note that `--with-sandbox` will make the functional test be run under the syscall sandbox (using `-sandbox=log-and-kill`). Thus if we allowed for say `--with-sandbox --enable-external-signer` then all external signer functional tests would need to be disabled, no?\r\n\r\nPlease advice :)",
      "commit_id" : "373711faaa29f6c9f595f631a9c48aa700465755",
      "created_at" : "2021-06-04T22:25:09Z",
      "diff_hunk" : "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645886534",
      "id" : 645886534,
      "in_reply_to_id" : 643342730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTg4NjUzNA==",
      "original_commit_id" : "3636a5c1f03fd01da2a78cad0cba7ab69cadf074",
      "original_line" : 75,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 676701975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-04T22:32:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645886534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I recently thought about this again and found the [following information](https://learnbchs.org/pledge.html) interesting, not sure if it was already pointed out:\r\n> A further issue with Linux sandboxes in particular (seccomp(2) and friends) is due to the instability of the Linux ecosystem itself. Generic libc functions are implemented differently depending on whether you're using Alpine (musl) or Debian (glibc). This means that the same libc function may require different system calls.\r\n\r\nWhile this is about C, it also applies to C++ in many parts. There's no guarantee that the current approaches works on all libc++ implementation. Also there is no guarantee that for example clangs libc++ might use different syscalls in future versions. This could lead to an unsustainable and unportable design of the implementation.\r\n\r\nMaybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.",
      "created_at" : "2021-06-08T08:27:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856569408",
      "id" : 856569408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NjU2OTQwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-08T08:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856569408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.\r\n\r\nTurns out this won't work either due to third party libs including the C++ standard library still have that issue pointed out above. Maybe focus on FS restriction instead rather than syscall restriction",
      "created_at" : "2021-06-08T13:20:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856760930",
      "id" : 856760930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1Njc2MDkzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-08T13:20:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856760930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@emilengler \r\n\r\nThe syscall sandbox works on an allowlist basis. Thus if the kernel provides two different syscalls to achieve a certain action, and both those syscalls are used by the different standard library implementations then both syscalls should be put in the allowlist (if we want to allow said action).\r\n\r\nThat is inherent in all types of syscall sandboxing designs, no matter if Linux seccomp-bpf or some BSD equivalent is used.\r\n\r\nAs have been noted in previous discussions above syscall sandboxing is a type of feature that needs experimentation and fine-tuning for different environments to catch potential diversity in syscall use across systems. Such experimentation was required when sandboxing using seccomp-bpf was introduced in projects such as Chromium, OpenSSH and Tor, and it will be required for Bitcoin Core too. There is really no way around it :)\r\n\r\nThat's why this is labeled an experimental feature that is disabled by default, and is enabled only after \"dual opt-in\" (compile-time opt-in via `--with-sandbox` _and_ run-time opt-in via `-sandbox`). To be clear: this is very much *not* a feature for the average end-user at this stage :)\r\n\r\nI think having this feature in CI only would be a very good start: that would allow us to catch introduction of crazy syscall usage (say opening a network connection in a thread that is not supposed to do so, etc.), and get a chance to play with sandboxing in practice.\r\n\r\nFWIW I've been using this feature for roughly a year in different environments. I've found this feature to be a very helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each type of thread in Bitcoin Core.",
      "created_at" : "2021-06-09T13:45:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-857707559",
      "id" : 857707559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NzcwNzU1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-10T09:13:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857707559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-16T04:17:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-862025923",
      "id" : 862025923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjAyNTkyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T04:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862025923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-29T04:22:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-870220145",
      "id" : 870220145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3MDIyMDE0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-29T04:22:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/870220145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663119115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For a little more legibility here would suggest:\r\n\r\n- Replacing current uses of `use_syscall_sandbox` with `seccomp_found` in `--with-seccomp` code\r\n- Before the `AM_CONDITIONAL`, adding\r\n```autoconf\r\ndnl Currently only enable -sandbox=<mode> feature if seccomp is found.\r\ndnl In the future, sandboxing could be also be supported with other\r\ndnl sandboxing mechanisms besides seccomp\r\nuse_syscall_sandbox=$seccomp_found\r\n  ```",
      "commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "created_at" : "2021-07-02T16:11:33Z",
      "diff_hunk" : "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663119115",
      "id" : 663119115,
      "line" : 77,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzExOTExNQ==",
      "original_commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "original_line" : 77,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 7,
      "pull_request_review_id" : 698332234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T16:34:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663119115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663127043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do the syscalls actually fail in the \"disallow-and-log\" mode? Would be good to describe it in the help a little more, or change it to a more suggestive name like \"log-and-fail\" if it does fail, or something like \"log\" or \"log-warning\" if it doesn't fail.\r\n\r\nAlso should s/invokation/invocation/",
      "commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "created_at" : "2021-07-02T16:26:30Z",
      "diff_hunk" : "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663127043",
      "id" : 663127043,
      "line" : 565,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzEyNzA0Mw==",
      "original_commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "original_line" : 565,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 13,
      "pull_request_review_id" : 698332234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T16:31:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663127043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r665937892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good idea! Fixed! :)",
      "commit_id" : "3434d903c6ad4055bf664b31dbab890088a2a78c",
      "created_at" : "2021-07-08T07:26:05Z",
      "diff_hunk" : "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (default is yes if seccomp-bpf is detected under Linux x86_64)])],\n+  [use_syscall_sandbox=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r665937892",
      "id" : 665937892,
      "in_reply_to_id" : 663119115,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTkzNzg5Mg==",
      "original_commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "original_line" : 77,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 701724531,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T07:26:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665937892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r666533779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great feedback!\r\n\r\nI've decided to remove the `disallow-and-log` mode: I think the modes `log-and-kill` and `kill` should be more than enough (to start with at least).\r\n\r\n`disallow-and-log` was meant to disallow the invoked unexpected syscall (by not executing it), log the attempted syscall invocation and then continue execution. Note however that continued normal execution cannot be _guaranteed_: the exact behaviour depends on the specific error handling at the syscall invocation call site. In some cases a failed syscall will be handled gracefully and in some places it won't. The \"may or may not continue execution\" part makes this mode potentially very confusing in practice so I think it makes sense to simply remove it for now.\r\n\r\nThe typo has been fixed. Thanks!",
      "commit_id" : "32321380b6b0da75058f4b383910077d6cba1f01",
      "created_at" : "2021-07-08T21:35:46Z",
      "diff_hunk" : "@@ -560,6 +561,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (\\\"disallow-and-log\\\", \\\"log-and-kill\\\" or \\\"kill\\\"). Allow only allowlisted (expected) syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"disallow-and-log\\\" mode an invokation of an unexpected syscall will be disallowed and logged. In the \\\"log-and-kill\\\" mode an invokation of an unexpected syscall will terminate bitcoind after logging the syscall violation. In the \\\"kill\\\" mode an invokation of an unexpected syscall will cause bitcoind to be killed immediately by the kernel.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r666533779",
      "id" : 666533779,
      "in_reply_to_id" : 663127043,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjUzMzc3OQ==",
      "original_commit_id" : "3535c27eb8f515275aee309b207bf3585f286ce5",
      "original_line" : 565,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 702519940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T21:44:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666533779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks a lot for reviewing @ryanofsky: excellent feedback (as always). The suggested changes simplified the implementation significantly.\r\n\r\nI believe all comments have been addressed, and I think this PR should be ready for final review and testing :)",
      "created_at" : "2021-07-13T09:12:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-878918411",
      "id" : 878918411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3ODkxODQxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-13T09:12:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878918411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674337310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nBoth sandboxing and multiprocess features are runtime options that can be chosen when starting bitcoin, so ideally this would not be treated as build time conflict.\r\n\r\nIdeally could drop this `--without-seccomp` flag and only disable sandboxing at runtime if is needed, but I guess this would test changes, something like a test_runner sandbox option and:\r\n\r\n```\r\nexport TEST_RUNNER_EXTRA=\"--nosandbox\"\r\n```",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-21T20:52:17Z",
      "diff_hunk" : "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674337310",
      "id" : 674337310,
      "line" : 14,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDMzNzMxMA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 14,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_multiprocess.sh",
      "position" : 5,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674337310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674341092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nDo you think this will be necessary permanently? It seems like more ideally sandbox would be able to adjust itself to work with sanitizers, or give a descriptive runtime error if using -sandbox with some sanitizer mode is incompatible.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-21T20:58:23Z",
      "diff_hunk" : "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674341092",
      "id" : 674341092,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM0MTA5Mg==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1438,
      "original_position" : 23,
      "original_start_line" : 1433,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674341092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould change this to `if (!args.GetArg(feature_using_execve, \"\")).empty())`, because IsArgSet won't do the right thing for negated arguments.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-21T21:21:29Z",
      "diff_hunk" : "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542",
      "id" : 674354542,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDM1NDU0Mg==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1032,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/674354542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nShould probably add `&& !args.IsArgNegated(\"-sandbox\")`",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-26T20:21:40Z",
      "diff_hunk" : "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974",
      "id" : 676915974,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkxNTk3NA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1014,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676915974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676920065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nUSE_SYSCALL_SANDBOX macro seems to be used inconsistently in this file, some functions are undefined, some are undefined but don't do anything. Clean thing to do would seem to remove all uses of USE_SYSCALL_SANDBOX in this file and just not compile it when sandboxing is not supported in the build.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-26T20:27:57Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676920065",
      "id" : 676920065,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjkyMDA2NQ==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676920065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676996958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nSome of this preprocessor magic seems strange. Can you maybe add a comment explaining, or linking to documentation?",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-26T22:54:53Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676996958",
      "id" : 676996958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5Njk1OA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : 35,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676996958",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676998117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add syscall sandboxing (seccomp-bpf)\" (333392fbb886c56b62446490a81610ee821006e7)\r\n\r\nAre these two return conditions ever expected? It would be helpful to have a comment saying one way or the other, or maybe replacing these with assert statements if they are never expected.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-26T22:57:46Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676998117",
      "id" : 676998117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Njk5ODExNw==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 408,
      "original_position" : 408,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 712180640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-26T23:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676998117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! Now fixed.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-31T16:47:07Z",
      "diff_hunk" : "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-kill\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"kill\") {\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-kill\\\" and \\\"kill\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (args.IsArgSet(feature_using_execve)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380954",
      "id" : 680380954,
      "in_reply_to_id" : 674354542,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk1NA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1032,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 719588166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-31T16:47:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! Now fixed.",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-31T16:47:20Z",
      "diff_hunk" : "@@ -1005,6 +1010,36 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380978",
      "id" : 680380978,
      "in_reply_to_id" : 676915974,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MDk3OA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1014,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 719588182,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-31T16:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680380978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point. I've now cut down on the preprocessor use, added comments and documentation links. Hopefully this should be more clear now :)",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-31T16:48:53Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381160",
      "id" : 680381160,
      "in_reply_to_id" : 676996958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTE2MA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : 35,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 719588277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-31T16:48:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point: they are never expected. Now `assert`:ing instead to make our expectations clear. Thanks!",
      "commit_id" : "4141c1bd3f7d6a65f35804062c07333270312729",
      "created_at" : "2021-07-31T16:50:00Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif // !SYS_SECCOMP\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else // defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+const std::map<uint32_t, std::string> SYSCALLS_LINUX_X86_64{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+// The syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = SYSCALLS_LINUX_X86_64.find(syscall_number);\n+    if (element != SYSCALLS_LINUX_X86_64.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381289",
      "id" : 680381289,
      "in_reply_to_id" : 676998117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM4MTI4OQ==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 408,
      "original_position" : 408,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 719588342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-31T16:51:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680381289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think not compiling it is an option since `void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` must be present regardless of `USE_SYSCALL_SANDBOX` (to avoid `ifdef`:s at the various call sites).\r\n\r\nIf `USE_SYSCALL_SANDBOX` is defined we currently need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n[[nodiscard]] bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating);\r\nvoid TestDisallowedSandboxCall();\r\n```\r\n\r\nIf `USE_SYSCALL_SANDBOX` is not defined we only need:\r\n\r\n```c++\r\nenum class SyscallSandboxPolicy;\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\n```\r\n\r\nIn the latter case `SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` is a no-op.\r\n\r\nI've now simplified the macro use so that in the case of `USE_SYSCALL_SANDBOX` not being defined we get:\r\n\r\n```c++\r\n$ cpp -I src/ src/util/syscall_sandbox.cpp | grep -vE '^(#|$)'\r\nenum class SyscallSandboxPolicy {\r\n    INITIALIZATION,\r\n    INITIALIZATION_DNS_SEED,\r\n    INITIALIZATION_LOAD_BLOCKS,\r\n    INITIALIZATION_MAP_PORT,\r\n    INITIALIZATION_TOR_CONTROL,\r\n    MESSAGE_HANDLER,\r\n    NET,\r\n    NET_ADD_CONNECTION,\r\n    NET_HTTP_SERVER,\r\n    NET_HTTP_SERVER_WORKER,\r\n    NET_OPEN_CONNECTION,\r\n    SCHEDULER,\r\n    TX_INDEX,\r\n    VALIDATION_SCRIPT_CHECK,\r\n    SHUTOFF,\r\n};\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\r\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\r\n{\r\n}\r\n```\r\n\r\nAnother option would be to add `#if defined` at all call sites along the lines of:\r\n\r\n```c++\r\n#if defined(USE_SYSCALL_SANDBOX)\r\nSetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\n#endif // defined(USE_SYSCALL_SANDBOX)\r\n```\r\n\r\nThese are the call sites:\r\n\r\n```\r\ngit grep SetSyscallSandbox -- \":(exclude)src/util/\"\r\nsrc/bitcoind.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SHUTOFF);\r\nsrc/checkqueue.h:                SetSyscallSandboxPolicy(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER);\r\nsrc/httpserver.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\r\nsrc/index/base.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TX_INDEX);\r\nsrc/mapport.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_ADD_CONNECTION);\r\nsrc/net.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::MESSAGE_HANDLER);\r\nsrc/node/blockstorage.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\r\nsrc/scheduler.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SCHEDULER);\r\nsrc/torcontrol.cpp:    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL);\r\n```\r\n\r\nWDYT? :)",
      "commit_id" : "414149fdfa80352f487a2e54e3e7ca9ea6592ca6",
      "created_at" : "2021-07-31T18:51:42Z",
      "diff_hunk" : "@@ -0,0 +1,830 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190",
      "id" : 680396190,
      "in_reply_to_id" : 676920065,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDM5NjE5MA==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/util/syscall_sandbox.cpp",
      "position" : null,
      "pull_request_review_id" : 719596524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-31T18:51:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680396190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've now added  an`--nosandbox` test runner option, and `export TEST_RUNNER_EXTRA=\"--nosandbox\"` for this job.\r\n\r\nWhat would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?",
      "commit_id" : "414194e0fbe1174c5bac9dd8cd9e40c6cf5e0fdf",
      "created_at" : "2021-07-31T20:34:41Z",
      "diff_hunk" : "@@ -11,7 +11,8 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+# The multiprocess feature is currently incompatible with the experimental syscall sandbox feature (-sandbox=<mode>).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422",
      "id" : 680406422,
      "in_reply_to_id" : 674337310,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjQyMg==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 14,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_multiprocess.sh",
      "position" : null,
      "pull_request_review_id" : 719601908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-31T20:34:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm planning on tackling sanitizer compatibility in a follow-up PR. It is not entirely trivial since sanitizer use is not easy to detect at runtime (AFAIK) and the different sanitizers introduce the use of different sets of syscalls, but it should hopefully be doable some way. However, I prefer keeping that outside of this PR to keep things focused on the \"standard\" non-sanitizer case first :)",
      "commit_id" : "414194e0fbe1174c5bac9dd8cd9e40c6cf5e0fdf",
      "created_at" : "2021-07-31T20:39:25Z",
      "diff_hunk" : "@@ -1421,6 +1427,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+    AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+   seccomp_found=no\n+fi",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406872",
      "id" : 680406872,
      "in_reply_to_id" : 674341092,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDQwNjg3Mg==",
      "original_commit_id" : "333392fbb886c56b62446490a81610ee821006e7",
      "original_line" : 1438,
      "original_position" : 23,
      "original_start_line" : 1433,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 719602170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-31T20:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680406872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
