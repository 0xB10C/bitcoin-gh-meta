[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK but it would be much better if checks like this could be done at compile time instead of run time. This seems to me like a kind of a python-esque solution instead of a static language one.\r\n",
      "created_at" : "2020-11-23T11:14:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#issuecomment-732095391",
      "id" : 732095391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMjA5NTM5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-23T11:14:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732095391",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "UniValue::getType() is not a compile-time constant, so I don't think this works at compile time (without replacing UniValue with something else)",
      "created_at" : "2020-11-23T11:44:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#issuecomment-732110388",
      "id" : 732110388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMjExMDM4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-23T11:44:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732110388",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20556 (rpc: Properly document return values (submitblock, gettxout, getblocktemplate, scantxoutset) by MarcoFalke)\n* #20286 (rpc: deprecate `addresses` and `reqSigs` from rpc outputs by mjdietzx)\n* #20017 (rpc: Add RPCContext by promag)\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCommand by MarcoFalke)\n* #19521 (Coinstats Index (without UTXO set hash) by fjahr)\n* #19002 (docs: Document that 'fee' is unavailable when there are non-wallet inputs by shesek)\n* #16795 (rpc: have raw transaction decoding infer output descriptors by instagibbs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-23T21:43:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#issuecomment-732443956",
      "id" : 732443956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMjQ0Mzk1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-03T14:19:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732443956",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Please review #20556 first ",
      "created_at" : "2020-12-24T11:48:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#issuecomment-750859925",
      "id" : 750859925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MDg1OTkyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-24T11:48:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750859925",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK, very nice! having a programatic check that the docs are in sync with the actual output seems like a win for maintaining up-to-date docs & reducing review burden ",
      "created_at" : "2020-12-24T23:31:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#issuecomment-751130023",
      "id" : 751130023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTEzMDAyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-24T23:31:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751130023",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549075478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549075478"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: using single quotes isn't valid JSON or C++. Maybe use double quotes?",
      "commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "created_at" : "2020-12-27T07:10:13Z",
      "diff_hunk" : "@@ -505,83 +505,84 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n static RPCHelpMan getblocktemplate()\n {\n     return RPCHelpMan{\"getblocktemplate\",\n-                \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n-                \"It returns data needed to construct a block to work on.\\n\"\n-                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+        \"It returns data needed to construct a block to work on.\\n\"\n+        \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        {\n+            {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n+            {\n+                {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n-                        {\n-                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n-                                {\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n-                                },\n-                                },\n-                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n-                                {\n-                                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n-                                },\n-                                },\n-                        },\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                }},\n+                {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n+                {\n+                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n+                }},\n+            },\n                         \"\\\"template_request\\\"\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"When mode=='proposal'\", RPCResult::Type::STR, \"\", \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549075478",
      "id" : 549075478,
      "line" : 532,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NTQ3OA==",
      "original_commit_id" : "fa6135b1cb8d61fb0fd2e24458f2adfb8293db2c",
      "original_line" : 532,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/rpc/mining.cpp",
      "position" : 53,
      "pull_request_review_id" : 558907861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-27T07:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549075478",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549075547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549075547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here: single quotes isn't valid JSON.",
      "commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "created_at" : "2020-12-27T07:11:13Z",
      "diff_hunk" : "@@ -2122,59 +2122,64 @@ class CoinsViewScanReserver\n static RPCHelpMan scantxoutset()\n {\n     return RPCHelpMan{\"scantxoutset\",\n-                \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n-                \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n-                \"Examples of output descriptors are:\\n\"\n-                \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n-                \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n-                \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n-                \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n-                \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n-                \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-                \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n-                \"unhardened or hardened child keys.\\n\"\n-                \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-                \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+        \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+        \"Examples of output descriptors are:\\n\"\n+        \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n+        \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+        \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n+        \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+        \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+        \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+        \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n+        \"unhardened or hardened child keys.\\n\"\n+        \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+        \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        {\n+            {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+                \"\\\"start\\\" for starting a scan\\n\"\n+                \"\\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+                \"\\\"status\\\" for progress report (in %) of the current scan\"},\n+            {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n+                \"Every scan object is either a string descriptor or an object:\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n-            \"                                      \\\"start\\\" for starting a scan\\n\"\n-            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n-            \"                                  Every scan object is either a string descriptor or an object:\",\n-                        {\n-                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n-                                {\n-                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n-                                },\n-                            },\n-                        },\n+                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                }},\n+            },\n                         \"[scanobjects,...]\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"When action=='abort'\", RPCResult::Type::BOOL, \"\", \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549075547",
      "id" : 549075547,
      "line" : 2156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NTU0Nw==",
      "original_commit_id" : "9999759ecc1e05cc7e2eba73541c0d3e4cc6814e",
      "original_line" : 2156,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 172,
      "pull_request_review_id" : 558907861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-27T07:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549075547",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549076087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549076087"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion for a follow-up: for NUM_AMOUNT, you can do a stronger test (parse with AmountFromValue, convert back to JSON using ValueFromAmount, and the string representation must match exactly).",
      "commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "created_at" : "2020-12-27T07:16:58Z",
      "diff_hunk" : "@@ -724,6 +733,42 @@ void RPCResult::ToSections(Sections& sections, const OuterType outer_type, const\n     CHECK_NONFATAL(false);\n }\n \n+bool RPCResult::MatchesType(const UniValue& result) const\n+{\n+    switch (m_type) {\n+    case Type::ELISION: {\n+        return false;\n+    }\n+    case Type::ANY: {\n+        return true;\n+    }\n+    case Type::NONE: {\n+        return UniValue::VNULL == result.getType();\n+    }\n+    case Type::STR:\n+    case Type::STR_HEX: {\n+        return UniValue::VSTR == result.getType();\n+    }\n+    case Type::NUM:\n+    case Type::NUM_AMOUNT:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549076087",
      "id" : 549076087,
      "line" : 753,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NjA4Nw==",
      "original_commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "original_line" : 753,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : 53,
      "pull_request_review_id" : 558907861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-27T07:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549076087",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549086474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549086474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The existing docs use single quotes:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/02cf20b9f571474c939d18a8b9d6b5d22479a222/src/rpc/mining.cpp#L508\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/02cf20b9f571474c939d18a8b9d6b5d22479a222/src/rpc/mining.cpp#L521\r\n\r\nSo I used that. Also, a lot of RPC clients are implemented in python, which also allows single quotes.",
      "commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "created_at" : "2020-12-27T09:06:18Z",
      "diff_hunk" : "@@ -505,83 +505,84 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n static RPCHelpMan getblocktemplate()\n {\n     return RPCHelpMan{\"getblocktemplate\",\n-                \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n-                \"It returns data needed to construct a block to work on.\\n\"\n-                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+        \"It returns data needed to construct a block to work on.\\n\"\n+        \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        {\n+            {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n+            {\n+                {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n-                        {\n-                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n-                                {\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n-                                },\n-                                },\n-                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n-                                {\n-                                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n-                                },\n-                                },\n-                        },\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                }},\n+                {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n+                {\n+                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n+                }},\n+            },\n                         \"\\\"template_request\\\"\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"When mode=='proposal'\", RPCResult::Type::STR, \"\", \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549086474",
      "id" : 549086474,
      "in_reply_to_id" : 549075478,
      "line" : 532,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4NjQ3NA==",
      "original_commit_id" : "fa6135b1cb8d61fb0fd2e24458f2adfb8293db2c",
      "original_line" : 532,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/rpc/mining.cpp",
      "position" : 53,
      "pull_request_review_id" : 558913777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-27T09:06:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549086474",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549086549"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549086549"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549086474",
      "commit_id" : "faca73c07461f3344c7f88ea63727d9ac1c70b2a",
      "created_at" : "2020-12-27T09:06:38Z",
      "diff_hunk" : "@@ -2122,59 +2122,64 @@ class CoinsViewScanReserver\n static RPCHelpMan scantxoutset()\n {\n     return RPCHelpMan{\"scantxoutset\",\n-                \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n-                \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n-                \"Examples of output descriptors are:\\n\"\n-                \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n-                \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n-                \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n-                \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n-                \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n-                \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-                \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n-                \"unhardened or hardened child keys.\\n\"\n-                \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-                \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+        \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+        \"Examples of output descriptors are:\\n\"\n+        \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n+        \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+        \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n+        \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+        \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+        \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+        \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n+        \"unhardened or hardened child keys.\\n\"\n+        \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+        \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        {\n+            {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+                \"\\\"start\\\" for starting a scan\\n\"\n+                \"\\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+                \"\\\"status\\\" for progress report (in %) of the current scan\"},\n+            {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n+                \"Every scan object is either a string descriptor or an object:\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n-            \"                                      \\\"start\\\" for starting a scan\\n\"\n-            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n-            \"                                  Every scan object is either a string descriptor or an object:\",\n-                        {\n-                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n-                                {\n-                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n-                                },\n-                            },\n-                        },\n+                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                }},\n+            },\n                         \"[scanobjects,...]\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"When action=='abort'\", RPCResult::Type::BOOL, \"\", \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20459#discussion_r549086549",
      "id" : 549086549,
      "in_reply_to_id" : 549075547,
      "line" : 2156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4NjU0OQ==",
      "original_commit_id" : "9999759ecc1e05cc7e2eba73541c0d3e4cc6814e",
      "original_line" : 2156,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 172,
      "pull_request_review_id" : 558913802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20459",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-27T09:06:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549086549",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
