[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528326970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528326970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please, do not just return 0 in case of a parse error (same comment above!) but use explicit error feedback. The current formulation encourages ignoring errors. Most C++17ish would be to return an `Option`.\r\n(then handle it at the call site, if it wants to squash any errors to 0, fine)",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T12:16:12Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528326970",
      "id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNjk3MA==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536056110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528326970",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528328860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528328860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Making a copy of the string here, as well as below for the +/- check, is kind of efficient.\r\nNot sure it matters here, it's not like this function is used in any performance critical places at the moment.\r\n\r\nBut as the function takes a range, we could do better.",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T12:32:37Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528328860",
      "id" : 528328860,
      "line" : 80,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODg2MA==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 80,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 21,
      "pull_request_review_id" : 536057437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528328860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528333055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528333055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you need to check the returned pointer against `last` as well, otherwise it ignores any remainder.",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T13:06:00Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528333055",
      "id" : 528333055,
      "in_reply_to_id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzA1NQ==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536060474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528333055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528341227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528341227"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree on both for a sane safe interface, but since this function (`LocaleIndependentAtoi`) is meant as a quirk-by-quirk compatible to the not-entirely-sane `atoi(â¦)` I'm afraid we need to return a `T` (instead of `std::optional<T>`) and ignore any remainder, no? :)",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T14:12:08Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528341227",
      "id" : 528341227,
      "in_reply_to_id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM0MTIyNw==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536066098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:12:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528341227",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
