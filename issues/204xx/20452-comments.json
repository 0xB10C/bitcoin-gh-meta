[
   {
      "author_association" : "MEMBER",
      "body" : "Note that we have a function `ParseInt32` (as well as 64 and UInt variants) for this and I once tried to use it in more places, see #17385.\r\n\r\nHowever these didn't turn out to be actually locale-independent. Maybe this can replace them eventually.\r\n",
      "created_at" : "2020-11-22T12:15:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731738740",
      "id" : 731738740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTczODc0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T12:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731738740",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528326970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528326970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please, do not just return 0 in case of a parse error (same comment above!) but use explicit error feedback. The current formulation encourages ignoring errors. Most C++17ish would be to return an `Option`.\r\n(then handle it at the call site, if it wants to squash any errors to 0, fine)",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T12:16:12Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528326970",
      "id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNjk3MA==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536056110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528326970",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  locale-independent std::from_chars(â¦) (C++17).\r\n\r\nThis is good to hear at least. From https://en.cppreference.com/w/cpp/utility/from_chars#Notes :\r\n\r\n> Unlike other parsing functions in C++ and C libraries, std::from_chars is locale-independent, non-allocating, and non-throwing.\r\n\r\nConcept ACK.",
      "created_at" : "2020-11-22T12:23:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731739877",
      "id" : 731739877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTczOTg3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T12:28:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731739877",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528328860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528328860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Making a copy of the string here, as well as below for the +/- check, is kind of efficient.\r\nNot sure it matters here, it's not like this function is used in any performance critical places at the moment.\r\n\r\nBut as the function takes a range, we could do better.",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T12:32:37Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528328860",
      "id" : 528328860,
      "line" : 80,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODg2MA==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 80,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 21,
      "pull_request_review_id" : 536057437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528328860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528333055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528333055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you need to check the returned pointer against `last` as well, otherwise it ignores any remainder.",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T13:06:00Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528333055",
      "id" : 528333055,
      "in_reply_to_id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzA1NQ==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536060474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528333055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20273 (Extend support for nested commands to bitcoin-cli by jonasschnelli)\n* #18130 (Replace uses of boost::trim* with locale-independent alternatives by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-22T13:18:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731747267",
      "id" : 731747267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTc0NzI2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T13:18:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731747267",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think we need to make a choice here (either one or both):\r\n\r\n- Make an emulation of all broken and surprising `atoi` behavior, but call it something else than `ToIntegral`, something like `LocaleIndependentAtoi`, make it clear it should not be used in new code, it's only meant for preserving `atoi` behavior for backward compatibility reasons.\r\n- Make a sane integer parsing function that can eventually replace `Parse[U]IntXX` or their contents in a locale-independent way. I'm fine with the name then.\r\n",
      "created_at" : "2020-11-22T13:29:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731748771",
      "id" : 731748771,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTc0ODc3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T13:31:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731748771",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj\r\n\r\n> I think we need to make a choice here (either one or both):\r\n> \r\n> * Make an emulation of all broken and surprising `atoi` behavior, but call it something else than `ToIntegral`, something like `LocaleIndependentAtoi`, make it clear it should not be used in new code, it's only meant for preserving `atoi` behavior for backward compatibility reasons.\r\n> * Make a sane integer parsing function that can eventually replace `Parse[U]IntXX` or their contents in a locale-independent way. I'm fine with the name then.\r\n\r\nGood point. I thought about those options as well. I think we should do both. This PR is meant as a pure refactoring: it is not meant to change any behaviour that is defined by `atoi`.\r\n\r\n I've now made it more clear that this PR is meant as a quirk-by-quirk compatible replacement for `atoi` by calling the function `LocaleIndependentAtoi` :)\r\n\r\nGood point about naming: we should keep the name `ToIntegral` for a future sane version that doesn't emulate `atoi` or any other legacy function.",
      "created_at" : "2020-11-22T14:07:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731753699",
      "id" : 731753699,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTc1MzY5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T14:15:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731753699",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528341227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528341227"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree on both for a sane safe interface, but since this function (`LocaleIndependentAtoi`) is meant as a quirk-by-quirk compatible to the not-entirely-sane `atoi(â¦)` I'm afraid we need to return a `T` (instead of `std::optional<T>`) and ignore any remainder, no? :)",
      "commit_id" : "25ad608f9ba69bd36bff4ef715454a9186f3697a",
      "created_at" : "2020-11-22T14:12:08Z",
      "diff_hunk" : "@@ -69,7 +71,25 @@ std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+template <typename T>\n+T ToIntegral(const std::string& str)\n+{\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528341227",
      "id" : 528341227,
      "in_reply_to_id" : 528326970,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM0MTIyNw==",
      "original_commit_id" : "be0efcd2136a046a15efc207dfbab7bdba818849",
      "original_line" : 89,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/util/strencodings.h",
      "position" : 30,
      "pull_request_review_id" : 536066098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20452",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T14:12:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528341227",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Okay, agree. I guess it could replace `atoi` as well as `atoi64` in that case (as it's parametrized on type)?",
      "created_at" : "2020-11-22T17:48:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731783760",
      "id" : 731783760,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTc4Mzc2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T17:48:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731783760",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Done! I've now replaced all instances of `atoi64(s)` with `LocaleIndependentAtoi<int64_t>(s)`.",
      "created_at" : "2020-11-22T19:48:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731834478",
      "id" : 731834478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20452",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMTgzNDQ3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-22T19:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731834478",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
