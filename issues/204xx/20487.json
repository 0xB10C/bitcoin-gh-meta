{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Add experimental syscall sandboxing using seccomp-bpf (Linux secure computing mode).\r\n\r\nEnable filtering of system calls using seccomp-bpf: allow only explicitly allowlisted (expected) syscalls to be called. \r\n\r\nThe syscall sandboxing implemented in this PR is an experimental feature currently available only under Linux x86-64. It is disabled by default.\r\n\r\nThe feature is enabled via the `configure`-flag  `--enable-syscall-sandbox`.\r\n\r\nIn this implementation the allowed syscalls are defined on a per thread basis.\r\n\r\nThis feature has two modes of operation:\r\n* Debug mode (default): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report. Exiting.`) and `std::terminate` is called.\r\n* Kill mode: If a non-allowlisted syscall is called the kernel will immediately kill the offending thread. This is an experimental mode and is currently enabled via setting the environment variable `EXPERIMENTAL_SYSCALL_SANDBOX_MODE_KILL_THREAD`.\r\n\r\nI've used this feature for roughly six months now (in the debug mode) and I find it to be a helpful testing/debugging addition which makes it much easier to reason about the actual capabilities required of each thread in Bitcoin Core.\r\n\r\n[About seccomp and seccomp-bpf](https://en.wikipedia.org/wiki/Seccomp):\r\n\r\n> In computer security, seccomp (short for secure computing mode) is a facility in the Linux kernel. seccomp allows a process to make a one-way transition into a \"secure\" state where it cannot make any system calls except exit(), sigreturn(), and read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS. In this sense, it does not virtualize the system's resources but isolates the process from them entirely.\r\n>\r\n> [â¦]\r\n> \r\n> seccomp-bpf is an extension to seccomp that allows filtering of system calls using a configurable policy implemented using Berkeley Packet Filter rules. It is used by OpenSSH and vsftpd as well as the Google Chrome/Chromium web browsers on Chrome OS and Linux. (In this regard seccomp-bpf achieves similar functionality, but with more flexibility and higher performance, to the older systraceâwhich seems to be no longer supported for Linux.)",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487/comments",
   "created_at" : "2020-11-25T09:27:44Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487",
   "id" : 750646536,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NTI3MzAzNjY4",
   "number" : 20487,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/20487.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20487",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/20487.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20487"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode)",
   "updated_at" : "2020-11-25T09:29:48Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20487",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
