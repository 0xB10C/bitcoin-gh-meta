[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20196 (net: fix GetListenPort() to derive the proper port by vasild)\n* #20138 (net: Assume that SetCommonVersion is called at most once per peer by MarcoFalke)\n* #19972 (fuzz/net: Add fuzzing harness for node eviction logic. Make node eviction logic testable. by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-24T19:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733196012",
      "id" : 733196012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzE5NjAxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-04T11:43:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733196012",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for working on adding testing here. I'll try to review this soon.",
      "created_at" : "2020-11-24T22:16:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733264515",
      "id" : 733264515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzI2NDUxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-24T22:16:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733264515",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please move this doc-comment to the header, it's an exported function now.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-03T12:12:21Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346",
      "id" : 535175346,
      "line" : 973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3NTM0Ng==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 973,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 92,
      "pull_request_review_id" : 543891357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Thanks for adding tests.\r\n\r\nI sometimes wonder if it would make sense to move \"semi-internal\" things that are only exposed externally for unit testing, like in this case \"NodeEvictionCandidate\" and \"SelectNodeToEvict\", to a separate set of headers. But not here anyhow.\r\n",
      "created_at" : "2020-12-03T12:12:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-737904003",
      "id" : 737904003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNzkwNDAwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-03T12:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737904003",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be valuable to break this out into the various reasons the peers are protected from eviction? For example:\r\n\r\nIn src/net.h\r\n```\r\nconst int PEERS_PROTECTED_BY_NET_GROUP = 4                \r\n```\r\n\r\nIn src/net.cpp\r\n```\r\nEraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, PEERS_PROTECTED_BY_NET_GROUP);\r\n```\r\n\r\nIn src/test/net_tests.cpp:\r\n```\r\nGUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = PEERS_PROTECTED_BY_NET_GROUP + ... + 1\r\n```",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T00:35:09Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838",
      "id" : 535748838,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0ODgzOA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this the highest such number at which non-eviction is guaranteed? If so, could you help me understand how we get 20?",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T00:42:48Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650",
      "id" : 535751650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MTY1MA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 826,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it make sense to use `emplace_back` here?",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T04:49:36Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762",
      "id" : 535833762,
      "line" : 1006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzMzc2Mg==",
      "original_commit_id" : "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "original_line" : 1006,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a silent merge conflict with master. `NODISCARD` should be replaced with `[[nodiscard]]`",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:07:59Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248",
      "id" : 536124248,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNDI0OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this called with `cs_vNodes` held? Previously, we'd release the lock before running through this logic.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:16:33Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812",
      "id" : 536129812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyOTgxMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the reason for the `std::move` here? Why not just pass this as an lvalue reference?",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:19:11Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595",
      "id" : 536131595,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTU5NQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why return a `NodeEvictionCandidate` optional here, when only the NodeId is used? I think it'd be better to return an `Optional<NodeId>`",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:19:19Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724",
      "id" : 536131724,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTcyNA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can create duplicate node ids, which isn't possible in the product code.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:21:49Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393",
      "id" : 536133393,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMzM5Mw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 780,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does this break if there are multiple eviction candidates with the same id?",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:23:02Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247",
      "id" : 536134247,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNDI0Nw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 803,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nconstexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\r\n```",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:24:57Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582",
      "id" : 536135582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNTU4Mg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think if you just constructed the `NodeEvictionCandidate`s with sequential node id numbers, you wouldn't need to do this here.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T14:28:10Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843",
      "id" : 536137843,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzg0Mw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 856,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. It can be moved to the outer scope. Thanks!\r\n\r\nContext: https://github.com/bitcoin/bitcoin/pull/19972#discussion_r518136772",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T15:01:09Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068",
      "id" : 536161068,
      "in_reply_to_id" : 536129812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTA2OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545034386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Fixed!",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:09:29Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109",
      "id" : 536209109,
      "in_reply_to_id" : 536124248,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTEwOQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense. Feedback addressed!",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:09:47Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322",
      "id" : 536209322,
      "in_reply_to_id" : 536131724,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTMyMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Done!",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:10:06Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505",
      "id" : 536209505,
      "in_reply_to_id" : 535175346,
      "line" : 973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTUwNQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 973,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 92,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "rvalue ref was suggested by @sipa: see  https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066 for rationale.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:10:33Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802",
      "id" : 536209802,
      "in_reply_to_id" : 536131595,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTgwMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now setting `id` to `i` directly making it unique. Instead of relying on the caller doing this :)",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:12:19Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032",
      "id" : 536211032,
      "in_reply_to_id" : 536133393,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTAzMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 780,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, the code was relying on the caller making sure the candidate ids are unique. Now doing that in `GetRandomNodeEvictionCandidates` as suggested.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:13:31Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787",
      "id" : 536211787,
      "in_reply_to_id" : 536134247,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTc4Nw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 803,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That is nicer. Addressed!",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:13:53Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035",
      "id" : 536212035,
      "in_reply_to_id" : 536135582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjAzNQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Done!",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T16:14:17Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266",
      "id" : 536212266,
      "in_reply_to_id" : 536137843,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjI2Ng==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 856,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, but I'm afraid I cannot help you with that at the moment: so far it is a purely an empirical/experimental result :D\r\n\r\nCounterexamples or proofs welcome! :)",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T22:29:32Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",
      "id" : 536421598,
      "in_reply_to_id" : 535751650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTU5OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 826,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that is a good idea but I kind of like that this PR doesn't touch the actual selection code (keeping the diff at a minimum). I'd like to keep it that way but I'd be glad to review a change like the one suggested in a trivial \"introduce constants\" PR:).",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T22:33:26Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191",
      "id" : 536423191,
      "in_reply_to_id" : 535748838,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzE5MQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm afraid that won't be possible until C++20Â¹ :) See [P0960: \"Allow initializing aggregates from a parenthesized list of values\" ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0960r0.html).\r\n\r\nÂ¹ Assuming you mean without adding a new ctor to `NodeEvictionCandidate`.",
      "commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "created_at" : "2020-12-04T23:03:04Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923",
      "id" : 536434923,
      "in_reply_to_id" : 535833762,
      "line" : 1006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNDkyMw==",
      "original_commit_id" : "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "original_line" : 1006,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 545353983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-05T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tsan failue can be ignored or fixed by a rebase",
      "created_at" : "2020-12-05T05:35:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739130004",
      "id" : 739130004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTEzMDAwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T05:35:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739130004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Thanks! Rebased!",
      "created_at" : "2020-12-05T10:05:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739155734",
      "id" : 739155734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTE1NTczNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T10:05:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739155734",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
