[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16851](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16851.html) (Continue relaying transactions after they expire from mapRelay by ajtowns)\n* [#16839](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16839.html) (Replace Connman and BanMan globals with Node local by ryanofsky)\n* [#16756](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16756.html) (test: Connection eviction logic tests by mzumsande)\n* [#16688](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16688.html) (log: Add validation interface logging by jkczyz)\n* [#16341](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16341.html) (Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes) by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-23T18:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524422172",
      "id" : 524422172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQyMjE3Mg==",
      "updated_at" : "2019-10-17T08:05:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524422172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\r\n```\r\ntest/functional/wallet_resendwallettransactions.py:9:1: F401 'test_framework.blocktools.create_coinbase' imported but unused",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-23T21:45:00Z",
      "diff_hunk" : "@@ -6,11 +6,10 @@\n from collections import defaultdict\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import ToHex\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.blocktools import create_coinbase",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984",
      "id" : 317311984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMxMTk4NA==",
      "original_commit_id" : "c383bdeea494fe05d1fd6332b72b7517e78b2ba0",
      "original_position" : 7,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : null,
      "pull_request_review_id" : 279235742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This code is ready for initial review.\r\n\r\nthere are still some to dos before it would be ready for merge: \r\n- identify expected rebroadcast traffic & worst case bandwidth usage.\r\n- persist `setUnbroadcastTxIDs` to `mempool.dat` \r\n- add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\nthere are also some follow-ups that can be addressed in separate PRs: \r\n- `m_best_block_time` is no longer used & can be removed & the wallet no longer needs to subscribe to `UpdatedBlockTip()` validation interface method\r\n- functionality to mark a peer (as \"local\" or such) so the mempool would still enforce initial broadcast for transactions received from one of these peers. ",
      "created_at" : "2019-08-23T22:23:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540",
      "id" : 524480540,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDU0MA==",
      "updated_at" : "2019-08-23T22:23:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480540",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-23T22:24:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480853",
      "id" : 524480853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDg1Mw==",
      "updated_at" : "2019-08-23T22:24:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480853",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-24T21:22:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524581595",
      "id" : 524581595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDU4MTU5NQ==",
      "updated_at" : "2019-08-24T21:22:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524581595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 25a3b0ac6aea95845c48c0a345325af8ad15c3ca:\r\n\r\nThe legacy signature of this function takes as argument type and return type microseconds. Can you explain why this one is different?\r\nNote that you are allowed to pass in `std::chrono::seconds` when the function takes `std::chrono::microseconds`.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-25T15:44:13Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017",
      "id" : 317404017,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDAxNw==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 12,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same commit:\r\n\r\nCan you explain how the cast to seconds has an effect on the distribution? It appears that the most likely return value will be exactly `0`? Alternatively, I'd rather return microseconds just like the existing function.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-25T15:46:46Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110",
      "id" : 317404110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDExMA==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit fd92d22540f97924bd73301dc061005b401d7472:\r\n\r\nI'd prefer if new members are prefixed with `m_` and used snake case according to the dev notes. This makes it easier to guess from the variable name if something is a member, a global, or just  a symbol in the local scope. Additionally, I'd prefer to use `std::chrono::seconds` (or whatever the type is) for those reasons:\r\n\r\n* It documents the type for reviewers\r\n* It enforces the type at compile time and prevents unwanted casts\r\n* It documents that the time is mockable. (I know that the memepool currently is mockable and uses the legacy `GetTime()` function and types, but at least new code should use the new `GetTime<>()` functions and types.)",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-25T15:48:22Z",
      "diff_hunk" : "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179",
      "id" : 317404179,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDE3OQ==",
      "original_commit_id" : "fd92d22540f97924bd73301dc061005b401d7472",
      "original_position" : 4,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit af38c70497575c9ad33901a19db01a7f104ffaeb\r\n\r\nCan you add a comment why this would ever be true, otherwise remove the dead code.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-25T15:57:55Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560",
      "id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDU2MA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah my bad, will fix\r\n\r\nbased on this tip \r\n> Note that you are allowed to pass in std::chrono::seconds when the function takes std::chrono::microseconds.\r\n\r\nI'm thinking of updating the function signature to both take in & return microseconds. And the caller can pass through seconds when needed. I'm interested in moving all the poisson invocations to the chrono in a follow up PR. Its less of a gotcha since chrono requires the duration to be explicit, but it would be nice for it to be consistent. ",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T20:11:09Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787",
      "id" : 317776787,
      "in_reply_to_id" : 317404110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc3Njc4Nw==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279809888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If we add wallet transactions to the rebroadcast INV that have a smaller feerate than the top of our mempool, wouldnât there be a feerate gap to the other INVs of the message, making the wallet transactions easily identifiable as such and reducing privacy?",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:20:46Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991",
      "id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwMzk5MQ==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 279845040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This goes into timeout for me, causing `wallet_resendwallettransactions` to fail when I run the entire test suite (same as in AppVeyor build here) but the test succeeds if I run it in isolation. If you canât reproduce this I could look deeper into why it fails.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:25:09Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635",
      "id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwNTYzNQ==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 279845040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added it as a safeguard. Do you feel confident it would never happen? If so, I will take another careful look at the logic to build my own confidence & remove. ",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:39:34Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628",
      "id" : 317810628,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMDYyOA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279853357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Even if it would, any follow-up logic that deals with the returned set needs to be robust against missing txs anyway.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:46:17Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879",
      "id" : 317812879,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMjg3OQ==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279856083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note that `::mempool.cs` is released as soon as this method returns.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:47:47Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390",
      "id" : 317813390,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMzM5MA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279856718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "correct. I will add a comment to document.\r\n\r\nthis logic should only trigger when a user submits a txn locally and it doesn't get initially relayed..  an example where this would be needed.. a user submits a low fee rate txn with p2p disabled, inspects it in the local mempool, and enables p2p. currently, the txn would get initially relayed due to the wallet rebroadcast logic. with the proposed changes (w/out this additional mempool-force-relays-unbroadcast-txns mechansim), the node could have to be running at a pretty specific time (when the mempool is clearing out and mining low fee rate txns) in order for the txn to ever initially get broadcast. thus, `setInventoryTxToSend`. \r\n\r\nIn terms of privacy guarantees (or lack thereof) it mimics the current behavior. If you have any suggestions for how we could improve while preserving the propagation guarantees, I'm all ears :) ",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:52:14Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851",
      "id" : 317814851,
      "in_reply_to_id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNDg1MQ==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 279858549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh interesting. I haven't been able to reproduce locally. I would love some help! ",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-26T21:53:15Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144",
      "id" : 317815144,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNTE0NA==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 279858950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the review @mzumsande ! \r\n\r\n> I donât understand 1) the concept âshould have been mined\" [...] do you mean the txns should have been mined in a specific block/range of blocks, but werenât? Should no rebroadcasts happen in an ideal world where miners have an identical mempool to ours and mine rationally?\r\n\r\nbased on the local mempool, we are attempting to answer the question of what txns we think should have been mined. And saying if it wasn't, maybe there was an issue with relay. \r\nYou are correct- in a world where all mempools are consistent there wouldn't be rebroadcasts.\r\n\r\n> As to 2) from what I understand, BlockAssembler creates a block template with 3/4*MAX_BLOCK_WEIGHT including the top feerate packages of our current mempool. Wouldnât it always fill this block template with txns if our mempool is large enough, and therefore rather include 75% of the txns that we expect to be mined in the next block, instead of txns that should have been mined in the past?\r\n\r\nyes. you will start with txns you expect to be mined in the next block. the recency filter will (likely) remove some of those transactions. however, in the case of a mempool thats emptying out, the recency filter might not have much effect. for that I have this todo before the PR would be ready for merge: \r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set",
      "created_at" : "2019-08-26T22:20:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525055857",
      "id" : 525055857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTA1NTg1Nw==",
      "updated_at" : "2019-08-26T22:20:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525055857",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> based on the local mempool, we are attempting to answer the question of what txns we think should have been mined.\r\n\r\nWhat confuses me is how we can answer that without actually looking into recent blocks. \r\nConsidering that txns are removed from the mempool once they are included in a valid block, it is possible that the previous blocks removed the respective top of our previous versions of the mempool, so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\nOr the miners could have left out several high-fee-rate txns in favor of lower ones, in which case the higher ones are still present in our mempool and we would like to rebroadcast them. \r\nOr there just might have been no new blocks found in the hour since the last rebroadcast, in which case we wouldn't need to rebroadcast. \r\n\r\nHow could we distinguish between these cases by just looking at our current mempool?\r\n",
      "created_at" : "2019-08-26T22:51:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525063430",
      "id" : 525063430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTA2MzQzMA==",
      "updated_at" : "2019-08-26T22:51:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525063430",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that this is due to a bug with the time: `RESEND_TXS_FREQUENCY` is in microseconds. It is added to `GetTime()`  which is in seconds, so an actual resend doesn't ever happen in test. \r\nYet the test sometimes succeeds because there is an initial resend (`nNextResend` is initialized to 0) which in some runs happens after the mocktime is set to two weeks and the tx has been expired (test passes), in some runs happens earlier (test fails).",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-27T16:55:19Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941",
      "id" : 318189941,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE4OTk0MQ==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 280336125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for digging in!! I will fix the bug and ensure the times are consistent in microseconds. \r\n\r\ncould you tell me more about how you debugged? were you able to isolate the failure, or was it always when run in the entire suite? I'm curious why this behavior wouldn't manifest as a flaky test when run in isolation. ",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-29T00:14:24Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467",
      "id" : 318842467,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODg0MjQ2Nw==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 281165072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "great questions @mzumsande. I've thought about this a lot, so let me share some of my reasoning- \r\n \r\n> What confuses me is how we can answer that without actually looking into recent blocks.\r\n\r\nWe can't. And further, even if we do look at the recent blocks, we still cannot answer exactly what \"should\" have been included. The two main pieces of information we are missing are 1. what the miner's mempool looked like and 2. any weight applied through `prioritisetransaction`. By looking at a block, it is difficult to extrapolate the exact minimum fee rate for transactions to be included. So instead, the approach here is for a node to look at its local mempool and work towards the picture of what it believes should have already been included.  \r\n\r\n> so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\n\r\nyup, specifically in the case of the emptying out mempool, we would currently rebroadcast a full set of txns, thats why I want to build a cache of min fee rate and apply an extra filter to reduce noise in this circumstance ( from https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540 ): \r\n\r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\n--\r\n\r\nThe crux of the thinking is that we are not going to get the rebroadcast set perfect, but that is ok. When a node rebroadcasts a txn, it sends an INV message to new connections (see `filterInventoryKnown`). Since INV messages are relatively small & can incorporate many transactions, we have some leeway. \r\n\r\nAll these different mechanisms are to reduce noise. I want to ensure the parameters chosen allow the worst case scenario (rebroadcasting the full set) to not be disruptive to the network. And these mechanisms should make the worst case infrequent.\r\n\r\nDoes this make sense to you? Let me know if you still have questions. ",
      "created_at" : "2019-08-29T19:10:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526321842",
      "id" : 526321842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjMyMTg0Mg==",
      "updated_at" : "2019-08-29T19:10:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526321842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "On my other computer it also sometimes failed in the single run, which made testing easier. I found this the bug adding some debug statements in `ResendWalletTransactions`. \r\n\r\nFixing the times might not solve this completely, because the initial rebroadcast after startup also happened for me in a few runs right before `assert txhsh not in node.getrawmempool()`, which then fails. Adding a sleep before you jump ahead in time could help.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-08-29T22:26:22Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326",
      "id" : 319296326,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTI5NjMyNg==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 281753422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the answer! I think that your approach makes sense and am looking forward to the traffic/bandwidth analysis. \r\nI am still not so sure if your approach is best described with the notion of \"should have been mined\", but to a degree that's just semantics.",
      "created_at" : "2019-08-31T19:04:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526857552",
      "id" : 526857552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjg1NzU1Mg==",
      "updated_at" : "2019-08-31T19:04:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526857552",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> making the wallet transactions easily identifiable as such and reducing privacy?\r\n\r\nI don't think this is true (at least no worse than today). While it is possible to guess whether a list of INVs is a rebroadcast inv or not, it shouldn't be possible to trivially find the source of the low feerate txs in that inv. Txs broadcast for the first time from our node should be no different from txs broadcast for the first time from another node to us and then relayed by us. It is know to not be perfect (see dandelion tx relay), but improving that seems like a separate issue to me.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-09-03T15:29:25Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577",
      "id" : 320337577,
      "in_reply_to_id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDMzNzU3Nw==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 283080119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-09-07T11:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-529099960",
      "id" : 529099960,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTA5OTk2MA==",
      "updated_at" : "2019-09-07T11:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529099960",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-09-16T12:32:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-531756860",
      "id" : 531756860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMTc1Njg2MA==",
      "updated_at" : "2019-09-16T12:32:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531756860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this? This missed the 0.19 feature freeze, but I'd like to see it in 0.20 (hopefully early in the cycle)",
      "created_at" : "2019-09-18T17:51:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-532793902",
      "id" : 532793902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjc5MzkwMg==",
      "updated_at" : "2019-09-18T17:51:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532793902",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke yes will resume soon",
      "created_at" : "2019-09-19T20:44:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-533302150",
      "id" : 533302150,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzMwMjE1MA==",
      "updated_at" : "2019-09-19T20:44:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533302150",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "an update on my current thinking for anyone interested-\r\n\r\nnext steps\r\n- [ ] some misc small cleanup (make `PoissonNextSend` interface consistent, pull out 7f8056c50d047d12201ad5d0f75e00103f8a0bd6 into separate PR, etc.) \r\n- [ ] cache the min fee rate for a txn to be included in a block & add as filter on rebroadcast set\r\n\r\nthen this PR would be ready for code review & I'd want to observe & gather data on bandwidth usage\r\n\r\nin follow up PRs\r\n- persist the unbroadcast txn set to `mempool.dat`\r\n- remove `m_best_block_time`\r\n- fix circular dependency introduced between txmempool & miner\r\n\r\nLMK if you have any questions or feedback! ",
      "created_at" : "2019-10-19T02:01:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895",
      "id" : 544049895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDA0OTg5NQ==",
      "updated_at" : "2019-10-19T02:01:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544049895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-20T00:08:04Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949",
      "id" : 336757949,
      "in_reply_to_id" : 317404017,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1Nzk0OQ==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 12,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 304236022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-20T00:53:34Z",
      "diff_hunk" : "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783",
      "id" : 336758783,
      "in_reply_to_id" : 317404179,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1ODc4Mw==",
      "original_commit_id" : "fd92d22540f97924bd73301dc061005b401d7472",
      "original_position" : 4,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_review_id" : 304236960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this is a temporary parking spot for this code. All three tests use it, so I'd like to pull it out into some shared utility, but haven't figured out where makes sense yet. Any suggestions?",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-20T17:33:49Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290",
      "id" : 336788290,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4ODI5MA==",
      "original_commit_id" : "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "original_position" : 27,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 27,
      "pull_request_review_id" : 304269148,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok my understanding is.. without the check, if the txn was no longer in the mempool, it would..\r\n1.  get added to setRebroadcastTxs in this function. \r\n2. returned to the caller [here](https://github.com/bitcoin/bitcoin/pull/16698/files#diff-eff7adeaec73a769788bb78858815c91R3799) & insert into `setInventoryTxToSend`\r\n3. `setInventoryTxToSend` gets copied into `vInvTx` [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3825)\r\n4. checks if txn is in mempool otherwise skips it [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3854) \r\n\r\nwhich all seems fine so I'll remove the check.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-21T20:09:08Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008",
      "id" : 337215008,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzIxNTAwOA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 304818554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-21T20:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It doesn't depend on any outside modules except `mininode`, so it could be moved there or to a new module.",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-22T13:33:03Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986",
      "id" : 337517986,
      "in_reply_to_id" : 336788290,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzUxNzk4Ng==",
      "original_commit_id" : "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "original_position" : 27,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 27,
      "pull_request_review_id" : 305207858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-22T13:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e768ad10fbd24929059a1ada67cefaa3bc570b0d:\r\n\r\nI don't think casting (truncating) microseconds to seconds is acceptable, as it degrades everything smaller than a second to a delay of zero.\r\n\r\nYou could just pass in `std::chrono::seconds average_interval` and then call here:\r\n\r\n```cpp\r\n     return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds.count())};",
      "commit_id" : "5258a4d2cd5c6de26c801ad005e42f5849e5d0fe",
      "created_at" : "2019-10-22T21:17:11Z",
      "diff_hunk" : "@@ -943,11 +943,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n+{\n+    int64_t interval_seconds = (std::chrono::duration_cast<std::chrono::seconds>(average_interval)).count();\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765",
      "id" : 337754765,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc1NDc2NQ==",
      "original_commit_id" : "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : 25,
      "pull_request_review_id" : 305514159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-10-22T21:17:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
