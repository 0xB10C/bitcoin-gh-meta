[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17536](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17536.html) (test: Add test for rpc_whitelist by emilengler)\n* [#17484](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17484.html) (wallet: add cached m_is_ibd to remove Chain::isInitialBlockDownload by ariard)\n* [#17383](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17383.html) (Refactor: Move consts to their correct translation units by jnewbery)\n* [#17303](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17303.html) (p2p: Stop relaying non-mempool txs, improve tx privacy slightly by MarcoFalke)\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface and the wallet to have multiple by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-23T18:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524422172",
      "id" : 524422172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQyMjE3Mg==",
      "updated_at" : "2019-11-23T13:01:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524422172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\r\n```\r\ntest/functional/wallet_resendwallettransactions.py:9:1: F401 'test_framework.blocktools.create_coinbase' imported but unused",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-23T21:45:00Z",
      "diff_hunk" : "@@ -6,11 +6,10 @@\n from collections import defaultdict\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import ToHex\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.blocktools import create_coinbase",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984",
      "id" : 317311984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMxMTk4NA==",
      "original_commit_id" : "c383bdeea494fe05d1fd6332b72b7517e78b2ba0",
      "original_position" : 7,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : null,
      "pull_request_review_id" : 279235742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This code is ready for initial review.\r\n\r\nthere are still some to dos before it would be ready for merge: \r\n- identify expected rebroadcast traffic & worst case bandwidth usage.\r\n- persist `setUnbroadcastTxIDs` to `mempool.dat` \r\n- add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\nthere are also some follow-ups that can be addressed in separate PRs: \r\n- `m_best_block_time` is no longer used & can be removed & the wallet no longer needs to subscribe to `UpdatedBlockTip()` validation interface method\r\n- functionality to mark a peer (as \"local\" or such) so the mempool would still enforce initial broadcast for transactions received from one of these peers. ",
      "created_at" : "2019-08-23T22:23:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540",
      "id" : 524480540,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDU0MA==",
      "updated_at" : "2019-08-23T22:23:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480540",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-23T22:24:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480853",
      "id" : 524480853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDg1Mw==",
      "updated_at" : "2019-08-23T22:24:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480853",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-24T21:22:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524581595",
      "id" : 524581595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDU4MTU5NQ==",
      "updated_at" : "2019-08-24T21:22:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524581595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 25a3b0ac6aea95845c48c0a345325af8ad15c3ca:\r\n\r\nThe legacy signature of this function takes as argument type and return type microseconds. Can you explain why this one is different?\r\nNote that you are allowed to pass in `std::chrono::seconds` when the function takes `std::chrono::microseconds`.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-25T15:44:13Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017",
      "id" : 317404017,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDAxNw==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 12,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same commit:\r\n\r\nCan you explain how the cast to seconds has an effect on the distribution? It appears that the most likely return value will be exactly `0`? Alternatively, I'd rather return microseconds just like the existing function.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-25T15:46:46Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110",
      "id" : 317404110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDExMA==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit fd92d22540f97924bd73301dc061005b401d7472:\r\n\r\nI'd prefer if new members are prefixed with `m_` and used snake case according to the dev notes. This makes it easier to guess from the variable name if something is a member, a global, or just  a symbol in the local scope. Additionally, I'd prefer to use `std::chrono::seconds` (or whatever the type is) for those reasons:\r\n\r\n* It documents the type for reviewers\r\n* It enforces the type at compile time and prevents unwanted casts\r\n* It documents that the time is mockable. (I know that the memepool currently is mockable and uses the legacy `GetTime()` function and types, but at least new code should use the new `GetTime<>()` functions and types.)",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-25T15:48:22Z",
      "diff_hunk" : "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179",
      "id" : 317404179,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDE3OQ==",
      "original_commit_id" : "fd92d22540f97924bd73301dc061005b401d7472",
      "original_position" : 4,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit af38c70497575c9ad33901a19db01a7f104ffaeb\r\n\r\nCan you add a comment why this would ever be true, otherwise remove the dead code.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-25T15:57:55Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560",
      "id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDU2MA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279342223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah my bad, will fix\r\n\r\nbased on this tip \r\n> Note that you are allowed to pass in std::chrono::seconds when the function takes std::chrono::microseconds.\r\n\r\nI'm thinking of updating the function signature to both take in & return microseconds. And the caller can pass through seconds when needed. I'm interested in moving all the poisson invocations to the chrono in a follow up PR. Its less of a gotcha since chrono requires the duration to be explicit, but it would be nice for it to be consistent. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T20:11:09Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787",
      "id" : 317776787,
      "in_reply_to_id" : 317404110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc3Njc4Nw==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 279809888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If we add wallet transactions to the rebroadcast INV that have a smaller feerate than the top of our mempool, wouldnât there be a feerate gap to the other INVs of the message, making the wallet transactions easily identifiable as such and reducing privacy?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:20:46Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991",
      "id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwMzk5MQ==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 279845040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This goes into timeout for me, causing `wallet_resendwallettransactions` to fail when I run the entire test suite (same as in AppVeyor build here) but the test succeeds if I run it in isolation. If you canât reproduce this I could look deeper into why it fails.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:25:09Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635",
      "id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwNTYzNQ==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 279845040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added it as a safeguard. Do you feel confident it would never happen? If so, I will take another careful look at the logic to build my own confidence & remove. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:39:34Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628",
      "id" : 317810628,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMDYyOA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279853357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Even if it would, any follow-up logic that deals with the returned set needs to be robust against missing txs anyway.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:46:17Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879",
      "id" : 317812879,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMjg3OQ==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279856083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note that `::mempool.cs` is released as soon as this method returns.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:47:47Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390",
      "id" : 317813390,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMzM5MA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 279856718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "correct. I will add a comment to document.\r\n\r\nthis logic should only trigger when a user submits a txn locally and it doesn't get initially relayed..  an example where this would be needed.. a user submits a low fee rate txn with p2p disabled, inspects it in the local mempool, and enables p2p. currently, the txn would get initially relayed due to the wallet rebroadcast logic. with the proposed changes (w/out this additional mempool-force-relays-unbroadcast-txns mechansim), the node could have to be running at a pretty specific time (when the mempool is clearing out and mining low fee rate txns) in order for the txn to ever initially get broadcast. thus, `setInventoryTxToSend`. \r\n\r\nIn terms of privacy guarantees (or lack thereof) it mimics the current behavior. If you have any suggestions for how we could improve while preserving the propagation guarantees, I'm all ears :) ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:52:14Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851",
      "id" : 317814851,
      "in_reply_to_id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNDg1MQ==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 279858549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh interesting. I haven't been able to reproduce locally. I would love some help! ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-26T21:53:15Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144",
      "id" : 317815144,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNTE0NA==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 279858950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the review @mzumsande ! \r\n\r\n> I donât understand 1) the concept âshould have been mined\" [...] do you mean the txns should have been mined in a specific block/range of blocks, but werenât? Should no rebroadcasts happen in an ideal world where miners have an identical mempool to ours and mine rationally?\r\n\r\nbased on the local mempool, we are attempting to answer the question of what txns we think should have been mined. And saying if it wasn't, maybe there was an issue with relay. \r\nYou are correct- in a world where all mempools are consistent there wouldn't be rebroadcasts.\r\n\r\n> As to 2) from what I understand, BlockAssembler creates a block template with 3/4*MAX_BLOCK_WEIGHT including the top feerate packages of our current mempool. Wouldnât it always fill this block template with txns if our mempool is large enough, and therefore rather include 75% of the txns that we expect to be mined in the next block, instead of txns that should have been mined in the past?\r\n\r\nyes. you will start with txns you expect to be mined in the next block. the recency filter will (likely) remove some of those transactions. however, in the case of a mempool thats emptying out, the recency filter might not have much effect. for that I have this todo before the PR would be ready for merge: \r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set",
      "created_at" : "2019-08-26T22:20:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525055857",
      "id" : 525055857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTA1NTg1Nw==",
      "updated_at" : "2019-08-26T22:20:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525055857",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> based on the local mempool, we are attempting to answer the question of what txns we think should have been mined.\r\n\r\nWhat confuses me is how we can answer that without actually looking into recent blocks. \r\nConsidering that txns are removed from the mempool once they are included in a valid block, it is possible that the previous blocks removed the respective top of our previous versions of the mempool, so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\nOr the miners could have left out several high-fee-rate txns in favor of lower ones, in which case the higher ones are still present in our mempool and we would like to rebroadcast them. \r\nOr there just might have been no new blocks found in the hour since the last rebroadcast, in which case we wouldn't need to rebroadcast. \r\n\r\nHow could we distinguish between these cases by just looking at our current mempool?\r\n",
      "created_at" : "2019-08-26T22:51:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525063430",
      "id" : 525063430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTA2MzQzMA==",
      "updated_at" : "2019-08-26T22:51:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525063430",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that this is due to a bug with the time: `RESEND_TXS_FREQUENCY` is in microseconds. It is added to `GetTime()`  which is in seconds, so an actual resend doesn't ever happen in test. \r\nYet the test sometimes succeeds because there is an initial resend (`nNextResend` is initialized to 0) which in some runs happens after the mocktime is set to two weeks and the tx has been expired (test passes), in some runs happens earlier (test fails).",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-27T16:55:19Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941",
      "id" : 318189941,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE4OTk0MQ==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 280336125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for digging in!! I will fix the bug and ensure the times are consistent in microseconds. \r\n\r\ncould you tell me more about how you debugged? were you able to isolate the failure, or was it always when run in the entire suite? I'm curious why this behavior wouldn't manifest as a flaky test when run in isolation. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-29T00:14:24Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467",
      "id" : 318842467,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODg0MjQ2Nw==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 281165072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "great questions @mzumsande. I've thought about this a lot, so let me share some of my reasoning- \r\n \r\n> What confuses me is how we can answer that without actually looking into recent blocks.\r\n\r\nWe can't. And further, even if we do look at the recent blocks, we still cannot answer exactly what \"should\" have been included. The two main pieces of information we are missing are 1. what the miner's mempool looked like and 2. any weight applied through `prioritisetransaction`. By looking at a block, it is difficult to extrapolate the exact minimum fee rate for transactions to be included. So instead, the approach here is for a node to look at its local mempool and work towards the picture of what it believes should have already been included.  \r\n\r\n> so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\n\r\nyup, specifically in the case of the emptying out mempool, we would currently rebroadcast a full set of txns, thats why I want to build a cache of min fee rate and apply an extra filter to reduce noise in this circumstance ( from https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540 ): \r\n\r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\n--\r\n\r\nThe crux of the thinking is that we are not going to get the rebroadcast set perfect, but that is ok. When a node rebroadcasts a txn, it sends an INV message to new connections (see `filterInventoryKnown`). Since INV messages are relatively small & can incorporate many transactions, we have some leeway. \r\n\r\nAll these different mechanisms are to reduce noise. I want to ensure the parameters chosen allow the worst case scenario (rebroadcasting the full set) to not be disruptive to the network. And these mechanisms should make the worst case infrequent.\r\n\r\nDoes this make sense to you? Let me know if you still have questions. ",
      "created_at" : "2019-08-29T19:10:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526321842",
      "id" : 526321842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjMyMTg0Mg==",
      "updated_at" : "2019-08-29T19:10:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526321842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "On my other computer it also sometimes failed in the single run, which made testing easier. I found this the bug adding some debug statements in `ResendWalletTransactions`. \r\n\r\nFixing the times might not solve this completely, because the initial rebroadcast after startup also happened for me in a few runs right before `assert txhsh not in node.getrawmempool()`, which then fails. Adding a sleep before you jump ahead in time could help.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-08-29T22:26:22Z",
      "diff_hunk" : "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326",
      "id" : 319296326,
      "in_reply_to_id" : 317805635,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTI5NjMyNg==",
      "original_commit_id" : "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "original_position" : 90,
      "path" : "test/functional/wallet_resendwallettransactions.py",
      "position" : 103,
      "pull_request_review_id" : 281753422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the answer! I think that your approach makes sense and am looking forward to the traffic/bandwidth analysis. \r\nI am still not so sure if your approach is best described with the notion of \"should have been mined\", but to a degree that's just semantics.",
      "created_at" : "2019-08-31T19:04:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526857552",
      "id" : 526857552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjg1NzU1Mg==",
      "updated_at" : "2019-08-31T19:04:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526857552",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> making the wallet transactions easily identifiable as such and reducing privacy?\r\n\r\nI don't think this is true (at least no worse than today). While it is possible to guess whether a list of INVs is a rebroadcast inv or not, it shouldn't be possible to trivially find the source of the low feerate txs in that inv. Txs broadcast for the first time from our node should be no different from txs broadcast for the first time from another node to us and then relayed by us. It is know to not be perfect (see dandelion tx relay), but improving that seems like a separate issue to me.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-09-03T15:29:25Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577",
      "id" : 320337577,
      "in_reply_to_id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDMzNzU3Nw==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 283080119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-09-07T11:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-529099960",
      "id" : 529099960,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTA5OTk2MA==",
      "updated_at" : "2019-09-07T11:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529099960",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-09-16T12:32:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-531756860",
      "id" : 531756860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMTc1Njg2MA==",
      "updated_at" : "2019-09-16T12:32:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531756860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this? This missed the 0.19 feature freeze, but I'd like to see it in 0.20 (hopefully early in the cycle)",
      "created_at" : "2019-09-18T17:51:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-532793902",
      "id" : 532793902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjc5MzkwMg==",
      "updated_at" : "2019-09-18T17:51:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532793902",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke yes will resume soon",
      "created_at" : "2019-09-19T20:44:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-533302150",
      "id" : 533302150,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzMwMjE1MA==",
      "updated_at" : "2019-09-19T20:44:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533302150",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "an update on my current thinking for anyone interested-\r\n\r\nnext steps\r\n- [x] some misc small cleanup (make `PoissonNextSend` interface consistent, pull out 7f8056c50d047d12201ad5d0f75e00103f8a0bd6 into separate PR, etc.) \r\n- [x] cache the min fee rate for a txn to be included in a block & add as filter on rebroadcast set\r\n\r\nthen this PR would be ready for code review & I'd want to observe & gather data on bandwidth usage\r\n\r\nin follow up PRs\r\n- persist the unbroadcast txn set to `mempool.dat`\r\n- remove `m_best_block_time`\r\n- fix circular dependency introduced between txmempool & miner\r\n\r\nLMK if you have any questions or feedback! ",
      "created_at" : "2019-10-19T02:01:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895",
      "id" : 544049895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDA0OTg5NQ==",
      "updated_at" : "2019-11-20T22:19:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544049895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-20T00:08:04Z",
      "diff_hunk" : "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949",
      "id" : 336757949,
      "in_reply_to_id" : 317404017,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1Nzk0OQ==",
      "original_commit_id" : "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "original_position" : 12,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 304236022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-20T00:53:34Z",
      "diff_hunk" : "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783",
      "id" : 336758783,
      "in_reply_to_id" : 317404179,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1ODc4Mw==",
      "original_commit_id" : "fd92d22540f97924bd73301dc061005b401d7472",
      "original_position" : 4,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_review_id" : 304236960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this is a temporary parking spot for this code. All three tests use it, so I'd like to pull it out into some shared utility, but haven't figured out where makes sense yet. Any suggestions?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-20T17:33:49Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290",
      "id" : 336788290,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4ODI5MA==",
      "original_commit_id" : "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "original_position" : 27,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : null,
      "pull_request_review_id" : 304269148,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok my understanding is.. without the check, if the txn was no longer in the mempool, it would..\r\n1.  get added to setRebroadcastTxs in this function. \r\n2. returned to the caller [here](https://github.com/bitcoin/bitcoin/pull/16698/files#diff-eff7adeaec73a769788bb78858815c91R3799) & insert into `setInventoryTxToSend`\r\n3. `setInventoryTxToSend` gets copied into `vInvTx` [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3825)\r\n4. checks if txn is in mempool otherwise skips it [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3854) \r\n\r\nwhich all seems fine so I'll remove the check.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-21T20:09:08Z",
      "diff_hunk" : "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008",
      "id" : 337215008,
      "in_reply_to_id" : 317404560,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzIxNTAwOA==",
      "original_commit_id" : "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 304818554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It doesn't depend on any outside modules except `mininode`, so it could be moved there or to a new module.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-22T13:33:03Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986",
      "id" : 337517986,
      "in_reply_to_id" : 336788290,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzUxNzk4Ng==",
      "original_commit_id" : "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "original_position" : 27,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : null,
      "pull_request_review_id" : 305207858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e768ad10fbd24929059a1ada67cefaa3bc570b0d:\r\n\r\nI don't think casting (truncating) microseconds to seconds is acceptable, as it degrades everything smaller than a second to a delay of zero.\r\n\r\nYou could just pass in `std::chrono::seconds average_interval` and then call here:\r\n\r\n```cpp\r\n     return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds.count())};",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-22T21:17:11Z",
      "diff_hunk" : "@@ -943,11 +943,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n+{\n+    int64_t interval_seconds = (std::chrono::duration_cast<std::chrono::seconds>(average_interval)).count();\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765",
      "id" : 337754765,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc1NDc2NQ==",
      "original_commit_id" : "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 305514159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r338220615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338220615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok I get it. fixed.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-10-23T18:51:50Z",
      "diff_hunk" : "@@ -943,11 +943,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n+{\n+    int64_t interval_seconds = (std::chrono::duration_cast<std::chrono::seconds>(average_interval)).count();\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r338220615",
      "id" : 338220615,
      "in_reply_to_id" : 337754765,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIyMDYxNQ==",
      "original_commit_id" : "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "original_position" : 15,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 306114884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338220615",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "is this ready for review? ",
      "created_at" : "2019-10-24T20:01:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546079321",
      "id" : 546079321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NjA3OTMyMQ==",
      "updated_at" : "2019-10-24T20:01:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546079321",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-24T22:05:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546122141",
      "id" : 546122141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NjEyMjE0MQ==",
      "updated_at" : "2019-10-24T22:05:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546122141",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@instagibbs - working on it ! building out one more piece of functionality (described https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895), then will be ready for review. I'll remove the WIP from the title & leave a comment when it is :) ",
      "created_at" : "2019-10-25T00:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546149954",
      "id" : 546149954,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NjE0OTk1NA==",
      "updated_at" : "2019-10-25T00:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546149954",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ð this PR is ready for review!",
      "created_at" : "2019-11-20T23:15:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-556534669",
      "id" : 556534669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NjUzNDY2OQ==",
      "updated_at" : "2019-11-20T23:15:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/556534669",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348840194"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure if one `GETDATA` is the best solution to indicate the txn has been successfully broadcast to the network. \r\n\r\nThe worst case is highlighted by the tests- a node receives the getdata back from the first peer before announcing to any other peers. so I have to disconnect the other peers to send to the new connection. (see [here](https://github.com/bitcoin/bitcoin/pull/16698/files?file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-e4786db1a6d286db4b104018b9b77608R70))\r\n\r\nin practice, this means a user who submits a txn with p2p disabled, then re-enables, might only get the txn out to _one_ other peer before marking it as \"broadcast\" ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-21T00:15:45Z",
      "diff_hunk" : "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194",
      "id" : 348840194,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODg0MDE5NA==",
      "original_commit_id" : "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "original_position" : 4,
      "path" : "src/net_processing.cpp",
      "position" : 13,
      "pull_request_review_id" : 320570229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348840194",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348844259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348844259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed this test because it was converging with `test_fee_rate_cache.`",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-21T00:31:38Z",
      "diff_hunk" : "@@ -100,59 +130,6 @@ def test_simple_rebroadcast(self):\n         # check that node1 got txns bc rebroadcasting\n         wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n \n-    def test_rebroadcast_top_txns(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348844259",
      "id" : 348844259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODg0NDI1OQ==",
      "original_commit_id" : "6b70e7af8281f16d14d9c25138078e1131a1c3bd",
      "original_position" : 108,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : null,
      "pull_request_review_id" : 320575120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-21T18:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348844259",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349290407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349290407"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/resbumit/resubmit/",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-21T20:00:06Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349290407",
      "id" : 349290407,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI5MDQwNw==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 22,
      "path" : "src/wallet/wallet.cpp",
      "position" : 22,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349290407",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349291579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349291579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggested bikeshedding of name for new readers:\r\n\r\n`SubmitMemoryPoolAndMaybeRelay` or `SubmitMemoryPool` since `relay` is an argument...",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-21T20:02:51Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349291579",
      "id" : 349291579,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI5MTU3OQ==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 60,
      "path" : "src/wallet/wallet.cpp",
      "position" : 60,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349291579",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Does it make sense to hardcode a smaller MIN_TX_REBROADCAST_INTERVAL (5 minutes?), and then a TX_REBROADCAST_INTERVAL which is either 1 hour or  a custom parameter?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:47:17Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413481",
      "id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxMzQ4MQ==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413481",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413523"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be addressed in a follow up PR.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:47:30Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413523",
      "id" : 349413523,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxMzUyMw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413523",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414243"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There's no real point to using a set here -- the block is already guaranteed to be de-duplicated, so you can make this interface just use a vector (or move the vtx out of the block template, and insert directly into setRebroadcastTxs later)",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:51:47Z",
      "diff_hunk" : "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414243",
      "id" : 349414243,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDI0Mw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 31,
      "path" : "src/txmempool.cpp",
      "position" : 32,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can this be re-written in terms of the consensus.h parameters?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:52:41Z",
      "diff_hunk" : "@@ -35,6 +35,10 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// we rebroadcast 3/4 of max block weight (defined in consensus.h)\n+// to reduce noise due to circumstances such as miners mining priority txns\n+static const unsigned int MAX_REBROADCAST_WEIGHT = 3000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414400",
      "id" : 349414400,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDQwMA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : 9,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414400",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414729"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why 30 minutes?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:54:18Z",
      "diff_hunk" : "@@ -35,6 +35,9 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// Default minimum age for a txn to be rebroadcast in seconds - 30 min",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414729",
      "id" : 349414729,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDcyOQ==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : 4,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414729",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "technically, for the name to be accurate should be >= (as we won't allow a tx with the max time).",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:55:42Z",
      "diff_hunk" : "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414959",
      "id" : 349414959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDk1OQ==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 29,
      "path" : "src/miner.cpp",
      "position" : 40,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414959",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could either do >= or rename it tx_time_bound",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:56:20Z",
      "diff_hunk" : "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415067",
      "id" : 349415067,
      "in_reply_to_id" : 349414959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNTA2Nw==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 29,
      "path" : "src/miner.cpp",
      "position" : 40,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415067",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415453"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't this a more obvious privacy leak now? Because you'd see the tx hash appear in two updates?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T02:58:25Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415453",
      "id" : 349415453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNTQ1Mw==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 22,
      "path" : "src/wallet/wallet.cpp",
      "position" : 22,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415453",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416833"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe this line should \"go away\", and then it should be ensured that GetBroadcastTransactions is false during reindex/import/IBD (which would block the calls below in SubmitMemoryPoolAndRelay).\r\n\r\n\"Go away\" in scare quotes, so that way we're only using this line as an optimization to prevent having to lock the chain. below, but it's not required for any correctness reasons.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T03:06:48Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416833",
      "id" : 349416833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNjgzMw==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 29,
      "path" : "src/wallet/wallet.cpp",
      "position" : 29,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416833",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416865"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps rename this because now we're not resending?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T03:07:01Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416865",
      "id" : 349416865,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNjg2NQ==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : 24,
      "pull_request_review_id" : 321309451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T03:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416865",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349741004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349741004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "how much work is it to avoid this? ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T18:46:43Z",
      "diff_hunk" : "@@ -31,6 +31,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\"\n     \"txmempool -> validation -> validationinterface -> txmempool\"\n     \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n+    \"miner -> txmempool -> miner\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349741004",
      "id" : 349741004,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MTAwNA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 4,
      "path" : "test/lint/lint-circular-dependencies.sh",
      "position" : 4,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349741004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you could re-arrange this to just check the count directly and use in below conditional, then set the new value for `pto->m_next_rebroadcast` after the conditional block. Gets rid of `fFirst`.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T18:51:57Z",
      "diff_hunk" : "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743181",
      "id" : 349743181,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MzE4MQ==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743181",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Think these brackets are off by a tab?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T18:52:21Z",
      "diff_hunk" : "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);\n+\n+                        for (const auto& hash : setRebroadcastTxs) {\n+                            LogPrint(BCLog::NET, \"Rebroadcast tx=%s peer=%d\\n\", hash.GetHex(), pto->GetId());\n+                        }\n+\n+                        // add rebroadcast txns\n+                        pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743339",
      "id" : 349743339,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MzMzOQ==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 34,
      "path" : "src/net_processing.cpp",
      "position" : 65,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743339",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349745040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349745040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it needs to be a non-empty script, blank is fine for this.\r\n\r\nalso try using snake_case for new variables aka `dummy_script`.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T18:56:19Z",
      "diff_hunk" : "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349745040",
      "id" : 349745040,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NTA0MA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 25,
      "path" : "src/txmempool.cpp",
      "position" : 25,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349745040",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "very high level question: how much compute time does creating a unique block template for each peer roughly every 10 minutes take?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T18:59:12Z",
      "diff_hunk" : "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746237",
      "id" : 349746237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NjIzNw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 26,
      "path" : "src/net_processing.cpp",
      "position" : 45,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd also like a slightly stronger justification for 3/4 if there is one. What is \"noise\" in this context? Any simulations/estimations to show that 1/4 cut off is a lot of bandwidth in practice?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:00:42Z",
      "diff_hunk" : "@@ -35,6 +35,10 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// we rebroadcast 3/4 of max block weight (defined in consensus.h)\n+// to reduce noise due to circumstances such as miners mining priority txns\n+static const unsigned int MAX_REBROADCAST_WEIGHT = 3000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746841",
      "id" : 349746841,
      "in_reply_to_id" : 349414400,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0Njg0MQ==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : 9,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746841",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349747931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349747931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "probably want it a value related to the `consensus.nPowTargetSpacing` ?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:03:25Z",
      "diff_hunk" : "@@ -35,6 +35,9 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// Default minimum age for a txn to be rebroadcast in seconds - 30 min",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349747931",
      "id" : 349747931,
      "in_reply_to_id" : 349414729,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NzkzMQ==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : 4,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349747931",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349748672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349748672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this name is pretty ambiguous.\r\n\r\n`m_skip_inclusion_until` or something in that vicinity? \r\n",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:05:11Z",
      "diff_hunk" : "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    std::chrono::seconds m_max_tx_time;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349748672",
      "id" : 349748672,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0ODY3Mg==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 4,
      "path" : "src/miner.h",
      "position" : 4,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349748672",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I suggested rename eslewhere to be self-describing(something like `m_skip_inclusion_until` ?) and then you can drop the comment on this line because it's obvious what the meaning is.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:06:07Z",
      "diff_hunk" : "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749113",
      "id" : 349749113,
      "in_reply_to_id" : 349414959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0OTExMw==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 29,
      "path" : "src/miner.cpp",
      "position" : 40,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749113",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oh I see in `38599640a1afae2bcf2aa46b0009bc0b94a46434` it's fixed anyways, not worth messing around...",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:07:33Z",
      "diff_hunk" : "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);\n+\n+                        for (const auto& hash : setRebroadcastTxs) {\n+                            LogPrint(BCLog::NET, \"Rebroadcast tx=%s peer=%d\\n\", hash.GetHex(), pto->GetId());\n+                        }\n+\n+                        // add rebroadcast txns\n+                        pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749692",
      "id" : 349749692,
      "in_reply_to_id" : 349743339,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0OTY5Mg==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 34,
      "path" : "src/net_processing.cpp",
      "position" : 65,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749692",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349752418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349752418"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this commit `38599640a1afae2bcf2aa46b0009bc0b94a46434` introduces `m_unbroadcast_txids` before it's defined anywhere.\r\n\r\nI'd also suggest a rename if it's wallet-related only. `m_unbroadcast_wallet_txids`",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:14:11Z",
      "diff_hunk" : "@@ -3831,8 +3831,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                         // add rebroadcast txns\n                         pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                        // also include wallet txns that haven't been successfully broadcast yet\n+                        LogPrint(BCLog::NET, \"Force initial broadcast of %lu transactions \\n\", mempool.m_unbroadcast_txids.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349752418",
      "id" : 349752418,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc1MjQxOA==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : 55,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349752418",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349754289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349754289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This also adds anything submitted via `sendrawtransaction`, at least, so it's not explicitly wallet-related.\r\n\r\nI think it's wallet-or-sendrawtransaction transactions only :)\r\n\r\nconfirmed:\r\n`src/node/transaction.cpp:19:    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.`\r\n\r\nthis should get a test!",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-22T19:18:35Z",
      "diff_hunk" : "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349754289",
      "id" : 349754289,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc1NDI4OQ==",
      "original_commit_id" : "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "original_position" : 4,
      "path" : "src/node/transaction.cpp",
      "position" : 4,
      "pull_request_review_id" : 321150871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-22T19:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349754289",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "gave some opening suggestions while I digest the general strategy, feel free to not engage in the suggestions until enough concept/approach ACKs come in",
      "created_at" : "2019-11-22T19:28:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-557662617",
      "id" : 557662617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzY2MjYxNw==",
      "updated_at" : "2019-11-22T19:28:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557662617",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350450955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Want to clarify my expectations of the behavior- \r\n\r\nWe add transactions to `setInventoryTxToSend` when we expect to relay the transaction to a peer. This includes if we are the source node for the transaction as well as if we are relaying it. With these changes, both the transactions to rebroadcast and the \"unbroadcast\" transactions are added to `setInventoryTxToSend` on the rebroadcast poisson timer. \r\n\r\nLater, all transactions from `setInventoryTxToSend` get added to `vInvTx`, passed through some checks, then relayed to peers. \r\n\r\nSo, what this means... \r\n* if they are keeping track, peers can detect rebroadcast transactions because `INV` messages have been sent for that transaction before. \r\n* `INVs` for unbroadcast transactions have probably not been sent out before (unless all the peers who received the message did not send a `GETDATA` back). \r\n* In the normal case, the peer would not be able to distinguish a transaction sent from the unbroadcast set from a transaction being submitted initially, or the initial relay. This is known to be imperfect, but these changes should not make privacy worse than current behavior. \r\n* The only new potential for privacy leak that I see based on these changes- \r\nA node disables p2p, creates a transaction, enables p2p. At that time, that transaction gets propagated out to the network due to being on the unbroadcast set. The first peer the node sends an `INV` to is the attacker. The attacker is able to send back a `GETDATA` before any other `INV` messages are sent out. The attacker does not relay the transaction to any other nodes.\r\nTime passes, the node calculates the transaction \"should have been mined\" by now, puts it into the rebroadcast set, relays it out to its peers. The attacker has another connection open to the node & is able to identify that it is a rebroadcast. The attacker would also have to have many other nodes & connections to the rest of the network to identify that this is the only node rebroadcasting that transaction. This seems pretty difficult to execute, definitely harder to discern source node based on rebroadcast logic than in the existing implementation. \r\n* In this case, the much bigger concern would be the ability of an attacker to stop the propagation of a transaction by sending the `GETDATA` back very quickly, thus removing it from the node's unbroadcast set. I'm trying to better understand the risk of this & brainstorm possible better solutions (see https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194). If any reviewers have thoughts or questions about this mechanism, let's continue the convo on that thread. \r\n\r\n@mzumsande to conclude this long explanation, hopefully this resolves your original question? The unbroadcast set should have (pretty much) the same guarantees as initial relay. LMK if you have any outstanding questions or recommendations for improved documentation. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-25T22:14:13Z",
      "diff_hunk" : "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955",
      "id" : 350450955,
      "in_reply_to_id" : 317803991,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ1MDk1NQ==",
      "original_commit_id" : "4bda14245c53d89beb790053158c0ba39cb08a28",
      "original_position" : 20,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 322613879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-25T22:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350450955",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350490922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350490922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You are creating blocks on node[0], that this node (node[1]) might not have. This will lead to a race.\r\n\r\nYou can avoid it by calling sync_blocks or sync_all after you have generated the blocks.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T00:29:21Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Ensure that wallet transactions get successfully broadcast to at least one peer.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_greater_than,\n+        wait_until,\n+        create_confirmed_utxos,\n+        disconnect_nodes\n+)\n+from test_framework.mininode import P2PTxInvStore\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolWalletTransactionsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-blockmaxweight=3000000\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"test that mempool will ensure initial broadcast of wallet txns\")\n+\n+        node = self.nodes[0]\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 2000)\n+\n+        self.log.info(\"populate mempool with transactions\")\n+        node.settxfee(min_relay_fee * 3)\n+\n+        addresses = []\n+        for _ in range(50):\n+            addresses.append(self.nodes[1].getnewaddress())\n+\n+        # create large txns by sending to all the addresses\n+        outputs = {}\n+        for addr in addresses:\n+            outputs[addr] = 0.0001\n+\n+        self.sync_mempools()\n+\n+        # create lots of txns with that large output\n+        for _ in range(len(utxos) - 1):\n+            utxo = utxos.pop()\n+            inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+            raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+            signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+            node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+            self.nodes[1].sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350490922",
      "id" : 350490922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ5MDkyMg==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 61,
      "path" : "test/functional/mempool_wallet_transactions.py",
      "position" : 61,
      "pull_request_review_id" : 322664247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T00:29:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350490922",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350499480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350499480"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah, got it now. thank you! ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T01:05:18Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Ensure that wallet transactions get successfully broadcast to at least one peer.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_greater_than,\n+        wait_until,\n+        create_confirmed_utxos,\n+        disconnect_nodes\n+)\n+from test_framework.mininode import P2PTxInvStore\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolWalletTransactionsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-blockmaxweight=3000000\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"test that mempool will ensure initial broadcast of wallet txns\")\n+\n+        node = self.nodes[0]\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 2000)\n+\n+        self.log.info(\"populate mempool with transactions\")\n+        node.settxfee(min_relay_fee * 3)\n+\n+        addresses = []\n+        for _ in range(50):\n+            addresses.append(self.nodes[1].getnewaddress())\n+\n+        # create large txns by sending to all the addresses\n+        outputs = {}\n+        for addr in addresses:\n+            outputs[addr] = 0.0001\n+\n+        self.sync_mempools()\n+\n+        # create lots of txns with that large output\n+        for _ in range(len(utxos) - 1):\n+            utxo = utxos.pop()\n+            inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+            raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+            signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+            node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+            self.nodes[1].sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350499480",
      "id" : 350499480,
      "in_reply_to_id" : 350490922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ5OTQ4MA==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 61,
      "path" : "test/functional/mempool_wallet_transactions.py",
      "position" : 61,
      "pull_request_review_id" : 322674656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T01:05:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350499480",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350513338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350513338"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "are you proposing the minimum to support a user configurable frequency, or for the current case (since its possible bc of poisson distribution)? ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:08:58Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350513338",
      "id" : 350513338,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUxMzMzOA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322691809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350513338",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350514958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350514958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "would be happy to support customizable rebroadcast interval in a future PR if that's of interest. request for anyone coming across this who'd like that feature to leave a ðresponse",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:17:06Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350514958",
      "id" : 350514958,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUxNDk1OA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322693940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350514958",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520484"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the min can be hard-coded, and that it shouldn't happen more frequently even when drawing poisson time (e.g.,  something like: min_time + poisson(avg_time - min_time)).\r\n\r\nSo as to impose a strict cap on how frequently this is happening, because if you draw out of a poisson a large number of times eventually you'll see a run of small interval windows.\r\n\r\nYou also want something to ensure that there is always some entropy, even if min_time == avg_time (maybe enforce that avg_time >= min_time*2).\r\n\r\nThen, I think that the *actual* rebroadcast interval should be configurable, based on a user parameter. E.g., default is 30 minutes, but can be changes down to the min_time. This can happen in a future PR. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:44:29Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520484",
      "id" : 350520484,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMDQ4NA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322700972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:44:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520484",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520715"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "some relevant info on how an attack could potentially be carried out here: https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955. but relevant parts reiterated here- \r\n\r\nthe attack seems simple to execute, but rare to get the right conditions where it succeeds, and the incentive seems weak. \r\n- execution: attacker sends `GETDATAs` back for every transaction it receives & never propagate them out to the network. \r\n- conditions needed: \r\n1. node would be relying on unbroadcast set to broadcast txn to network (attacker couldn't discern) \r\n2. node would have to relay to attacker first \r\n3. timing would have to be fast enough that node receives & processes `GETDATA` before sending out other `INVs`. \r\n- outcome: the transaction doesn't propagate until the rebroadcast logic picks it up & sends it out to all peers. the attacker delayed the initial propagation of the transaction. \r\n\r\ndoesn't seem like a very worthwhile attack to me.... \r\nseems much more likely to occur under accidental conditions. \r\n\r\nbut I was thinking it through & am sharing incase reviewers want to weigh in. \r\n",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:45:32Z",
      "diff_hunk" : "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520715",
      "id" : 350520715,
      "in_reply_to_id" : 348840194,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMDcxNQ==",
      "original_commit_id" : "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "original_position" : 4,
      "path" : "src/net_processing.cpp",
      "position" : 13,
      "pull_request_review_id" : 322701244,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:45:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520715",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350521441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350521441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure I follow. This method would be a no-op if the transaction is in your mempool. If its not in your mempool, it would call through to `BroadcastTransaction` with relay=false, so it would go through ATMP, but not be immediately relayed. Another `INV` will only be sent if the transaction is selected for rebroadcast. \r\n\r\nIâm sure thereâs some small privacy leak here based on timing of re-entrance to mempool. Havenât fully thought it through yet. But it should be much less than before? What two updates are you referring to?  ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:49:34Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350521441",
      "id" : 350521441,
      "in_reply_to_id" : 349415453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMTQ0MQ==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 22,
      "path" : "src/wallet/wallet.cpp",
      "position" : 22,
      "pull_request_review_id" : 322702186,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:49:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350521441",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350523086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350523086"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yup. Totally. I think I use the language of âlocalâ transactions elsewhere. Do you find that clear or should I just spell it all out every time? \r\n\r\nAlso, revisiting my `mempool_wallet_transactions` test, I realized I actually end up creating the âwalletâ transaction with `sendrawtransaction`. Oops. I'll add another transaction in that test that uses `sendtoaddress` then it will cover both :) \r\n\r\nThanks ! ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T02:57:58Z",
      "diff_hunk" : "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350523086",
      "id" : 350523086,
      "in_reply_to_id" : 349754289,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMzA4Ng==",
      "original_commit_id" : "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "original_position" : 4,
      "path" : "src/node/transaction.cpp",
      "position" : 4,
      "pull_request_review_id" : 322704220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T02:57:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350523086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350530044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350530044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think a customizable rebroadcast interval is a good idea:\r\n\r\n- we should avoid adding command line options that have minimal impact on user experience. Take a look at the 10s of options in `init.cpp`. I'm sure there are many of them that hardly anyone uses, and they just add unnecessary complexity/interactions to the code.\r\n- we should try to avoid adding unnecessary fingerprints to nodes by keeping their p2p behaviour as uniform as possible.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T03:35:18Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350530044",
      "id" : 350530044,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUzMDA0NA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322712899,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T03:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350530044",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350542949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350542949"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "we're resending (or attempting) to the mempool. I could rename to `ResubmitWalletTransactions`, but that doesn't seem much different? ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T04:52:51Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350542949",
      "id" : 350542949,
      "in_reply_to_id" : 349416865,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU0Mjk0OQ==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : 24,
      "pull_request_review_id" : 322728777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T04:52:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350542949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350545734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350545734"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah I agree. seems unrelated to this PR though? I can easily make it as a separate PR, but not sure on the etiquette around that since it would be a pure refactor. thoughts? ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T05:09:18Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350545734",
      "id" : 350545734,
      "in_reply_to_id" : 349291579,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU0NTczNA==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 60,
      "path" : "src/wallet/wallet.cpp",
      "position" : 60,
      "pull_request_review_id" : 322732303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T05:09:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350545734",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350573667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350573667"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Then that's an argument against doing this *at all*, as it increases bandwidth requirements for low-resourced nodes who need to rebroadcast transactions.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T07:18:53Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350573667",
      "id" : 350573667,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU3MzY2Nw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322768409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T07:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350573667",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350574103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350574103"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To be clear; I'm in favor of this change :)\r\n\r\nI just think if you're a low resourced node you'd want to be able to decrease the frequency at which your rebroadcasts are occurring if you have to send out an entire block worth of data.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T07:20:33Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350574103",
      "id" : 350574103,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU3NDEwMw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322768979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T07:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350574103",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350590665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350590665"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think there's a case for reviewing the worst case resource usage, but I think in the normal case the bandwidth for rebroadcast will be very low and not really something that needs to be throttled even for low powered nodes. (Reducing your mempool size would be one way of reducing your outgoing rebroadcast traffic, but I think that's mostly just a tradeoff against incoming rebroadcast traffic)",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T08:15:23Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350590665",
      "id" : 350590665,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU5MDY2NQ==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 322790789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T08:15:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350590665",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350753952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350753952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's fine to not change it. I might do it myself since it's just bothering me :) ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T13:54:55Z",
      "diff_hunk" : "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350753952",
      "id" : 350753952,
      "in_reply_to_id" : 349291579,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDc1Mzk1Mg==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 60,
      "path" : "src/wallet/wallet.cpp",
      "position" : 60,
      "pull_request_review_id" : 322995350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T13:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350753952",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350754700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350754700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "{node, locally}-submitted transactions is fine, just noting the comments are wrong in certain places",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T13:56:11Z",
      "diff_hunk" : "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350754700",
      "id" : 350754700,
      "in_reply_to_id" : 349754289,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDc1NDcwMA==",
      "original_commit_id" : "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "original_position" : 4,
      "path" : "src/node/transaction.cpp",
      "position" : 4,
      "pull_request_review_id" : 322996304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T13:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350754700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351000417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351000417"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that this commit should have more detailed documentation, both in the header and here where txes are filtered out. Since the code is intended for actual mining, most readers won't expect this kind of \"creative\" indirect use and will wonder why we would ever exclude transactions from a block for being too recent.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-26T21:57:06Z",
      "diff_hunk" : "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351000417",
      "id" : 351000417,
      "in_reply_to_id" : 349414959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTAwMDQxNw==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 29,
      "path" : "src/miner.cpp",
      "position" : 40,
      "pull_request_review_id" : 323310777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-26T23:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351000417",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the reviews @JeremyRubin & @instagibbs. I'm making my way through them, but want to leave a high level comment- the biggest concern with these changes is the bandwidth impact to the node & network. The parameters I have currently chosen are fairly arbitrary, with the intent of keeping the size of the rebroadcast set small but meaningful. I'm working on running a node with some extra logging, and will share my findings once I have some real world data. Also can tweak parameters based on that info if needed. ",
      "created_at" : "2019-11-27T04:38:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-558925008",
      "id" : 558925008,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODkyNTAwOA==",
      "updated_at" : "2019-11-27T04:38:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558925008",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351371480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351371480"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "91eefef24 isn't compiling for me due to `no member named 'm_max_tx_time' in 'BlockAssembler::Options'`",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T16:01:50Z",
      "diff_hunk" : "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351371480",
      "id" : 351371480,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTM3MTQ4MA==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 24,
      "path" : "src/txmempool.cpp",
      "position" : 24,
      "pull_request_review_id" : 323783708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T16:01:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351371480",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351379073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351379073"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: you could print log here instead of in net_processing to avoid iterating on the set/vector again like \"Submitting tx for rebroadcast to net processing\"",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T16:15:12Z",
      "diff_hunk" : "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        // add to rebroadcast set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351379073",
      "id" : 351379073,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTM3OTA3Mw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 32,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351379073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351404225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351404225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assertion timed out for me (\"not true after 60 seconds\") on the first run of 375 secs. Passed on a second run, then timed out in the same place again in the third run.  Passed a few more runs, then failed again.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T17:02:37Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351404225",
      "id" : 351404225,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQwNDIyNQ==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 171,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 171,
      "pull_request_review_id" : 323826007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T17:54:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351404225",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351412622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351412622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am unable to get this to pass in cadd572afd8b1468aee8a0a3ba65b5e38fc021dd or ffd154d06. Getting an 'Mempool sync timed out` AssertionError.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T17:21:21Z",
      "diff_hunk" : "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-acceptnonstdtxn=1\",\n+            \"-blockmaxweight=3000000\",\n+            \"-whitelist=127.0.0.1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_rebroadcast_top_txns()\n+        self.test_recency_filter()\n+\n+    # helper method that uses getblocktemplate with node arg\n+    # set to MAX_REBROADCAST_WEIGHT to find txns expected to\n+    # be rebroadcast\n+    def find_top_txns(self, node):\n+        tmpl = node.getblocktemplate({'rules': ['segwit']})\n+\n+        tx_hshs = []\n+        for tx in tmpl['transactions']:\n+            tx_hshs.append(tx['hash'])\n+\n+        return tx_hshs\n+\n+    def compare_txns_to_invs(self, txn_hshs, invs):\n+        tx_ids = [int(txhsh, 16) for txhsh in txn_hshs]\n+\n+        assert_equal(len(tx_ids), len(invs))\n+        assert_equal(tx_ids.sort(), invs.sort())\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+    def test_rebroadcast_top_txns(self):\n+        self.log.info(\"Testing that only txns with top fee rate get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(0)\n+\n+        # mine a block to clear out the mempool\n+        node.generate(1)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        conn1 = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create txns\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        txouts = gen_return_txouts()\n+        utxo_count = 90\n+        utxos = create_confirmed_utxos(min_relay_fee, node, utxo_count)\n+        base_fee = min_relay_fee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        range_size = utxo_count // 3\n+\n+        for i in range(3):\n+            start_range = i * range_size\n+            end_range = start_range + range_size\n+            txids.append(create_lots_of_big_transactions(node, txouts, utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee))\n+\n+        # 90 transactions should be created\n+        # confirm the invs were sent (initial broadcast)\n+        assert_equal(len(node.getrawmempool()), 90)\n+        wait_until(lambda: len(conn1.tx_invs_received) == 90)\n+\n+        # confirm txns are more than max rebroadcast amount\n+        assert_greater_than(node.getmempoolinfo()['bytes'], MAX_REBROADCAST_WEIGHT)\n+\n+        self.sync_all()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351412622",
      "id" : 351412622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQxMjYyMg==",
      "original_commit_id" : "cadd572afd8b1468aee8a0a3ba65b5e38fc021dd",
      "original_position" : 139,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : null,
      "pull_request_review_id" : 323836870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T17:49:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351412622",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351428700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351428700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Both at 42c460a24f6d9d9c2c65c30287965acbce096ecf and rebased to current master.\r\n\r\n```\r\n~/projects/bitcoin/bitcoin (pr/16698) $ test/functional/mempool_rebroadcast.py \r\n2019-11-27T17:51:11.955000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_g9hdr2e_\r\n2019-11-27T17:51:13.096000Z TestFramework (INFO): Test simplest rebroadcast case\r\n2019-11-27T17:51:14.928000Z TestFramework (INFO): Test recent txns don't get rebroadcast\r\n2019-11-27T17:56:31.453000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n'''\r\n2019-11-27T17:56:31.467000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 111, in main\r\n    self.run_test()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 44, in run_test\r\n    self.test_recency_filter()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 171, in test_recency_filter\r\n    wait_until(lambda: new_tx in node.getrawmempool())\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 229, in wait_until\r\n    raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\r\nAssertionError: Predicate ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n''' not true after 60 seconds\r\n2019-11-27T17:56:31.519000Z TestFramework (INFO): Stopping nodes\r\n```",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T17:58:52Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351428700",
      "id" : 351428700,
      "in_reply_to_id" : 351404225,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQyODcwMA==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 171,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 171,
      "pull_request_review_id" : 323857341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T17:58:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351428700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351430669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351430669"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This on my first run as well, but then passed six in a row so didn't report.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T18:03:55Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351430669",
      "id" : 351430669,
      "in_reply_to_id" : 351404225,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzMDY2OQ==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 171,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 171,
      "pull_request_review_id" : 323859923,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T18:03:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351430669",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351431222"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Wouldn't it be better to use the one line if coding style?",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T18:05:17Z",
      "diff_hunk" : "@@ -406,6 +452,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // This transaction will make it in; reset the failed counter.\n         nConsecutiveFailed = 0;\n \n+        CFeeRate newFeeRate(packageFees, packageSize * WITNESS_SCALE_FACTOR);\n+\n+        if (newFeeRate < minPackageFeeRate) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222",
      "id" : 351431222,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzMTIyMg==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 105,
      "path" : "src/miner.cpp",
      "position" : 105,
      "pull_request_review_id" : 323860643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T18:05:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351431222",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"could LEAK PRIVACY if tx is new and hasn't previously flooded on the network\"",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T18:13:10Z",
      "diff_hunk" : "@@ -262,7 +262,9 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"prioritisetransaction\",\n-                \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n+                \"Accepts the transaction into mined blocks at a higher (or lower) priority.\\n\"\n+                \"\\nNote that prioritizing a transaction could leak privacy, through both\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434318",
      "id" : 351434318,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNDMxOA==",
      "original_commit_id" : "0723e61274c72bb55e0c684af7d0ebb146689c03",
      "original_position" : 6,
      "path" : "src/rpc/mining.cpp",
      "position" : 6,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434318",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434890"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "rational of every 24h? I wondering if we shouldn't be more aggressive to have a chance of wallet rebroadcast being staggered in next mempool rebroadcast happening every 10min so resend like 1 min",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T18:14:36Z",
      "diff_hunk" : "@@ -44,6 +44,8 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n };\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+// frequency of resubmitting txns to mempool- 24 hours",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434890",
      "id" : 351434890,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNDg5MA==",
      "original_commit_id" : "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "original_position" : 4,
      "path" : "src/wallet/wallet.cpp",
      "position" : 4,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434890",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think we should try to hold off nits until further concept acks and\ndevelopment\n\nOn Wed, Nov 27, 2019, 1:05 PM Emil Engler <notifications@github.com> wrote:\n\n> *@emilengler* commented on this pull request.\n> ------------------------------\n>\n> In src/miner.cpp\n> <https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222>:\n>\n> > @@ -406,6 +452,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n>          // This transaction will make it in; reset the failed counter.\n>          nConsecutiveFailed = 0;\n>\n> +        CFeeRate newFeeRate(packageFees, packageSize * WITNESS_SCALE_FACTOR);\n> +\n> +        if (newFeeRate < minPackageFeeRate) {\n>\n> Nit: Wouldn't it be better to use the one line if coding style?\n>\n> â\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/16698?email_source=notifications&email_token=ABMAFU2BUVGFY7OHVHV7D2LQV2ZGDA5CNFSM4IPBPTD2YY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCNG3RIY#pullrequestreview-323860643>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU4O72DQV3NMFNPPUFTQV2ZGDANCNFSM4IPBPTDQ>\n> .\n>\n",
      "created_at" : "2019-11-27T18:16:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-559199311",
      "id" : 559199311,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTE5OTMxMQ==",
      "updated_at" : "2019-11-27T18:16:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559199311",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351437537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351437537"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "need to update comment",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T18:21:15Z",
      "diff_hunk" : "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351437537",
      "id" : 351437537,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNzUzNw==",
      "original_commit_id" : "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "original_position" : 26,
      "path" : "src/miner.cpp",
      "position" : 37,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351437537",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465071"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find the mechanism a bit weird as it leaks a wallet concern in the P2P stack. If you have multiple wallets connected to your node or even accept tx from third-party through your RPC command are you going to ensure success for all of them ? ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T19:32:52Z",
      "diff_hunk" : "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465071",
      "id" : 351465071,
      "in_reply_to_id" : 348840194,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NTA3MQ==",
      "original_commit_id" : "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "original_position" : 4,
      "path" : "src/net_processing.cpp",
      "position" : 13,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465071",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465381"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO just set the nLocktimeCutoff to nMedianTimePast, as we care about up to date mempool all of them are far ahead BIP 113 activation.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T19:33:40Z",
      "diff_hunk" : "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465381",
      "id" : 351465381,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NTM4MQ==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 41,
      "path" : "src/miner.cpp",
      "position" : 74,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351466313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351466313"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Did you benchmark `CacheMinRebroadcastFee` ? Not sure if it's the best way to encumber ThreadMessageHandler with mempool computation. I think it could be scheduled by the scheduler like we are doing for DumpBanList or DumpAddresses.",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-27T19:36:02Z",
      "diff_hunk" : "@@ -3844,6 +3851,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // cache the min fee rate for a txn to be included in a block\n+                // applied as rebroadcast filter above\n+                if (mempool.m_next_min_fee_cache < current_time){\n+                    mempool.CacheMinRebroadcastFee();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351466313",
      "id" : 351466313,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NjMxMw==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 24,
      "path" : "src/net_processing.cpp",
      "position" : 64,
      "pull_request_review_id" : 323793323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-27T19:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351466313",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351562187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351562187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Reducing mempool does not obviously help with resource reduction for a few reasons:\r\n\r\n1) because of compact blocks (slower to get new blocks, so if you're peak-bandwidth capped it's bad).\r\n2) If you're bandwidth constrained, you aren't necessarily memory constrained either (why throw away a transaction if it seems good?)\r\n3) It stands to reason that when fees are going up, you'll evict a lot of stuff from your mempool as newer txns go in, and when the fees go back down you'll need stuff re-relayed.\r\n\r\n\r\nI think I'd just like to understand how this does impact bandwidth usage, it seemed to not be a non trivial amount more as it's 1/f * block size * period * #peers more data volume? If it's actually small then so be it. But it does seem, to me, to be non-negligible",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-28T01:43:38Z",
      "diff_hunk" : "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351562187",
      "id" : 351562187,
      "in_reply_to_id" : 349413481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTU2MjE4Nw==",
      "original_commit_id" : "91eefef240145e819a477a72b49fc032746a2983",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 324017785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-28T01:43:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351562187",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352298564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352298564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm unable to reproduce this locally. Asked @jonatack for logs & looks like the failure occurs after going through the while loop >150 times, which means the `if new_conn.get_invs()` conditional is never hitting. Theoretically it would be possible for the condition to not hit, but that should be an _extreme_ edge case, vs the frequency of failures being seen. I'll try to run this test in different environments to see if I can reproduce. ",
      "commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "created_at" : "2019-11-30T18:42:04Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352298564",
      "id" : 352298564,
      "in_reply_to_id" : 351404225,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI5ODU2NA==",
      "original_commit_id" : "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "original_position" : 171,
      "path" : "test/functional/mempool_rebroadcast.py",
      "position" : 171,
      "pull_request_review_id" : 324903855,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
      "updated_at" : "2019-11-30T18:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352298564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   }
]
