[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316934773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316934773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Compiling without including transaction header (already included in txmempool.h)",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T00:21:43Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316934773",
      "id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjkzNDc3Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 7,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316934773",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17004](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17004.html) (validation: Remove REJECT code from CValidationState by jnewbery)\n* [#16698](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16698.html) ([WIP] Mempool: rework rebroadcast logic to improve privacy by amitiuttarwar)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15921](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15921.html) (validation: Tidy up ValidationState interface by jnewbery)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-23T00:52:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524131064",
      "id" : 524131064,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDEzMTA2NA==",
      "updated_at" : "2019-10-18T01:54:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524131064",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the rational defining func instead of directly as LogPrint arg ?",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T00:56:46Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940139",
      "id" : 316940139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MDEzOQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940139",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you use a ternary to check pindexFork instead of two call to LogPrint? Also fInitialDownload could be logged",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T00:59:03Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940553",
      "id" : 316940553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MDU1Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940553",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316941180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316941180"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks to pindex, maybe log the height too",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T01:03:00Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316941180",
      "id" : 316941180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MTE4MA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 51,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316941180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942251"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: maybe \"top block hash %s bottom block hash\"",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T01:09:35Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockDisconnected(pblock);\n     });\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, locator, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, locator.IsNull() ? \"null\" : locator.vHave.front().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942251",
      "id" : 316942251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MjI1MQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 69,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942251",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You may add MemPoolRemovalReasonString somewhere, like TransactionErrorString in util/error.cp. IMO that's an interesting info to log",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T01:11:03Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942492",
      "id" : 316942492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MjQ5Mg==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317000871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317000871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From the [Developer Notes - Source code organization](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization):\r\n> - Every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.\r\n>    -  _Rationale_: Excluding headers because they are already indirectly included results in compilation failures when those indirect dependencies change. Furthermore, it obscures what the real code dependencies are.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T07:12:56Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317000871",
      "id" : 317000871,
      "in_reply_to_id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzAwMDg3MQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 7,
      "pull_request_review_id" : 278830194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317000871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317143843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317143843"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah thanks, didn't know it!",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-23T13:56:48Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317143843",
      "id" : 317143843,
      "in_reply_to_id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzE0Mzg0Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 7,
      "pull_request_review_id" : 279015148,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317143843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-24T17:56:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524569491",
      "id" : 524569491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDU2OTQ5MQ==",
      "updated_at" : "2019-08-24T17:56:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524569491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317672379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317672379"
         }
      },
      "author_association" : "NONE",
      "body" : "Using it directly will give the name of the lambda, i.e. `operator()`, which is not desirable.\r\n\r\nIdeally, I could use `__func__` in the lambda capture. However, this is not allowed because it has static storage duration. With C++14, we could use capture initializers instead.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-26T15:58:14Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317672379",
      "id" : 317672379,
      "in_reply_to_id" : 316940139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzY3MjM3OQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 279678717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317672379",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r318809816"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318809816"
         }
      },
      "author_association" : "NONE",
      "body" : "I believe the bottom block hash will always be the genesis block hash, so logging it probably won't be very useful. Plus it may be a little confusing given only the top block is being flushed.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-08-28T21:55:34Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockDisconnected(pblock);\n     });\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, locator, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, locator.IsNull() ? \"null\" : locator.vHave.front().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r318809816",
      "id" : 318809816,
      "in_reply_to_id" : 316942251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODgwOTgxNg==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 69,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 281124970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318809816",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406870"
         }
      },
      "author_association" : "NONE",
      "body" : "Good call! I had misinterpreted the frequency of this being non-null. Fixed in 4bacb54.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-09-03T18:07:11Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406870",
      "id" : 320406870,
      "in_reply_to_id" : 316940553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjg3MA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406870",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406900"
         }
      },
      "author_association" : "NONE",
      "body" : "Added in 4bacb54.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-09-03T18:07:16Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406900",
      "id" : 320406900,
      "in_reply_to_id" : 316941180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjkwMA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 51,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406935"
         }
      },
      "author_association" : "NONE",
      "body" : "Done in 504d009.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-09-03T18:07:19Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406935",
      "id" : 320406935,
      "in_reply_to_id" : 316942492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjkzNQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406935",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Addressed all comments and add correct formatting for valid `CValidationState` in b303865.\r\n\r\nAlso updated `CValidationState` accessors in 3ff8755 to return strings by constant reference to avoid copying. Although this means the references are only valid for the lifetime of the object, which should be okay.",
      "created_at" : "2019-09-03T18:14:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841",
      "id" : 527575841,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzU3NTg0MQ==",
      "updated_at" : "2019-09-03T18:14:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527575841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332730670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332730670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Refer to this as \"IBD\" or \"Initial Block Download\" rather than \"initial download\". I suggest: `\"%s: new block hash=%s fork block hash=%s (In IBD=%d)\\n\"` or similar.\r\n\r\n(These are low-level logs. Anyone reading them should understand what IBD means.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-08T20:59:48Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s fork block hash=%s initial download=%d\\n\", func,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332730670",
      "id" : 332730670,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczMDY3MA==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 43,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332730670",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332733417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332733417"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: call this the 'txid' instead of 'tx hash', and also log the wtxid (use `GetWitnessHash()`)",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-08T21:06:15Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s fork block hash=%s initial download=%d\\n\", func,\n+                 pindexNew->GetBlockHash().ToString(),\n+                 pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                 fInitialDownload);\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332733417",
      "id" : 332733417,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczMzQxNw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 55,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332733417",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332735487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332735487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think these strings could just be `EXPIRY`, `SIZELIMIT`, etc. These strings are for logs only, so will only be read by engineers.\r\n\r\nTrying to make these strings more generally accessible obscures some of the nuance. For example `MemPoolRemovalReason::REORG` means that a transaction was removed during a re-org because it spent a coinbase transaction that is no longer mature, or because it is no longer final, or because mempool policy changed since it first entered the mempool so it can no longer be added or because the re-org was too large and we dropped transactions to avoid memory exhaustion.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-08T21:11:25Z",
      "diff_hunk" : "@@ -1098,3 +1100,22 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason)\n+{\n+    switch (reason) {\n+    case MemPoolRemovalReason::EXPIRY:\n+        return \"Expired from mempool\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332735487",
      "id" : 332735487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczNTQ4Nw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 18,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332735487",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332745377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332745377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For all of these async validationinterface callbacks, I think it'd be useful to log both when the event is enqueued and dequeued, with some kind of counter to correlate the two logs. Thoughts?",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-08T21:37:39Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332745377",
      "id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjc0NTM3Nw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332745377",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\r\n\r\n> updated CValidationState accessors in 3ff8755 to return strings by constant reference to avoid copying.\r\n\r\nWas this required for the PR? Those accessors aren't used very much, so performance isn't critical. I'd suggest not changing them in this PR.",
      "created_at" : "2019-10-09T22:03:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-540222219",
      "id" : 540222219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIyMjIxOQ==",
      "updated_at" : "2019-10-09T22:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540222219",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335228213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335228213"
         }
      },
      "author_association" : "NONE",
      "body" : "The scheduler client guarantees these callbacks are executed serially in the order in which they were enqueued. Unless there is a need to correlate the enqueuing with the execution of `BlockChecked` and `NewPowValidBlock`, I'm hesitant to add more complexity to the code.\r\n\r\nIs there a specific case where you think the additional logging would be useful? If so, would correlation using data from the log message be sufficient rather than adding a counter?",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-16T00:01:31Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335228213",
      "id" : 335228213,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTIyODIxMw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 302260704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335228213",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335552731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335552731"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this: https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381265760 would have been easier to spot with logging when the callbacks were enqueued, and it would have been easier to correlate those enqueue events with the thread that was running.\r\n\r\nYou're probably right that there's no need for a counter and that the data from the log message is enough to correlate the enqueue/dequeue events.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-16T15:35:52Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335552731",
      "id" : 335552731,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTU1MjczMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 302675991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335552731",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336179659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336179659"
         }
      },
      "author_association" : "NONE",
      "body" : "Done. In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this though let me know if there is a better way. Defining the helpers in the header would have required moving `MainSignalsInstance` into the header.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-17T19:11:44Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336179659",
      "id" : 336179659,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjE3OTY1OQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 303483828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:08:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336179659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\r\n> \r\n\r\nI would be hesitant to add a functional test only to check for informational logging. Is there an existing a test where all these events are exercised? Not sure if it is worth adding regardless.\r\n\r\n> > updated CValidationState accessors in [3ff8755](https://github.com/bitcoin/bitcoin/commit/3ff875575563bf88ea94ec63b892fe8237b5e0f7) to return strings by constant reference to avoid copying.\r\n> \r\n> Was this required for the PR? Those accessors aren't used very much, so performance isn't critical. I'd suggest not changing them in this PR.\r\n\r\nYeah, commit 72c6e50 calls those methods in such a way that not returning references would have incurred excessive copies. Would it be better if the two commits were merged?",
      "created_at" : "2019-10-17T19:40:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180",
      "id" : 543330180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzMzMDE4MA==",
      "updated_at" : "2019-10-17T19:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543330180",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336249532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336249532"
         }
      },
      "author_association" : "NONE",
      "body" : "FYI, I had to make some minor changes to placate the linter. It was giving the following failures:\r\n\r\n```\r\nsrc/validationinterface.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrint(BCLog::VALIDATIONINTERFACE, fmt, args...)\r\n^---- failure generated from test/lint/lint-format-strings.sh\r\nAll calls to LogPrintf() and LogPrint() should be terminated with \\n\r\nsrc/validationinterface.cpp:    LogPrint(BCLog::VALIDATIONINTERFACE, fmt, args...);\r\n^---- failure generated from test/lint/lint-logs.sh\r\n```\r\n\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/599302990",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-17T22:11:09Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336249532",
      "id" : 336249532,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjI0OTUzMg==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 303575890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-17T22:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336249532",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@jnewbery I have some concerns about this additional logging. Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category. This was not the case prior to that PR since a macro was used for logging.\r\n\r\nGiven the heavy amount of logging added in this PR, should the function vs macro approach for logging be revisited? Typically, the use of macros in logging libraries is to avoid such argument evaluation if I understand correctly.",
      "created_at" : "2019-10-17T22:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763",
      "id" : 543388763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzM4ODc2Mw==",
      "updated_at" : "2019-10-17T22:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543388763",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\r\n\r\nHuh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.",
      "created_at" : "2019-10-18T13:03:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543733154",
      "id" : 543733154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzczMzE1NA==",
      "updated_at" : "2019-10-18T13:03:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543733154",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\r\n> \r\n> Huh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.\r\n\r\nBy evaluation I mean at the call site of `LogPrint`. While this doesn't make a difference when passing variables, it does matter when the arguments are calls to other functions. Prior to #14209, the latter would be textually included when used and thus not evaluated if logging was not enabled for the given category.",
      "created_at" : "2019-10-18T16:36:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543826931",
      "id" : 543826931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgyNjkzMQ==",
      "updated_at" : "2019-10-18T16:36:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543826931",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ah, right",
      "created_at" : "2019-10-18T16:57:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543835460",
      "id" : 543835460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgzNTQ2MA==",
      "updated_at" : "2019-10-18T16:57:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543835460",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336703301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336703301"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this(...)\r\n\r\nThis could lead to portability issues, see e.g. https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file. I tried something similar recently in another PR, and the linker in one of the Travis runs did complain, so I am also interested to know if there are better solutions than moving stuff into the header.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-18T23:06:26Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336703301",
      "id" : 336703301,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjcwMzMwMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304172679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-18T23:06:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336703301",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336713974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336713974"
         }
      },
      "author_association" : "NONE",
      "body" : "Yeah, that could very well be the case. That said, if we want to avoid argument evaluation when the logging category is not enabled, I would need to turn these into macros. See discussion starting in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763. Then I could remove those template method declarations from the header.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-19T00:38:19Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336713974",
      "id" : 336713974,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjcxMzk3NA==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304185715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-19T00:38:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336713974",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336742750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336742750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why this change? :)",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-19T15:56:32Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336742750",
      "id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0Mjc1MA==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : 7,
      "pull_request_review_id" : 304219538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-19T15:56:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336742750",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336747711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336747711"
         }
      },
      "author_association" : "NONE",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180.\r\n\r\n@jnewbery Regarding my previous comment, I'm also happy to remove this commit if that's preferred. Seems I had not read your comment closely enough about it not being performance critical. Though note my concerns about macro vs function logging.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-19T18:08:38Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336747711",
      "id" : 336747711,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0NzcxMQ==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : 7,
      "pull_request_review_id" : 304224916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-19T18:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336747711",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336748680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336748680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the object lifetime of `strRejectReason` and `strDebugMessage`?\r\n\r\nAre they guaranteed to outlive the callers of `GetRejectReason` or `GetDebugMessage`?",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-19T18:34:39Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336748680",
      "id" : 336748680,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0ODY4MA==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : 7,
      "pull_request_review_id" : 304225926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-19T18:34:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336748680",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336759875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336759875"
         }
      },
      "author_association" : "NONE",
      "body" : "Their lifetimes are that of the corresponding `CValidationState` as mentioned in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841. All current uses are guaranteed to outlive the callers as they either make a copy or are passed by const reference to other functions that do something similar. There's no such guarantee for future callers though.",
      "commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "created_at" : "2019-10-20T01:45:18Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336759875",
      "id" : 336759875,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1OTg3NQ==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : 7,
      "pull_request_review_id" : 304238102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2019-10-20T01:45:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336759875",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   }
]
