[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396964929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396964929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "FWIW, here's an alternative shorter version for the same logic, without branches:\r\n```\r\n    n = std::min(n, static_cast<int64_t>(std::numeric_limits<int32_t>::max()));\r\n    n = std::max(n, static_cast<int64_t>(std::numeric_limits<int32_t>::min()));\r\n```\r\nNot sure if it's really more readable though, personally I'd be okay with both versions.",
      "commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "created_at" : "2020-03-24T08:09:14Z",
      "diff_hunk" : "@@ -59,6 +60,16 @@ CScript ParseScript(const std::string& s)\n         {\n             // Number\n             int64_t n = atoi64(*w);\n+\n+            //it's always assumed that a numeric op fits in an int32_t in other code paths,\n+            //so enforce an artificial threshold here\n+            //for details, see : https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602954469\n+            if(n > std::numeric_limits<int32_t>::max()) {\n+                n = std::numeric_limits<int32_t>::max();\n+            } else if(n < std::numeric_limits<int32_t>::min()) {\n+                n = std::numeric_limits<int32_t>::min();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396964929",
      "id" : 396964929,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2NDkyOQ==",
      "original_commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "original_position" : 20,
      "path" : "src/core_read.cpp",
      "position" : 20,
      "pull_request_review_id" : 380074956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416",
      "updated_at" : "2020-03-24T08:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396964929",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396970095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396970095"
         }
      },
      "author_association" : "NONE",
      "body" : "`std::clamp` in C++17 would be even better and less verbose, but unsure if we can use C++17 features ?\r\n\r\nNote that `min/max` in the standard also do `exactly one comparison` each.\r\n\r\nI can remove the `if/else` though if people think it fits better here.",
      "commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "created_at" : "2020-03-24T08:19:19Z",
      "diff_hunk" : "@@ -59,6 +60,16 @@ CScript ParseScript(const std::string& s)\n         {\n             // Number\n             int64_t n = atoi64(*w);\n+\n+            //it's always assumed that a numeric op fits in an int32_t in other code paths,\n+            //so enforce an artificial threshold here\n+            //for details, see : https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602954469\n+            if(n > std::numeric_limits<int32_t>::max()) {\n+                n = std::numeric_limits<int32_t>::max();\n+            } else if(n < std::numeric_limits<int32_t>::min()) {\n+                n = std::numeric_limits<int32_t>::min();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396970095",
      "id" : 396970095,
      "in_reply_to_id" : 396964929,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3MDA5NQ==",
      "original_commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "original_position" : 20,
      "path" : "src/core_read.cpp",
      "position" : 20,
      "pull_request_review_id" : 380081388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416",
      "updated_at" : "2020-03-24T08:22:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396970095",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/946757?v=4",
         "events_url" : "https://api.github.com/users/pierreN/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pierreN/followers",
         "following_url" : "https://api.github.com/users/pierreN/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pierreN/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pierreN",
         "id" : 946757,
         "login" : "pierreN",
         "node_id" : "MDQ6VXNlcjk0Njc1Nw==",
         "organizations_url" : "https://api.github.com/users/pierreN/orgs",
         "received_events_url" : "https://api.github.com/users/pierreN/received_events",
         "repos_url" : "https://api.github.com/users/pierreN/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pierreN/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pierreN"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396976681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396976681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, `std::clamp` would indeed be a very nice option. Unfortunately, upgrading to C++17 has not happened yet (see this discussion: https://github.com/bitcoin/bitcoin/issues/16684), so it can't be used.\r\nSometimes substitutes for not-yet-available C++ features are implemented by contributors, like `Span` for the C++20 `std::span` by sipa (see https://github.com/bitcoin/bitcoin/pull/12886), don't know though if that is a desired way to go here, and if yes, if it should be packed in this PR. This should probably include identifiying all clamps throughout the codebase and using our newly introduced clamp function (so it can be replaced with `std::clamp` once we move to C++17).\r\n",
      "commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "created_at" : "2020-03-24T08:31:39Z",
      "diff_hunk" : "@@ -59,6 +60,16 @@ CScript ParseScript(const std::string& s)\n         {\n             // Number\n             int64_t n = atoi64(*w);\n+\n+            //it's always assumed that a numeric op fits in an int32_t in other code paths,\n+            //so enforce an artificial threshold here\n+            //for details, see : https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602954469\n+            if(n > std::numeric_limits<int32_t>::max()) {\n+                n = std::numeric_limits<int32_t>::max();\n+            } else if(n < std::numeric_limits<int32_t>::min()) {\n+                n = std::numeric_limits<int32_t>::min();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396976681",
      "id" : 396976681,
      "in_reply_to_id" : 396964929,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NjY4MQ==",
      "original_commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "original_position" : 20,
      "path" : "src/core_read.cpp",
      "position" : 20,
      "pull_request_review_id" : 380089701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416",
      "updated_at" : "2020-03-24T08:31:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396976681",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396978657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396978657"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks, I'd be down to do that in a different PR. I'm looking for stuffs to do to improve my knowledge of the codebase anyway :)\r\n\r\nI'll wait for some other people to confirm \"yes this is a good idea, do a separate PR for std::clamp\" before starting though",
      "commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "created_at" : "2020-03-24T08:35:13Z",
      "diff_hunk" : "@@ -59,6 +60,16 @@ CScript ParseScript(const std::string& s)\n         {\n             // Number\n             int64_t n = atoi64(*w);\n+\n+            //it's always assumed that a numeric op fits in an int32_t in other code paths,\n+            //so enforce an artificial threshold here\n+            //for details, see : https://github.com/bitcoin/bitcoin/pull/18413#issuecomment-602954469\n+            if(n > std::numeric_limits<int32_t>::max()) {\n+                n = std::numeric_limits<int32_t>::max();\n+            } else if(n < std::numeric_limits<int32_t>::min()) {\n+                n = std::numeric_limits<int32_t>::min();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396978657",
      "id" : 396978657,
      "in_reply_to_id" : 396964929,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODY1Nw==",
      "original_commit_id" : "88bd812672b4238011ffabe22d8596854c6050eb",
      "original_position" : 20,
      "path" : "src/core_read.cpp",
      "position" : 20,
      "pull_request_review_id" : 380092167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18416",
      "updated_at" : "2020-03-24T08:35:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396978657",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/946757?v=4",
         "events_url" : "https://api.github.com/users/pierreN/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pierreN/followers",
         "following_url" : "https://api.github.com/users/pierreN/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pierreN/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pierreN",
         "id" : 946757,
         "login" : "pierreN",
         "node_id" : "MDQ6VXNlcjk0Njc1Nw==",
         "organizations_url" : "https://api.github.com/users/pierreN/orgs",
         "received_events_url" : "https://api.github.com/users/pierreN/received_events",
         "repos_url" : "https://api.github.com/users/pierreN/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pierreN/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pierreN"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "It seems that the tests were already including values wider than 2^32 so I reckon there is 2 options : \r\n\r\n- remove/update tests to make them fit into a 2^32\r\n- just prevent the [UB value](https://github.com/bitcoin/bitcoin/pull/18413#pullrequestreview-380164570) instead\r\n\r\nThe second option seemed the less intrusive, so I updated the PR to only forbid the value -2^63. I also added 2 tests reflecting that : before this PR, those tests were *triggering the UB* before failing.  ",
      "created_at" : "2020-03-24T15:35:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603311452",
      "id" : 603311452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18416",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzMxMTQ1Mg==",
      "updated_at" : "2020-03-24T15:35:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603311452",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/946757?v=4",
         "events_url" : "https://api.github.com/users/pierreN/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pierreN/followers",
         "following_url" : "https://api.github.com/users/pierreN/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pierreN/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pierreN",
         "id" : 946757,
         "login" : "pierreN",
         "node_id" : "MDQ6VXNlcjk0Njc1Nw==",
         "organizations_url" : "https://api.github.com/users/pierreN/orgs",
         "received_events_url" : "https://api.github.com/users/pierreN/received_events",
         "repos_url" : "https://api.github.com/users/pierreN/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pierreN/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pierreN"
      }
   }
]
