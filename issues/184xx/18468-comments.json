[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18216 (test, build: Enable -Werror=sign-compare by Empact)\n* #13062 (Make script interpreter independent from storage type CScript by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-30T02:43:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#issuecomment-605752932",
      "id" : 605752932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18468",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTc1MjkzMg==",
      "updated_at" : "2020-04-27T05:54:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605752932",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Here is one caveat that may not be obvious: whenever you have some iterator/pointer/object that stores objects of type `B` (which supertype `A`), it should *not* be possible to construct a `Span<A>` for it, despite `B*` being implicitly convertible to `A*`. The reason is that `A` and `B` may have different sizes, so pointer arithmetic in one may not correspond to the right operations in the other.\r\n\r\nThis is implemented - here and in the C++20 `std::span` - by checking that *arrays of* `B` can be converted to *arrays of* `A`.",
      "created_at" : "2020-03-30T04:48:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#issuecomment-605780145",
      "id" : 605780145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18468",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTc4MDE0NQ==",
      "updated_at" : "2020-03-30T21:28:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605780145",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-04-02T21:33:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#issuecomment-608101932",
      "id" : 608101932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18468",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwODEwMTkzMg==",
      "updated_at" : "2020-04-02T21:33:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608101932",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18468#discussion_r402990362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18468"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402990362"
         }
      },
      "author_association" : "NONE",
      "body" : "This will cover the generic copy constructor as well, because `Span<O>` has both `.data()` & `.size()` methods.\r\n```c++\r\n    template <typename O, typename std::enable_if<std::is_convertible<O (*)[], C (*)[]>::value, int>::type = 0>\r\n    constexpr Span(const Span<O>& other) noexcept : m_data(other.m_data), m_size(other.m_size) {}\r\n```",
      "commit_id" : "6bc07845c57765940bd2af242166e154c939738b",
      "created_at" : "2020-04-03T13:05:19Z",
      "diff_hunk" : "@@ -18,34 +18,85 @@ template<typename C>\n class Span\n {\n     C* m_data;\n-    std::ptrdiff_t m_size;\n+    std::size_t m_size;\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n-    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n+\n+    /** Construct a span from a begin pointer and a size.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, std::size_t size) noexcept : m_data(begin), m_size(size) {}\n+\n+    /** Construct a span from a begin and end pointer.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n+\n+    /** Implicit conversion of spans between compatible types.\n+     *\n+     *  Specifically, if a pointer to an array of type O can be implicitly converted to a pointer to an array of type\n+     *  C, then permit implicit conversion of Span<O> to Span<C>. This matches the behavior of the corresponding\n+     *  C++20 std::span constructor.\n+     *\n+     *  For example this means that a Span<T> can be converted into a Span<const T>.\n+     */\n+    template <typename O, typename std::enable_if<std::is_convertible<O (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(const Span<O>& other) noexcept : m_data(other.m_data), m_size(other.m_size) {}\n+\n+    /** Default copy constructor. */\n+    constexpr Span(const Span&) noexcept = default;\n+\n+    /** Default assignment operator. */\n+    Span& operator=(const Span& other) noexcept = default;\n+\n+    /** Construct a Span from an array. This matches the corresponding C++20 std::span constructor. */\n+    template <int N>\n+    constexpr Span(C (&a)[N]) noexcept : m_data(a), m_size(N) {}\n+\n+    /** Construct a Span for objects with .data() and .size() (std::string, std::array, std::vector, ...).\n+     *\n+     * This implements a subset of the functionality provided by the C++20 std::span range-based constructor.\n+     *\n+     * To prevent surprises, this constructor is restricted to const containers. Use MakeSpan to construct\n+     * a span for mutable ones.\n+     */\n+    template <typename V, typename std::enable_if<std::is_convertible<typename std::remove_pointer<decltype(std::declval<const V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<const V&>().size()), std::size_t>::value, int>::type = 0>\n+    constexpr Span(const V& v) noexcept : m_data(v.data()), m_size(v.size()) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#discussion_r402990362",
      "id" : 402990362,
      "line" : 71,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDM2Mg==",
      "original_commit_id" : "6bc07845c57765940bd2af242166e154c939738b",
      "original_line" : 71,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 57,
      "pull_request_review_id" : 387236075,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18468",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-03T13:09:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402990362",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/2920178?v=4",
         "events_url" : "https://api.github.com/users/aminroosta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aminroosta/followers",
         "following_url" : "https://api.github.com/users/aminroosta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aminroosta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aminroosta",
         "id" : 2920178,
         "login" : "aminroosta",
         "node_id" : "MDQ6VXNlcjI5MjAxNzg=",
         "organizations_url" : "https://api.github.com/users/aminroosta/orgs",
         "received_events_url" : "https://api.github.com/users/aminroosta/received_events",
         "repos_url" : "https://api.github.com/users/aminroosta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aminroosta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aminroosta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aminroosta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18468#discussion_r403428718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18468"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403428718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's true, though the specification and common other span implementations still have a default copy constructor too - I don't know why.",
      "commit_id" : "6bc07845c57765940bd2af242166e154c939738b",
      "created_at" : "2020-04-04T05:34:08Z",
      "diff_hunk" : "@@ -18,34 +18,85 @@ template<typename C>\n class Span\n {\n     C* m_data;\n-    std::ptrdiff_t m_size;\n+    std::size_t m_size;\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n-    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n+\n+    /** Construct a span from a begin pointer and a size.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, std::size_t size) noexcept : m_data(begin), m_size(size) {}\n+\n+    /** Construct a span from a begin and end pointer.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n+\n+    /** Implicit conversion of spans between compatible types.\n+     *\n+     *  Specifically, if a pointer to an array of type O can be implicitly converted to a pointer to an array of type\n+     *  C, then permit implicit conversion of Span<O> to Span<C>. This matches the behavior of the corresponding\n+     *  C++20 std::span constructor.\n+     *\n+     *  For example this means that a Span<T> can be converted into a Span<const T>.\n+     */\n+    template <typename O, typename std::enable_if<std::is_convertible<O (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(const Span<O>& other) noexcept : m_data(other.m_data), m_size(other.m_size) {}\n+\n+    /** Default copy constructor. */\n+    constexpr Span(const Span&) noexcept = default;\n+\n+    /** Default assignment operator. */\n+    Span& operator=(const Span& other) noexcept = default;\n+\n+    /** Construct a Span from an array. This matches the corresponding C++20 std::span constructor. */\n+    template <int N>\n+    constexpr Span(C (&a)[N]) noexcept : m_data(a), m_size(N) {}\n+\n+    /** Construct a Span for objects with .data() and .size() (std::string, std::array, std::vector, ...).\n+     *\n+     * This implements a subset of the functionality provided by the C++20 std::span range-based constructor.\n+     *\n+     * To prevent surprises, this constructor is restricted to const containers. Use MakeSpan to construct\n+     * a span for mutable ones.\n+     */\n+    template <typename V, typename std::enable_if<std::is_convertible<typename std::remove_pointer<decltype(std::declval<const V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<const V&>().size()), std::size_t>::value, int>::type = 0>\n+    constexpr Span(const V& v) noexcept : m_data(v.data()), m_size(v.size()) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#discussion_r403428718",
      "id" : 403428718,
      "in_reply_to_id" : 402990362,
      "line" : 71,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyODcxOA==",
      "original_commit_id" : "6bc07845c57765940bd2af242166e154c939738b",
      "original_line" : 71,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 57,
      "pull_request_review_id" : 387670264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18468",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-04T05:34:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403428718",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after #18591 (which included a commit from this PR).",
      "created_at" : "2020-05-01T18:28:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18468#issuecomment-622505998",
      "id" : 622505998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18468",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMjUwNTk5OA==",
      "updated_at" : "2020-05-01T18:28:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622505998",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
