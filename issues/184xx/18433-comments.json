[
   {
      "author_association" : "NONE",
      "body" : "https://github.com/pierreN/bitcoin/blob/de3a30bab28e2db853a795017c5ec1704a1d0fee/src/undo.h#L36-L40",
      "created_at" : "2020-03-26T01:58:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604183813",
      "id" : 604183813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDE4MzgxMw==",
      "updated_at" : "2020-03-26T01:59:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604183813",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/946757?v=4",
         "events_url" : "https://api.github.com/users/pierreN/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pierreN/followers",
         "following_url" : "https://api.github.com/users/pierreN/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pierreN/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pierreN",
         "id" : 946757,
         "login" : "pierreN",
         "node_id" : "MDQ6VXNlcjk0Njc1Nw==",
         "organizations_url" : "https://api.github.com/users/pierreN/orgs",
         "received_events_url" : "https://api.github.com/users/pierreN/received_events",
         "repos_url" : "https://api.github.com/users/pierreN/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pierreN/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pierreN"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@pierreN \r\n\r\nThanks for tackling this.\r\n\r\nConsider throwing a `std::ios_base::failure` instead of silently truncating in case of serialization/deserialization errors.\r\n\r\nThat is the pattern used generally in the serialization/deserialisation code.",
      "created_at" : "2020-03-26T16:06:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604518371",
      "id" : 604518371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDUxODM3MQ==",
      "updated_at" : "2020-03-26T16:06:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604518371",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@pierreN \r\n\r\nFWIW, this is what I use in my local tree to avoid hitting the signed integer overflow when fuzzing:\r\n\r\n```diff\r\ndiff --git a/src/coins.h b/src/coins.h\r\nindex e71c8a47b..2be607207 100644\r\n--- a/src/coins.h\r\n+++ b/src/coins.h\r\n@@ -59,7 +59,7 @@ public:\r\n     template<typename Stream>\r\n     void Serialize(Stream &s) const {\r\n         assert(!IsSpent());\r\n-        uint32_t code = nHeight * 2 + fCoinBase;\r\n+        const uint32_t code = nHeight * uint32_t{2} + fCoinBase;\r\n         ::Serialize(s, VARINT(code));\r\n         ::Serialize(s, Using<TxOutCompression>(out));\r\n     }\r\n@@ -68,7 +68,11 @@ public:\r\n     void Unserialize(Stream &s) {\r\n         uint32_t code = 0;\r\n         ::Unserialize(s, VARINT(code));\r\n-        nHeight = code >> 1;\r\n+        const uint32_t block_height = code >> 1;\r\n+        if (block_height > (std::numeric_limits<uint32_t>::max() - 1) / 2) {\r\n+            throw std::ios_base::failure(\"Invalid nHeight when deserializing Coin.\");\r\n+        }\r\n+        nHeight = block_height;\r\n         fCoinBase = code & 1;\r\n         ::Unserialize(s, Using<TxOutCompression>(out));\r\n     }\r\n```\r\n\r\nFeel free to use it - I'd love to see it upstreamed. That would simplify my fuzzing workflow :)",
      "created_at" : "2020-03-26T18:10:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604590388",
      "id" : 604590388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDU5MDM4OA==",
      "updated_at" : "2020-03-26T18:10:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604590388",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree with throwing an error when the value is out of range.",
      "created_at" : "2020-03-26T22:35:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604722360",
      "id" : 604722360,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDcyMjM2MA==",
      "updated_at" : "2020-03-26T22:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604722360",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "OK, thanks.\r\n\r\nNote that strictly speaking, as long as [`unsigned int`](https://github.com/bitcoin/bitcoin/blob/e3154aacf444a29f9f5642b6c937e875ab9a2c13/src/undo.h#L37) and `uint32_t` are 32b long, in the code posted by @practicalswift only the `uint32_t{2}` are necessary for the fuzzer exemples (to the compiler this is equivalent to the `static_cast` in this PR which didn't truncate them - sorry for being unclear).\r\n\r\nI updated the branch to use the `uint32_t{}` and made explicit the `unsigned int` == `uint32_t`.\r\n\r\nBut AFAIK exceptions are already raised in `serialize.h:ReadVarInt` ([here](https://github.com/bitcoin/bitcoin/blob/e3154aacf444a29f9f5642b6c937e875ab9a2c13/src/serialize.h#L461) and [here](https://github.com/bitcoin/bitcoin/blob/e3154aacf444a29f9f5642b6c937e875ab9a2c13/src/serialize.h#L466)) : I'm not sure you can reach the new `Invalid nHeight when deserializing Coin` exception.\r\n\r\nExamples :\r\n- `code = VARINT(0x8e fe fe fe 7f)` will evaluate `block_height > (std::numeric_limits<uint32_t>::max() - 1) / 2)` to `false`\r\n- `code = VARINT(0x8e fe fe ff 00)` will not fit an `uint32_t` hence raise [this](https://github.com/bitcoin/bitcoin/blob/e3154aacf444a29f9f5642b6c937e875ab9a2c13/src/serialize.h#L461) already existing exception\r\n\r\nAnother way would be to lower the threshold for raising the exception (e.g. `/4`) but since we already have the `uint32_t{}` this seems not needed.\r\n\r\nDid I miss something by any chance ?",
      "created_at" : "2020-03-27T02:33:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604783508",
      "id" : 604783508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDc4MzUwOA==",
      "updated_at" : "2020-03-27T02:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604783508",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/946757?v=4",
         "events_url" : "https://api.github.com/users/pierreN/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pierreN/followers",
         "following_url" : "https://api.github.com/users/pierreN/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pierreN/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pierreN",
         "id" : 946757,
         "login" : "pierreN",
         "node_id" : "MDQ6VXNlcjk0Njc1Nw==",
         "organizations_url" : "https://api.github.com/users/pierreN/orgs",
         "received_events_url" : "https://api.github.com/users/pierreN/received_events",
         "repos_url" : "https://api.github.com/users/pierreN/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pierreN/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pierreN"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 21379af7537c71181dab0e9de3af5459a0f4a00e ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 21379af7537c71181dab0e9de3af5459a0f4a00e ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUj3qwv7BGTYcciiJxr/pawLmVnsWE3zYTUPkpxF6yHvtWRJUaXA7ZfPs9CHsHCI\r\n1bNzPhPSel9+IpoZ5xx71UN0yNUPBxw1ZQ4PhnEffRXsdhWEz3BjhORZ+IJ+hFVq\r\nxx1LPZjRjd97WARFzOnsP98ayBFFxIh9bSlA0U8jKm8BAFnONrqpI1v5CMBxdnai\r\nOYHF5hQM1DKM4YaPT6ZOEwknV7WO8Nifu+kAysvdoI+M0E45uzf+mDlx2qyP1LYf\r\nb0ErFwTdPY7ldDLBBqOuiV/R21cZyhQBEbXUpTCwzxWoHcwEHoSLUITJ+YQ7LvTR\r\nET5/d8kVsBm6o1z5mtnXrHPwXEvlKbHMFtPw6ZpCTTf5FLLZTVOC32/JVIKle7gj\r\na6AKmoQDEz1+XyWCHqMCBad7TnCa78k7LrGL8NAV0RoezqazyncNrri/pG0OgdKW\r\nt49UxzN7Pewq6ApqsHyEAgkeC3DVzw5HsrdHakIYbZu096kMuEpHoZZfL0KFkl4/\r\nXBxEu4pW\r\n=DB20\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `0fdeb1acb1aa9d5b5bfc0fded9cbedaaabafa625d387583314adb45f1c22a61e  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401080fdeb1acb1aa9d5b5bfc0fded9cbedaaabafa625d387583314adb45f1c22a61ef010453ec514da1e6404934baba8798a9df908fff0101377a355fe716587c4e3901779bb75cf08f1045e7e401bf008b0d181cbb85e512d0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010474192ff025c91277e6ed2e21c688a2508f1045e7e401bf008b401a52662e2dd610083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0109c28e0726aa1f25452997df08526464208f1045e7e401bf00837049decca5dc8b90083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f25701712ae4542e0c14b2de5a8b182308f1045e7e401bf0080ddb3d8b5171754b0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-03-27T18:07:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605177055",
      "id" : 605177055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTE3NzA1NQ==",
      "updated_at" : "2020-03-27T18:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605177055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399498186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399498186"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can someone confirm whether I'm undertanding this correctly?\r\n\r\nPreviously `nHeight` operand was a 31 bit integer, `fCoinBase` operand was a 1-bit integer, and `2` operand was a 2+ bit integer with actual width being platform specific but at least 2.\r\n\r\nUndefined behavior could occur on an imaginary platform where all the operations were done in 31 bits and overflowed, causing the high order bit of the uint32 result not to be set when supposed to be. If https://stackoverflow.com/questions/32529080/should-bit-fields-less-than-int-in-size-be-the-subject-of-integral-promotion is right, this can only happen on an imaginary platform with 31-bit ints.\r\n\r\nFix here for the undefined behavior widens `2` operand so expression is evaluated in 32+ bits on every platform and never overflows.\r\n\r\nAm I understanding this right?\r\n\r\n\r\n\r\n",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T19:37:49Z",
      "diff_hunk" : "@@ -59,7 +59,7 @@ class Coin\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         assert(!IsSpent());\n-        uint32_t code = nHeight * 2 + fCoinBase;\n+        uint32_t code = nHeight * uint32_t{2} + fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399498186",
      "id" : 399498186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5ODE4Ng==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 5,
      "path" : "src/coins.h",
      "position" : 5,
      "pull_request_review_id" : 383149749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T20:09:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399498186",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399505008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399505008"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fix here seems basically identical to the fix in Coin::Serialize and I guess works the same way.\r\n\r\nOnly difference is `fCoinBase` from the other expression is `txout.fCoinBase ? 1u : 0u` here. It's a little more verbose but effectively the same thing since fCoinBase is 1-bit.\r\n",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T19:52:20Z",
      "diff_hunk" : "@@ -24,7 +24,7 @@ struct TxInUndoFormatter\n {\n     template<typename Stream>\n     void Ser(Stream &s, const Coin& txout) {\n-        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        ::Serialize(s, VARINT(txout.nHeight * uint32_t{2} + (txout.fCoinBase ? 1u : 0u)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399505008",
      "id" : 399505008,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNTAwOA==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 5,
      "path" : "src/undo.h",
      "position" : 5,
      "pull_request_review_id" : 383149749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T20:09:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399505008",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399511023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399511023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Again, not sure if I understand this correctly.\r\n\r\nThe undefined behavior happens because standard only says `unsigned int nCode` has to be 16+ bits.\r\n\r\n If `nCode` is 32 bits everything works perfectly. Any serialized VarInt value that is 2**32 or more will trigger \"ReadVarInt(): size too large\" exception, and any smaller values will be broken up into height and fcoinbase correctly.\r\n\r\nIf `nCode` is less than 32 bits, ReadVarInt() exceptions will be triggered unnecessarily. If `nCode` is more than 32 bits, top bits that are set will be silently discarded without triggering the ReadVarInt() exceptions that should be triggered.\r\n\r\nChaning `nCode` to be 32 bits instead of having an implementation defined width gives the right behavior on all platforms.\r\n\r\nAgain, I'm wondering if this is right or something else is going on.",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T20:05:07Z",
      "diff_hunk" : "@@ -34,7 +34,7 @@ struct TxInUndoFormatter\n \n     template<typename Stream>\n     void Unser(Stream &s, Coin& txout) {\n-        unsigned int nCode = 0;\n+        uint32_t nCode = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399511023",
      "id" : 399511023,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxMTAyMw==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 14,
      "path" : "src/undo.h",
      "position" : 14,
      "pull_request_review_id" : 383149749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T20:09:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399511023",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399540058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540058"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe we're in fact already assuming that short is 16 bits, and int is 32 bits (see src/compat/assumptions.h). Maybe should just make those assumptions more explicit (asserting that the range of int matches that of int32_t, etc., ...).",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T21:11:54Z",
      "diff_hunk" : "@@ -59,7 +59,7 @@ class Coin\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         assert(!IsSpent());\n-        uint32_t code = nHeight * 2 + fCoinBase;\n+        uint32_t code = nHeight * uint32_t{2} + fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399540058",
      "id" : 399540058,
      "in_reply_to_id" : 399498186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDA1OA==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 5,
      "path" : "src/coins.h",
      "position" : 5,
      "pull_request_review_id" : 383202435,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T21:11:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540058",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 21379af7537c71181dab0e9de3af5459a0f4a00e\r\n\r\nWould be nice to have this merged to avoid having UBSan hitting the signed integer overflow over and over when fuzzing :)",
      "created_at" : "2020-03-27T21:18:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605319288",
      "id" : 605319288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18433",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTMxOTI4OA==",
      "updated_at" : "2020-03-27T21:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605319288",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399551704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399551704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> 2 operand was a 2+ bit integer with actual width being platform specific but at least 2.\r\n\r\nNot sure, but I think you got this wrong. `2` should be an `int`, which should be promoted to `uint32_t`, if I read [this](https://en.cppreference.com/w/cpp/language/operator_arithmetic#Conversions) right. (\"if the unsigned operand's conversion rank is greater or equal to the conversion rank of the signed operand, the signed operand is converted to the unsigned operand's type\") and [this]() (\"The rank of any unsigned type is equal to the rank of the corresponding signed type\")\r\n\r\nSo this change in code should not result in any change to the compiled code. I checked locally that clang++ produces the same bitcoind for me with O2.\r\n\r\nAs a side note, the boolean is converted to `int` in a first step. See [here](https://en.cppreference.com/w/cpp/language/implicit_conversion#Integral_promotion). Then  promoted to unsigned for the same reason I mentioned above.",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T21:42:37Z",
      "diff_hunk" : "@@ -59,7 +59,7 @@ class Coin\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         assert(!IsSpent());\n-        uint32_t code = nHeight * 2 + fCoinBase;\n+        uint32_t code = nHeight * uint32_t{2} + fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399551704",
      "id" : 399551704,
      "in_reply_to_id" : 399498186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MTcwNA==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 5,
      "path" : "src/coins.h",
      "position" : 5,
      "pull_request_review_id" : 383216658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T21:42:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399551704",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399552237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        ::Serialize(s, VARINT(txout.nHeight * uint32_t{2} + txout.fCoinBase));\r\n```\r\n\r\nIt could make sense to change this for symmetry with the implementation in `Coin::Serialize`?",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T21:44:01Z",
      "diff_hunk" : "@@ -24,7 +24,7 @@ struct TxInUndoFormatter\n {\n     template<typename Stream>\n     void Ser(Stream &s, const Coin& txout) {\n-        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        ::Serialize(s, VARINT(txout.nHeight * uint32_t{2} + (txout.fCoinBase ? 1u : 0u)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552237",
      "id" : 399552237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MjIzNw==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 5,
      "path" : "src/undo.h",
      "position" : 5,
      "pull_request_review_id" : 383217278,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T21:44:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399552237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399552921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The undefined behavior happens because standard only says unsigned int nCode has to be 16+ bits.\r\n\r\nI don't think any undefined behavior has been observed here. This has just been changed for clarity and should also not result in a change in the compiled code.",
      "commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "created_at" : "2020-03-27T21:46:05Z",
      "diff_hunk" : "@@ -34,7 +34,7 @@ struct TxInUndoFormatter\n \n     template<typename Stream>\n     void Unser(Stream &s, Coin& txout) {\n-        unsigned int nCode = 0;\n+        uint32_t nCode = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552921",
      "id" : 399552921,
      "in_reply_to_id" : 399511023,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MjkyMQ==",
      "original_commit_id" : "21379af7537c71181dab0e9de3af5459a0f4a00e",
      "original_position" : 14,
      "path" : "src/undo.h",
      "position" : 14,
      "pull_request_review_id" : 383218092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18433",
      "updated_at" : "2020-03-27T21:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399552921",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
