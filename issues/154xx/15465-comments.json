[
   {
      "author_association" : "MEMBER",
      "body" : "My 2 cents, I tend to support this if:\r\n - there is support from maintainers to push changes \"fast\"\r\n - style it's well documented\r\n - ideally backed by linters or alike\r\n\r\nI don't like deep git blames but I can live you those.\r\n\r\nBut there's also red code so..",
      "created_at" : "2019-02-22T16:52:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466465640",
      "id" : 466465640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjQ2NTY0MA==",
      "updated_at" : "2019-02-22T16:52:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466465640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I wouldn't object doing it for specific modules (as you suggest), for example GUI, rpc, wallet or tests. Though, when it comes to net_processing, validation or consensus code, I'd rather not touch it at all, since style fixes could change behaviour (even if done through a formatter that is supposed to only change whitespace). Reviewing such a patch to make sure it doesn't change the logic might not be worth the effort.\r\n\r\nAbout adding a linter: Different versions of formatters generally produce differently formatted output, so I am not sure if we can force every developer to install the same tool in the same version.",
      "created_at" : "2019-02-22T16:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466467526",
      "id" : 466467526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjQ2NzUyNg==",
      "updated_at" : "2019-02-22T16:58:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466467526",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Related comment copy-paste from https://github.com/bitcoin/bitcoin/pull/6839#issuecomment-152307042\r\n\r\n> A couple thoughts:\r\n\r\n> When changing existing code we must not just trust clang-format repeatability to verify that no bugs were introduced, we should test via checks for identical object files. This will take a little effort because some macros insert line numbers, and these will need to be bypassed.\r\n\r\n> To use clang format normativeily we must end up specifying a particular version that all contributors must use, as clang format changes its behavior. This is irritating, and disruptive to contributing. It could be made much better with good automation like cfield's depbuilder work, to help people get a particular version of clang-format; though due to the flowing API breakage in C++ code, I don't know how long an older version will be maintainable.\r\n\r\n> Another concern is which style to specify. The most common behavior in Bitcoin Core today has stylistic elements which have been objectively shown to increase software defect rate and confuse review-- e.g. unbraced multi-line IFs. We should not make any disruptive reformating changes unless we are quite confident that the style is what we want to live with.\r\n\r\n> We could avoid disrupting the workflow of existing patches by only reformatting (and then requiring it) on new files and substantial rewrites. I think that would be a better path.\r\n\r\n> To the extent that there is hope to address bikeshedding via this, I beg anyone thinking that to give up that thought. Bikeshedding is not a result of any particular coding style or consistency, bikeshedding arises from a lack of perspective which can only be addressed by experience, community norms, and having more important things to worry about.\r\n\r\n> Stylistic consistency has actual benefits; it aids newcomers in their contributions because it is easier for them to make sure their work is okay on styleistic grounds; though this may be offset by having to install some particular version of clang-format before they can get started. It eases review because the uniformity creates better expectations; but reformating makes looking at the history harder, which harms review. Good style choices (as opposed to merely consistent) have, at times, been shown to lower defect rates in software-- but there is not a universal opinion on what choices are good. So there are benefits to be had, but they must be carefully managed with other risks and costs. And the magnitude of the potential benefits, I think, are enough to say that this subject should have a very low priority in general.",
      "created_at" : "2019-02-22T17:04:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466469893",
      "id" : 466469893,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjQ2OTg5Mw==",
      "updated_at" : "2019-02-22T17:04:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466469893",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In general I think that being proactive about style changes is the wrong risk-reward tradeoff for this project. If we're looking to come up with examples of good style that we can point new contributors to, surely we can do that in other ways, such as by having more extensive examples that fit our style guidelines in our docs?",
      "created_at" : "2019-02-23T19:18:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466681740",
      "id" : 466681740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjY4MTc0MA==",
      "updated_at" : "2019-02-23T19:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466681740",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very strong concept ACK\r\n\r\nIn some areas it is better to have a decision; any decision, followed consistently than to have no decision and continued debate. Code style is one such area.\r\n\r\nUsing an automatically enforced canonical form will free up reviewer time and energy. It will also eliminate the need for code style cleanup PR:s.\r\n\r\nIn addition to freeing up reviewer time it will also potentially free up PR author time since this will allow developers to set-up pre-commit hooks and have their code auto-formatted before commit.\r\n\r\nIn summary: after this one-time change no contributor or reviewer will ever have to think about this ever again.\r\n\r\nI suggest using `black` for Python code and `clang-format` for C++ code. (And `git hyper-blame` in the local toolset to ignore the change commit when blaming.)\r\n\r\nSuggested `scripted-diff`:s and the corresponding Travis checks:\r\n\r\nPython:\r\n\r\n```\r\n# scripted-diff\r\npip3 install --upgrade black\r\nblack .\r\n\r\n# travis check to guard against regressions\r\nblack --check --diff .\r\n```\r\n\r\nFWIW, Python PEP-8 health before and after `black`:\r\n\r\n```\r\n$ flake8 --ignore=E203,E302,E501,E712,E713,E722,E731,F632,F841,W503,W605 . | wc -l\r\n1868\r\n$ÃÂ black .\r\n$ flake8 --ignore=E203,E302,E501,E712,E713,E722,E731,F632,F841,W503,W605 . | wc -l\r\n0\r\n```\r\n\r\nC++:\r\n\r\n```\r\n# scripted-diff\r\napt install clang-format\r\ngit ls-files -- \":(exclude)depends/\" \":(exclude)src/leveldb/\" \\\r\n    \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \\\r\n    \":(exclude)src/crypto/ctaes/\" \"*.cpp\" \"*.h\" | \\\r\n    xargs clang-format -style=file -i\r\n\r\n# travis check to guard against regressions\r\ngit ls-files -- \":(exclude)depends/\" \":(exclude)src/leveldb/\" \\\r\n    \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \\\r\n    \":(exclude)src/crypto/ctaes/\" \"*.cpp\" \"*.h\" | \\\r\n    xargs clang-format -style=file -i\r\ngit diff --exit-code\r\n```",
      "created_at" : "2019-02-24T01:23:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466723970",
      "id" : 466723970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjcyMzk3MA==",
      "updated_at" : "2019-02-24T02:04:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466723970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK, sorry, I very much understand the sentiment and would also prefer being able to stick to more consistency. However, in this project, I don't think it is the right choice for prioritize reviewer and developer time.\n\n",
      "created_at" : "2019-02-24T02:36:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466727655",
      "id" : 466727655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjcyNzY1NQ==",
      "updated_at" : "2019-02-24T02:36:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466727655",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK also. I think it would be more productive to just stop caring about code style unless it's actively harmful in some way (eg, mis-indents or the braces-or-sameline policy). We can have guidelines, but it's not really a good use of time to have back-and-forth over style that at the end of the day doesn't matter.",
      "created_at" : "2019-02-24T05:58:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466737127",
      "id" : 466737127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjczNzEyNw==",
      "updated_at" : "2019-02-24T05:58:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466737127",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree with @sipa and @luke-jr's sentiment here. Please, let's spend our work on fixing user side issues, it's not like we've run out of issues and PRs and the only thing left is to polish it up now.",
      "created_at" : "2019-02-24T08:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466748611",
      "id" : 466748611,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Njc0ODYxMQ==",
      "updated_at" : "2019-02-24T08:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466748611",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa Out of curiosity, what changed since #4498? :-)\r\n\r\n@luke-jr @laanwj I think we all agree that caring about code style is largely a waste of time. The point is that status quo means that we'll keep wasting that time. On the other hand, by doing the suggested one-time change using `black` and `clang-format` and enforcing it mechanically via a Travis check (+ corresponding pre-commit hook locally) we'll never have to think about this ever again. We will have literally no back-and-forths over style and thus no time will be wasted in the future, no?",
      "created_at" : "2019-02-24T09:58:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466756731",
      "id" : 466756731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Njc1NjczMQ==",
      "updated_at" : "2019-02-24T10:00:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466756731",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I feel like we have already unintentionally swung fairly far towards a trade-off that optimizes for various more aesthetically oriented ideas of 'good code' over more prosaic definitions of software quality like stability, innovation, or general functionality...\r\n\r\n[I say aesthetically intentionally: very little coding-standard advice has ever been experimentally verified to reduce the defect rate of software or improve development speed.  I support our coding standards and also support the spread of their application, but we should not deceive ourselves into thinking that we know they provide a substantial level of benefit beyond aesthetically.]\r\n\r\nThere is already a large number of changes going on already that disrupt longer living PRs that are improving the software in ways that are unambiguously visible to users, to the point where multiple (previously) high volume contributors have cited it as a reason for decreasing their involvement in the project.\r\n\r\nMy own view is that this pattern is exacerbated by the fact that changes that are intended to have no effect feel a lot safer, so they are more attractive to make (more stuff done), easier to convince people to merge and as a result end up in a fast-lane compared to substantive changes that carry some known risk, require more specialized review, have review delayed due to changeset instability due to style nits, and are harder to mechanically rebase.\r\n\r\nBecause the most dangerous change is an unsafe change falsely believed to be intrinsically safe many refactors even carry a \"coerced review\" cost-- where it looks sure to get merged quickly but where someone feel forced to review because it might not actually be as safe as people think. I've reviewed more than a few changes that I thought were entirely pointless, due to this. Doing a little bit of work you don't care about is a cost of collaboration, but we need to manage that cost.  Coding style changes are probably among the most extreme in terms of the small amount of benefit they provide users vs the amount of collateral damage they do to other development.\r\n\r\nThere is another option to wasting time going back and forth over style:  We could simply stop cutting ourselves, by being more relaxed about it. -- exactly as Luke-jr says. Ignore the smallest of nits, make style advice in a purely advisory way (as in, feel free to adjust if you happen to rebase, otherwise don't bother), move style adjustments-- if any-- until right before merging and not as soon as a PR opens.  We've operated in that fashion before and I think the project accomplished a lot more at that time and was more enjoyable. (Likely not all due to coding style nits, but I would be surprised if it wasn't a factor.)\r\n\r\nIf I thought we were currently hitting a good stride, I wouldn't have any particular qualm with hitting parts of the system with formatting cleanups especially if an effort was made to specifically avoid disrupting other work. In a really healthy state we would have have a resource surplus to absorb some of the disruption that sort of work would create but I don't feel we do now. At this time I don't even think it is worth considering.\r\n\r\n(I also wouldn't apply the above reasoning to a specific narrow changes with a clear and strong benefit profile. If someone were to a case could be made for going and-- say-- adding missing bracing, based on concrete information in research and past experience in our own codebase about defects being hidden by missing braces I would think it was worth considering. ... But not \"everything in the style guide because its in the style guide\")\r\n",
      "created_at" : "2019-02-24T10:56:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466763139",
      "id" : 466763139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Njc2MzEzOQ==",
      "updated_at" : "2019-02-24T10:59:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466763139",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "As an aside, something to keep in mind is that refactors \"immediately after a major release\" impose a substantial cost on fix backports.  I also agree with the principle that refactors bunched up is better then spread out, but more/frequent vs fewer/less often is another critical dimension too.\r\n\r\n[my first thought on seeing this thread before seeing wumpus' response was to send him a pleading that if we were to do this, we'd do it in a limited window and strongly discourage _any_ refactors outside of that window, in trade.]",
      "created_at" : "2019-02-24T11:03:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-466763685",
      "id" : 466763685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Njc2MzY4NQ==",
      "updated_at" : "2019-02-24T11:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466763685",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks everyone for the thoughtful input. Needless to say, I don't think this is a burning priority, but I do think that we could reduce overall disruption and improve the developer experience by being more strategic in how we tackle code style. A few comments:\r\n\r\n- a couple of comments above mention appropriateness for _this project_. I don't think considering _this project_ as a uniform whole is a useful model. The project is made up of many different parts, each with their own properties, which should be considered separately. For example, changing code style in the rpc code is a vastly different trade-off from touching net_processing.cpp, validation.cpp or `EvalScript()`. That's why I suggested attempting this for a small number of files or self-contained module.\r\n- All the comments above have been from long-time contributors. You all have the great advantage of knowing the history of the codebase and having context on why a coin in the collection of coins is called a `CCoinsCacheEntry`, but a single coin is a `Coin` (why not `CCoin`?), or why wallets contain `nWalletVersion`, `TxSpends` and `m_location`, or 100 other quirks of the code. You have the disadvantage that it's difficult for you to see the codebase with the eyes of a new contributor, where the lack of consistency is quite confusing. I found naming in the bitcoin core codebase very confusing when I started looking at the code 2 years ago. Arguably it's now even worse because we've partially adopted a new style and so there's even more inconsistency.\r\n- I maintain that given that we do have code style guidelines, doing a one-time fixup reduces the overall workload and improves contributor experience and the quality of review. For example, if I touch a single line `if` block in my PR, am I obligated to add braces? Either way, I'm likely to get review comments saying \"add braces\" or \"don't change unrelated code style\". Starting from a point where the code matches the style guide would avoid these wasted review cycles.\r\n- Finally, I've received out-of-band feedback from two separate contributors who say that they want to comment on this issue but feel like the debate has been shut down and they wouldn't be listened to. That in itself is troubling.",
      "created_at" : "2019-02-28T15:38:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-468319235",
      "id" : 468319235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODMxOTIzNQ==",
      "updated_at" : "2019-02-28T15:38:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468319235",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery Thanks for the summary. FWIW I agree 100%.\r\n\r\nI find the last point extremely troubling and sad.\r\n\r\nWhen evaluating arguments, we should ask ourselves a.) if the premises are true and b.) if the premises provide enough logical support for the conclusion. Nothing more. Nothing less.\r\n\r\nIf some contributors feel like their best arguments won't be evaluated that way we risk ending up in very dangerous territory.",
      "created_at" : "2019-02-28T19:32:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-468406231",
      "id" : 468406231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQwNjIzMQ==",
      "updated_at" : "2019-02-28T19:32:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468406231",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think the current guideline of refactoring/changing the style only when you have a feature, bugfix or tests that build on top of those changes is reasonable and works well. With that, you are effectively asking the common reviewers and commiters in the \"module\" you change for approval. Assume you want to do something to `./src/wallet/` and get approval from a bunch of recent wallet-reviewers, because they all like it (for whatever reason), the change should be fine to go in.",
      "created_at" : "2019-03-04T20:54:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-469417583",
      "id" : 469417583,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2OTQxNzU4Mw==",
      "updated_at" : "2019-03-04T20:54:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/469417583",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I read through this PR just now and had the following impressions:\r\na) I thought good arguments were made by several people NACKing\r\nb) Since most of the early arguments expressed were NACKs I did feel like NACK was appropriate, but that is because I thought the arguments presented were good, not because I had the impression the debate was shut down or that others' views wouldn't be listened to.\r\nc) I then read @jnewbery's follow-up response and felt it made the best arguments for ACK, especially the point about making it easier for new contributors. I am optimistic that if others post good arguments for ACK that they will be weighed.\r\n\r\nI would encourage any contributor to speak up if they have a good argument for or against this or any change.\r\n",
      "created_at" : "2019-03-23T01:12:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-475826666",
      "id" : 475826666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTgyNjY2Ng==",
      "updated_at" : "2019-03-23T01:12:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475826666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/326147?v=4",
         "events_url" : "https://api.github.com/users/moneyball/events{/privacy}",
         "followers_url" : "https://api.github.com/users/moneyball/followers",
         "following_url" : "https://api.github.com/users/moneyball/following{/other_user}",
         "gists_url" : "https://api.github.com/users/moneyball/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/moneyball",
         "id" : 326147,
         "login" : "moneyball",
         "node_id" : "MDQ6VXNlcjMyNjE0Nw==",
         "organizations_url" : "https://api.github.com/users/moneyball/orgs",
         "received_events_url" : "https://api.github.com/users/moneyball/received_events",
         "repos_url" : "https://api.github.com/users/moneyball/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/moneyball/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/moneyball/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/moneyball"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I found naming in the bitcoin core codebase very confusing when I started looking at the code 2 years ago. \r\n\r\nFor what it's worth I agree that the code base is intimidating to newcomers. I think this is mostly due to lack of documentation of the architecture, and lack of clear interfaces (though this is improving, for sure!) between components. I don't think surface-level aesthetics is very important here. Whether a variable is called `nFee` or `n_fee` or braces wrap around is not going to affect understanding as much as whether, say, the function it is in has a good description and Doxygen documentation for all arguments. And high-level documentation of how things work and interact, would be even nicer.\r\n\r\nWhat kind of frustrates me, personally, is that we didn't manage to clearly separate out the consensus parts. Not to a library (which would be useful for `rust-bitcoin` et al), but also not even to a separate directory. I was a bit shocked by #15618 which snuck in a (luckily harmless) change into `validation.cpp` in a completely unrelated PR.\r\n\r\nIf we need any more linters it should be to check for unexpected changes to consensus code, for example! **This** is dangerous territory.\r\n\r\nIMO, the goal of this project is to maintain the correct consensus on the bitcoin network. All else is secondary. Again, I feel that the focus of some people on surface-level code style issues is mistaken. \r\n\r\n> doing a one-time fixup reduces the overall workload and improves contributor experience and the quality of review\r\n\r\nIf it would really be that, it would be great. However I don't believe this would actually be a one-time change. I'm afraid it will just encourage people to be even more nitpicky, both in filing \"fixup\" PRs and commenting in PRs about code style issues.\r\n\r\nI'm truly sorry if this feels like \"the debate has been shut down\". I feel forced into this discussion. Maybe, it's time for me to face it that my priorities for this project have drifted too far from that of other contributors, and it's time to quit as maintainer.\r\n\r\n> Assume you want to do something to `./src/wallet/` and get approval from a bunch of recent wallet-reviewers\r\n\r\nYep. Ideally we would automate this through `CODEOWNERS` (https://github.blog/2017-07-06-introducing-code-owners/).\r\n",
      "created_at" : "2019-03-23T08:11:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-475850089",
      "id" : 475850089,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTg1MDA4OQ==",
      "updated_at" : "2019-03-23T08:16:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475850089",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My view hasn't changed.\r\n\r\nI'm dubious of the claim that adherence to code style is a material impediment to many new contributors, and to the extent that it is the fact that PRs get style nitpicked all to heck is probably a greater deterrent than consistency.\r\n\r\n> For example, if I touch a single line if block in my PR, am I obligated to add braces? Either way, I'm likely to get review comments saying \"add braces\" or \"don't change unrelated code style\".\r\n\r\nI think this is more of a symptom of the current review process that a massive style change would not resolve-- yes, the instances of questions of if you're responsible to make a style update to a piece of code may be reduced somewhat but I think the complaint is just a symptom that the review is inconsistent and focused on minutia (and focused on minutia in a way that feels oppressive rather than enabling).   That underling issue wouldn't be resolved by the refactor, but just be moved to any of the hundreds of other bits of minutia review that go on (like &/* hugging types or names or whatever). \r\n\r\nFor all these things-- \"CCoinsCacheEntry, but a single coin is a Coin (why not CCoin?), or why wallets contain nWalletVersion, TxSpends and m_location\"-- I don't know and I have to look them up each time. But that will be true regardless of what they're named. Anyone just guessing a variable from the name alone would always be taking a significant risk.  I'm doubtful of any contributor's (even experienced ones) ability to craft code in a way which will be automatically by its structure/style apparent to anyone else (even their future selves)-- better documentation helps, cleaner interfaces help. Variable naming? once you are past the point of actively misleading names (or meaningless single characters) there are pretty diminishing returns.  We specify a style so that you can just fall back on it without having to think and result in something that isn't too bad.  The style is a thinking aid and a time saver but not itself a independent measure of quality.\r\n\r\nI'm not completely unreceptive to the view that there are different approaches and these factors are more important to some people than others... and I do appreciate the efforts to improve the software in ways that are themselves not very meaningful to me.  But again I reiterate: the background level of refactors, style changes, cleanups, and other related activity  is actively repelling multiple long term contributors, myself included.  I beg: give it a bit of a rest, we have so many other things that are crying for our attention and our resolve.   We should try to find some initiatives that we all feel more exited about, success with them would make it easier to work on other things... but right now a big style change is just not a unifying effort.\r\n\r\n",
      "created_at" : "2019-03-23T10:01:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-475856714",
      "id" : 475856714,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTg1NjcxNA==",
      "updated_at" : "2019-03-23T10:01:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475856714",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think this is more of a symptom of the current review process that a massive style change would not resolve-- yes, the instances of questions of if you're responsible to make a style update to a piece of code may be reduced somewhat but I think the complaint is just a symptom that the review is inconsistent and focused on minutia\r\n\r\nYes, to be clear, as a contributor you're never *forced* to take all review comments into account. It's perfectly fine to say that you don't want to do something in a PR if you feel it is outside the scope of the change, including/especially if it seems extremely nitpicky. What can hold up merge is if you don't respond to them at all, because it looks like \"author hasn't got to it yet\".",
      "created_at" : "2019-03-23T10:11:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15465#issuecomment-475857382",
      "id" : 475857382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15465",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTg1NzM4Mg==",
      "updated_at" : "2019-03-23T10:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475857382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
