[
   {
      "author_association" : "MEMBER",
      "body" : "ping @EthanHeilman @sdaftuar @naumenkogs ",
      "created_at" : "2019-10-30T21:09:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548113615",
      "id" : 548113615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODExMzYxNQ==",
      "updated_at" : "2019-10-30T21:09:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548113615",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Implementation\r\n====\r\n\r\nThis would be trivial to implement. Addrman already serializes its data to disk in the form of `peers.dat`. You would just need to maintain an outgoing connection vector, add it to the addrman serialization logic and then read that vector when calling select.\r\n\r\nThoughts\r\n====\r\n\r\n\r\nIn our paper we called these **countermeasure 5: anchor connections**. We suggested limiting them to two of the outgoing connections. We wrote:\r\n\r\n> Anchor connections.Inspired by Tor entry guard rotation rates [33], we add two connections that persist. Between restarts. Thus, we add an anchor table, recording  addresses  of  current  outgoing  connections  and  the time of first connection to each address.   Upon restart,the node dedicates two extra outgoing connections to the oldest anchor addresses that accept incoming connections.  Now, in addition to defeating our other counter-measures, a successful attacker must also disrupt anchor connections; eclipse attacks fail if the victim connects to an anchor address not controlled by the attacker\r\n>[...]\r\n>[33] - \"One Fast Guard for Life (or 9 months)\" - https://www-users.cs.umn.edu/~hoppernj/single_guard.pdf\r\n-Eclipse Attacks on Bitcoinâs Peer-to-Peer Network\r\n\r\n\r\n>Eclipse attack requires the victim node to restart so it can connect to adversarial addresses.\r\n\r\nSome things have changed from when that paper was written and that is no longer true.\r\n\r\n**Bitcoin 2015:**\r\n1. Bob has 116 incoming connections.\r\n2. Alice makes an outgoing connection to Bob. \r\n3. Bob has 117 incoming connections\r\n4. Carol attempts to make an outgoing connection to Bob\r\n5. Carol's connection is rejected.\r\n6. Alice still has an outgoing connection to Bob\r\n\r\n**Bitcoin 2019:**\r\n1. Bob has 116 incoming connections.\r\n2. Alice makes an outgoing connection to Bob. \r\n3. Bob has 117 incoming connections\r\n4. Carol attempts to make an outgoing connection to Bob\r\n5. There is a change Alice's connection is evicted and Carol's connection is established\r\n6. Alice loses her outgoing connection to Bob (sometimes)\r\n7. Carol now has an outgoing connection (sometimes)\r\n\r\nSee the incoming connection eviction logic here:\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L857\r\n\r\nIf we were in **Bitcoin 2015** anchor connections could be bypassed using [a connection starvation attack](https://sourceforge.net/p/bitcoin/mailman/message/31168096/):\r\n1. Attacker makes up to 117 out connections to each full node on the network. This is actually pretty cheap to do. A laptop connected over WIFI could do this to **Bitcoin 2015**\r\n2. Attacker performs eclipse attack\r\n3. Victim reboots, attacker fills up the freed connection slots in the network\r\n4. Victim can't connect to nodes they were connected to before the reboot since all their connections are monopolized by attacker\r\n5. Eclipse attack succeeds.\r\n\r\nNow in **Bitcoin 2019** the victim could successfully evict the attackers connections and reconnect to the node. However in **BItcoin 2019** an attacker might be able to eclipse a node without reboots via connection eviction logic. There is a trade off here. Someone should research this!!!\r\n\r\n**Unsatisfying conclusion:**\r\n====\r\n\r\nAlways reconnecting outgoing connections to the same nodes would probably make Eclipse attacks more complex but it would also mean that outgoing connections would be more static. Is making them more static good or bad?\r\n\r\n",
      "created_at" : "2019-10-31T14:46:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548410548",
      "id" : 548410548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODQxMDU0OA==",
      "updated_at" : "2019-10-31T14:46:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548410548",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "**Edit: this comment is not accurate, see the following Ethan's clarification below.**\r\n\r\n@EthanHeilman \r\nThanks for the thorough explanation of the difference between 2015 and 2019.\r\nJust wanted to highlight for the other readers that although it's very useful to understand the background, it does not directly affect reasoning about this PR.\r\nMaybe it does but in a positive way: anchors are stronger in 2019, so increasing their number today is even better.\r\n\r\n>However in BItcoin 2019 an attacker might be able to eclipse a node without reboots via connection eviction logic. There is a trade off here. Someone should research this!!!\r\n\r\nI agree, this is an important one, but again, not really related to whether we need anchors. I hope to find time to eventually look into this particular issue and measure the trade-offs.\r\n\r\nPlease correct me if im wrong.",
      "created_at" : "2019-10-31T17:47:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548492408",
      "id" : 548492408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODQ5MjQwOA==",
      "updated_at" : "2019-11-06T16:10:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548492408",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@EthanHeilman \r\n\r\nThank you for your review.\r\n\r\n> This would be trivial to implement. Addrman already serializes its data to disk in the form of `peers.dat`. You would just need to maintain an outgoing connection vector, add it to the addrman serialization logic and then read that vector when calling select.\r\n\r\n`CConnman::DumpAddresses()` is called from `CConnman::Stop()`. Therefore, `peers.dat` does not suit in case of unpredictable shutdown (e.g., power failure). IMO, outgoing connection vector should be dumped to the dedicated file, say  `anchors.dat`, periodically, like `banlist.dat` does, or after each change in it.",
      "created_at" : "2019-11-01T13:15:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548783750",
      "id" : 548783750,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODc4Mzc1MA==",
      "updated_at" : "2019-11-01T13:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548783750",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "While thinking about this idea I came up with a formula ``a node is at most as secure as all the connections it has ever made``.\r\nWhat we really want is to be able to check with our former connections that we're on the same tip (at least to prevent full eclipsing with double-spends etc. Other sybil problems still apply).\r\n\r\nSo perhaps every N (say 2) minutes we can exchange recent block hashes with one of our former nodes?\r\nThis is a pretty big change, but we can start with doing it for our last 8+2 *outbound* disconnects.\r\nSo, logging in ``anchors.dat`` all our outgoing conns all the time, and exchanging last block hash with top-8 (except currently connected) over N*(8+2) minutes.\r\n\r\nI would suggest to not mix this logic with feelers. Connecting to a feeler currently doesn't even check we're on the same tip (that's a shame, I want to fix it soon). But even if we do sync tips, this would be a cheap way for an attacker to fill our ``anchors.dat``, so I want anchors to represent persistent conns.",
      "created_at" : "2019-11-01T15:28:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548831247",
      "id" : 548831247,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODgzMTI0Nw==",
      "updated_at" : "2019-11-01T17:46:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548831247",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I had some discussions with @naumenkogs, and I understand that there are some concerns about long-time consequences for the network graph topology.\r\n\r\nLet me make my proposition more clear.\r\n\r\n1. There is an attack vector which *requires* victim node restart. It exploits existing logic to make *new* outbound connections at node startup.\r\n\r\n2. Currently, such a kind of outbound peer rotation (OPR for short) is a side effect of (un)expected node restart. My proposition changes this behavior: being implemented it significantly reduces the probability of OPR on the node restart.\r\n\r\n3. The discussion about OPR and its effect on the network keeps very long time, e.g., #4723, #15759. The latest state of discussion could be expressed as:\r\n- OPR is good for tx-relayed peers as it improves privacy and makes topology inference more difficult\r\n- OPR is bad for block-relayed peers as it increases risk for a node to be eclipsed\r\n\r\n4. The *only* goal of my proposition is mitigation of a well-known eclipse attack; it is not about OPR directly. As a side effect, it changes node behavior wrt OPR. Please note that some other processes and events, besides node restart, affect OPR node behavior, e.g., detected \"stale tip\" event.\r\n\r\n5. Having dedicated block-relayed outbound connections, I believe it is good, without trade-offs, to preserve them when a node restarts.\r\n\r\n---\r\n\r\nIMO, @naumenkogs's https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-548831247 is orthogonal to my proposition, and definitely deserves its own discussion.",
      "created_at" : "2019-11-06T14:36:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550337452",
      "id" : 550337452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDMzNzQ1Mg==",
      "updated_at" : "2019-11-06T14:36:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550337452",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@naumenkogs \r\n\r\n>Just wanted to highlight for the other readers that although it's very useful to understand the background, it does not directly affect reasoning about this PR.\r\n\r\nI explained my point poorly. Let me try again. This PR makes the following argument: \"Eclipse attack requires the victim node to restart so it can connect to adversarial addresses.\" This is no longer the case. That being said in my opinion a restart is still the most likely way of an eclipse attack occurring.\r\n\r\n> I agree, this is an important one, but again, not really related to whether we need anchors. I hope to find time to eventually look into this particular issue and measure the trade-offs.\r\n\r\nBecause restarts are no longer necessary to perform eclipse attacks, anchors provide less of a security improvement against eclipse attacks. However against a restart-based eclipse attack the security they do provide is harder for an connection starvation attack to bypass. The security provided by anchors in 2019 is a less useful but more robust countermeasure.\r\n\r\nI still think they are useful enough to justify adding them. I just want to make sure we that this issue documents the actual security they provide.\r\n",
      "created_at" : "2019-11-06T15:27:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550360907",
      "id" : 550360907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDM2MDkwNw==",
      "updated_at" : "2019-11-06T15:27:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550360907",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">\r\n    OPR is good for tx-relayed peers as it improves privacy and makes topology inference more difficult\r\n    OPR is bad for block-relayed peers as it increases risk for a node to be eclipsed\r\n\r\nJust wanted to mention that this is my (rough) current intuition, not something we have consensus on :)\r\n\r\nAs for the proposal itself, I currently have 2 problems with it:\r\n- users which **do expect** new connections when restart. It's purely a UX question. (*Perhaps explaining this and new instructions would be enough.*)\r\n- disabling this side-effect OPR we have from restarts, which is one of the very few ways we currently rotate peers. After removing it, the network will be more static. (*An answer to it would be a well-thought explicit rotation, but we all agree it's something non-trivial.*)\r\n\r\nWith the latest suggestion of @hebasto to anchor only block-relay-only peers, I think this is strictly beneficial, because we still rotate 8 (tx+block) relay peers, so we will meet the expectations and we will keep side-effect OPR.\r\n\r\nIf we ever conclude that block-relay-only links should be rotated, we can ADD 2 more rotatable links. But I think my orthogonal idea I explained above *and* checking tips with feelers should be sufficient here.\r\n\r\nConcept ACK.",
      "created_at" : "2019-11-06T20:23:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550484895",
      "id" : 550484895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDQ4NDg5NQ==",
      "updated_at" : "2019-11-06T21:44:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550484895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, this seems reasonable, but maybe only for a subset. Having more \"categories\" of connections (including \"rotatable\" ones, as @naumenkogs notes) is likely also important. Ultimately, different types of eclipse attacks demand different responses.",
      "created_at" : "2019-11-06T21:22:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550506224",
      "id" : 550506224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDUwNjIyNA==",
      "updated_at" : "2019-11-06T21:22:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550506224",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Making it do this with all connections would probably bad, because it would guarantee capture persistence. It potentially makes topology inference more powerful. Strong persistence can also contributed to network self-partitioning (e.g. where longer distance links are less reliable, so they get culled, and eventually you end up disconnected subgraphs that connect only to their own continent). \r\n\r\nIn the past in bitcoin we've tried to exploit diversity in connections--  consider the inbound peer eviction logic:  We exclude peers from eviction if they are among the best in a half dozen different metrics, with the belief that it is much harder for an attacker to dominate in every category than it is to just dominate in a single metric.\r\n\r\nThe revised approach of only applying it to blocks-only peers essentially addresses the topology inference question.  But I don't think the best outcome comes from making all blocks only peers persistent-- because that would be needlessly weak, e.g. to an attacker that contacts major VPS providers and acquires control of many IPs that have a long history of running bitcoin nodes, and disadvantages connections to honest users on dynamic IPs.  Doing it with half of them or even just two of them would probably be a bigger win.\r\n\r\nThis behaviour should probably earn a complementary behaviour on the inbound side: Right now about half the inbound slots are preserved for longest-connected peers.  Half of those could be redirected to be preserved for network|limited peers with longest-historically-connected time.   Without some measure like this,  persistent connection logic could somewhat undermined by an attacker that fills the connection slots up on long running static IPed nodes in order to cause the eviction of (or prevent connections from) the other hosts they hope to eclipse.\r\n",
      "created_at" : "2019-11-06T22:03:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550521262",
      "id" : 550521262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDUyMTI2Mg==",
      "updated_at" : "2019-11-06T22:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550521262",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Now in Bitcoin 2019 the victim could successfully evict the attackers connections and reconnect to the node. However in BItcoin 2019 an attacker might be able to eclipse a node without reboots via connection eviction logic. There is a trade off here. Someone should research this!!!\r\n\r\nHalf of the inbound connections are reserved for the longest running connections, which is the '2015' logic (pre PR6374).  Few nodes were more than half full in 2015.  So essentially all peers that would have been protected in 2015 are protected today.   So, I don't think your characterization of changing from one weakness to another is correct-- instead the current behaviour is fairly strong against both attacks.\r\n\r\nProviding the same kind of diverse protection is why I argue above against *all* peers (or all blocks only peers) being made persistent.",
      "created_at" : "2019-11-06T22:10:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-550523882",
      "id" : 550523882,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17326",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDUyMzg4Mg==",
      "updated_at" : "2019-11-06T22:14:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550523882",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   }
]
