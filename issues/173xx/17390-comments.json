[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I really don't like setting these in stone. Let's test desired behavior. Instead of adding tests for the current insane behavior (which relies on implementation details of `atoi`), I think we need to work on getting errors to the user for these.",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T09:08:30Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604",
      "id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjk4MjYwNA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312280729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T09:09:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
