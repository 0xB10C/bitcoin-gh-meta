[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I really don't like setting these in stone. Let's test desired behavior. Instead of adding tests for the current insane behavior (which relies on implementation details of `atoi`), I think we need to work on getting errors to the user for these.",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T09:08:30Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604",
      "id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjk4MjYwNA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312280729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T09:09:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343065919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343065919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it is easier to review \"fixes\" when they are also documented with test changes.",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T12:24:32Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343065919",
      "id" : 343065919,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA2NTkxOQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312390933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T12:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343065919",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343068269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343068269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure about that. It could just as well bite anyone that dares to change this parsing in the future. This behavior was never documented so no one should be relying on it.\r\n(and a test is essentially \"this should work\" documentation)",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T12:30:30Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343068269",
      "id" : 343068269,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA2ODI2OQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312394114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T12:35:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343068269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343081284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343081284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I really don't like setting these in stone. \r\n\r\nLike Marco is saying the goal of the test is to make it **easier** not harder to fix these confusing parsings in the future. Easier as a developer because you can test the effects of your change with a simple make check, easier as a reviewer to underand the change. Easier as a developer because after implementing the desired behavior you don't have to write a new test to gain coverage, but can just update a line in the existing test.\r\n\r\nI agree with laanwj's objection broadly that it would be bad to add tests which indirectly rely on parsing behaviors, because they would be fragile and difficult to update when parsing is cleaned up. But this is a simple, direct test added specifically so we can be confident that when we intend to make parsing changes, they work as expected, and that when we intend to make other changes, we don't unknowingly break parsing.\r\n\r\nI'm still planning on reviewing #17385 today, too. Vast majority of changes there look very good and can go a new pr even if #17385 won't be reopened.",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T13:01:56Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343081284",
      "id" : 343081284,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4MTI4NA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312411665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T13:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343081284",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343083742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343083742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "OK, fair enough. To be clear I agree with adding this test conceptually, and some of the additional cases like \"spaces around the argument should be ignored\" seem decent\r\nbut say, we probably don't want a test for \"what atoi regards as whitespace depends on your locale\" :cry: \r\nanyhow, if this is with the understanding that these aren't supposed to be guaranteed to be supported for the infinite future, I'm ok with this list\r\n",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T13:08:00Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343083742",
      "id" : 343083742,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4Mzc0Mg==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312415069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T13:08:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343083742",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343088006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343088006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe a comment that says the tests are fragile and meant to be removed could help?",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T13:17:36Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343088006",
      "id" : 343088006,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4ODAwNg==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312420822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T13:17:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343088006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343092555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343092555"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe a comment that says the tests are fragile and meant to be removed could help?\r\n\r\nThere is a general comment already that \"Some of these cases could be ambiguous or surprising to users, and might be worth triggering errors or warning in the future\", but I could also note something like \"// Confusing parsing, should be changed or disallowed in the future\" on specific cases if desired.\r\n\r\n> but say, we probably don't want a test for \"what atoi regards as whitespace depends on your locale\" \r\n\r\nI didn't think of that but definitely agree.",
      "commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T13:27:06Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343092555",
      "id" : 343092555,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA5MjU1NQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 312426806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T13:27:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343092555",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
