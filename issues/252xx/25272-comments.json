[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Update:\r\nAdded test coverage for it in the first commit. Showing how the wallet can end up in the invalid state. The second commit corrects it with the proposed solution.",
      "created_at" : "2022-06-03T15:53:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25272#issuecomment-1146098556",
      "id" : 1146098556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25272",
      "node_id" : "IC_kwDOABII585EUBN8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146098556/reactions"
      },
      "updated_at" : "2022-06-03T15:53:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146098556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-06-04T15:58:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25272#issuecomment-1146640263",
      "id" : 1146640263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25272",
      "node_id" : "IC_kwDOABII585EWFeH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146640263/reactions"
      },
      "updated_at" : "2022-06-04T15:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146640263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2022-06-06T15:11:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25272#issuecomment-1147558610",
      "id" : 1147558610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25272",
      "node_id" : "IC_kwDOABII585EZlrS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1147558610/reactions"
      },
      "updated_at" : "2022-06-06T15:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1147558610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25272#discussion_r890320253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25272"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890320253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: add case for wallet invalid state where the inputs (prev-txs) of a new arriving transaction are not marked dirty, while the transaction that spends them exist inside the in-memory wallet tx map (not stored on db due a db write failure).\" (742cd0b4898b06798d9cbac0f272d7aed0fb2d3f)\r\n\r\nThink you just want a static_cast here if you already know the type. (dynamic_cast is for when you are unsure what the type will be at runtime)",
      "commit_id" : "d15e9f7fc0ca3b8ab775ca218e146b3238578484",
      "created_at" : "2022-06-06T16:23:15Z",
      "diff_hunk" : "@@ -856,5 +856,111 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+/** RAII class that provides access to a FailDatabase. Which fails if needed. */\n+class FailBatch : public DatabaseBatch\n+{\n+private:\n+    bool m_pass{false};\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override { return m_pass; }\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override { return m_pass; }\n+    bool EraseKey(CDataStream&& key) override { return m_pass; }\n+    bool HasKey(CDataStream&& key) override { return m_pass; }\n+\n+public:\n+    explicit FailBatch(bool pass) : m_pass(pass) {}\n+    void Flush() override {}\n+    void Close() override {}\n+\n+    bool StartCursor() override { return true; }\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override { return false; }\n+    void CloseCursor() override {}\n+    bool TxnBegin() override { return false; }\n+    bool TxnCommit() override { return false; }\n+    bool TxnAbort() override { return false; }\n+};\n+\n+/** A dummy WalletDatabase that does nothing, only fails if needed.**/\n+class FailDatabase : public WalletDatabase\n+{\n+public:\n+    bool m_pass{true}; // false when this db should fail\n+\n+    void Open() override {};\n+    void AddRef() override {}\n+    void RemoveRef() override {}\n+    bool Rewrite(const char* pszSkip=nullptr) override { return true; }\n+    bool Backup(const std::string& strDest) const override { return true; }\n+    void Close() override {}\n+    void Flush() override {}\n+    bool PeriodicFlush() override { return true; }\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+    void ReloadDbEnv() override {}\n+    std::string Filename() override { return \"faildb\"; }\n+    std::string Format() override { return \"faildb\"; }\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override { return std::make_unique<FailBatch>(m_pass); }\n+};\n+\n+/**\n+ * Checks a wallet invalid state where the inputs (prev-txs) of a new arriving transaction are not marked dirty,\n+ * while the transaction that spends them exist inside the in-memory wallet tx map (not stored on db due a db write failure).\n+ */\n+BOOST_FIXTURE_TEST_CASE(wallet_sync_tx_invalid_state_test, TestingSetup)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", m_args, std::make_unique<FailDatabase>());\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // Add tx to wallet\n+    CTxDestination dest;\n+    bilingual_str error;\n+    BOOST_ASSERT(wallet.GetNewDestination(OutputType::BECH32M, \"\", dest, error));\n+\n+    CMutableTransaction mtx;\n+    mtx.vout.push_back({COIN, GetScriptForDestination(dest)});\n+    mtx.vin.push_back(CTxIn(g_insecure_rand_ctx.rand256(), 0));\n+    const auto& tx_id_to_spend = wallet.AddToWallet(MakeTransactionRef(mtx), TxStateInMempool{})->GetHash();\n+\n+    {\n+        // Cache and verify available balance for the wtx\n+        LOCK(wallet.cs_wallet);\n+        const CWalletTx* wtx_to_spend = wallet.GetWalletTx(tx_id_to_spend);\n+        BOOST_CHECK_EQUAL(CachedTxGetAvailableCredit(wallet, *wtx_to_spend), 1 * COIN);\n+    }\n+\n+    // Now the good case:\n+    // 1) Add a transaction that spends the previously created transaction\n+    // 2) Verify that the available balance of this new tx and the old one is updated (prev tx is marked dirty)\n+\n+    mtx.vin.clear();\n+    mtx.vin.push_back(CTxIn(tx_id_to_spend, 0));\n+    wallet.transactionAddedToMempool(MakeTransactionRef(mtx), 0);\n+    const uint256& good_tx_id = mtx.GetHash();\n+\n+    {\n+        // Verify balance update for the new tx and the old one\n+        LOCK(wallet.cs_wallet);\n+        const CWalletTx* new_wtx = wallet.GetWalletTx(good_tx_id);\n+        BOOST_CHECK_EQUAL(CachedTxGetAvailableCredit(wallet, *new_wtx), 1 * COIN);\n+\n+        // Now the old wtx\n+        const CWalletTx* wtx_to_spend = wallet.GetWalletTx(tx_id_to_spend);\n+        BOOST_CHECK_EQUAL(CachedTxGetAvailableCredit(wallet, *wtx_to_spend), 0 * COIN);\n+    }\n+\n+    // Now the bad case:\n+    // 1) Make db always fail\n+    // 2) Try to add a transaction that spends the previously created transaction and\n+    //    verify that we are not moving forward if the wallet cannot store it\n+    dynamic_cast<FailDatabase&>(wallet.GetDatabase()).m_pass = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25272#discussion_r890320253",
      "id" : 890320253,
      "line" : 957,
      "node_id" : "PRRC_kwDOABII5841ETV9",
      "original_commit_id" : "d15e9f7fc0ca3b8ab775ca218e146b3238578484",
      "original_line" : 957,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_tests.cpp",
      "position" : 102,
      "pull_request_review_id" : 996863007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25272",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890320253/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-06T17:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890320253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25272#discussion_r890365213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25272"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890365213"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: add case for wallet invalid state where the inputs (prev-txs) of a new arriving transaction are not marked dirty, while the transaction that spends them exist inside the in-memory wallet tx map (not stored on db due a db write failure).\" (742cd0b4898b06798d9cbac0f272d7aed0fb2d3f)\r\n\r\nDefault is true here, but false in the other class. Would suggest sticking choosing one default just to avoid confusion and having to remember which class has which default.\r\n\r\n(Also maybe use a shorter commit subject, https://cbea.ms/git-commit/ has nice guidelines)",
      "commit_id" : "d15e9f7fc0ca3b8ab775ca218e146b3238578484",
      "created_at" : "2022-06-06T17:19:46Z",
      "diff_hunk" : "@@ -856,5 +856,111 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+/** RAII class that provides access to a FailDatabase. Which fails if needed. */\n+class FailBatch : public DatabaseBatch\n+{\n+private:\n+    bool m_pass{false};\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override { return m_pass; }\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override { return m_pass; }\n+    bool EraseKey(CDataStream&& key) override { return m_pass; }\n+    bool HasKey(CDataStream&& key) override { return m_pass; }\n+\n+public:\n+    explicit FailBatch(bool pass) : m_pass(pass) {}\n+    void Flush() override {}\n+    void Close() override {}\n+\n+    bool StartCursor() override { return true; }\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override { return false; }\n+    void CloseCursor() override {}\n+    bool TxnBegin() override { return false; }\n+    bool TxnCommit() override { return false; }\n+    bool TxnAbort() override { return false; }\n+};\n+\n+/** A dummy WalletDatabase that does nothing, only fails if needed.**/\n+class FailDatabase : public WalletDatabase\n+{\n+public:\n+    bool m_pass{true}; // false when this db should fail",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25272#discussion_r890365213",
      "id" : 890365213,
      "line" : 886,
      "node_id" : "PRRC_kwDOABII5841EeUd",
      "original_commit_id" : "d15e9f7fc0ca3b8ab775ca218e146b3238578484",
      "original_line" : 886,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_tests.cpp",
      "position" : 31,
      "pull_request_review_id" : 996863007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25272",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890365213/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-06T17:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/890365213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
