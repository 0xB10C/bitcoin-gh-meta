[
   {
      "author_association" : "MEMBER",
      "body" : "> a nondeterministic choice of a valid NetMsgType\r\n\r\nWait, I thought fuzzing ought to be deterministic? Have you seen the `process_message_$type` fuzz targets? I am regularly cross-pollinating their inputs with the other targets. (https://github.com/bitcoin-core/qa-assets/commit/3368bee6bd327f74cd43eda78593091b9e44cff3)\r\n\r\n> As a side issue, the harness now uses a bool to choose arbitrary # of messages to try.\r\n\r\nI didn't get the issue. Is there an alternative version that is preferable?\r\n\r\n> I'll also see about a translator to take the valid-messages-only inputs from the process_messages corpus and turn them into this kind of thing. Initially they won't add coverage, but (some) fuzzers will have an easier time exploring this version, and I'm hoping swarm will be useful.\r\n\r\nInteresting. Generally I think today's fuzz engines aren't smart enough to track coverage of stateful applications sufficiently. I believe one of the greatest risks of our regular \"delete non-reduced inputs\" task (https://github.com/bitcoin-core/qa-assets/pull/64) is that it deletes supposedly redundant inputs (presumably from the same \"swarm\") that exercise the state machine in ways that no other input does. I guess `-use_value_profile` helped a bit for libFuzzer (and it's counterparts for afl), but a coverage metric that includes state is still an open research question.",
      "created_at" : "2021-08-05T06:09:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22628#issuecomment-893192150",
      "id" : 893192150,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22628",
      "node_id" : "IC_kwDOABII5841PQfW",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T06:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893192150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry -- I just meant it translates the bytes from the input stream into a choice from the message types.\r\n\r\nI saw the $type ones, but they won't mix & match, right?  Though cross-pollination could be about as good...",
      "created_at" : "2021-08-05T06:16:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22628#issuecomment-893195751",
      "id" : 893195751,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22628",
      "node_id" : "IC_kwDOABII5841PRXn",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T06:16:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893195751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/967816?v=4",
         "events_url" : "https://api.github.com/users/agroce/events{/privacy}",
         "followers_url" : "https://api.github.com/users/agroce/followers",
         "following_url" : "https://api.github.com/users/agroce/following{/other_user}",
         "gists_url" : "https://api.github.com/users/agroce/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/agroce",
         "id" : 967816,
         "login" : "agroce",
         "node_id" : "MDQ6VXNlcjk2NzgxNg==",
         "organizations_url" : "https://api.github.com/users/agroce/orgs",
         "received_events_url" : "https://api.github.com/users/agroce/received_events",
         "repos_url" : "https://api.github.com/users/agroce/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/agroce/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/agroce/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/agroce"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I saw the $type ones, but they won't mix & match, right? Though cross-pollination could be about as good...\r\n\r\nI am also running with uniform input crossover, which should mix and match them eventually.",
      "created_at" : "2021-08-05T06:20:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22628#issuecomment-893197545",
      "id" : 893197545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22628",
      "node_id" : "IC_kwDOABII5841PRzp",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T06:20:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893197545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that basing the reduction on `-use_value_profile=1` does give some protection here, and I'm fairly confident that fuzzing based on the smaller of two inputs with identical coverage is usually better (and there has to be some limit to corpus for effective fuzzing), but yes, the lack of a solid coverage metric is a problem.\r\n\r\nI see, it's possible by putting all this \"in process\" we can get more out of the fuzzer's heuristics, but what you're doing will certainly approximate some of this.  I think I'll still code it up and then export back to the original format, to see if we get any surprising coverage gains from this.\r\n\r\nAs to the bool -- it just requires the fuzzer to figure out that if it wants longer runs, it needs to have that turn out non-zero.  Now,  guess it being \"non-zero\" gives a huge bitwise bias towards longer runs, up to the length, so it works out ok.  But if it was based on the final bit or something, constructing longer sequences would be tough (as it is, it's fairly hard to make a short sequence, unless you just don't generate many bytes).  Not an issue here.  I tend to construct these to choose a length in an initial choice, from a range, but doing this, with \"zeros when no more fuzz data\" seems to be just as good, or maybe better in some ways.",
      "created_at" : "2021-08-05T18:31:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22628#issuecomment-893687896",
      "id" : 893687896,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22628",
      "node_id" : "IC_kwDOABII5841RJhY",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T18:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893687896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/967816?v=4",
         "events_url" : "https://api.github.com/users/agroce/events{/privacy}",
         "followers_url" : "https://api.github.com/users/agroce/followers",
         "following_url" : "https://api.github.com/users/agroce/following{/other_user}",
         "gists_url" : "https://api.github.com/users/agroce/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/agroce",
         "id" : 967816,
         "login" : "agroce",
         "node_id" : "MDQ6VXNlcjk2NzgxNg==",
         "organizations_url" : "https://api.github.com/users/agroce/orgs",
         "received_events_url" : "https://api.github.com/users/agroce/received_events",
         "repos_url" : "https://api.github.com/users/agroce/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/agroce/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/agroce/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/agroce"
      }
   }
]
