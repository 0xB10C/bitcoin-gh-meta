{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This PR is on top of #22675\r\n\r\nre: [CVE-2021-31876](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31876)\r\n> Bitcoin Core 0.12.0 through 0.21.1 does not properly implement the replacement policy specified in BIP125, which makes it easier for attackers to trigger a loss of funds, or a denial of service attack against downstream projects such as Lightning network nodes.\r\n\r\nIt also resolves #22209\r\n\r\nIt completes bitcoin core's implementation of [BIP 125](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki) by supporting:\r\n> Inherited signaling: Transactions that don't explicitly signal replaceability are replaceable under this policy for as long as any one of their ancestors signals replaceability and remains unconfirmed.\r\n\r\nAnd it also imposes BIP 125 Rule 5 (which was not accounted for by `getmempoolentry` prior to this, although getmempoolentry's bip125-replaceable status wasn't consistent with actual behavior anyways)\r\n> The number of original transactions to be replaced and their descendant transactions which will be evicted from the mempool must not exceed a total of 100 transactions.\r\n\r\nA lot of test coverage was added, including some fuzzing. There was a net-removal of src code (most of the lines deleted were src)\r\n\r\n---\r\n\r\nThe reason I made this PR is I've been following RBF-related PRs since #22209 got on my radar. I would recommend going through this commit-by-commit because it is very test driven and it makes the logical steps I took pretty clear.\r\n\r\nThis PR sort of opposes #22665 - I think they are two different approaches to solving some of the confusing behavior we currently have with BIP 125 / RBF. And they should both be considered, although I think it's one or the other.\r\n\r\n---\r\n\r\nOne risk I've read about regarding why inherited signaling isn't supported is a possible DDOS vector. `IsRBFOptIn` does depth-first recursion to check for inherited signaling. In my measurements the changes made in this PR did not noticeably change functional test runtimes. My intuition says that this PR will actually decrease (improve) worst-case runtimes because there is now a hard upper-bound (in addition to the node's `limitancestorcount` and `limitdescendantcount` config) (due to the `MAX_BIP125_REPLACEMENT_CANDIDATES` check in `IsRBFOptIn`) compared to the previous `pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false)`. I would like to hear what more experienced developers conclude though",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 6,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22698/comments",
   "created_at" : "2021-08-13T14:41:59Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22698/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/22698",
   "id" : 970462628,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22698/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NzEyNDEyMTg3",
   "number" : 22698,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/22698.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22698",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/22698.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22698"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Implement RBF inherited signaling and fix getmempoolentry returned bip125-replaceable status",
   "updated_at" : "2021-08-13T15:25:25Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22698",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
      "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
      "followers_url" : "https://api.github.com/users/mjdietzx/followers",
      "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/mjdietzx",
      "id" : 7217256,
      "login" : "mjdietzx",
      "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
      "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
      "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
      "repos_url" : "https://api.github.com/users/mjdietzx/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/mjdietzx"
   }
}
