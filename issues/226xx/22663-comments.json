[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15606](https://github.com/bitcoin/bitcoin/pull/15606) (assumeutxo by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-08-08T05:54:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-894747743",
      "id" : 894747743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22663",
      "node_id" : "IC_kwDOABII5841VMRf",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-08T05:54:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894747743",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "One build is failing due to a leak while fuzzing `coins_view` and I cannot see why with the CI.  I am unable to reproduce this on my machine.",
      "created_at" : "2021-08-08T12:48:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-894792761",
      "id" : 894792761,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22663",
      "node_id" : "IC_kwDOABII5841VXQ5",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-08T12:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894792761",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686109932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686109932"
         }
      },
      "author_association" : "NONE",
      "body" : "If `penv` is deleted, then `~CDBWrapper()` gonna delete it again? Missing `= nullptr`?\r\n",
      "commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "created_at" : "2021-08-10T15:06:41Z",
      "diff_hunk" : "@@ -97,46 +97,59 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n              options->max_open_files, default_open_files);\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize)\n+static void GetOptions(size_t nCacheSize, leveldb::Options* options)\n {\n-    leveldb::Options options;\n-    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n-    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n-    options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n-    options.compression = leveldb::kNoCompression;\n-    options.info_log = new CBitcoinLevelDBLogger();\n+    options->block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n+    options->write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n+    options->filter_policy = leveldb::NewBloomFilterPolicy(10);\n+    options->compression = leveldb::kNoCompression;\n+    options->info_log = new CBitcoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n-        options.paranoid_checks = true;\n+        options->paranoid_checks = true;\n     }\n-    SetMaxOpenFiles(&options);\n-    return options;\n+    SetMaxOpenFiles(options);\n+}\n+\n+// Custom deleter for unique_ptr<leveldb::Options>.\n+static void DeleteOptions(leveldb::Options* options)\n+{\n+    delete options->filter_policy;\n+    options->filter_policy = nullptr;\n+    delete options->info_log;\n+    options->info_log = nullptr;\n+    delete options->block_cache;\n+    options->block_cache = nullptr;\n+    options->env = nullptr;\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{path.stem().string()}\n+    : options(new leveldb::Options, DeleteOptions), m_name{path.stem().string()}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n     iteroptions.fill_cache = false;\n     syncoptions.sync = true;\n-    options = GetOptions(nCacheSize);\n-    options.create_if_missing = true;\n+    GetOptions(nCacheSize, options.get());\n+    options->create_if_missing = true;\n     if (fMemory) {\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());\n-        options.env = penv;\n+        options->env = penv;\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), *options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(*options, path.string(), &pdb);\n+    if (!status.ok()) {\n+        delete penv;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686109932",
      "id" : 686109932,
      "line" : 151,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjEwOTkzMg==",
      "original_commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "original_line" : 151,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/dbwrapper.cpp",
      "position" : 71,
      "pull_request_review_id" : 726560453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T15:06:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686109932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686115676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686115676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `!status.ok` then `HandleError` throws and the destructor isn't called",
      "commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "created_at" : "2021-08-10T15:13:27Z",
      "diff_hunk" : "@@ -97,46 +97,59 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n              options->max_open_files, default_open_files);\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize)\n+static void GetOptions(size_t nCacheSize, leveldb::Options* options)\n {\n-    leveldb::Options options;\n-    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n-    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n-    options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n-    options.compression = leveldb::kNoCompression;\n-    options.info_log = new CBitcoinLevelDBLogger();\n+    options->block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n+    options->write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n+    options->filter_policy = leveldb::NewBloomFilterPolicy(10);\n+    options->compression = leveldb::kNoCompression;\n+    options->info_log = new CBitcoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n-        options.paranoid_checks = true;\n+        options->paranoid_checks = true;\n     }\n-    SetMaxOpenFiles(&options);\n-    return options;\n+    SetMaxOpenFiles(options);\n+}\n+\n+// Custom deleter for unique_ptr<leveldb::Options>.\n+static void DeleteOptions(leveldb::Options* options)\n+{\n+    delete options->filter_policy;\n+    options->filter_policy = nullptr;\n+    delete options->info_log;\n+    options->info_log = nullptr;\n+    delete options->block_cache;\n+    options->block_cache = nullptr;\n+    options->env = nullptr;\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{path.stem().string()}\n+    : options(new leveldb::Options, DeleteOptions), m_name{path.stem().string()}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n     iteroptions.fill_cache = false;\n     syncoptions.sync = true;\n-    options = GetOptions(nCacheSize);\n-    options.create_if_missing = true;\n+    GetOptions(nCacheSize, options.get());\n+    options->create_if_missing = true;\n     if (fMemory) {\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());\n-        options.env = penv;\n+        options->env = penv;\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), *options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(*options, path.string(), &pdb);\n+    if (!status.ok()) {\n+        delete penv;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686115676",
      "id" : 686115676,
      "in_reply_to_id" : 686109932,
      "line" : 151,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjExNTY3Ng==",
      "original_commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "original_line" : 151,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/dbwrapper.cpp",
      "position" : 71,
      "pull_request_review_id" : 726568150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T15:13:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686115676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686783500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686783500"
         }
      },
      "author_association" : "NONE",
      "body" : "Maybe worth making `penv` a `unique_ptr` too, if we need manual handling with `delete`? Or do you think this would be kinda out of scope for this PR?\r\n\r\nAdding addition `delete` into new code does not seem... \"right\" (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-newdelete).",
      "commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "created_at" : "2021-08-11T12:30:05Z",
      "diff_hunk" : "@@ -97,46 +97,59 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n              options->max_open_files, default_open_files);\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize)\n+static void GetOptions(size_t nCacheSize, leveldb::Options* options)\n {\n-    leveldb::Options options;\n-    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n-    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n-    options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n-    options.compression = leveldb::kNoCompression;\n-    options.info_log = new CBitcoinLevelDBLogger();\n+    options->block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n+    options->write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n+    options->filter_policy = leveldb::NewBloomFilterPolicy(10);\n+    options->compression = leveldb::kNoCompression;\n+    options->info_log = new CBitcoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n-        options.paranoid_checks = true;\n+        options->paranoid_checks = true;\n     }\n-    SetMaxOpenFiles(&options);\n-    return options;\n+    SetMaxOpenFiles(options);\n+}\n+\n+// Custom deleter for unique_ptr<leveldb::Options>.\n+static void DeleteOptions(leveldb::Options* options)\n+{\n+    delete options->filter_policy;\n+    options->filter_policy = nullptr;\n+    delete options->info_log;\n+    options->info_log = nullptr;\n+    delete options->block_cache;\n+    options->block_cache = nullptr;\n+    options->env = nullptr;\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{path.stem().string()}\n+    : options(new leveldb::Options, DeleteOptions), m_name{path.stem().string()}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n     iteroptions.fill_cache = false;\n     syncoptions.sync = true;\n-    options = GetOptions(nCacheSize);\n-    options.create_if_missing = true;\n+    GetOptions(nCacheSize, options.get());\n+    options->create_if_missing = true;\n     if (fMemory) {\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());\n-        options.env = penv;\n+        options->env = penv;\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), *options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(*options, path.string(), &pdb);\n+    if (!status.ok()) {\n+        delete penv;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686783500",
      "id" : 686783500,
      "in_reply_to_id" : 686109932,
      "line" : 151,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Njc4MzUwMA==",
      "original_commit_id" : "6770f066b69c6c271e7096cc647d5d42762f6b05",
      "original_line" : 151,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/dbwrapper.cpp",
      "position" : 71,
      "pull_request_review_id" : 727421712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22663",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T12:30:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686783500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   }
]
