[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59392178"
         }
      },
      "body" : "It seems to me default is simply \"not bip125\". Not sure the name \"default\" really fits, especially longer-term. ",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-12T15:03:37Z",
      "diff_hunk" : "@@ -533,6 +533,11 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+enum CreateTransactionFlags {\n+    CREATE_TX_DEFAULT     = 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392178",
      "id" : 59392178,
      "original_commit_id" : "f68447ad7cc265e2b949e42b02abe901f426af1c",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-12T20:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59392178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59392983"
         }
      },
      "body" : "update the comment?",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-12T15:07:44Z",
      "diff_hunk" : "@@ -2179,7 +2179,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // nLockTime set above actually works.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392983",
      "id" : 59392983,
      "original_commit_id" : "f68447ad7cc265e2b949e42b02abe901f426af1c",
      "original_position" : 86,
      "path" : "src/wallet/wallet.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-12T20:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59392983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59393236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59393236"
         }
      },
      "body" : "Good catch! Will update.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-12T15:08:58Z",
      "diff_hunk" : "@@ -2179,7 +2179,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // nLockTime set above actually works.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59393236",
      "id" : 59393236,
      "original_commit_id" : "f68447ad7cc265e2b949e42b02abe901f426af1c",
      "original_position" : 86,
      "path" : "src/wallet/wallet.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-12T20:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59393236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59400373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59400373"
         }
      },
      "body" : "I think this deletes outputs going to watch-only wallet addresses. Perhaps check for isminetype we care about.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-12T15:47:14Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59400373",
      "id" : 59400373,
      "original_commit_id" : "f68447ad7cc265e2b949e42b02abe901f426af1c",
      "original_position" : 178,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-12T20:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59400373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59443131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59443131"
         }
      },
      "body" : "I think the `CREATE_TX_DEFAULT` is okay. Passing just a `0`(int) would require casting. \"not bip125\" is also not true because in future you could combine flags (Don't SIGN & RBF)? ",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-12T20:01:30Z",
      "diff_hunk" : "@@ -533,6 +533,11 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+enum CreateTransactionFlags {\n+    CREATE_TX_DEFAULT     = 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59443131",
      "id" : 59443131,
      "original_commit_id" : "f68447ad7cc265e2b949e42b02abe901f426af1c",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-12T20:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59443131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Force push fixed @instagibbs nits.",
      "created_at" : "2016-04-12T20:11:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-209084037",
      "id" : 209084037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7865",
      "updated_at" : "2016-04-12T20:11:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/209084037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59674077"
         }
      },
      "body" : "Why not ensuring `(nFee - nOldFee) > minTxRelayFee`, and if not, exit early with a descriptive JSONRpcError which say the fees are high enough and can't be bumped ?",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T07:41:13Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674077",
      "id" : 59674077,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 191,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T07:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59674077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59674231"
         }
      },
      "body" : "Transaction can be rejected even if the fee are not already bumped if the estimated fee rate decreased compared to the previous version of the transaction.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T07:42:45Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674231",
      "id" : 59674231,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T07:42:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59674231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59687615"
         }
      },
      "body" : "Yes. I have though about that. But you also would like to have a check that makes sure, it would be accepted as replacement.\r\nThis would require to factor out the RBF check from `main.cpp` to `rbf.cpp` (which probably would sense in a follow up PR).",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T09:31:02Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687615",
      "id" : 59687615,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 191,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T09:31:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59687615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59687827"
         }
      },
      "body" : "Yes. True. This is why the second sentence is a question. :)\r\nI guess it will be a common mistake to bump the same txid again.\r\nBut I'm open for suggestions.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T09:32:30Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687827",
      "id" : 59687827,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T09:32:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59687827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59690897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59690897"
         }
      },
      "body" : "Yes, but CommitTransaction later is already doing that under the hood if I understand.\r\nThe most likely problem is that the fees can't be bumped, for the 0.0001% chance that it still get rejected for whatever other issue during the CommitTransaction, a generic error message would be enough.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T09:58:11Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59690897",
      "id" : 59690897,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 191,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T10:03:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59690897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59691087"
         }
      },
      "body" : "If you detect `(nFee - nOldFee) > minTxRelayFee` condition above, then it is not a question anymore. The early exit message would be \"Fee are already bumped to the actual fee rate\".\r\n\r\nThe error on CommitTransaction can be \"Something went wrong when commiting the transaction in the wallet\". Generic and not descriptive, but it should not happen very often, and if it happens, you are sure it is not because of Fees already bumped as you already checked that above.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T09:59:46Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691087",
      "id" : 59691087,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T10:01:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59691087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59691813"
         }
      },
      "body" : "IMO if you do `(nFee - nOldFee) > minTxRelayFee` you can't be sure if you are using enough fees. The new transaction also needs to pay the bandwith-costs of the all replaced transaction descendants. Not?",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T10:05:55Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691813",
      "id" : 59691813,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T10:05:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59691813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59692031"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59692031"
         }
      },
      "body" : "nOldFee already is enough for all previously replaced ones, so you only need to add minTxRelayFee to account for everything. That's the logic used by the replacement code as well.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T10:07:54Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59692031",
      "id" : 59692031,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T10:07:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59692031",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59700857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59700857"
         }
      },
      "body" : "@jonasschnelli I dont think so given [the condition](https://github.com/bitcoin/bitcoin/pull/6871/files#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR1129), just doing the same check should be enough.",
      "commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "created_at" : "2016-04-14T11:25:07Z",
      "diff_hunk" : "@@ -2500,6 +2511,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, nChangePos, strFailReason, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59700857",
      "id" : 59700857,
      "original_commit_id" : "45b6ec5d22577e8152cdedf1ff4772d432b654cf",
      "original_position" : 219,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7865",
      "updated_at" : "2016-04-14T11:25:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/59700857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   }
]
