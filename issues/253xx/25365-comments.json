[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks, I've been looking into the design of these virtual classes (in #24150 and revisiting it more deeply lately), will have a look.",
      "created_at" : "2022-06-13T18:34:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1154248783",
      "id" : 1154248783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585EzHBP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1154248783/reactions"
      },
      "updated_at" : "2022-06-13T18:34:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1154248783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This should fix it:\r\n\r\n<details>\r\n<summary>blind, guess, unverified, possible fix</summary>\r\n\r\n```diff\r\ndiff --git i/src/test/coinstatsindex_tests.cpp w/src/test/coinstatsindex_tests.cpp\r\nindex 2a6a777cfe..b78cac8908 100644\r\n--- i/src/test/coinstatsindex_tests.cpp\r\n+++ w/src/test/coinstatsindex_tests.cpp\r\n@@ -3,12 +3,13 @@\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n #include <chainparams.h>\r\n #include <index/coinstatsindex.h>\r\n #include <interfaces/chain.h>\r\n #include <kernel/coinstats.h>\r\n+#include <scheduler.h>\r\n #include <test/util/setup_common.h>\r\n #include <test/util/validation.h>\r\n #include <util/time.h>\r\n #include <validation.h>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n@@ -76,12 +77,16 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\r\n \r\n     BOOST_CHECK(block_index != new_block_index);\r\n \r\n     // Shutdown sequence (c.f. Shutdown() in init.cpp)\r\n     coin_stats_index.Stop();\r\n \r\n+    // Stop the scheduler which may be using coin_stats_index (how?) before\r\n+    // coin_stats_index gets destroyed at the end of this function.\r\n+    m_node.scheduler->stop();\r\n+\r\n     // Rest of shutdown sequence and destructors happen in ~TestingSetup()\r\n }\r\n \r\n // Test shutdown between BlockConnected and ChainStateFlushed notifications,\r\n // make sure index is not corrupted and is able to reload.\r\n BOOST_FIXTURE_TEST_CASE(coinstatsindex_unclean_shutdown, TestChain100Setup)\r\n```\r\n</details>\r\n\r\nThough I do not understand how the scheduler picked the local variable `coin_stats_index` from the test.\r\n",
      "created_at" : "2022-09-16T11:40:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1249260516",
      "id" : 1249260516,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KdjPk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249260516/reactions"
      },
      "updated_at" : "2022-09-16T11:40:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249260516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Oh good catch. Though, I don't think your patch fixes it. Stopping the scheduler will have no effect on the queue. The event will still be triggered later on (when the queue is drained) and cause the segfault. You'd have to flush/sync the queue before destructing the index. See also init.cpp:\r\n\r\n\r\n```cpp\r\n    // After there are no more peers/RPC left to give us new data which may generate\r\n    // CValidationInterface callbacks, flush them...\r\n    GetMainSignals().FlushBackgroundCallbacks();\r\n\r\n    // Stop and delete all indexes only after flushing background callbacks.\r\n...\r\n```\r\n\r\n\r\n> Though I do not understand how the scheduler picked the local variable coin_stats_index from the test.\r\n\r\nThe pointer is passed over in `BaseIndex::Start`:\r\n\r\n```cpp\r\n    RegisterValidationInterface(this);\r\n",
      "created_at" : "2022-09-16T12:26:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1249301796",
      "id" : 1249301796,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KdtUk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249301796/reactions"
      },
      "updated_at" : "2022-09-16T12:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249301796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be good to reproduce this deterministically and then confirm that the possible fix actually fixes it. I tried to reproduce it by planting a few sleeps here and there, but in vain.",
      "created_at" : "2022-09-16T14:36:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1249451059",
      "id" : 1249451059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KeRwz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249451059/reactions"
      },
      "updated_at" : "2022-09-16T14:36:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249451059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Same here, I couldn't reproduce. My next best guess would be that this is a race in the validationinterface, where the subscriber is unsubscribed at the same time that the block connected event is executed.",
      "created_at" : "2022-09-16T14:45:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1249460014",
      "id" : 1249460014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KeT8u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249460014/reactions"
      },
      "updated_at" : "2022-09-16T14:45:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249460014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For reference, my latest attempt was to add a sleep right after the best block was updated to unblock the test, but keep the event executing (hopefully while it the subscriber is removed). However, this didn't work so far:\r\n\r\n(I've also moved the memory into a unique_ptr to make it easier for sanitizers to find use-after-free)\r\n\r\n```diff\r\ndiff --git a/src/index/base.cpp b/src/index/base.cpp\r\nindex 88c2ce98fa..348f203d63 100644\r\n--- a/src/index/base.cpp\r\n+++ b/src/index/base.cpp\r\n@@ -415,6 +415,7 @@ void BaseIndex::SetBestBlockIndex(const CBlockIndex* block) {\r\n     assert(!node::fPruneMode || AllowPrune());\r\n \r\n     m_best_block_index = block;\r\n+    UninterruptibleSleep(90ms);\r\n     if (AllowPrune() && block) {\r\n         node::PruneLockInfo prune_lock;\r\n         prune_lock.height_first = block->nHeight;\r\ndiff --git a/src/test/coinstatsindex_tests.cpp b/src/test/coinstatsindex_tests.cpp\r\nindex 2a6a777cfe..4bfb62a1c5 100644\r\n--- a/src/test/coinstatsindex_tests.cpp\r\n+++ b/src/test/coinstatsindex_tests.cpp\r\n@@ -30,7 +30,8 @@ static void IndexWaitSynced(BaseIndex& index)\r\n \r\n BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\r\n {\r\n-    CoinStatsIndex coin_stats_index{interfaces::MakeChain(m_node), 1 << 20, true};\r\n+    auto coin_stats_index_p{std::make_unique<CoinStatsIndex>(interfaces::MakeChain(m_node), 1 << 20,true)};\r\n+    auto&coin_stats_index{*coin_stats_index_p};\r\n \r\n     const CBlockIndex* block_index;\r\n     {\r\n@@ -89,7 +90,8 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_unclean_shutdown, TestChain100Setup)\r\n     Chainstate& chainstate = Assert(m_node.chainman)->ActiveChainstate();\r\n     const CChainParams& params = Params();\r\n     {\r\n-        CoinStatsIndex index{interfaces::MakeChain(m_node), 1 << 20};\r\n+    auto coin_stats_index_p{std::make_unique<CoinStatsIndex>(interfaces::MakeChain(m_node), 1 << 20)};\r\n+    auto&index{*coin_stats_index_p};\r\n         BOOST_REQUIRE(index.Start());\r\n         IndexWaitSynced(index);\r\n         std::shared_ptr<const CBlock> new_block;\r\n",
      "created_at" : "2022-09-16T15:07:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1249483268",
      "id" : 1249483268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KeZoE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249483268/reactions"
      },
      "updated_at" : "2022-09-16T15:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249483268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I stared at this and I don't see how the scheduler is still using the local index variable after it is destroyed, as I suggested above. I am looking at the code as of b02411d2ddf8c010fc4e9d9ec27cae3a73e895a9 where the problem actually happened (in case it is already nonexistent in `master`).\r\n\r\nThe call to `coin_stats_index.BlockUntilSyncedToCurrentChain()` from the test will wait for that `BaseIndex::SetBestBlockIndex()` (where you added the sleep) to complete in the `b-scheduler` thread before continuing with the test.\r\n\r\nCould this be a false alarm by the thread sanitizer? What is being reported is that a read from `BaseIndex::SetBestBlockIndex()` (the `b-scheduler` thread) was followed by a write from the destructor (main thread) without a syncronization, but maybe the sanitizer cannot grasp the logic from `BlockUntilSyncedToCurrentChain()`?",
      "created_at" : "2022-09-19T13:40:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1251036636",
      "id" : 1251036636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KkU3c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251036636/reactions"
      },
      "updated_at" : "2022-09-19T13:40:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251036636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "IIUC, I would think calling `FlushBackgroundCallbacks` then `m_node.scheduler->stop()` right before the `coin_stats_index` destructor runs should fix this if just calling `FlushBackgroundCallbacks` by itself is not sufficient.\r\n\r\n> I stared at this and I don't see how the scheduler is still using the local index variable after it is destroyed \r\n\r\nThe problem isn't that the scheduler is reading the `coin_stats_index` vtable pointer after it is written by the destructor. The problem is that the scheduler is reading the vtable pointer *before* it is wriitten by the destructor, and the thread sanitizer can't find any synchronization calls that order these read/write events, so it warns that there is probably a race condition.\r\n\r\nThe earlier suggestion to add the `m_node.scheduler->stop()` would probably silence the thread sanitizer because it joins the scheduler thread, forcing the any reads to happen before the write.",
      "created_at" : "2022-09-19T14:59:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1251143879",
      "id" : 1251143879,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KkvDH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251143879/reactions"
      },
      "updated_at" : "2022-09-19T14:59:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251143879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes! I actually wrote two things that contradict each other: \"I don't see how the scheduler is still using the local index variable after it is destroyed\" and \"What is being reported is that a read ... was followed by a write from the destructor\".\r\n\r\nSo, this is probably a false alarm due to the thread sanitizer not being able to grasp our synchronization logic: `SyncWithValidationInterfaceQueue()` which _should_ be called from `BaseIndex::BlockUntilSyncedToCurrentChain()`.",
      "created_at" : "2022-09-19T15:57:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25365#issuecomment-1251217017",
      "id" : 1251217017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25365",
      "node_id" : "IC_kwDOABII585KlA55",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251217017/reactions"
      },
      "updated_at" : "2022-09-19T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251217017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
