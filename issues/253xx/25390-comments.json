[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25472](https://github.com/bitcoin/bitcoin/pull/25472) (build: Increase MS Visual Studio minimum version by hebasto)\n* [#25203](https://github.com/bitcoin/bitcoin/pull/25203) (logging: update to severity-based logging by jonatack)\n* [#23561](https://github.com/bitcoin/bitcoin/pull/23561) (BIP324: Handshake prerequisites by dhruv)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-06-16T15:04:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157765950",
      "id" : 1157765950,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FAhs-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157765950/reactions"
      },
      "updated_at" : "2022-07-13T07:54:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157765950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except unlike TSA annotations, it doesn't rely on a nonstandard compiler extension, or suffer from quirks that come from doing a limited static analysis.\r\n\r\n`ThreadSafePtr<T>` is obviously not a complete substitute for thread safety annotations since it only handles the simple case where a single non-recursive Mutex is used to protect access to a single variable. But the variable can have any C++ type (primitive, container, or struct), so it's probably flexible enough for a lot of cases.\r\n\r\nI don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` or `LockedData<T>`. (An analogy here would be `std::optional<T>`, which is not called `std::optional_ptr<T>`, even though it has `*` and `->` members, because it's purpose is to be a container, not a pointer. The class is named after what it's used for not what kind of members it has.)",
      "created_at" : "2022-06-16T17:28:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157945376",
      "id" : 1157945376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FBNgg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157945376/reactions"
      },
      "updated_at" : "2022-06-16T17:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157945376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899366531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI think it would be an improvement to just give these methods a normal name like `Lock` instead of making them operators. Calling code would change from:\r\n\r\n```c++\r\nauto v_locked = *v;\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nto \r\n\r\n```c++\r\nauto v_locked = v.Lock();\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nwhich would be clearer and simpler. Proxy class is the actual class acting like a pointer so it needs `*` and `->` methods. But outer `ThreadSafePtr` class is not really a pointer at all, but a container, so there is not a concrete reason it needs to have `*` and `->` members unless that's an aesthetic preference.",
      "commit_id" : "e577177a339d5a833ba82c9656fa0291ad05b001",
      "created_at" : "2022-06-16T17:42:39Z",
      "diff_hunk" : "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899366531",
      "id" : 899366531,
      "line" : 490,
      "node_id" : "PRRC_kwDOABII5841mz6D",
      "original_commit_id" : "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "original_line" : 490,
      "original_position" : 91,
      "original_start_line" : 486,
      "path" : "src/sync.h",
      "position" : 91,
      "pull_request_review_id" : 1009459470,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 486,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-16T18:02:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899380437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI'm pretty sure the const version of these -> and * methods are unusable and will always lead to compile errors if you ever tried to call them. If you want to allow accessing contents of const `ThreadSafePtr` objects, probably you need to introduce Proxy/ConstProxy classes similar to c++ iterator/const_interator classes. Otherwise you could drop these const methods.",
      "commit_id" : "e577177a339d5a833ba82c9656fa0291ad05b001",
      "created_at" : "2022-06-16T17:59:12Z",
      "diff_hunk" : "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899380437",
      "id" : 899380437,
      "line" : 487,
      "node_id" : "PRRC_kwDOABII5841m3TV",
      "original_commit_id" : "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "original_line" : 487,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 88,
      "pull_request_review_id" : 1009459470,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-16T18:02:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems like a non-starter to me? It's not even able to detect obvious double locks at compile-time:\r\n\r\n```c++\r\n    ThreadSafePtr<std::map<int, int>> m;\r\n    m->emplace(5, 25);\r\n    {\r\n        auto m_locked = *m;\r\n        m_locked->emplace(6, 36);\r\n        m->emplace(7, 49);  // double lock\r\n\r\n        auto m_locked2 = *m; // double lock\r\n        m_locked->emplace(9, 81);\r\n        m_locked2->emplace(10, 100);\r\n    }\r\n```\r\n\r\nEven if it weren't worse at catching bugs, it doesn't seem like an improvement over writing:\r\n\r\n```c++\r\n    Mutex mut;\r\n    std::map<int, int> m GUARDED_BY(mut);\r\n\r\n    WITH_LOCK(mut, m.emplace(5, 25));\r\n    {\r\n        LOCK(mut);\r\n        m.emplace(6, 36);\r\n        m.emplace(7, 49);  // no double lock\r\n\r\n        LOCK(mut); // double lock - detected at compile time\r\n        m.emplace(9, 81);\r\n        m.emplace(10, 100);\r\n    }\r\n```",
      "created_at" : "2022-06-17T02:55:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634",
      "id" : 1158434634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FDE9K",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158434634/reactions"
      },
      "updated_at" : "2022-06-17T02:55:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158434634",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It's not even able to detect obvious double locks at compile-time: \r\n\r\nI assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\n> Even if it weren't worse at catching bugs, it doesn't seem like an improvement over writing\r\n\r\nWell one improvement is that it enforces locking on all compilers, unlike the clang annotations. The code itself doesn't seem much better or worse in this case for this very simple data structure, but it's probably is worth experimenting with for chains and chainstates and mempools, etc to be able to avoid logic bugs, distinguish different uses of cs_main for different purposes, and not just have LOCK(cs_main) everywhere what no indication about what exactly is being locked or why.\r\n\r\nLooking at your examples, though I would even more want to replace the `*m` syntax with `m.Lock()` as suggested previously to make usage more obvious.",
      "created_at" : "2022-06-17T04:21:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158475359",
      "id" : 1158475359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FDO5f",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158475359/reactions"
      },
      "updated_at" : "2022-06-17T04:21:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158475359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901851921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed them because they are not needed (currently). In a previous incarnation of this I had it working with `const ThreadSafePtr`, but removed the complications that were required for that.\r\n\r\nCan always extend it (restore these) if `const` objects are necessary.",
      "commit_id" : "a870b2b89190c95102db89ff060a012836508fb3",
      "created_at" : "2022-06-20T16:43:10Z",
      "diff_hunk" : "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901851921",
      "id" : 901851921,
      "in_reply_to_id" : 899380437,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841wSsR",
      "original_commit_id" : "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "original_line" : 487,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : null,
      "pull_request_review_id" : 1012544031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-20T16:43:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901853708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed `operator*()` to `Lock()`. The `operator->()` is needed in order to cause a chained `->` calls.\r\n\r\nNotice that the call:\r\n\r\n```cpp\r\n(*g_my_net_addr)[my_net_addr_entry] = lsi;\r\n```\r\n\r\nnow becomes:\r\n\r\n```cpp\r\ng_my_net_addr.Lock()[my_net_addr_entry] = lsi;\r\n```",
      "commit_id" : "a870b2b89190c95102db89ff060a012836508fb3",
      "created_at" : "2022-06-20T16:46:10Z",
      "diff_hunk" : "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901853708",
      "id" : 901853708,
      "in_reply_to_id" : 899366531,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841wTIM",
      "original_commit_id" : "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "original_line" : 490,
      "original_position" : 91,
      "original_start_line" : 486,
      "path" : "src/sync.h",
      "position" : null,
      "pull_request_review_id" : 1012546455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-20T16:46:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`e577177a33...a870b2b891`: address suggestions and remove optional commit that was a kind of scope creep for this PR - `net: simplify logic around reachable networks and -onlynet`, it will make it in a followup.\r\n\r\n@ryanofsky very insightful review, thanks for the suggestions!\r\n\r\n> This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except...\r\n\r\nHmm, right, I did not think of this from that perspective. In addition - TSA do not actually \"force\" anything, they emit a mere warning if compiled with `clang`. They do nothing for gcc. And if `-Werror` is not used to turn the warning into an error, then they can be missed/ignored.\r\n\r\nI see this as a complementary to TSA.\r\n\r\n> I don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` ...\r\n\r\nRenamed to `Synced<T>`, thanks!",
      "created_at" : "2022-06-20T16:54:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1160665973",
      "id" : 1160665973,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FLlt1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1160665973/reactions"
      },
      "updated_at" : "2022-06-20T16:54:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1160665973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\nI think you'd have to mark the `Synced` object as being lock itself (`LOCKABLE`), and mark the `Proxy` class as being a RAII guard (`SCOPED_LOCKABLE`), with the constructor/destructor annotated appropriately (`EXCLUSIVE_LOCK_FUNCTION(ref_to_scoped_obj)` and `UNLOCK_FUNCTION()`), and with the functions that create the Proxy (`Lock` and `operator->`) annotated with negative constraints (`EXCLUSIVE_LOCKS_REQUIRED(!this)`)? I've got pretty low confidence that that will actually work as hoped/expected though...\r\n\r\n> Well one improvement is that it enforces locking on all compilers, unlike the clang annotations.\r\n\r\nWe already enforce locking is correct via compiling with clang in CI; it's certainly an improvement to get those warnings earlier for anyone who's not using clang or doesn't have the options enabled, but [EDIT: oops, didn't finish the thought:] not at the cost of losing some checks entirely.\r\n",
      "created_at" : "2022-06-23T09:06:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164151295",
      "id" : 1164151295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FY4n_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164151295/reactions"
      },
      "updated_at" : "2022-06-23T11:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164151295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't see any obvious benefit here, looking at the comparison with current code in https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634 ",
      "created_at" : "2022-06-23T09:49:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164194609",
      "id" : 1164194609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FZDMx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164194609/reactions"
      },
      "updated_at" : "2022-06-23T09:49:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164194609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`a870b2b891...7b05e787cf`: use `LOCK(synced)` at call sites and remove more `GlobalMutex`es.\r\n\r\nThe benefit is not at the call sites - they can use different flavors of syntax sugar but all of them more or less boil down to the same thing. I changed it to use `{ LOCK(foo); foo->Method1(); foo->Method2(); ... }` so that it is not possible to misuse like @ajtowns suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634).\r\n\r\nThe `Synced<T>` abstraction is similar to what is suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/24931#discussion_r890636987) but it does so in a generic way to avoid code repetition. Its benefit is twofold:\r\n\r\n1. It avoids code repetition at the implementation sites. Namely this:\r\n\r\n<details>\r\n<summary>Lots of repetitions (92 lines)</summary>\r\n\r\n```cpp\r\nclass Foo\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Foo::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<int> m_data;\r\n};\r\n\r\nclass Bar\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Bar::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<std::string> m_data;\r\n};\r\n\r\nclass Baz\r\n{\r\npublic:\r\n    void Insert(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.insert(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Baz::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::set<std::string> m_data;\r\n};\r\n```\r\n</details>\r\n\r\nbecomes this:\r\n\r\n<details>\r\n<summary>Short (3 lines)</summary>\r\n\r\n```cpp\r\nSynced<std::vector<int>> Foo;\r\nSynced<std::vector<std::string>> Bar;\r\nSynced<std::set<std::string>> Baz;\r\n```\r\n</details>\r\n\r\n2. The mutex is properly encapsulated. With a global mutex and a global variable annotated with `GUARDED_BY()` it is indeed not possible to add new code that accesses the variable without protection (if using Clang and `-Wthread-safety-analysis` and `-Werror`), but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n",
      "created_at" : "2022-06-29T10:04:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169788319",
      "id" : 1169788319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FuY2f",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169788319/reactions"
      },
      "updated_at" : "2022-07-13T06:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169788319",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ah, looks like this is `std::atomic` for structs/classes then",
      "created_at" : "2022-06-29T10:13:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169797417",
      "id" : 1169797417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FubEp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169797417/reactions"
      },
      "updated_at" : "2022-06-29T10:13:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169797417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Ah, looks like this is `std::atomic` for structs/classes then\r\n\r\nRight, kind of. `std::atomic` can be used for any trivially copyable structs/classes too and if necessary it will use a mutex internally. The difference is that reading from an `atomic` would read it in a safe way from the memory and would return a copy of the stored object. So if we call a method of the stored object the mutex will be released before the method is called and the method will be called on the copy. `atomic` also does not provide a way to lock for longer time, spanning calls to multiple methods.",
      "created_at" : "2022-06-29T11:06:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169846509",
      "id" : 1169846509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585FunDt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169846509/reactions"
      },
      "updated_at" : "2022-06-29T11:07:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169846509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`7b05e787cf...acb21a5a24`: simplify the implementation of `Synced`, as suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254).",
      "created_at" : "2022-07-13T08:57:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1182955925",
      "id" : 1182955925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585GgnmV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1182955925/reactions"
      },
      "updated_at" : "2022-07-13T08:57:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1182955925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-13T16:27:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1183432281",
      "id" : 1183432281,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585Gib5Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183432281/reactions"
      },
      "updated_at" : "2022-07-13T16:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183432281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`acb21a5a24...4b870a1538`: rebase due to conflicts",
      "created_at" : "2022-07-14T07:18:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1184085863",
      "id" : 1184085863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
      "node_id" : "IC_kwDOABII585Gk7dn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184085863/reactions"
      },
      "updated_at" : "2022-07-14T07:18:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184085863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
