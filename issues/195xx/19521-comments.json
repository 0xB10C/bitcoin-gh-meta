[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19463 (Prune locks by luke-jr)\n* #18795 (Test: wallet issue with orphaned rewards by domob1812)\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n* #17786 (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* #15606 ([experimental] UTXO snapshots by jamesob)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-07-15T05:44:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-658558618",
      "id" : 658558618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1ODU1ODYxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-01T21:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658558618",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why?",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-07-30T23:37:22Z",
      "diff_hunk" : "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440",
      "id" : 463328440,
      "line" : 1020,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODQ0MA==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 1020,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 47,
      "pull_request_review_id" : 458831985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-30T23:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It syncs over the whole blockchain, processing every block and saving state on each. That allows users to query the stats for every block height (a nice-to-have feature). It's the standard way `BaseIndex` currently works, although changing that would probably only require minimal effort. Potential users who I have talked to didn't really care much about this. But I will look into it if this again since progress is slow anyway currently.",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-01T19:41:46Z",
      "diff_hunk" : "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512",
      "id" : 463993512,
      "in_reply_to_id" : 463328440,
      "line" : 1020,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MzUxMg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 1020,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 47,
      "pull_request_review_id" : 459599507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-01T19:41:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A comment explaining \"bogo\" would be helpful, I looked at the function that calculates it and it didn't make intuitive sense to me.",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-17T02:17:33Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276",
      "id" : 471199276,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTI3Ng==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 20,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T02:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can we add `unspendable_amount` to the index data and include the genesis block in it?",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-17T02:19:13Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582",
      "id" : 471199582,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTU4Mg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 111,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 111,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T02:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm assuming these would be added to `unspendable_amount` too",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-17T02:20:42Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972",
      "id" : 471199972,
      "line" : 135,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTk3Mg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 135,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 135,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T02:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this would be 3/3 of `unspendable_amount` items.",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-17T02:21:33Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138",
      "id" : 471200138,
      "line" : 145,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMDEzOA==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 145,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 145,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T02:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If I understand the logic, `total_amount` is the net increase of coins due to this block?\r\n\r\nI don't want to bloat your stats index, but I'd be interested in adding `total_prevout_spent_amount`, `total_new_outputs_ex_coinbase_amount`, and `coinbase_amount` to unpack `total_amount`.",
      "commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "created_at" : "2020-08-17T02:38:42Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531",
      "id" : 471203531,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMzUzMQ==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 21,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T02:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-17T11:55:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-674837048",
      "id" : 674837048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDgzNzA0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T11:55:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674837048",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@PierreRochard Thanks a lot for the comments! I am happy to include these values you requested and drafted that up in a new commit (will need another day for clean-up, docs, tests etc. but it should work already). I actually had done some [similar work](https://github.com/fjahr/bitcoin/commit/4d08663e5d2a4eeda06a408c3fef6361475d3ce6) already for my [blog post](https://fjahr.com/posts/where-are-the-coins/) and was thinking about adding some more numbers myself, just opted to keep the changeset small at the end.\r\n\r\nThe RPC now has the values for every block by passing a verbose flag `true` after the block indicator (example is testnet):\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 1800003 true\r\n{\r\n  \"height\": 1800003,\r\n  \"bestblock\": \"00000000000005359e00fe3d069b2999baaaf4d69a34492e543f9f82047ddd01\",\r\n  \"txouts\": 23990594,\r\n  \"bogosize\": 1799579780,\r\n  \"disk_size\": 1341237413,\r\n  \"total_amount\": 20940531.15125810,\r\n  \"block_info\": {\r\n    \"unspendable_amount\": 0.00000000,\r\n    \"total_prevout_spent_amount\": 0.21428778,\r\n    \"total_new_outputs_ex_coinbase_amount\": 0.21428778,\r\n    \"coinbase_amount\": 0.19531250\r\n  }\r\n}\r\n```\r\n\r\nI just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block. They are per-block now but it is trivial to change that. Actually, I could even do both. And another questions: should the unspendable output values be included or excluded from the other output values. Example: `src/bitcoin-cli gettxoutsetinfo 'none' 0 true` shows `coinbase: 50.0` although that is unspendable. Same for the `total_new_outputs_ex_coinbase_amount` if there is an `OP_RETURN` for example. Just a question of the definition.\r\n\r\nAnd I saw your request for the data dump on twitter. Will look into that as a follow-up :)",
      "created_at" : "2020-08-17T22:18:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675143288",
      "id" : 675143288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTE0MzI4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T22:18:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675143288",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nWould be nice to be able to see the `total_unspendable_amount` up to that current block.",
      "created_at" : "2020-08-17T23:02:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675156917",
      "id" : 675156917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTE1NjkxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T23:02:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675156917",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-08-18T07:52:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675319765",
      "id" : 675319765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTMxOTc2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T07:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675319765",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
