[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19806 (validation: UTXO snapshot activation by jamesob)\n* #19792 (rpc: Add dumpcoinstats by fjahr)\n* #19463 (Prune locks by luke-jr)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #18795 (Test: wallet issue with orphaned rewards by domob1812)\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n* #17786 (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-07-15T05:44:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-658558618",
      "id" : 658558618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1ODU1ODYxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T23:23:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658558618",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why?",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-07-30T23:37:22Z",
      "diff_hunk" : "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440",
      "id" : 463328440,
      "line" : 1013,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODQ0MA==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 1013,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 47,
      "pull_request_review_id" : 458831985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It syncs over the whole blockchain, processing every block and saving state on each. That allows users to query the stats for every block height (a nice-to-have feature). It's the standard way `BaseIndex` currently works, although changing that would probably only require minimal effort. Potential users who I have talked to didn't really care much about this. But I will look into it if this again since progress is slow anyway currently.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-01T19:41:46Z",
      "diff_hunk" : "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512",
      "id" : 463993512,
      "in_reply_to_id" : 463328440,
      "line" : 1013,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MzUxMg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 1013,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 47,
      "pull_request_review_id" : 459599507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A comment explaining \"bogo\" would be helpful, I looked at the function that calculates it and it didn't make intuitive sense to me.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T02:17:33Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276",
      "id" : 471199276,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTI3Ng==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 20,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can we add `unspendable_amount` to the index data and include the genesis block in it?",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T02:19:13Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582",
      "id" : 471199582,
      "line" : 133,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTU4Mg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 133,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 133,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm assuming these would be added to `unspendable_amount` too",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T02:20:42Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972",
      "id" : 471199972,
      "line" : 157,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTk3Mg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 157,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 157,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this would be 3/3 of `unspendable_amount` items.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T02:21:33Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138",
      "id" : 471200138,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMDEzOA==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 145,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If I understand the logic, `total_amount` is the net increase of coins due to this block?\r\n\r\nI don't want to bloat your stats index, but I'd be interested in adding `total_prevout_spent_amount`, `total_new_outputs_ex_coinbase_amount`, and `coinbase_amount` to unpack `total_amount`.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T02:38:42Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531",
      "id" : 471203531,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMzUzMQ==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 21,
      "pull_request_review_id" : 468129702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-17T11:55:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-674837048",
      "id" : 674837048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDgzNzA0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T11:55:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674837048",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805502"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think bogo just stands for bogus, indicating that this metric is not meaningful in any way other than comparing it to itself, i.e. has the UTXO set grown or shrunk over the last x blocks. I added a comment on the calculation and improved the RPC help with the same text.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T22:18:09Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805502",
      "id" : 471805502,
      "in_reply_to_id" : 471199276,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTUwMg==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 20,
      "pull_request_review_id" : 468869319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805502",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually 3/4 :) The unclaimed block rewards need to be included as well. (See code and/or my [blog post](https://fjahr.com/posts/where-are-the-coins/))",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T22:18:28Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805619",
      "id" : 471805619,
      "in_reply_to_id" : 471200138,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTYxOQ==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 145,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 468869425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805619",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805744"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is the total amount of coins in the UTXO set at that block height. So it's accumulative rather than for this specific block. I added the other values in a draft commit, needs some cleanup but ready to test.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-17T22:18:51Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805744",
      "id" : 471805744,
      "in_reply_to_id" : 471203531,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTc0NA==",
      "original_commit_id" : "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 21,
      "pull_request_review_id" : 468869591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805744",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@PierreRochard Thanks a lot for the comments! I am happy to include these values you requested and drafted that up in a new commit (will need another day for clean-up, docs, tests etc. but it should work already). I actually had done some [similar work](https://github.com/fjahr/bitcoin/commit/4d08663e5d2a4eeda06a408c3fef6361475d3ce6) already for my [blog post](https://fjahr.com/posts/where-are-the-coins/) and was thinking about adding some more numbers myself, just opted to keep the changeset small at the end.\r\n\r\nThe RPC now has the values for every block by passing a verbose flag `true` after the block indicator (example is testnet):\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 1800003 true\r\n{\r\n  \"height\": 1800003,\r\n  \"bestblock\": \"00000000000005359e00fe3d069b2999baaaf4d69a34492e543f9f82047ddd01\",\r\n  \"txouts\": 23990594,\r\n  \"bogosize\": 1799579780,\r\n  \"disk_size\": 1341237413,\r\n  \"total_amount\": 20940531.15125810,\r\n  \"block_info\": {\r\n    \"unspendable_amount\": 0.00000000,\r\n    \"total_prevout_spent_amount\": 0.21428778,\r\n    \"total_new_outputs_ex_coinbase_amount\": 0.21428778,\r\n    \"coinbase_amount\": 0.19531250\r\n  }\r\n}\r\n```\r\n\r\nI just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block. They are per-block now but it is trivial to change that. Actually, I could even do both. And another questions: should the unspendable output values be included or excluded from the other output values. Example: `src/bitcoin-cli gettxoutsetinfo 'none' 0 true` shows `coinbase: 50.0` although that is unspendable. Same for the `total_new_outputs_ex_coinbase_amount` if there is an `OP_RETURN` for example. Just a question of the definition.\r\n\r\nAnd I saw your request for the data dump on twitter. Will look into that as a follow-up :)",
      "created_at" : "2020-08-17T22:18:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675143288",
      "id" : 675143288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTE0MzI4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T22:18:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675143288",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nWould be nice to be able to see the `total_unspendable_amount` up to that current block.",
      "created_at" : "2020-08-17T23:02:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675156917",
      "id" : 675156917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTE1NjkxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T23:02:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675156917",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-08-18T07:52:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675319765",
      "id" : 675319765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTMxOTc2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T07:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675319765",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r474290951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474290951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this is causing BIP30 blocks to be double counted as unspendable\r\n\r\n`bitcoin-cli gettxoutsetinfo 'none' 91722 true`\r\n\r\n`\"unspendable_amount\": 100.00000000`",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-20T21:46:57Z",
      "diff_hunk" : "@@ -0,0 +1,364 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    CAmount unspendable_amount;\n+    CAmount total_prevout_spent_amount;\n+    CAmount total_new_outputs_ex_coinbase_amount;\n+    CAmount coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.unspendable_amount);\n+        READWRITE(obj.total_prevout_spent_amount);\n+        READWRITE(obj.total_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+\n+        m_unspendable_amount = 0;\n+        m_total_prevout_spent_amount = 0;\n+        m_total_new_outputs_ex_coinbase_amount = 0;\n+        m_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    CAmount total_in = 0;\n+    CAmount total_out = 0;\n+    m_unspendable_amount = 0;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                total_out += coin.out.nValue;\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    total_in += coin.out.nValue;\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        // Genesis block\n+        m_unspendable_amount += block_subsidy;\n+    }\n+\n+    m_coinbase_amount = block_subsidy;\n+    m_total_prevout_spent_amount = total_in;\n+\n+    if (pindex->nHeight > 0) {\n+        m_total_new_outputs_ex_coinbase_amount = total_out - block_subsidy;\n+\n+        // Unclaimed block rewards\n+        if ((total_in + block_subsidy) > total_out) {\n+            m_unspendable_amount += (total_in + block_subsidy - total_out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r474290951",
      "id" : 474290951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MDk1MQ==",
      "original_commit_id" : "7139c1798819074123fd2b841e54eeafe849bc5a",
      "original_line" : 203,
      "original_position" : 203,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 472008569,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474290951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`values to be cumulative or per-block`\r\n\r\nI find it easier to do the cumulative sum in pandas than to back in to the per-block, but the answer also depends on the performance of the underlying index for aggregate queries. If this behaves like a SQL database and we want it to be normalized, it should be per-block, but I'm not religious about it.",
      "created_at" : "2020-08-20T23:39:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677958519",
      "id" : 677958519,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Nzk1ODUxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-20T23:39:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677958519",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@PierreRochard Thanks for testing and further feedback. As I have written the tests today and did further cleanup I have found that I hadn't been really doing what you were looking for in the coinbase_amount. I was simply returning the block subsidy there. \r\n\r\nI am pushing my fixes and test as a separate commit for now since you were already testing with the first version:\r\n- Adds `total_unspendable_amount`, the cumulative number as requested\r\n- Tests for different unspendables (except BIP30 because that is pretty hard to test)\r\n- Cleans up internal naming and removes some indirections that caused bugs in some scenarios (removes `total_in` and `total_out` for example)\r\n\r\nI think the formula in `block_sanity_check` in the test is what should hold for each block and that is how you intended it, correct?\r\n```\r\n    assert_equal(\r\n        block_info['total_prevout_spent_amount'] + block_subsidy,\r\n        block_info['total_new_outputs_ex_coinbase_amount'] + block_info['coinbase_amount'] + block_info['unspendable_amount']\r\n    )\r\n```\r\n\r\nI think the new code also fixes the BIP30 issue you discovered but I am still syncing the new version of the index with not-super-fast hardware so I will be able to check tomorrow.",
      "created_at" : "2020-08-21T00:33:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677973339",
      "id" : 677973339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Nzk3MzMzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T00:33:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677973339",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations? ",
      "created_at" : "2020-08-21T02:09:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677997938",
      "id" : 677997938,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Nzk5NzkzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T02:09:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677997938",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "From testnet:\r\n\r\n```\r\ngettxoutsetinfo  none 1807942 true\r\n{\r\n  \"height\": 1807942,\r\n  \"bestblock\": \"00000000374715d95667998b720a60bf8241182b279c913573f5e9e3fa54ba00\",\r\n  \"txouts\": 24100924,\r\n  \"bogosize\": 1807675952,\r\n  \"disk_size\": 1318392833,\r\n  \"total_amount\": 20942081.72908999,\r\n  \"total_unspendable_amount\": 875.88809751,\r\n  \"block_info\": {\r\n    \"unspendable_amount\": 0.00000000,\r\n    \"total_prevout_spent_amount\": 16798.39641164,\r\n    \"total_new_outputs_ex_coinbase_amount\": 16798.36929066,\r\n    \"coinbase_amount\": 0.22243348\r\n  }\r\n}\r\n\r\n```\r\n\r\nLooking good!",
      "created_at" : "2020-08-21T05:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678043934",
      "id" : 678043934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODA0MzkzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T05:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678043934",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations?\r\n\r\nGreat! There is only a different kind of migration for txindex because it was around before the whole `BaseIndex` class was introduced. It is something that I have been thinking about already because I will add the UTXO set hash at some point. I am still figuring out what would work best for Coinstats but also other indexes in general, so for now the index needs to be deleted and resynced, unfortunately.",
      "created_at" : "2020-08-21T12:26:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678263874",
      "id" : 678263874,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODI2Mzg3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T12:26:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678263874",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cleaned up the latest changes and tests in more coherent commits. This is ready for review now.",
      "created_at" : "2020-08-22T19:51:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678685225",
      "id" : 678685225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODY4NTIyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-22T19:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678685225",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475161291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475161291"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This only counts the first output of the coinbase tx as being the coinbase amount, which doesn't necessarily hold true ( one example https://blockstream.info/block/0000000000000af7c56d09abdbce2a36ba9aebbd8559b3d0460defaeaf3c0f31 )",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-23T02:38:37Z",
      "diff_hunk" : "@@ -0,0 +1,368 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+    CAmount total_unspendable_amount;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.total_unspendable_amount);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+        m_total_unspendable_amount = 0;\n+        m_block_unspendable_amount = 0;\n+        m_block_prevout_spent_amount = 0;\n+        m_block_new_outputs_ex_coinbase_amount = 0;\n+        m_block_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+\n+    // Reset per-block values\n+    m_block_unspendable_amount = 0;\n+    m_block_coinbase_amount = 0;\n+    m_block_prevout_spent_amount = 0;\n+    m_block_new_outputs_ex_coinbase_amount = 0;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                if (tx->IsCoinBase() && j == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475161291",
      "id" : 475161291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MTI5MQ==",
      "original_commit_id" : "79535960d1324cd24db78e383e21d2f3b810f66a",
      "original_line" : 173,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 472974571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475161291",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475205283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475205283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You are right. I just pushed a fix for this and also improved the tests to account for this case.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-23T11:03:22Z",
      "diff_hunk" : "@@ -0,0 +1,368 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+    CAmount total_unspendable_amount;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.total_unspendable_amount);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+        m_total_unspendable_amount = 0;\n+        m_block_unspendable_amount = 0;\n+        m_block_prevout_spent_amount = 0;\n+        m_block_new_outputs_ex_coinbase_amount = 0;\n+        m_block_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+\n+    // Reset per-block values\n+    m_block_unspendable_amount = 0;\n+    m_block_coinbase_amount = 0;\n+    m_block_prevout_spent_amount = 0;\n+    m_block_new_outputs_ex_coinbase_amount = 0;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                if (tx->IsCoinBase() && j == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475205283",
      "id" : 475205283,
      "in_reply_to_id" : 475161291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTI4Mw==",
      "original_commit_id" : "79535960d1324cd24db78e383e21d2f3b810f66a",
      "original_line" : 173,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 473001690,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-28T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475205283",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr \r\n\r\nI'm late to the party, but:\r\n\r\n> I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\r\n\r\nIt is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.",
      "created_at" : "2020-08-26T01:39:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-680409442",
      "id" : 680409442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDQwOTQ0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T01:39:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680409442",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-26T09:02:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-680754758",
      "id" : 680754758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDc1NDc1OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T09:02:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680754758",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.",
      "created_at" : "2020-08-27T02:14:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-681301264",
      "id" : 681301264,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MTMwMTI2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-27T02:14:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681301264",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "node_id" : "MDQ6VXNlcjYyOTk2ODE=",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.\r\n\r\nI think more verbose is not a problem itself unless it creates other problems, the only serious argument against it IMO would be if it ends up taking up too much disk space but the index is still pretty small and unless I change it to be accumulative numbers it should mostly be zeros anyway which should let the index only grow very little. I am just still thinking about if would really make sense to record all four categories because it is technically not possible that there will ever be another Genesis block or another BIP30 block, so recording these two values (even if it's just 0s) for every block forever seems kind of pointless in a way. But then if I leave them out it's annoying that it can't be a clean sum of all the categories to get the total unspendable. So, happy to do it but still struggling a bit with finding the right approach.",
      "created_at" : "2020-08-28T16:53:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682886060",
      "id" : 682886060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Mjg4NjA2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T16:53:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682886060",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @fjahr\r\n> \r\n> I'm late to the party, but:\r\n> \r\n> > I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\r\n> \r\n> It is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.\r\n\r\nTwo concept ACKs, I think you are still early :) And that is a good point. I think I will do the following then: I will record cumulative numbers on the index but also return the per-block numbers in the rpc by default using the prevblock numbers. Since I have written that comment I have thought a bit more about the casual (non-auditor) user who might just want to check on a specific block height and for them the per-block numbers are much more intuitive and I would like to avoid another situation where the users see the very large cumulative numbers and ask questions about what it means, if it's a bug etc.",
      "created_at" : "2020-08-28T17:14:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682948466",
      "id" : 682948466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Mjk0ODQ2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T17:14:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682948466",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Only rebased for now, will work on the suggested changes shortly.",
      "created_at" : "2020-08-28T17:16:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682952026",
      "id" : 682952026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Mjk1MjAyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T17:16:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682952026",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479786750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479786750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9981a8f nit: sort",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-30T16:03:39Z",
      "diff_hunk" : "@@ -23,6 +23,7 @@\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n+#include <index/coinstatsindex.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479786750",
      "id" : 479786750,
      "line" : 26,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4Njc1MA==",
      "original_commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "original_line" : 26,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_review_id" : 478215123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-30T16:40:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479786750",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479787149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479787149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9981a8f\r\n\r\n- s/rpc/RPC/ (can also fix the one in `txindex`)\r\n\r\n- omit \"call\" (the C in RPC stands for \"call\")\r\n\r\n- drop the comma at s/index, /index /\r\n\r\n- nit: sort for both `-coinstatsindex` and `-blockfilterindex` (they should be at line 411)",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-08-30T16:07:37Z",
      "diff_hunk" : "@@ -432,6 +440,7 @@ void SetupServerArgs(NodeContext& node)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coin statistics index, used by the gettxoutset rpc call (default: %u)\", DEFAULT_COINSTATSINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479787149",
      "id" : 479787149,
      "line" : 443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4NzE0OQ==",
      "original_commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "original_line" : 443,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 33,
      "pull_request_review_id" : 478215123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-30T16:40:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479787149",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> OTOH on a mainnet node, which has been running `txindex=1 peerbloomfilters=1 blockfilterindex=1` without issues, this PR crashed repeatedly:\r\n> \r\n> ```\r\n> 2020-08-30T16:32:25Z coinstatsindex thread start\r\n> 2020-08-30T16:32:25Z Syncing coinstatsindex with block chain from height 632589\r\n> 2020-08-30T16:32:26Z *** ThreadSync: Failed to write block 000000000000000000017ff124286aa9a7c80a353c11bd7bd81e8a4b467c2e34 to index database\r\n> 2020-08-30T16:32:26Z Error: A fatal internal error occurred, see debug.log for details\r\n> Error: A fatal internal error occurred, see debug.log for details\r\n> 2020-08-30T16:32:26Z coinstatsindex thread exit\r\n> ...\r\n> 2020-08-30T16:32:26Z Shutdown: In progress...\r\n> ...\r\n> 2020-08-30T16:32:26Z Shutdown: done\r\n> ```\r\n\r\nThanks for taking another look @jonatack . Maybe you had an older version of `coinstatsindex` running on that node before? You need to delete the folder and fully resync in that case. I have not taken care of a migration mechanism yet. That could explain such crashes.",
      "created_at" : "2020-08-30T19:59:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683463535",
      "id" : 683463535,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzQ2MzUzNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T19:59:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683463535",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Thanks for taking another look @jonatack . Maybe you had an older version of `coinstatsindex` running on that node before? You need to delete the folder and fully resync in that case. I have not taken care of a migration mechanism yet. That could explain such crashes.\r\n\r\nThanks @fjahr, that could explain it; I tested building the index with #18000 and only on mainnet.",
      "created_at" : "2020-08-30T20:09:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683464648",
      "id" : 683464648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzQ2NDY0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T20:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683464648",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yup, all good now.\r\n```\r\nrm -rf ~/.bitcoin/indexes/coinstats\r\n```\r\n```\r\n2020-08-30T20:17:32Z coinstatsindex thread start\r\n2020-08-30T20:17:32Z Syncing coinstatsindex with block chain from height 0\r\n...\r\n2020-08-30T20:21:09Z Syncing coinstatsindex with block chain from height 150291\r\n2020-08-30T20:21:40Z Syncing coinstatsindex with block chain from height 172129\r\n2020-08-30T20:22:11Z Syncing coinstatsindex with block chain from height 183549\r\n2020-08-30T20:22:42Z Syncing coinstatsindex with block chain from height 190364\r\n```\r\n```\r\n$ ./src/bitcoin-cli getindexinfo\r\n{\r\n  \"txindex\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 646031\r\n  },\r\n  \"coinstatsindex\": {\r\n    \"synced\": false,\r\n    \"best_block_height\": 203567\r\n  },\r\n  \"basic block filter index\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 646031\r\n  }\r\n}\r\n```",
      "created_at" : "2020-08-30T20:23:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683466314",
      "id" : 683466314,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzQ2NjMxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T20:24:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683466314",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485635996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485635996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `look up stats`",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-09-09T14:01:33Z",
      "diff_hunk" : "@@ -0,0 +1,50 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains statistics on the UTXO set.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    uint64_t m_transaction_output_count;\n+    uint64_t m_bogo_size;\n+    CAmount m_total_amount;\n+    uint64_t m_disk_size;\n+\n+    bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n+protected:\n+    bool Init() override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return \"coinstatsindex\"; }\n+\n+public:\n+    // Constructs the index, which becomes available to be queried.\n+    explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Look up hash digest for a specific block using CBlockIndex",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485635996",
      "id" : 485635996,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNTk5Ng==",
      "original_commit_id" : "d28fed9b50c21b5f170b10f10532467989f043e5",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.h",
      "position" : 48,
      "pull_request_review_id" : 485041059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-09T14:54:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485635996",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485646852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485646852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This would prematurely return if the active chain is shorter? It currently doesn't matter, because `gettxoutsetinfo` only takes a height argument.",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-09-09T14:15:32Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.disk_size = m_disk_size;\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485646852",
      "id" : 485646852,
      "line" : 303,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0Njg1Mg==",
      "original_commit_id" : "d28fed9b50c21b5f170b10f10532467989f043e5",
      "original_line" : 254,
      "original_position" : 254,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 303,
      "pull_request_review_id" : 485041059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-09T14:54:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485646852",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485661976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485661976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why are these values only initialised is no result is found? (and `result` is not used, so this just a sanity check?). Should this be initialised with the most recent block?",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-09-09T14:34:55Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485661976",
      "id" : 485661976,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MTk3Ng==",
      "original_commit_id" : "d28fed9b50c21b5f170b10f10532467989f043e5",
      "original_line" : 98,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 108,
      "pull_request_review_id" : 485041059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-09T14:54:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485661976",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485665973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485665973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why doesn't this fail for `pindex->nHeight == 1` given that we don't index block 0?",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-09-09T14:40:04Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485665973",
      "id" : 485665973,
      "line" : 140,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NTk3Mw==",
      "original_commit_id" : "d28fed9b50c21b5f170b10f10532467989f043e5",
      "original_line" : 118,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 140,
      "pull_request_review_id" : 485041059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-09T14:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485665973",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485669614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485669614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(Why) are we using the tip disk size here?",
      "commit_id" : "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
      "created_at" : "2020-09-09T14:44:49Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485669614",
      "id" : 485669614,
      "line" : 212,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2OTYxNA==",
      "original_commit_id" : "d28fed9b50c21b5f170b10f10532467989f043e5",
      "original_line" : 168,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 212,
      "pull_request_review_id" : 485041059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-09T14:54:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485669614",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
