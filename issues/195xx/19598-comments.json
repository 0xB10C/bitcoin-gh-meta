[
   {
      "author_association" : "NONE",
      "body" : "for those who doesn't have linqpad I adapted the script to be run on dotnetfiddle here\r\n\r\nhttps://dotnetfiddle.net/wT87D2",
      "created_at" : "2020-07-27T13:45:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-664405965",
      "id" : 664405965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NDQwNTk2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-27T13:45:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664405965",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5107375?v=4",
         "events_url" : "https://api.github.com/users/MithrilMan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MithrilMan/followers",
         "following_url" : "https://api.github.com/users/MithrilMan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MithrilMan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MithrilMan",
         "id" : 5107375,
         "login" : "MithrilMan",
         "node_id" : "MDQ6VXNlcjUxMDczNzU=",
         "organizations_url" : "https://api.github.com/users/MithrilMan/orgs",
         "received_events_url" : "https://api.github.com/users/MithrilMan/received_events",
         "repos_url" : "https://api.github.com/users/MithrilMan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MithrilMan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MithrilMan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MithrilMan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "* I think you're right that an O(log n) solution is possible.\r\n\r\n* I don't understand what you mean by \"without having to use a solution like that `mutated` boolean parameter\". That's just an interface question - a different algorithm would still need a way to report malleation back to the caller. It could do that in the same way, or a different way, but that shouldn't depend on the algorithm.\r\n\r\n* The performance of the malleability check in the existing code is absolutely negligible. It's one extra 32-byte comparison (~nanoseconds) added per inner hash (~100s of nanoseconds at the very least). Even if a better solution is available, I don't think we should touch this critical piece of code unless benchmarks show a significant improvement (which I doubt).\r\n\r\n* I can't follow your code, but I think this observation captures is: if the malleability trick is exploited, it must mean that at some level in the tree there is an even number of nodes where the real tree had an odd number - and the last entry was duplicated. This means that at every level we should only check the last two nodes for equality, rather than all pairs of two nodes.\r\n\r\nThis *should* do it (untested):\r\n\r\n```c++\r\nuint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\r\n    bool mutation = false;\r\n    while (hashes.size() > 1) {\r\n        if (mutated && !mutation && hashes.size() % 2 == 0) {\r\n            if (hashes[hashes.size() - 1] == hashes[hashes.size() - 2]) mutation = true;\r\n        }\r\n        if (hashes.size() & 1) {\r\n            hashes.push_back(hashes.back());\r\n        }\r\n        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\r\n        hashes.resize(hashes.size() / 2);\r\n    }\r\n    if (mutated) *mutated = mutation;\r\n    if (hashes.size() == 0) return uint256();\r\n    return hashes[0];\r\n}\r\n```\r\n",
      "created_at" : "2020-09-16T06:55:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-693212439",
      "id" : 693212439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzIxMjQzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T06:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693212439",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, wrt sipa's fourth bullet point.",
      "created_at" : "2020-09-16T07:21:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19598#issuecomment-693224011",
      "id" : 693224011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzIyNDAxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T07:21:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693224011",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/8435003?v=4",
         "events_url" : "https://api.github.com/users/tryphe/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tryphe/followers",
         "following_url" : "https://api.github.com/users/tryphe/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tryphe/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tryphe",
         "id" : 8435003,
         "login" : "tryphe",
         "node_id" : "MDQ6VXNlcjg0MzUwMDM=",
         "organizations_url" : "https://api.github.com/users/tryphe/orgs",
         "received_events_url" : "https://api.github.com/users/tryphe/received_events",
         "repos_url" : "https://api.github.com/users/tryphe/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tryphe/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tryphe/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tryphe"
      }
   }
]
