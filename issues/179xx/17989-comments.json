[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17997 (refactor: Remove mempool global from net by MarcoFalke)\n* #16442 (Serve BIP 157 compact filters by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-23T14:47:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-577712875",
      "id" : 577712875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NzcxMjg3NQ==",
      "updated_at" : "2020-03-02T01:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577712875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK 1b67435bccb8e159130ee8dc558c039cbcc5767c",
      "created_at" : "2020-02-10T16:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584215068",
      "id" : 584215068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDIxNTA2OA==",
      "updated_at" : "2020-02-10T16:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584215068",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Thanks for reviewing. Pushed a commit which removes the tinyformat dependency from `ToString(â¦)`. Please re-review :)",
      "created_at" : "2020-02-10T18:36:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584285257",
      "id" : 584285257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDI4NTI1Nw==",
      "updated_at" : "2020-02-10T18:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584285257",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased! :)",
      "created_at" : "2020-03-09T15:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596594877",
      "id" : 596594877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjU5NDg3Nw==",
      "updated_at" : "2020-03-09T15:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596594877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-03-09T19:15:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596730189",
      "id" : 596730189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjczMDE4OQ==",
      "updated_at" : "2020-03-09T19:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596730189",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased :)",
      "created_at" : "2020-03-09T19:27:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596735801",
      "id" : 596735801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjczNTgwMQ==",
      "updated_at" : "2020-03-09T19:27:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596735801",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this needed and why does it reimplement stuff that could be inherited from `RegTestingSetup`?",
      "commit_id" : "738e3e73f367e19364d7f8b9d8ec0482494e6224",
      "created_at" : "2020-03-10T15:50:40Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127",
      "id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODEyNw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 110,
      "pull_request_review_id" : 372083928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T16:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nstd::unique_ptr<FuzzingSetup> g_fuzzing_setup;\r\n```\r\n\r\nThis should be prefixed with `g_` to convey this is global state that is shared between fuzz calls and might lead to non-determinism.",
      "commit_id" : "738e3e73f367e19364d7f8b9d8ec0482494e6224",
      "created_at" : "2020-03-10T15:54:32Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010",
      "id" : 390421010,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTAxMA==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 185,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372083928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T16:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point! Fixed!",
      "commit_id" : "738e3e73f367e19364d7f8b9d8ec0482494e6224",
      "created_at" : "2020-03-10T16:05:28Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237",
      "id" : 390429237,
      "in_reply_to_id" : 390421010,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyOTIzNw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 185,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372098117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T16:05:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The setup requirements for the fuzzers are a bit different from the requirements for the unit tests. To name one thing I wanted `FastRandomContext().rand64()` instead of `g_insecure_rand_ctx_temp_path.rand32()` to guarantee unique directory names. I ran in to a few such issues until I gave up on inheriting from `RegTestingSetup` which was my initial plan :)",
      "commit_id" : "738e3e73f367e19364d7f8b9d8ec0482494e6224",
      "created_at" : "2020-03-10T16:22:04Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097",
      "id" : 390441097,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTA5Nw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 110,
      "pull_request_review_id" : 372113227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T16:22:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
