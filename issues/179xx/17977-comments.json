[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19601 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 (Alternative to #18071) by JeremyRubin)\n* #19573 ([WIP] Replace unused BIP 9 logic with BIP 8 by luke-jr)\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #19326 (Simplify hash.h interface using Spans by sipa)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #19105 (Add Muhash3072 implementation in Python by fjahr)\n* #18985 (bloom: use Span instead of std::vector for `insert` and `contains` [ZAP3] by jb55)\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n* #18071 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 by JeremyRubin)\n* #16653 (script: add simple signature support (checker/creator) by kallewoof)\n* #13533 ([tests] Reduced number of validations in tx_validationcache_tests by lucash-dev)\n* #13062 (Make script interpreter independent from storage type CScript by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-21T23:47:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-576940388",
      "id" : 576940388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Njk0MDM4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-28T02:30:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/576940388",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369389626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369389626"
         }
      },
      "author_association" : "NONE",
      "body" : "Slightly confusing name... `HashAgainSHA256`?\r\n\r\nI understand why it exists, and I can't think of a much better name... but having something in the name to denote we're hashing with SHA256 might make it a tiny bit more readable.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T06:35:06Z",
      "diff_hunk" : "@@ -1189,7 +1358,14 @@ uint256 GetPrevoutHash(const T& txTo)\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 HashAgain(const uint256& hash)\n+{\n+    uint256 result;\n+    CSHA256().Write(hash.begin(), 32).Finalize(result.begin());\n+    return result;\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369389626",
      "id" : 369389626,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4OTYyNg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 1369,
      "original_position" : 314,
      "original_start_line" : 1364,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 346369769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369389626",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/11246316?v=4",
         "events_url" : "https://api.github.com/users/junderw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/junderw/followers",
         "following_url" : "https://api.github.com/users/junderw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/junderw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/junderw",
         "id" : 11246316,
         "login" : "junderw",
         "node_id" : "MDQ6VXNlcjExMjQ2MzE2",
         "organizations_url" : "https://api.github.com/users/junderw/orgs",
         "received_events_url" : "https://api.github.com/users/junderw/received_events",
         "repos_url" : "https://api.github.com/users/junderw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/junderw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/junderw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/junderw"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369513725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369513725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`s/TESTDUMMY/TAPROOT/` here and in testnet (regtest is fine). Also think you want to set timeout to something less expired.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T11:45:32Z",
      "diff_hunk" : "@@ -83,6 +83,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Deployment of Taproot\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369513725",
      "id" : 369513725,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxMzcyNQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 88,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 346527063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369513725",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369593203"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    DEPLOYMENT_TAPROOT, // Deployment of BIP-340/BIP-341/BIP-342\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:31:49Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_TAPROOT, // Deployment of bip-taproot/bip-tapscript/bip-schnorr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593203",
      "id" : 369593203,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MzIwMw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/params.h",
      "position" : null,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369593203",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369593612"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n/** Return a CHashWriter primed for computing BIP-340 compatible tagged hashes.\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:32:25Z",
      "diff_hunk" : "@@ -204,4 +218,12 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n+/** Return a CHashWriter primed for computing bip-schnorr compatible tagged hashes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593612",
      "id" : 369593612,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MzYxMg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 221,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369593612",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369597072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369597072"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n * BIP-340\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:38:17Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369597072",
      "id" : 369597072,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NzA3Mg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369597072",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601055"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        \"\"\"Construct a BIP-340 compatible Schnorr signature with this key.\"\"\"\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:45:12Z",
      "diff_hunk" : "@@ -384,3 +453,33 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+    def sign_schnorr(self, msg):\n+        \"\"\"Construct a bip-schnorr compatible signature with this key.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601055",
      "id" : 369601055,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMTA1NQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 458,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601055",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601369"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        kp = int.from_bytes(TaggedHash(\"BIP340Derive\", x.to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\r\n```\r\n\r\nNot sure if this breaks anything... :confused: ",
      "commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "created_at" : "2020-01-22T14:45:44Z",
      "diff_hunk" : "@@ -384,3 +453,33 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+    def sign_schnorr(self, msg):\n+        \"\"\"Construct a bip-schnorr compatible signature with this key.\"\"\"\n+        assert(self.valid)\n+        assert(self.compressed)\n+        assert(len(msg) == 32)\n+        x = self.secret\n+        pk = self.get_pubkey()\n+        if not pk.is_positive:\n+            x = SECP256K1_ORDER - x\n+        kp = int.from_bytes(TaggedHash(\"BIPSchnorrDerive\", x.to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601369",
      "id" : 369601369,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMTM2OQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_position" : 134,
      "path" : "test/functional/test_framework/key.py",
      "position" : 134,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "updated_at" : "2020-01-22T14:48:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601369",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601564"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        e = int.from_bytes(TaggedHash(\"BIP340\", R[0].to_bytes(32, 'big') + pk.get_xonly_bytes() + msg), 'big') % SECP256K1_ORDER\r\n```",
      "commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "created_at" : "2020-01-22T14:46:02Z",
      "diff_hunk" : "@@ -384,3 +453,33 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+    def sign_schnorr(self, msg):\n+        \"\"\"Construct a bip-schnorr compatible signature with this key.\"\"\"\n+        assert(self.valid)\n+        assert(self.compressed)\n+        assert(len(msg) == 32)\n+        x = self.secret\n+        pk = self.get_pubkey()\n+        if not pk.is_positive:\n+            x = SECP256K1_ORDER - x\n+        kp = int.from_bytes(TaggedHash(\"BIPSchnorrDerive\", x.to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\n+        assert(kp != 0)\n+        R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, kp)]))\n+        k = kp if jacobi_symbol(R[1], SECP256K1_FIELD_SIZE) == 1 else SECP256K1_ORDER - kp\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", R[0].to_bytes(32, 'big') + pk.get_xonly_bytes() + msg), 'big') % SECP256K1_ORDER",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601564",
      "id" : 369601564,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMTU2NA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_position" : 138,
      "path" : "test/functional/test_framework/key.py",
      "position" : 138,
      "pull_request_review_id" : 346630927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "updated_at" : "2020-01-22T14:48:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369601564",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369609545"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n * (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n```\r\n\r\nThis link is broken until the [BIP PR](https://github.com/bitcoin/bips/pull/876/) is merged.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:58:35Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609545",
      "id" : 369609545,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwOTU0NQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369609545",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369609932"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n *       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bip340 is used\r\n```\r\n\r\nNot sure if this breaks anything? :confused: ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T14:59:12Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds a parsed Schnorr signature.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage, transmission, or\n+ *  comparison, use the `secp256k1_schnorrsig_serialize` and\n+ *  `secp256k1_schnorrsig_parse` functions.\n+ */\n+typedef struct {\n+    unsigned char data[64];\n+} secp256k1_schnorrsig;\n+\n+/** Serialize a Schnorr signature.\n+ *\n+ *  Returns: 1\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:   out64: pointer to a 64-byte array to store the serialized signature\n+ *  In:      sig: pointer to the signature\n+ *\n+ *  See secp256k1_schnorrsig_parse for details about the encoding.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_serialize(\n+    const secp256k1_context* ctx,\n+    unsigned char *out64,\n+    const secp256k1_schnorrsig* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a Schnorr signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:     sig: pointer to a signature object\n+ *  In:     in64: pointer to the 64-byte signature to be parsed\n+ *\n+ * The signature is serialized in the form R||s, where R is a 32-byte public\n+ * key (X coordinate only; the Y coordinate is considered to be the unique\n+ * Y coordinate satisfying the curve equation that is square)\n+ * and s is a 32-byte big-endian scalar.\n+ *\n+ * After the call, sig will always be initialized. If parsing failed or the\n+ * encoded numbers are out of range, signature validation with it is\n+ * guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_schnorrsig* sig,\n+    const unsigned char *in64\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Create a Schnorr signature.\n+ *\n+ * Returns 1 on success, 0 on failure.\n+ *  Args:    ctx: pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig: pointer to the returned signature (cannot be NULL)\n+ *  In:    msg32: the 32-byte message being signed (cannot be NULL)\n+ *        seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bipschnorr is used",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609932",
      "id" : 369609932,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwOTkzMg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369609932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610163"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n * SHA256 to SHA256(\"BIP-340\")||SHA256(\"BIP-340\"). */\r\n```",
      "commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "created_at" : "2020-01-22T14:59:34Z",
      "diff_hunk" : "@@ -0,0 +1,358 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorr\")||SHA256(\"BIPSchnorr\"). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610163",
      "id" : 369610163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDE2Mw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_position" : 33,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : 33,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "updated_at" : "2020-01-22T15:01:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610163",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610577"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        noncefp = secp256k1_nonce_function_bip-340;\r\n```\r\n\r\nNot sure if this breaks anything :confused: ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T15:00:13Z",
      "diff_hunk" : "@@ -0,0 +1,358 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorr\")||SHA256(\"BIPSchnorr\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x048d9a59ul;\n+    sha->s[1] = 0xfe39fb05ul;\n+    sha->s[2] = 0x28479648ul;\n+    sha->s[3] = 0xe4a660f9ul;\n+    sha->s[4] = 0x814b9e66ul;\n+    sha->s[5] = 0x0469e801ul;\n+    sha->s[6] = 0x83909280ul;\n+    sha->s[7] = 0xb329e454ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, secp256k1_schnorrsig *sig, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, void *ndata) {\n+    secp256k1_scalar x;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej pkj;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    int overflow;\n+    unsigned char buf[32];\n+    unsigned char seckey_tmp[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bipschnorr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610577",
      "id" : 369610577,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDU3Nw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : null,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610577",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610885"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    if (!noncefp(buf, msg32, seckey_tmp, (unsigned char *) \"BIP340Derive\", (void*)ndata, 0)) {\r\n```\r\nNot sure if this breaks anything :confused:",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T15:00:44Z",
      "diff_hunk" : "@@ -0,0 +1,358 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorr\")||SHA256(\"BIPSchnorr\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x048d9a59ul;\n+    sha->s[1] = 0xfe39fb05ul;\n+    sha->s[2] = 0x28479648ul;\n+    sha->s[3] = 0xe4a660f9ul;\n+    sha->s[4] = 0x814b9e66ul;\n+    sha->s[5] = 0x0469e801ul;\n+    sha->s[6] = 0x83909280ul;\n+    sha->s[7] = 0xb329e454ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, secp256k1_schnorrsig *sig, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, void *ndata) {\n+    secp256k1_scalar x;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej pkj;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    int overflow;\n+    unsigned char buf[32];\n+    unsigned char seckey_tmp[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bipschnorr;\n+    }\n+    secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (overflow || secp256k1_scalar_is_zero(&x)) {\n+        memset(sig, 0, sizeof(*sig));\n+        return 0;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pkj, &x);\n+    secp256k1_ge_set_gej(&pk, &pkj);\n+\n+    /* Because we are signing for a x-only pubkey, the secret key is negated\n+     * before signing if the point corresponding to the secret key does not\n+     * have a square Y. */\n+    if (!secp256k1_fe_is_quad_var(&pk.y)) {\n+        secp256k1_scalar_negate(&x, &x);\n+    }\n+\n+    secp256k1_scalar_get_b32(seckey_tmp, &x);\n+    if (!noncefp(buf, msg32, seckey_tmp, (unsigned char *) \"BIPSchnorrDerive\", (void*)ndata, 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610885",
      "id" : 369610885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMDg4NQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : null,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369610885",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369611161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369611161"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        e = int.from_bytes(TaggedHash(\"BIP-340\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER\r\n```",
      "commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "created_at" : "2020-01-22T15:01:07Z",
      "diff_hunk" : "@@ -322,6 +353,40 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n             return False\n         return True\n \n+    def verify_schnorr(self, sig, msg):\n+        assert(len(msg) == 32)\n+        assert(len(sig) == 64)\n+        assert(self.valid)\n+        assert(self.compressed)\n+        r = int.from_bytes(sig[0:32], 'big')\n+        if r >= SECP256K1_FIELD_SIZE:\n+            return False\n+        s = int.from_bytes(sig[32:64], 'big')\n+        if s >= SECP256K1_ORDER:\n+            return False\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369611161",
      "id" : 369611161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMTE2MQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_position" : 83,
      "path" : "test/functional/test_framework/key.py",
      "position" : 83,
      "pull_request_review_id" : 346652110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "updated_at" : "2020-01-22T15:02:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369611161",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369630927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369630927"
         }
      },
      "author_association" : "NONE",
      "body" : "Is there a name for this condition that can be explained with a function name or at least a comment?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T15:32:38Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369630927",
      "id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMDkyNw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346679982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369630927",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369632680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369632680"
         }
      },
      "author_association" : "NONE",
      "body" : "why nested conditional here, but not nested above (line 240)?  both branches have \"stack_size >= 2\" as well. without understanding what any of this means, would it be clearer to write like this, removing the duplication and nesting?\r\n\r\n```\r\n// precondition for taproot (?)\r\nif (stack_size < 2) { return }\r\n\r\nif (!stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\r\n// whatever this is\r\n\r\n} else if ((stack[stack_size - 1][0] & 0xfe) == 0xc0)) {\r\n// script path spend\r\n\r\n}\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T15:35:39Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend\n+                if ((stack[stack_size - 1][0] & 0xfe) == 0xc0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369632680",
      "id" : 369632680,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMjY4MA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 245,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346682415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369632680",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369656551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369656551"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see the problem, personally.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T16:13:54Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369656551",
      "id" : 369656551,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NjU1MQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346713685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369656551",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MaxHillebrand A few overall comments:\r\n* I don't think all references to (bip-)taproot/tapscript/schnorr should be changed to the BIP numbers; in some cases maybe we should just drop the \"bip-\" prefix (e.g. I think talking about a \"taproot spend\" is more clear than \"bip341 spend\").\r\n* All changes in the src/secp256k1 directory should go to https://github.com/bitcoin-core/secp256k1/pull/558 instead (the src/secp256k1 is a git subtree imported from there).\r\n* The \"BIPSchnorr\" and \"BIPSchnorrDerive\" tagged hash tags are part of the spec, which I don't think should be changed.",
      "created_at" : "2020-01-22T17:25:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-577295396",
      "id" : 577295396,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NzI5NTM5Ng==",
      "updated_at" : "2020-01-22T17:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577295396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369698012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369698012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@skwp I'll add some comments to clarify, but what you're suggesting would be incorrect.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T17:26:15Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend\n+                if ((stack[stack_size - 1][0] & 0xfe) == 0xc0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369698012",
      "id" : 369698012,
      "in_reply_to_id" : 369632680,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5ODAxMg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 245,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346767800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369698012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks @sipa, I agree with your comments. \r\nI have deleted my suggestions to change the tagged hashes, the others are still open. Please ACK/NACK and commit what you think is correct.",
      "created_at" : "2020-01-22T17:34:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-577299155",
      "id" : 577299155,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NzI5OTE1NQ==",
      "updated_at" : "2020-01-22T17:34:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577299155",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369704810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369704810"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks @sipa. I'm not trying to nitpick, rather looking at ways to lower the barrier for reviewers and thus help get more eyes on things. I find that complex conditionals with lots of low level details can make bugs hard to spot and make it daunting for people new to the source to contribute. There might be good reason for the style employed throughout the code and we probably can't change everything overnight, but even things like magic numbers (0xfe?? 0xc0??) everywhere makes it really hard to reason about, imho. Seems like we can make the source easier to read as we go with named conditionals, constants, etc. ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T17:39:38Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend\n+                if ((stack[stack_size - 1][0] & 0xfe) == 0xc0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369704810",
      "id" : 369704810,
      "in_reply_to_id" : 369632680,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwNDgxMA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 245,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346776320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369704810",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369708533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369708533"
         }
      },
      "author_association" : "NONE",
      "body" : "hey kalle, please see my comment below to pieter. I'm seeing if people are open to using a more consistent single level of abstraction to make the source easier to read.\r\n\r\ne.g. this can be evaluated by a newb (ignore if I got the concepts wrong, I'm trying to illustrate a more literate / single level of abstraction style as per http://principles-wiki.net/principles:single_level_of_abstraction)\r\n\r\n```\r\nif (payToTapRoot)\r\n  if annexOnStack\r\n    stack_size--; // ignore annex\r\n  else \r\n    if (OpWhateverOnStack)\r\n      checkWhateverConditionWithLoop\r\n    end\r\n```\r\n\r\nAgain I could have totally gotten the details wrong but if the program looked like that at a single level of abstraction, with magic numbers given names and conditionals given names, many more people could actually participate in the PR process and grok what's going on.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T17:47:18Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369708533",
      "id" : 369708533,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwODUzMw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346781045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369708533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369711202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369711202"
         }
      },
      "author_association" : "NONE",
      "body" : "\r\nIn fact I see that these magic numbers are already given names elsewhere. Can we use them here? This is way more readable and expresses intent\r\n\r\n```\r\n(stack[stack_size - 1][0] & TAPROOT_LEAF_MASK) == TAPROOT_LEAF_TAPSCRIPT\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T17:52:38Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend\n+                if ((stack[stack_size - 1][0] & 0xfe) == 0xc0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369711202",
      "id" : 369711202,
      "in_reply_to_id" : 369632680,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMTIwMg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 245,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346784383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369711202",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369764799"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369764799"
         }
      },
      "author_association" : "NONE",
      "body" : "taghash is written twice. Is this intentional?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T19:42:07Z",
      "diff_hunk" : "@@ -77,3 +78,12 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());\n+    writer << taghash << taghash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369764799",
      "id" : 369764799,
      "line" : 87,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NDc5OQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 87,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : 18,
      "pull_request_review_id" : 346852688,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369764799",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60033096?v=4",
         "events_url" : "https://api.github.com/users/constcast-glitch/events{/privacy}",
         "followers_url" : "https://api.github.com/users/constcast-glitch/followers",
         "following_url" : "https://api.github.com/users/constcast-glitch/following{/other_user}",
         "gists_url" : "https://api.github.com/users/constcast-glitch/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/constcast-glitch",
         "id" : 60033096,
         "login" : "constcast-glitch",
         "node_id" : "MDQ6VXNlcjYwMDMzMDk2",
         "organizations_url" : "https://api.github.com/users/constcast-glitch/orgs",
         "received_events_url" : "https://api.github.com/users/constcast-glitch/received_events",
         "repos_url" : "https://api.github.com/users/constcast-glitch/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/constcast-glitch/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/constcast-glitch/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/constcast-glitch"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369766227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369766227"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, please read the spec.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T19:45:02Z",
      "diff_hunk" : "@@ -77,3 +78,12 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());\n+    writer << taghash << taghash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369766227",
      "id" : 369766227,
      "in_reply_to_id" : 369764799,
      "line" : 87,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjIyNw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 87,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : 18,
      "pull_request_review_id" : 346854522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369766227",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369768378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369768378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `reinterpret_cast<unsigned char*>(const_cast<char*>(`?\r\n\r\nThe `const_cast` could be removed with C++17 and a switch to rvalue references.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T19:49:33Z",
      "diff_hunk" : "@@ -77,3 +78,12 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369768378",
      "id" : 369768378,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2ODM3OA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 86,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 346857429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369768378",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369778313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369778313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should just be `(const char*)tag.data`. We don't usually use C++ style casts for primitive types (they're all equivalent anyway, and the C++ style ones are very verbose).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:11:10Z",
      "diff_hunk" : "@@ -77,3 +78,12 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369778313",
      "id" : 369778313,
      "in_reply_to_id" : 369768378,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3ODMxMw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 86,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 346870366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369778313",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed into `SHA256Uint256`, and moved to hash.{h,cpp}.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:12:57Z",
      "diff_hunk" : "@@ -1189,7 +1358,14 @@ uint256 GetPrevoutHash(const T& txTo)\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 HashAgain(const uint256& hash)\n+{\n+    uint256 result;\n+    CSHA256().Write(hash.begin(), 32).Finalize(result.begin());\n+    return result;\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779079",
      "id" : 369779079,
      "in_reply_to_id" : 369389626,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTA3OQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 1369,
      "original_position" : 314,
      "original_start_line" : 1364,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 346871432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779079",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice catch, fixed. I don't know what \"less expired\" means; all dates in the past are equally expired.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:13:32Z",
      "diff_hunk" : "@@ -83,6 +83,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Deployment of Taproot\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779340",
      "id" : 369779340,
      "in_reply_to_id" : 369513725,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTM0MA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 88,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 346871779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:13:41Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_TAPROOT, // Deployment of bip-taproot/bip-tapscript/bip-schnorr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779414",
      "id" : 369779414,
      "in_reply_to_id" : 369593203,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTQxNA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/params.h",
      "position" : null,
      "pull_request_review_id" : 346871873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779414",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779485"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:13:50Z",
      "diff_hunk" : "@@ -204,4 +218,12 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n+/** Return a CHashWriter primed for computing bip-schnorr compatible tagged hashes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779485",
      "id" : 369779485,
      "in_reply_to_id" : 369593612,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTQ4NQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 221,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 346871950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779485",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:14:18Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779689",
      "id" : 369779689,
      "in_reply_to_id" : 369597072,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTY4OQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346872218,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779689",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:14:28Z",
      "diff_hunk" : "@@ -384,3 +453,33 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+    def sign_schnorr(self, msg):\n+        \"\"\"Construct a bip-schnorr compatible signature with this key.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779758",
      "id" : 369779758,
      "in_reply_to_id" : 369601055,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTc1OA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 458,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 346872310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779758",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:14:45Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779870",
      "id" : 369779870,
      "in_reply_to_id" : 369609545,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTg3MA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346872452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369779870",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780016"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:15:08Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds a parsed Schnorr signature.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage, transmission, or\n+ *  comparison, use the `secp256k1_schnorrsig_serialize` and\n+ *  `secp256k1_schnorrsig_parse` functions.\n+ */\n+typedef struct {\n+    unsigned char data[64];\n+} secp256k1_schnorrsig;\n+\n+/** Serialize a Schnorr signature.\n+ *\n+ *  Returns: 1\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:   out64: pointer to a 64-byte array to store the serialized signature\n+ *  In:      sig: pointer to the signature\n+ *\n+ *  See secp256k1_schnorrsig_parse for details about the encoding.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_serialize(\n+    const secp256k1_context* ctx,\n+    unsigned char *out64,\n+    const secp256k1_schnorrsig* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a Schnorr signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:     sig: pointer to a signature object\n+ *  In:     in64: pointer to the 64-byte signature to be parsed\n+ *\n+ * The signature is serialized in the form R||s, where R is a 32-byte public\n+ * key (X coordinate only; the Y coordinate is considered to be the unique\n+ * Y coordinate satisfying the curve equation that is square)\n+ * and s is a 32-byte big-endian scalar.\n+ *\n+ * After the call, sig will always be initialized. If parsing failed or the\n+ * encoded numbers are out of range, signature validation with it is\n+ * guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_schnorrsig* sig,\n+    const unsigned char *in64\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Create a Schnorr signature.\n+ *\n+ * Returns 1 on success, 0 on failure.\n+ *  Args:    ctx: pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig: pointer to the returned signature (cannot be NULL)\n+ *  In:    msg32: the 32-byte message being signed (cannot be NULL)\n+ *        seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bipschnorr is used",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780016",
      "id" : 369780016,
      "in_reply_to_id" : 369609932,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDAxNg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346872658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780016",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This belongs in https://github.com/bitcoin-core/secp256k1/pull/558. Also, that would be invalid C code.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:15:30Z",
      "diff_hunk" : "@@ -0,0 +1,358 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorr\")||SHA256(\"BIPSchnorr\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x048d9a59ul;\n+    sha->s[1] = 0xfe39fb05ul;\n+    sha->s[2] = 0x28479648ul;\n+    sha->s[3] = 0xe4a660f9ul;\n+    sha->s[4] = 0x814b9e66ul;\n+    sha->s[5] = 0x0469e801ul;\n+    sha->s[6] = 0x83909280ul;\n+    sha->s[7] = 0xb329e454ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, secp256k1_schnorrsig *sig, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, void *ndata) {\n+    secp256k1_scalar x;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej pkj;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    int overflow;\n+    unsigned char buf[32];\n+    unsigned char seckey_tmp[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bipschnorr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780198",
      "id" : 369780198,
      "in_reply_to_id" : 369610577,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE5OA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : null,
      "pull_request_review_id" : 346872915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780198",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780376"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n```suggestion\r\n    DEPLOYMENT_TAPROOT, // Deployment of Taproot (BIPs 340-342)\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:15:52Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_TAPROOT, // Deployment of taproot (BIPs 340-342)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780376",
      "id" : 369780376,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDM3Ng==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/params.h",
      "position" : null,
      "pull_request_review_id" : 346873146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780376",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780392"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changing that would violate the spec.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:15:54Z",
      "diff_hunk" : "@@ -0,0 +1,358 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+int secp256k1_schnorrsig_serialize(const secp256k1_context* ctx, unsigned char *out64, const secp256k1_schnorrsig* sig) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(out64 != NULL);\n+    ARG_CHECK(sig != NULL);\n+    memcpy(out64, sig->data, 64);\n+    return 1;\n+}\n+\n+int secp256k1_schnorrsig_parse(const secp256k1_context* ctx, secp256k1_schnorrsig* sig, const unsigned char *in64) {\n+    (void) ctx;\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(in64 != NULL);\n+    memcpy(sig->data, in64, 64);\n+    return 1;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorr\")||SHA256(\"BIPSchnorr\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x048d9a59ul;\n+    sha->s[1] = 0xfe39fb05ul;\n+    sha->s[2] = 0x28479648ul;\n+    sha->s[3] = 0xe4a660f9ul;\n+    sha->s[4] = 0x814b9e66ul;\n+    sha->s[5] = 0x0469e801ul;\n+    sha->s[6] = 0x83909280ul;\n+    sha->s[7] = 0xb329e454ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, secp256k1_schnorrsig *sig, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, void *ndata) {\n+    secp256k1_scalar x;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej pkj;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    int overflow;\n+    unsigned char buf[32];\n+    unsigned char seckey_tmp[32];\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(seckey != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bipschnorr;\n+    }\n+    secp256k1_scalar_set_b32(&x, seckey, &overflow);\n+    /* Fail if the secret key is invalid. */\n+    if (overflow || secp256k1_scalar_is_zero(&x)) {\n+        memset(sig, 0, sizeof(*sig));\n+        return 0;\n+    }\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pkj, &x);\n+    secp256k1_ge_set_gej(&pk, &pkj);\n+\n+    /* Because we are signing for a x-only pubkey, the secret key is negated\n+     * before signing if the point corresponding to the secret key does not\n+     * have a square Y. */\n+    if (!secp256k1_fe_is_quad_var(&pk.y)) {\n+        secp256k1_scalar_negate(&x, &x);\n+    }\n+\n+    secp256k1_scalar_get_b32(seckey_tmp, &x);\n+    if (!noncefp(buf, msg32, seckey_tmp, (unsigned char *) \"BIPSchnorrDerive\", (void*)ndata, 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780392",
      "id" : 369780392,
      "in_reply_to_id" : 369610885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDM5Mg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : null,
      "pull_request_review_id" : 346873165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780392",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added some comments. Better now?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:16:09Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780523",
      "id" : 369780523,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDUyMw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346873333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780523",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780765"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n```suggestion\r\n    // Making unknown Taproot leaf versions non-standard\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:16:37Z",
      "diff_hunk" : "@@ -114,32 +120,98 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot validation\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown taproot leaf versions non-standard",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780765",
      "id" : 369780765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDc2NQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 128,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 346873608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369780765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781034"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n\r\n```suggestion\r\n    // Taproot\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:17:15Z",
      "diff_hunk" : "@@ -138,6 +138,9 @@ const char* GetOpName(opcodetype opcode)\n     case OP_NOP9                   : return \"OP_NOP9\";\n     case OP_NOP10                  : return \"OP_NOP10\";\n \n+    // taproot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781034",
      "id" : 369781034,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MTAzNA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 141,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : null,
      "pull_request_review_id" : 346873945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781034",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781217"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n```suggestion\r\n    // Taproot\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:17:39Z",
      "diff_hunk" : "@@ -187,6 +198,9 @@ enum opcodetype\n     OP_NOP9 = 0xb8,\n     OP_NOP10 = 0xb9,\n \n+    // taproot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781217",
      "id" : 369781217,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MTIxNw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 201,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 346874197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781217",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed it to use the constants, that's obviously the better way.\r\n\r\nThe reason why the annex does not use a nested conditional is because it's a single `if` statement that tests the presence of the annex (as in: both conditions are needed to have an annex). The tapscript conditional is split up into the logical \"this is a script path spending\" condition and the \"this is a leaf version 0xc0 script\".",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:18:04Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend\n+                if ((stack[stack_size - 1][0] & 0xfe) == 0xc0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781409",
      "id" : 369781409,
      "in_reply_to_id" : 369632680,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MTQwOQ==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 245,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346874459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781409",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781835"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781835"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n```suggestion\r\n                # Don't use 32-byte v1 witness (used by Taproot)\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:18:59Z",
      "diff_hunk" : "@@ -1364,7 +1365,11 @@ def test_segwit_versions(self):\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n         for version in list(range(OP_1, OP_16 + 1)) + [OP_0]:\n             # First try to spend to a future version segwit script_pubkey.\n-            script_pubkey = CScript([CScriptOp(version), witness_hash])\n+            if version == OP_1:\n+                # Don't use 32-byte v1 witness (used by taproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781835",
      "id" : 369781835,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MTgzNQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1369,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "test/functional/p2p_segwit.py",
      "position" : null,
      "pull_request_review_id" : 346874977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369781835",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369784302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369784302"
         }
      },
      "author_association" : "NONE",
      "body" : "Unify Taproot capitalization in comments.\r\n```suggestion\r\n# Test Taproot softfork.\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:24:19Z",
      "diff_hunk" : "@@ -0,0 +1,600 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test taproot softfork.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369784302",
      "id" : 369784302,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NDMwMg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 346878131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369784302",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786605"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369786605"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Perhaps more readable if we avoid magic numbers with something like:\r\n```c++\r\nstatic_assert(SIGHASH_TAPOUTPUTMASK < SIGHASH_TAPINPUTMASK);\r\nif ((hash_type > SIGHASH_TAPOUTPUTMASK) && (hash_type <= SIGHASH_TAPINPUTMASK || hash_type > (SIGHASH_TAPINPUTMASK | SIGHASH_TAPOUTPUTMASK))) return false;\r\n```\r\n\r\nAlternatively, a comment could be helpful.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:29:59Z",
      "diff_hunk" : "@@ -1209,27 +1378,137 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    assert(in_pos < tx_to.vin.size());\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+    assert(cache.ready && cache.m_amounts_spent_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    uint8_t epoch = 0;\n+    ss << epoch;\n+\n+    // Hash type\n+    if ((hash_type > 3) && (hash_type < 0x81 || hash_type > 0x83)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786605",
      "id" : 369786605,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NjYwNQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1449,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 346881218,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369786605",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369786833"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: is it clearer to use or comment e.g. `WITNESS_V0`, and `TAPROOT` below?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:30:32Z",
      "diff_hunk" : "@@ -1209,27 +1378,137 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    assert(in_pos < tx_to.vin.size());\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+    assert(cache.ready && cache.m_amounts_spent_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    uint8_t epoch = 0;\n+    ss << epoch;\n+\n+    // Hash type\n+    if ((hash_type > 3) && (hash_type < 0x81 || hash_type > 0x83)) return false;\n+    ss << hash_type;\n+    const uint8_t input_type = hash_type & SIGHASH_TAPINPUTMASK;\n+    const uint8_t output_type = hash_type & SIGHASH_TAPOUTPUTMASK;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+\n+    if (input_type == SIGHASH_TAPDEFAULT) {\n+        ss << cache.m_prevouts_hash;\n+        ss << cache.m_amounts_spent_hash;\n+        ss << cache.m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_TAPDEFAULT || output_type == SIGHASH_ALL) {\n+        ss << cache.m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const CScript& scriptPubKey = cache.m_spent_outputs[in_pos].scriptPubKey;\n+    uint8_t spend_type = 0;\n+    assert(execdata.m_annex_init);\n+    if (execdata.m_annex_present) {\n+        spend_type |= 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786833",
      "id" : 369786833,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NjgzMw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1472,
      "original_position" : 419,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 346881537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369786833",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791114"
         }
      },
      "author_association" : "NONE",
      "body" : "I have suggested the changes [there](https://github.com/bitcoin-core/secp256k1/pull/558#pullrequestreview-346886721)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:40:39Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#ifndef SECP256K1_SCHNORRSIG_H\n+#define SECP256K1_SCHNORRSIG_H\n+\n+#include \"secp256k1.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/** This module implements a variant of Schnorr signatures compliant with\n+ * BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki).\n+ */\n+\n+/** Opaque data structure that holds a parsed Schnorr signature.\n+ *\n+ *  The exact representation of data inside is implementation defined and not\n+ *  guaranteed to be portable between different platforms or versions. It is\n+ *  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n+ *  If you need to convert to a format suitable for storage, transmission, or\n+ *  comparison, use the `secp256k1_schnorrsig_serialize` and\n+ *  `secp256k1_schnorrsig_parse` functions.\n+ */\n+typedef struct {\n+    unsigned char data[64];\n+} secp256k1_schnorrsig;\n+\n+/** Serialize a Schnorr signature.\n+ *\n+ *  Returns: 1\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:   out64: pointer to a 64-byte array to store the serialized signature\n+ *  In:      sig: pointer to the signature\n+ *\n+ *  See secp256k1_schnorrsig_parse for details about the encoding.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_serialize(\n+    const secp256k1_context* ctx,\n+    unsigned char *out64,\n+    const secp256k1_schnorrsig* sig\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Parse a Schnorr signature.\n+ *\n+ *  Returns: 1 when the signature could be parsed, 0 otherwise.\n+ *  Args:    ctx: a secp256k1 context object\n+ *  Out:     sig: pointer to a signature object\n+ *  In:     in64: pointer to the 64-byte signature to be parsed\n+ *\n+ * The signature is serialized in the form R||s, where R is a 32-byte public\n+ * key (X coordinate only; the Y coordinate is considered to be the unique\n+ * Y coordinate satisfying the curve equation that is square)\n+ * and s is a 32-byte big-endian scalar.\n+ *\n+ * After the call, sig will always be initialized. If parsing failed or the\n+ * encoded numbers are out of range, signature validation with it is\n+ * guaranteed to fail for every message and public key.\n+ */\n+SECP256K1_API int secp256k1_schnorrsig_parse(\n+    const secp256k1_context* ctx,\n+    secp256k1_schnorrsig* sig,\n+    const unsigned char *in64\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n+/** Create a Schnorr signature.\n+ *\n+ * Returns 1 on success, 0 on failure.\n+ *  Args:    ctx: pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig: pointer to the returned signature (cannot be NULL)\n+ *  In:    msg32: the 32-byte message being signed (cannot be NULL)\n+ *        seckey: pointer to a 32-byte secret key (cannot be NULL)\n+ *       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bipschnorr is used",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791114",
      "id" : 369791114,
      "in_reply_to_id" : 369609932,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MTExNA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/secp256k1/include/secp256k1_schnorrsig.h",
      "position" : null,
      "pull_request_review_id" : 346887117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791114",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791691"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n                    // Leaf version 0xc0 (aka Tapscript, see BIP 342)\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:41:54Z",
      "diff_hunk" : "@@ -231,6 +231,31 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex if present\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend (2 or more stack elements are removing optional annex)\n+                if ((stack[stack_size - 1][0] & TAPROOT_LEAF_MASK) == TAPROOT_LEAF_TAPSCRIPT) {\n+                    // Leaf version 0xc0 (aka tapscript, see BIP 342)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791691",
      "id" : 369791691,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MTY5MQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 246,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791691",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791787"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n/** The maximum size of each witness stack item in a standard Tapscript */\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:42:10Z",
      "diff_hunk" : "@@ -40,6 +40,8 @@ static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n /** The maximum size of each witness stack item in a standard P2WSH script */\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of each witness stack item in a standard tapscript */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791787",
      "id" : 369791787,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MTc4Nw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 43,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/policy/policy.h",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791871"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    // Making unknown public key versions in Tapscript non-standard\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:42:23Z",
      "diff_hunk" : "@@ -114,32 +120,98 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot validation\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions in tapscript non-standard",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791871",
      "id" : 369791871,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MTg3MQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 139,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369791871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792013"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n// Validation weight per passing signature (Tapscript only).\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:42:46Z",
      "diff_hunk" : "@@ -44,6 +44,17 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n // SEQUENCE_FINAL).\n static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;\n \n+// Tag for input annex. If there are at least two witness elements for a transaction input,\n+// and the first byte of the last element is 0x50, this last element is called annex, and\n+// has meanings independent of the script\n+static const unsigned int ANNEX_TAG = 0x50;\n+\n+// Validation weight per passing signature (tapscript only).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792013",
      "id" : 369792013,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MjAxMw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 52,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792013",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792104"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n// How much weight budget is added to the witness size (Tapscript only).\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:42:58Z",
      "diff_hunk" : "@@ -44,6 +44,17 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n // SEQUENCE_FINAL).\n static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;\n \n+// Tag for input annex. If there are at least two witness elements for a transaction input,\n+// and the first byte of the last element is 0x50, this last element is called annex, and\n+// has meanings independent of the script\n+static const unsigned int ANNEX_TAG = 0x50;\n+\n+// Validation weight per passing signature (tapscript only).\n+static constexpr uint64_t VALIDATION_WEIGHT_PER_SIGOP_PASSED = 50;\n+\n+// How much weight budget is added to the witness size (tapscript only).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792104",
      "id" : 369792104,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MjEwNA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 55,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792104",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792258"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n# Tapscript\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:43:20Z",
      "diff_hunk" : "@@ -223,11 +229,8 @@ def __new__(cls, n):\n OP_NOP9 = CScriptOp(0xb8)\n OP_NOP10 = CScriptOp(0xb9)\n \n-# template matching params\n-OP_SMALLINTEGER = CScriptOp(0xfa)\n-OP_PUBKEYS = CScriptOp(0xfb)\n-OP_PUBKEYHASH = CScriptOp(0xfd)\n-OP_PUBKEY = CScriptOp(0xfe)\n+# tapscript",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792258",
      "id" : 369792258,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5MjI1OA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 232,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/script.py",
      "position" : null,
      "pull_request_review_id" : 346887828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369792258",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/30683012?v=4",
         "events_url" : "https://api.github.com/users/MaxHillebrand/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MaxHillebrand/followers",
         "following_url" : "https://api.github.com/users/MaxHillebrand/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MaxHillebrand/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MaxHillebrand",
         "id" : 30683012,
         "login" : "MaxHillebrand",
         "node_id" : "MDQ6VXNlcjMwNjgzMDEy",
         "organizations_url" : "https://api.github.com/users/MaxHillebrand/orgs",
         "received_events_url" : "https://api.github.com/users/MaxHillebrand/received_events",
         "repos_url" : "https://api.github.com/users/MaxHillebrand/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MaxHillebrand/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MaxHillebrand/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MaxHillebrand"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369798203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~nit: `stack.back()`~~\r\n\r\nNeglected to examine the full context.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:56:18Z",
      "diff_hunk" : "@@ -231,6 +231,31 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798203",
      "id" : 369798203,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5ODIwMw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346896145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369798203",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369798364"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, that would be incorrect.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T20:56:38Z",
      "diff_hunk" : "@@ -231,6 +231,31 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798364",
      "id" : 369798364,
      "in_reply_to_id" : 369798203,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5ODM2NA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346896354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369798364",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369804204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369804204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: how about `!= sizeof(((secp256k1_schnorrsig){0}).data)`, a `static_assert`, or similar?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T21:08:52Z",
      "diff_hunk" : "@@ -166,6 +167,23 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     return 1;\n }\n \n+bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned char>& sigbytes) const {\n+    if (sigbytes.size() != 64) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369804204",
      "id" : 369804204,
      "line" : 171,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNDIwNA==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 171,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/pubkey.cpp",
      "position" : 13,
      "pull_request_review_id" : 346903893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369804204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369805872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369805872"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks definitely helps, though I would still love to see some vars extracted to named for readability and deduplication. I'm not gonna nitpick your code for style, I'm just a humble bitcoin pleb. But I do know what it's like to scale codebases to be friendly to onboarding new devs. I do think readability should be a concern if we want more devs in bitcoin. e.g. `stack[stack_size - 1]` is repeated all over the place. call it `top_of_stack` and so much more readable! ð¤·ââ ð ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T21:12:15Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369805872",
      "id" : 369805872,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNTg3Mg==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346905955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369805872",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369810334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369810334"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well the reason is that the `stack_size` variable changes, so a \"top_of_stack\" one would need to be updated, kinda defeating its meaning.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T21:22:27Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369810334",
      "id" : 369810334,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMDMzNA==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 346911857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369810334",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369834460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369834460"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: a `NONE_EXECUTED` constant would be expressive",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T22:15:55Z",
      "diff_hunk" : "@@ -293,19 +444,25 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    std::vector<bool> vfExec;\n+    ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n-    if (script.size() > MAX_SCRIPT_SIZE)\n+    if ((sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) && script.size() > MAX_SCRIPT_SIZE) {\n         return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n+    }\n+    if (sigversion == SigVersion::TAPSCRIPT && stack.size() > MAX_STACK_SIZE) {\n+        return set_error(serror, SCRIPT_ERR_STACK_SIZE);\n+    }\n     int nOpCount = 0;\n     bool fRequireMinimal = (flags & SCRIPT_VERIFY_MINIMALDATA) != 0;\n+    uint32_t opcode_pos = 0;\n+    execdata.m_codeseparator_pos = 0xFFFFFFFFUL;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369834460",
      "id" : 369834460,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNDQ2MA==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 456,
      "original_position" : 178,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 98,
      "pull_request_review_id" : 346942138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369834460",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369849023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369849023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the end, all of this is probably personal taste but I think there is a reason why a lot of those magic numbers are just literals. This number will never need to change.\r\n `sizeof(((secp256k1_schnorrsig){0}).data)` just makes the code harder to read and review (because you need to look up the definition of `secp256k1_schnorrsig`, and it would be a little bit like having a constant `BITS_IN_UINT256 = 256`.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T22:50:55Z",
      "diff_hunk" : "@@ -166,6 +167,23 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     return 1;\n }\n \n+bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned char>& sigbytes) const {\n+    if (sigbytes.size() != 64) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369849023",
      "id" : 369849023,
      "in_reply_to_id" : 369804204,
      "line" : 171,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0OTAyMw==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 171,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/pubkey.cpp",
      "position" : 13,
      "pull_request_review_id" : 346959975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369849023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369852128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369852128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems weird to me. How can we verify a signature for a point which does not have a square Y? Such public keys are not defined in bip-schnorr.\r\n\r\nI think it'd be clearer to assert that the pubkey has a square Y before verifying. I'd also suggest adding a `get_xonly_pubkey()` method to `ECKey` so we can directly get the valid bip-schnorr pubkey.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T22:59:23Z",
      "diff_hunk" : "@@ -322,6 +353,40 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n             return False\n         return True\n \n+    def verify_schnorr(self, sig, msg):\n+        assert(len(msg) == 32)\n+        assert(len(sig) == 64)\n+        assert(self.valid)\n+        assert(self.compressed)\n+        r = int.from_bytes(sig[0:32], 'big')\n+        if r >= SECP256K1_FIELD_SIZE:\n+            return False\n+        s = int.from_bytes(sig[32:64], 'big')\n+        if s >= SECP256K1_ORDER:\n+            return False\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER\n+        if self.is_positive:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369852128",
      "id" : 369852128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1MjEyOA==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 368,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 346963790,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369852128",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369865203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369865203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> This seems weird to me. How can we verify a signature for a point which does not have a square Y? Such public keys are not defined in bip-schnorr.\r\n\r\nHm in fact it's different in yet another way. \r\n - The very pedantic version: bip-schnorr defines public keys to be byte arrays of length 32. \"square y\" does not make sense for byte arrays. \r\n - The less pedantic version: Even if you interpret the byte array as an integer, it's supposed to encode an x-coordinate only. \"square y\" does not make sense for an x-coordinate.\r\n\r\nSee also https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr/reference.py#L99\r\n\r\nIf we want to be compatible with the existing code here, I'm not sure what the best approach is. Maybe it makes more sense to accept a byte string, then parse it into a point and then use the existing code?\r\nedit: Well okay, I think in the end that's already happening in the code, but I think it will still be cleaner if the `verify_schnorr` function would not take points directly.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T23:39:29Z",
      "diff_hunk" : "@@ -322,6 +353,40 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n             return False\n         return True\n \n+    def verify_schnorr(self, sig, msg):\n+        assert(len(msg) == 32)\n+        assert(len(sig) == 64)\n+        assert(self.valid)\n+        assert(self.compressed)\n+        r = int.from_bytes(sig[0:32], 'big')\n+        if r >= SECP256K1_FIELD_SIZE:\n+            return False\n+        s = int.from_bytes(sig[32:64], 'big')\n+        if s >= SECP256K1_ORDER:\n+            return False\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER\n+        if self.is_positive:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369865203",
      "id" : 369865203,
      "in_reply_to_id" : 369852128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTIwMw==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 368,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 346979617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369865203",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369866607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369866607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The notion is that by tying one constant to a formal description, we can make explicit and enforced a connection that would otherwise be implicit and unenforced. IMO, that such a thing can't be violated is always better than that it won't be violated.\r\n\r\nThere are ways to do that without making the code markedly more complex, such as offloading it to a constant + `static_assert`.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-22T23:44:46Z",
      "diff_hunk" : "@@ -166,6 +167,23 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     return 1;\n }\n \n+bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned char>& sigbytes) const {\n+    if (sigbytes.size() != 64) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369866607",
      "id" : 369866607,
      "in_reply_to_id" : 369804204,
      "line" : 171,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NjYwNw==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 171,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/pubkey.cpp",
      "position" : 13,
      "pull_request_review_id" : 346981391,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369866607",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed this code quite a bit. What do you think?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:42:47Z",
      "diff_hunk" : "@@ -231,6 +231,25 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896427",
      "id" : 369896427,
      "in_reply_to_id" : 369630927,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NjQyNw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 240,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 347017092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896427",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:43:31Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_TAPROOT, // Deployment of taproot (BIPs 340-342)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896642",
      "id" : 369896642,
      "in_reply_to_id" : 369780376,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NjY0Mg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/params.h",
      "position" : null,
      "pull_request_review_id" : 347017315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:43:39Z",
      "diff_hunk" : "@@ -114,32 +120,98 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot validation\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown taproot leaf versions non-standard",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896679",
      "id" : 369896679,
      "in_reply_to_id" : 369780765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NjY3OQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 128,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 347017353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896679",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:43:46Z",
      "diff_hunk" : "@@ -138,6 +138,9 @@ const char* GetOpName(opcodetype opcode)\n     case OP_NOP9                   : return \"OP_NOP9\";\n     case OP_NOP10                  : return \"OP_NOP10\";\n \n+    // taproot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896713",
      "id" : 369896713,
      "in_reply_to_id" : 369781034,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NjcxMw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 141,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : null,
      "pull_request_review_id" : 347017399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896713",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:44:15Z",
      "diff_hunk" : "@@ -187,6 +198,9 @@ enum opcodetype\n     OP_NOP9 = 0xb8,\n     OP_NOP10 = 0xb9,\n \n+    // taproot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896841",
      "id" : 369896841,
      "in_reply_to_id" : 369781217,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5Njg0MQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 201,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 347017546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896888"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:44:25Z",
      "diff_hunk" : "@@ -1364,7 +1365,11 @@ def test_segwit_versions(self):\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n         for version in list(range(OP_1, OP_16 + 1)) + [OP_0]:\n             # First try to spend to a future version segwit script_pubkey.\n-            script_pubkey = CScript([CScriptOp(version), witness_hash])\n+            if version == OP_1:\n+                # Don't use 32-byte v1 witness (used by taproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896888",
      "id" : 369896888,
      "in_reply_to_id" : 369781835,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5Njg4OA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1369,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "test/functional/p2p_segwit.py",
      "position" : null,
      "pull_request_review_id" : 347017604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369896888",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369897072"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:44:56Z",
      "diff_hunk" : "@@ -0,0 +1,600 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test taproot softfork.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897072",
      "id" : 369897072,
      "in_reply_to_id" : 369784302,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NzA3Mg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 347017814,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369897072",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369897737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, I meant it should expire in the future or the taproot deployment will fail to activate.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:47:16Z",
      "diff_hunk" : "@@ -83,6 +83,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Deployment of Taproot\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897737",
      "id" : 369897737,
      "in_reply_to_id" : 369513725,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NzczNw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 88,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 347018496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369897737",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369898283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369898283"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This PR intentionally doesn't include mainnet activation; the values here are just a dummy. Apart from the fact that no activation time (or mechanism) has been established yet, that activation logic will likely be included in a different release than the validation logic (thus needing a separate PR anyway).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T01:49:06Z",
      "diff_hunk" : "@@ -83,6 +83,11 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n+        // Deployment of Taproot\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369898283",
      "id" : 369898283,
      "in_reply_to_id" : 369513725,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5ODI4Mw==",
      "original_commit_id" : "1f499c5b67e9f42e90ac115b43b7c7aa9b44a75c",
      "original_line" : 88,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 347019063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369898283",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910526"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:47:47Z",
      "diff_hunk" : "@@ -114,32 +120,98 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot validation\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions in tapscript non-standard",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910526",
      "id" : 369910526,
      "in_reply_to_id" : 369791871,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDUyNg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 139,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 347033160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910526",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:47:57Z",
      "diff_hunk" : "@@ -40,6 +40,8 @@ static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n /** The maximum size of each witness stack item in a standard P2WSH script */\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of each witness stack item in a standard tapscript */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910547",
      "id" : 369910547,
      "in_reply_to_id" : 369791787,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDU0Nw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 43,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/policy/policy.h",
      "position" : null,
      "pull_request_review_id" : 347033191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910547",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:48:06Z",
      "diff_hunk" : "@@ -231,6 +231,31 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            const auto& stack = tx.vin[i].scriptWitness.stack;\n+            size_t stack_size = stack.size();\n+            if (stack_size >= 2 && !stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n+                stack_size--; // Ignore annex if present\n+            }\n+            if (stack_size >= 2) {\n+                // Script path spend (2 or more stack elements are removing optional annex)\n+                if ((stack[stack_size - 1][0] & TAPROOT_LEAF_MASK) == TAPROOT_LEAF_TAPSCRIPT) {\n+                    // Leaf version 0xc0 (aka tapscript, see BIP 342)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910572",
      "id" : 369910572,
      "in_reply_to_id" : 369791691,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDU3Mg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 246,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 347033220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910572",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:48:15Z",
      "diff_hunk" : "@@ -44,6 +44,17 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n // SEQUENCE_FINAL).\n static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;\n \n+// Tag for input annex. If there are at least two witness elements for a transaction input,\n+// and the first byte of the last element is 0x50, this last element is called annex, and\n+// has meanings independent of the script\n+static const unsigned int ANNEX_TAG = 0x50;\n+\n+// Validation weight per passing signature (tapscript only).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910604",
      "id" : 369910604,
      "in_reply_to_id" : 369792013,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDYwNA==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 52,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 347033259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910604",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910632"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:48:23Z",
      "diff_hunk" : "@@ -44,6 +44,17 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n // SEQUENCE_FINAL).\n static const uint32_t LOCKTIME_MAX = 0xFFFFFFFFU;\n \n+// Tag for input annex. If there are at least two witness elements for a transaction input,\n+// and the first byte of the last element is 0x50, this last element is called annex, and\n+// has meanings independent of the script\n+static const unsigned int ANNEX_TAG = 0x50;\n+\n+// Validation weight per passing signature (tapscript only).\n+static constexpr uint64_t VALIDATION_WEIGHT_PER_SIGOP_PASSED = 50;\n+\n+// How much weight budget is added to the witness size (tapscript only).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910632",
      "id" : 369910632,
      "in_reply_to_id" : 369792104,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDYzMg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 55,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/script/script.h",
      "position" : null,
      "pull_request_review_id" : 347033296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910632",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T02:48:32Z",
      "diff_hunk" : "@@ -223,11 +229,8 @@ def __new__(cls, n):\n OP_NOP9 = CScriptOp(0xb8)\n OP_NOP10 = CScriptOp(0xb9)\n \n-# template matching params\n-OP_SMALLINTEGER = CScriptOp(0xfa)\n-OP_PUBKEYS = CScriptOp(0xfb)\n-OP_PUBKEYHASH = CScriptOp(0xfd)\n-OP_PUBKEY = CScriptOp(0xfe)\n+# tapscript",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910663",
      "id" : 369910663,
      "in_reply_to_id" : 369792258,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDY2Mw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 232,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/script.py",
      "position" : null,
      "pull_request_review_id" : 347033324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369910663",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369915231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915231"
         }
      },
      "author_association" : "NONE",
      "body" : "Btw, I wasn't planning to waste your time on this by suggesting to manually fix it up. You can just click apply suggestion on GitHub and it'll create a shared commit.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T03:13:58Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_TAPROOT, // Deployment of taproot (BIPs 340-342)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369915231",
      "id" : 369915231,
      "in_reply_to_id" : 369780376,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNTIzMQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 17,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/consensus/params.h",
      "position" : null,
      "pull_request_review_id" : 347038715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370020828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370020828"
         }
      },
      "author_association" : "NONE",
      "body" : "Use taproot instead of tap?\r\nSIGHASH_TAPROOT_DEFAULT\r\nTAPROOT like other instances, e.g. TAPROOT_PROGRAM_SIZE.\r\n\r\nAlso, SignatureHashTap() renamed to SignatureHashTaproot()?\r\nSimilar to VerifyTaprootCommitment.\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T09:51:59Z",
      "diff_hunk" : "@@ -24,6 +26,10 @@ enum\n     SIGHASH_NONE = 2,\n     SIGHASH_SINGLE = 3,\n     SIGHASH_ANYONECANPAY = 0x80,\n+\n+    SIGHASH_TAPDEFAULT = 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370020828",
      "id" : 370020828,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyMDgyOA==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 30,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 347171002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370020828",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/60021837?v=4",
         "events_url" : "https://api.github.com/users/v1048576/events{/privacy}",
         "followers_url" : "https://api.github.com/users/v1048576/followers",
         "following_url" : "https://api.github.com/users/v1048576/following{/other_user}",
         "gists_url" : "https://api.github.com/users/v1048576/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/v1048576",
         "id" : 60021837,
         "login" : "v1048576",
         "node_id" : "MDQ6VXNlcjYwMDIxODM3",
         "organizations_url" : "https://api.github.com/users/v1048576/orgs",
         "received_events_url" : "https://api.github.com/users/v1048576/received_events",
         "repos_url" : "https://api.github.com/users/v1048576/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/v1048576/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/v1048576/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/v1048576"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370024599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370024599"
         }
      },
      "author_association" : "NONE",
      "body" : "Why not check against opcode defines? ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T09:59:10Z",
      "diff_hunk" : "@@ -326,3 +329,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370024599",
      "id" : 370024599,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNDU5OQ==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 337,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 17,
      "pull_request_review_id" : 347175631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370024599",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/60021837?v=4",
         "events_url" : "https://api.github.com/users/v1048576/events{/privacy}",
         "followers_url" : "https://api.github.com/users/v1048576/followers",
         "following_url" : "https://api.github.com/users/v1048576/following{/other_user}",
         "gists_url" : "https://api.github.com/users/v1048576/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/v1048576",
         "id" : 60021837,
         "login" : "v1048576",
         "node_id" : "MDQ6VXNlcjYwMDIxODM3",
         "organizations_url" : "https://api.github.com/users/v1048576/orgs",
         "received_events_url" : "https://api.github.com/users/v1048576/received_events",
         "repos_url" : "https://api.github.com/users/v1048576/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/v1048576/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/v1048576/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/v1048576"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370142806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370142806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`verify_schnorr` has been updated to be a function that takes a pubkey (32-byte array) instead of being a method on `ECPubKey`.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T14:18:32Z",
      "diff_hunk" : "@@ -322,6 +353,40 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n             return False\n         return True\n \n+    def verify_schnorr(self, sig, msg):\n+        assert(len(msg) == 32)\n+        assert(len(sig) == 64)\n+        assert(self.valid)\n+        assert(self.compressed)\n+        r = int.from_bytes(sig[0:32], 'big')\n+        if r >= SECP256K1_FIELD_SIZE:\n+            return False\n+        s = int.from_bytes(sig[32:64], 'big')\n+        if s >= SECP256K1_ORDER:\n+            return False\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER\n+        if self.is_positive:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370142806",
      "id" : 370142806,
      "in_reply_to_id" : 369852128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0MjgwNg==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 368,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 347329335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370142806",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370147930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370147930"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should these be updated to be BIP schnorr pubkeys (32-byte arrays)?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T14:27:05Z",
      "diff_hunk" : "@@ -0,0 +1,600 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes\n+from test_framework.key import ECKey, SECP256K1_ORDER, verify_schnorr\n+from test_framework.address import program_to_witness\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+def random_script(size, no_success = True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num+1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b)*8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        pubkey = key.get_pubkey()\n+        if not pubkey.is_positive:\n+            key.negate()\n+        key = key.tweak_add(info[1])\n+        assert(key is not None)\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath = True, script = script, codeseparator_pos = pos, annex = annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath = False, annex = annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = key.sign_schnorr(sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE*2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TAPROOTTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, cb_pubkey=None, fees=0, witness=False, accept=False):\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, fees=fees), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(block.serialize(True).hex())\n+        if (accept):\n+            assert node.getbestblockhash() == block.hash, \"Failed to accept: \" + msg\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n+\n+    def test_spenders(self, spenders, input_counts):\n+        \"\"\"Run randomized tests with a number of \"spenders\".\n+\n+\n+        Each spender embodies a test; in a large randomized test, it is verified\n+        that toggling the valid argument to each lambda toggles the validity of\n+        the transaction. This is accomplished by constructing transactions consisting\n+        of all valid inputs, except one invalid one.\n+        \"\"\"\n+\n+        # Construct a UTXO to spend for each of the spenders\n+        self.nodes[0].generate(110)\n+        bal = self.nodes[0].getbalance() * 3 / (4*len(spenders))\n+        random.shuffle(spenders)\n+        num_spenders = len(spenders)\n+        utxos = []\n+        while len(spenders):\n+            # Create the necessary outputs in multiple transactions, as sPKs may be repeated (which sendmany does not support)\n+            outputs = {}\n+            new_spenders = []\n+            batch = []\n+            for spender in spenders:\n+                addr = spender.address\n+                if len(batch) == 100 or addr in outputs:\n+                    new_spenders.append(spender)\n+                else:\n+                    amount = random.randrange(int(bal * 95000000), int(bal * 105000000))\n+                    outputs[addr] = amount / 100000000\n+                    batch.append(spender)\n+            self.log.info(\"Constructing %i UTXOs for spending tests\" % len(batch))\n+            tx = tx_from_hex(self.nodes[0].getrawtransaction(self.nodes[0].sendmany(\"\", outputs)))\n+            tx.rehash()\n+            spenders = new_spenders\n+            random.shuffle(spenders)\n+\n+            # Map created UTXOs back to the spenders they were created for\n+            for n, out in enumerate(tx.vout):\n+                for spender in batch:\n+                    if out.scriptPubKey == spender.script:\n+                        utxos.append(UTXOData(input=COutPoint(tx.sha256, n), output=out, spender=spender))\n+                        break\n+        assert(len(utxos) == num_spenders)\n+        random.shuffle(utxos)\n+        self.nodes[0].generate(1)\n+\n+        # Construct a bunch of sPKs that send coins back to the host wallet\n+        self.log.info(\"Constructing 100 addresses for returning coins\")\n+        host_spks = []\n+        host_pubkeys = []\n+        for i in range(100):\n+            addr = self.nodes[0].getnewaddress(address_type=random.choice([\"legacy\", \"p2sh-segwit\", \"bech32\"]))\n+            info = self.nodes[0].getaddressinfo(addr)\n+            spk = hex_str_to_bytes(info['scriptPubKey'])\n+            host_spks.append(spk)\n+            host_pubkeys.append(hex_str_to_bytes(info['pubkey']))\n+\n+        # Pick random subsets of UTXOs to construct transactions with\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        block = self.nodes[0].getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+        while len(utxos):\n+            tx = CTransaction()\n+            tx.nVersion = random.choice([1, 2, random.randint(-0x80000000,0x7fffffff)])\n+            min_sequence = (tx.nVersion != 1 and tx.nVersion != 0) * 0x80000000 # The minimum sequence number to disable relative locktime\n+            if random.choice([True, False]):\n+                tx.nLockTime = random.randrange(LOCKTIME_THRESHOLD, self.lastblocktime - 7200) # all absolute locktimes in the past\n+            else:\n+                tx.nLockTime = random.randrange(self.lastblockheight+1) # all block heights in the past\n+\n+            # Pick 1 to 4 UTXOs to construct transaction inputs\n+            acceptable_input_counts = [cnt for cnt in input_counts if cnt <= len(utxos)]\n+            while True:\n+                inputs = random.choice(acceptable_input_counts)\n+                remaining = len(utxos) - inputs\n+                if remaining == 0 or remaining >= max(input_counts) or remaining in input_counts:\n+                    break\n+            input_utxos = utxos[-inputs:]\n+            utxos = utxos[:-inputs]\n+            fee = random.randrange(MIN_FEE * 2, MIN_FEE * 4) # 10000-20000 sat fee\n+            in_value = sum(utxo.output.nValue for utxo in input_utxos) - fee\n+            tx.vin = [CTxIn(outpoint = input_utxos[i].input, nSequence = random.randint(min_sequence, 0xffffffff)) for i in range(inputs)]\n+            tx.wit.vtxinwit = [CTxInWitness() for i in range(inputs)]\n+            self.log.info(\"Test: %s\" % (\", \".join(utxo.spender.comment for utxo in input_utxos)))\n+\n+            # Add 1 to 4 outputs\n+            outputs = random.choice([1,2,3,4])\n+            assert in_value >= 0 and fee - outputs * DUST_LIMIT >= MIN_FEE\n+            for i in range(outputs):\n+                tx.vout.append(CTxOut())\n+                if in_value <= DUST_LIMIT:\n+                    tx.vout[-1].nValue = DUST_LIMIT\n+                elif i < outputs - 1:\n+                    tx.vout[-1].nValue = in_value\n+                else:\n+                    tx.vout[-1].nValue = random.randint(DUST_LIMIT, in_value)\n+                in_value -= tx.vout[-1].nValue\n+                tx.vout[-1].scriptPubKey = random.choice(host_spks)\n+            fee += in_value\n+            assert(fee >= 0)\n+\n+            # For each inputs, make it fail once; then succeed once\n+            for fail_input in range(inputs + 1):\n+                # Wipe scriptSig/witness\n+                for i in range(inputs):\n+                    tx.vin[i].scriptSig = CScript()\n+                    tx.wit.vtxinwit[i] = CTxInWitness()\n+                # Fill inputs/witnesses\n+                for i in range(inputs):\n+                    fn = input_utxos[i].spender.sat_function\n+                    fn(tx, i, [utxo.output for utxo in input_utxos], i != fail_input)\n+                # Submit to mempool to check standardness\n+                standard = fail_input == inputs and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                if standard:\n+                    self.nodes[0].sendrawtransaction(tx.serialize().hex(), 0)\n+                    assert(self.nodes[0].getmempoolentry(tx.hash) is not None)\n+                else:\n+                    assert_raises_rpc_error(-26, None, self.nodes[0].sendrawtransaction, tx.serialize().hex(), 0)\n+                # Submit in a block\n+                tx.rehash()\n+                msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n+                self.block_submit(self.nodes[0], [tx], msg, witness=True, accept=fail_input == inputs, cb_pubkey=random.choice(host_pubkeys), fees=fee)\n+\n+    def build_spenders(self):\n+        VALID_SIGHASHES = [0,1,2,3,0x81,0x82,0x83]\n+        spenders = []\n+\n+        for annex in [None, bytes([ANNEX_TAG]) + random_bytes(random.randrange(0, 250))]:\n+            standard = annex is None\n+            sec1, sec2 = ECKey(), ECKey()\n+            sec1.generate()\n+            sec2.generate()\n+            pub1, pub2 = sec1.get_pubkey(), sec2.get_pubkey()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370147930",
      "id" : 370147930,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzkzMA==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 403,
      "original_position" : 403,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 347336167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370147930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370215597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370215597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's never reused. Renaming it just makes you look up a definition.   Adding a comment like \"// Fall-through value if none are executed.\" would be both more informative and not create a reason to bounce around the code.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:16:34Z",
      "diff_hunk" : "@@ -293,19 +444,25 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    std::vector<bool> vfExec;\n+    ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n-    if (script.size() > MAX_SCRIPT_SIZE)\n+    if ((sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) && script.size() > MAX_SCRIPT_SIZE) {\n         return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n+    }\n+    if (sigversion == SigVersion::TAPSCRIPT && stack.size() > MAX_STACK_SIZE) {\n+        return set_error(serror, SCRIPT_ERR_STACK_SIZE);\n+    }\n     int nOpCount = 0;\n     bool fRequireMinimal = (flags & SCRIPT_VERIFY_MINIMALDATA) != 0;\n+    uint32_t opcode_pos = 0;\n+    execdata.m_codeseparator_pos = 0xFFFFFFFFUL;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370215597",
      "id" : 370215597,
      "in_reply_to_id" : 369834460,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNTU5Nw==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 456,
      "original_position" : 178,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 98,
      "pull_request_review_id" : 347426231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370215597",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370223920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370223920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with real-or-random.\r\n\r\nsecp256k1_schnorrsig should be \"functionally opaque\"-- like the other secp256k1_ types it isn't actually an opaque struct *only* so it can be allocated on the stack. Library users should not be messing around with the internals of these types, and the library API makes *no* promise that the internal representation won't change (and for some of them it's even currently different on different platforms-- although not this one).\r\n\r\nIf the representation of  secp256k1_schnorrsig were to change, signatures with sizes other than 64 bytes wouldn't suddenly become valid in Bitcoin.\r\n\r\nIf you were talking about a '64' who's purposes was to allocate memory to store a secp256k1_schnorrsig then your reflex to interrogate it with sizeof would be well placed-- but that isn't the case here.  The data field in a secp256k1_schnorrsig could change length pretty arbitrarily (for example, storing R decompressed) and this line wouldn't change). \r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:30:33Z",
      "diff_hunk" : "@@ -166,6 +167,23 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     return 1;\n }\n \n+bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned char>& sigbytes) const {\n+    if (sigbytes.size() != 64) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370223920",
      "id" : 370223920,
      "in_reply_to_id" : 369804204,
      "line" : 171,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMzkyMA==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 171,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/pubkey.cpp",
      "position" : 13,
      "pull_request_review_id" : 347437420,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370223920",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370225174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370225174"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Because they're all \"OP_SUCCESS\"?  They aren't other opcodes right now. Some of them share values with non-tapscript opcodes, but the usage is different.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:32:37Z",
      "diff_hunk" : "@@ -326,3 +329,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370225174",
      "id" : 370225174,
      "in_reply_to_id" : 370024599,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNTE3NA==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 337,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 17,
      "pull_request_review_id" : 347439038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370225174",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370227533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370227533"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find that much less readable, particularly since the symbolic values you define wouldn't be used anywhere else. More comments, however, would be fine.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:36:30Z",
      "diff_hunk" : "@@ -1209,27 +1378,137 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    assert(in_pos < tx_to.vin.size());\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+    assert(cache.ready && cache.m_amounts_spent_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    uint8_t epoch = 0;\n+    ss << epoch;\n+\n+    // Hash type\n+    if ((hash_type > 3) && (hash_type < 0x81 || hash_type > 0x83)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370227533",
      "id" : 370227533,
      "in_reply_to_id" : 369786605,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNzUzMw==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1449,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 347442068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370227533",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370234826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370234826"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: This function (VerifyECDSASignature) is formatted different than VerifySchnorrSignature which have the single line if-statements on one line. Maybe use same formatting for consistency since the functions are very similar in layout. I guess it's because this function already existed and don't want to make unrelated formatting changes. New here so not sure if this is a valid remark. Please excuse me if so.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:49:25Z",
      "diff_hunk" : "@@ -79,15 +87,25 @@ void InitSignatureCache()\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n \n-bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifyECDSASignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370234826",
      "id" : 370234826,
      "line" : 101,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNDgyNg==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 101,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/script/sigcache.cpp",
      "position" : 51,
      "pull_request_review_id" : 347451586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370234826",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60033096?v=4",
         "events_url" : "https://api.github.com/users/constcast-glitch/events{/privacy}",
         "followers_url" : "https://api.github.com/users/constcast-glitch/followers",
         "following_url" : "https://api.github.com/users/constcast-glitch/following{/other_user}",
         "gists_url" : "https://api.github.com/users/constcast-glitch/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/constcast-glitch",
         "id" : 60033096,
         "login" : "constcast-glitch",
         "node_id" : "MDQ6VXNlcjYwMDMzMDk2",
         "organizations_url" : "https://api.github.com/users/constcast-glitch/orgs",
         "received_events_url" : "https://api.github.com/users/constcast-glitch/received_events",
         "repos_url" : "https://api.github.com/users/constcast-glitch/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/constcast-glitch/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/constcast-glitch/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/constcast-glitch"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370236330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370236330"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fair enough, it's a matter of opinion as to which is more legible - though I see a few uses, e.g.:\r\nhttps://github.com/bitcoin/bitcoin/pull/17977/files#diff-b81dfdd8a5bd80fe9f82b5a40c4c991eR180\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T16:52:07Z",
      "diff_hunk" : "@@ -293,19 +444,25 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    std::vector<bool> vfExec;\n+    ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n-    if (script.size() > MAX_SCRIPT_SIZE)\n+    if ((sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) && script.size() > MAX_SCRIPT_SIZE) {\n         return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n+    }\n+    if (sigversion == SigVersion::TAPSCRIPT && stack.size() > MAX_STACK_SIZE) {\n+        return set_error(serror, SCRIPT_ERR_STACK_SIZE);\n+    }\n     int nOpCount = 0;\n     bool fRequireMinimal = (flags & SCRIPT_VERIFY_MINIMALDATA) != 0;\n+    uint32_t opcode_pos = 0;\n+    execdata.m_codeseparator_pos = 0xFFFFFFFFUL;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370236330",
      "id" : 370236330,
      "in_reply_to_id" : 369834460,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNjMzMA==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 456,
      "original_position" : 178,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 98,
      "pull_request_review_id" : 347453549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370236330",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370255036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370255036"
         }
      },
      "author_association" : "NONE",
      "body" : "I was expecting something along the lines of OP_SUCCESS80, ..., OP_SUCCESS254.\r\nOP_SUCCESSx mapping explicitly shows the shared opcodes?\r\n\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-23T17:28:35Z",
      "diff_hunk" : "@@ -326,3 +329,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370255036",
      "id" : 370255036,
      "in_reply_to_id" : 370024599,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NTAzNg==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 337,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 17,
      "pull_request_review_id" : 347478221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370255036",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/60021837?v=4",
         "events_url" : "https://api.github.com/users/v1048576/events{/privacy}",
         "followers_url" : "https://api.github.com/users/v1048576/followers",
         "following_url" : "https://api.github.com/users/v1048576/following{/other_user}",
         "gists_url" : "https://api.github.com/users/v1048576/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/v1048576",
         "id" : 60021837,
         "login" : "v1048576",
         "node_id" : "MDQ6VXNlcjYwMDIxODM3",
         "organizations_url" : "https://api.github.com/users/v1048576/orgs",
         "received_events_url" : "https://api.github.com/users/v1048576/received_events",
         "repos_url" : "https://api.github.com/users/v1048576/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/v1048576/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/v1048576/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/v1048576"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370905531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370905531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree as well. The size of serialized signatures is not inherently related to the in-memory representation of secp256k1_schnorrsig.\r\n\r\nThe BIP says something about sizes 64 and 65. The code does the exact same thing. You could introduce a constant, but I think that's just distracting. You'd need to go look up the constant to verify the code is correct, while now you can just directly compare it with the BIP.\r\n\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T01:48:33Z",
      "diff_hunk" : "@@ -166,6 +167,23 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     return 1;\n }\n \n+bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned char>& sigbytes) const {\n+    if (sigbytes.size() != 64) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370905531",
      "id" : 370905531,
      "in_reply_to_id" : 369804204,
      "line" : 171,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNTUzMQ==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 171,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/pubkey.cpp",
      "position" : 13,
      "pull_request_review_id" : 348302303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370905531",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370906951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370906951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I considered that, but I don't think the amount of code needed is worth it, or would be more readable (if there isn't a normative IsOpSuccess function, you'd be adding 87 constants to the enum, and instead writing \"opcode == OP_SUCCESS80 || opcode == OP_SUCCESS98 || opcode == OP_SUCCESS126 || ...\" in `ExecuteWitnessProgram` directly).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:08:38Z",
      "diff_hunk" : "@@ -326,3 +329,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370906951",
      "id" : 370906951,
      "in_reply_to_id" : 370024599,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNjk1MQ==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 337,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 17,
      "pull_request_review_id" : 348303775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370906951",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370907161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370907161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is intentional, see https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-general:\r\n\r\n> When writing patches, favor the new style over attempting to mimic the surrounding style, except for move-only commits.\r\n>\r\n> Do not submit patches solely to modify the style of existing code.\r\n\r\nSo the new Schnorr code follows the preferred style, even though the ECDSA one retains the style it had before.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:11:37Z",
      "diff_hunk" : "@@ -79,15 +87,25 @@ void InitSignatureCache()\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n \n-bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifyECDSASignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370907161",
      "id" : 370907161,
      "in_reply_to_id" : 370234826,
      "line" : 101,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzE2MQ==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 101,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/script/sigcache.cpp",
      "position" : 51,
      "pull_request_review_id" : 348303986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370907161",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've rewritten this code in an overall more readable way, I think.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:32:35Z",
      "diff_hunk" : "@@ -1209,27 +1378,137 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    assert(in_pos < tx_to.vin.size());\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+    assert(cache.ready && cache.m_amounts_spent_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    uint8_t epoch = 0;\n+    ss << epoch;\n+\n+    // Hash type\n+    if ((hash_type > 3) && (hash_type < 0x81 || hash_type > 0x83)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908359",
      "id" : 370908359,
      "in_reply_to_id" : 369786605,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODM1OQ==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1449,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 348305242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908359",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908392"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've rewritten this code to match the BIP specification more closely.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:33:03Z",
      "diff_hunk" : "@@ -1209,27 +1378,137 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    assert(in_pos < tx_to.vin.size());\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+    assert(cache.ready && cache.m_amounts_spent_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    uint8_t epoch = 0;\n+    ss << epoch;\n+\n+    // Hash type\n+    if ((hash_type > 3) && (hash_type < 0x81 || hash_type > 0x83)) return false;\n+    ss << hash_type;\n+    const uint8_t input_type = hash_type & SIGHASH_TAPINPUTMASK;\n+    const uint8_t output_type = hash_type & SIGHASH_TAPOUTPUTMASK;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+\n+    if (input_type == SIGHASH_TAPDEFAULT) {\n+        ss << cache.m_prevouts_hash;\n+        ss << cache.m_amounts_spent_hash;\n+        ss << cache.m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_TAPDEFAULT || output_type == SIGHASH_ALL) {\n+        ss << cache.m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const CScript& scriptPubKey = cache.m_spent_outputs[in_pos].scriptPubKey;\n+    uint8_t spend_type = 0;\n+    assert(execdata.m_annex_init);\n+    if (execdata.m_annex_present) {\n+        spend_type |= 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908392",
      "id" : 370908392,
      "in_reply_to_id" : 369786833,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODM5Mg==",
      "original_commit_id" : "9f578bfcc7f0b63b50371f5ae046edf2e98fda5b",
      "original_line" : 1472,
      "original_position" : 419,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 348305271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908392",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908425"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That initialization wasn't needed actually, I've removed it. The constant in just in one place now.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:33:38Z",
      "diff_hunk" : "@@ -293,19 +444,25 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    std::vector<bool> vfExec;\n+    ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n-    if (script.size() > MAX_SCRIPT_SIZE)\n+    if ((sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) && script.size() > MAX_SCRIPT_SIZE) {\n         return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n+    }\n+    if (sigversion == SigVersion::TAPSCRIPT && stack.size() > MAX_STACK_SIZE) {\n+        return set_error(serror, SCRIPT_ERR_STACK_SIZE);\n+    }\n     int nOpCount = 0;\n     bool fRequireMinimal = (flags & SCRIPT_VERIFY_MINIMALDATA) != 0;\n+    uint32_t opcode_pos = 0;\n+    execdata.m_codeseparator_pos = 0xFFFFFFFFUL;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908425",
      "id" : 370908425,
      "in_reply_to_id" : 369834460,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODQyNQ==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 456,
      "original_position" : 178,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 98,
      "pull_request_review_id" : 348305306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908425",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908463"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've completely rewritten the Python Schnorr code now, not using ECKey/ECPubKey at all.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:34:12Z",
      "diff_hunk" : "@@ -322,6 +353,40 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n             return False\n         return True\n \n+    def verify_schnorr(self, sig, msg):\n+        assert(len(msg) == 32)\n+        assert(len(sig) == 64)\n+        assert(self.valid)\n+        assert(self.compressed)\n+        r = int.from_bytes(sig[0:32], 'big')\n+        if r >= SECP256K1_FIELD_SIZE:\n+            return False\n+        s = int.from_bytes(sig[32:64], 'big')\n+        if s >= SECP256K1_ORDER:\n+            return False\n+        e = int.from_bytes(TaggedHash(\"BIPSchnorr\", sig[0:32] + self.get_bytes()[1:33] + msg), 'big') % SECP256K1_ORDER\n+        if self.is_positive:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908463",
      "id" : 370908463,
      "in_reply_to_id" : 369852128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODQ2Mw==",
      "original_commit_id" : "2c55acda1cba362b08e289d60fe77eb8baaeb17e",
      "original_line" : 368,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 348305346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908463",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nfrom test_framework.script import (\r\n    ANNEX_TAG,\r\n    CScript,\r\n    CScriptOp,\r\n    LEAF_VERSION_TAPSCRIPT,\r\n    LOCKTIME_THRESHOLD,\r\n    MAX_SCRIPT_ELEMENT_SIZE,\r\n    OP_0,\r\n    OP_1,\r\n    OP_1SUB,\r\n    OP_1NEGATE,\r\n    OP_2DROP,\r\n    OP_2DUP,\r\n    OP_CHECKMULTISIG,\r\n    OP_CHECKMULTISIGVERIFY,\r\n    OP_CHECKSIG,\r\n    OP_CHECKSIGADD,\r\n    OP_CHECKSIGVERIFY,\r\n    OP_CODESEPARATOR,\r\n    OP_DROP,\r\n    OP_DUP,\r\n    OP_ELSE,\r\n    OP_ENDIF,\r\n    OP_EQUAL,\r\n    OP_IF,\r\n    OP_NOT,\r\n    OP_NOTIF,\r\n    OP_RETURN,\r\n    OP_SWAP,\r\n    OP_VERIF,\r\n    SIGHASH_SINGLE,\r\n    TaprootSignatureHash,\r\n    is_op_success,\r\n    taproot_construct,\r\n)\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:35:04Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908509",
      "id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODUwOQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348305311,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree, those enum values were weird. Changed to SIGHASH_INPUT_MASK, SIGHASH_OUTPUT_MASK, and SIGHASH_DEFAULT; even though they're Taproot specific for now, that's not inherently the case.\r\n\r\n`SignatureHashTap` wasn't actually necessary, it was a leftover from older code. I've removed it.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:37:57Z",
      "diff_hunk" : "@@ -24,6 +26,10 @@ enum\n     SIGHASH_NONE = 2,\n     SIGHASH_SINGLE = 3,\n     SIGHASH_ANYONECANPAY = 0x80,\n+\n+    SIGHASH_TAPDEFAULT = 0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908697",
      "id" : 370908697,
      "in_reply_to_id" : 370020828,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODY5Nw==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 30,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 348305557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done by completely rewriting the Schnorr Python code.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:38:26Z",
      "diff_hunk" : "@@ -0,0 +1,600 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes\n+from test_framework.key import ECKey, SECP256K1_ORDER, verify_schnorr\n+from test_framework.address import program_to_witness\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+def random_script(size, no_success = True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num+1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b)*8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        pubkey = key.get_pubkey()\n+        if not pubkey.is_positive:\n+            key.negate()\n+        key = key.tweak_add(info[1])\n+        assert(key is not None)\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath = True, script = script, codeseparator_pos = pos, annex = annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath = False, annex = annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = key.sign_schnorr(sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE*2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TAPROOTTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, cb_pubkey=None, fees=0, witness=False, accept=False):\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, fees=fees), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(block.serialize(True).hex())\n+        if (accept):\n+            assert node.getbestblockhash() == block.hash, \"Failed to accept: \" + msg\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n+\n+    def test_spenders(self, spenders, input_counts):\n+        \"\"\"Run randomized tests with a number of \"spenders\".\n+\n+\n+        Each spender embodies a test; in a large randomized test, it is verified\n+        that toggling the valid argument to each lambda toggles the validity of\n+        the transaction. This is accomplished by constructing transactions consisting\n+        of all valid inputs, except one invalid one.\n+        \"\"\"\n+\n+        # Construct a UTXO to spend for each of the spenders\n+        self.nodes[0].generate(110)\n+        bal = self.nodes[0].getbalance() * 3 / (4*len(spenders))\n+        random.shuffle(spenders)\n+        num_spenders = len(spenders)\n+        utxos = []\n+        while len(spenders):\n+            # Create the necessary outputs in multiple transactions, as sPKs may be repeated (which sendmany does not support)\n+            outputs = {}\n+            new_spenders = []\n+            batch = []\n+            for spender in spenders:\n+                addr = spender.address\n+                if len(batch) == 100 or addr in outputs:\n+                    new_spenders.append(spender)\n+                else:\n+                    amount = random.randrange(int(bal * 95000000), int(bal * 105000000))\n+                    outputs[addr] = amount / 100000000\n+                    batch.append(spender)\n+            self.log.info(\"Constructing %i UTXOs for spending tests\" % len(batch))\n+            tx = tx_from_hex(self.nodes[0].getrawtransaction(self.nodes[0].sendmany(\"\", outputs)))\n+            tx.rehash()\n+            spenders = new_spenders\n+            random.shuffle(spenders)\n+\n+            # Map created UTXOs back to the spenders they were created for\n+            for n, out in enumerate(tx.vout):\n+                for spender in batch:\n+                    if out.scriptPubKey == spender.script:\n+                        utxos.append(UTXOData(input=COutPoint(tx.sha256, n), output=out, spender=spender))\n+                        break\n+        assert(len(utxos) == num_spenders)\n+        random.shuffle(utxos)\n+        self.nodes[0].generate(1)\n+\n+        # Construct a bunch of sPKs that send coins back to the host wallet\n+        self.log.info(\"Constructing 100 addresses for returning coins\")\n+        host_spks = []\n+        host_pubkeys = []\n+        for i in range(100):\n+            addr = self.nodes[0].getnewaddress(address_type=random.choice([\"legacy\", \"p2sh-segwit\", \"bech32\"]))\n+            info = self.nodes[0].getaddressinfo(addr)\n+            spk = hex_str_to_bytes(info['scriptPubKey'])\n+            host_spks.append(spk)\n+            host_pubkeys.append(hex_str_to_bytes(info['pubkey']))\n+\n+        # Pick random subsets of UTXOs to construct transactions with\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        block = self.nodes[0].getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+        while len(utxos):\n+            tx = CTransaction()\n+            tx.nVersion = random.choice([1, 2, random.randint(-0x80000000,0x7fffffff)])\n+            min_sequence = (tx.nVersion != 1 and tx.nVersion != 0) * 0x80000000 # The minimum sequence number to disable relative locktime\n+            if random.choice([True, False]):\n+                tx.nLockTime = random.randrange(LOCKTIME_THRESHOLD, self.lastblocktime - 7200) # all absolute locktimes in the past\n+            else:\n+                tx.nLockTime = random.randrange(self.lastblockheight+1) # all block heights in the past\n+\n+            # Pick 1 to 4 UTXOs to construct transaction inputs\n+            acceptable_input_counts = [cnt for cnt in input_counts if cnt <= len(utxos)]\n+            while True:\n+                inputs = random.choice(acceptable_input_counts)\n+                remaining = len(utxos) - inputs\n+                if remaining == 0 or remaining >= max(input_counts) or remaining in input_counts:\n+                    break\n+            input_utxos = utxos[-inputs:]\n+            utxos = utxos[:-inputs]\n+            fee = random.randrange(MIN_FEE * 2, MIN_FEE * 4) # 10000-20000 sat fee\n+            in_value = sum(utxo.output.nValue for utxo in input_utxos) - fee\n+            tx.vin = [CTxIn(outpoint = input_utxos[i].input, nSequence = random.randint(min_sequence, 0xffffffff)) for i in range(inputs)]\n+            tx.wit.vtxinwit = [CTxInWitness() for i in range(inputs)]\n+            self.log.info(\"Test: %s\" % (\", \".join(utxo.spender.comment for utxo in input_utxos)))\n+\n+            # Add 1 to 4 outputs\n+            outputs = random.choice([1,2,3,4])\n+            assert in_value >= 0 and fee - outputs * DUST_LIMIT >= MIN_FEE\n+            for i in range(outputs):\n+                tx.vout.append(CTxOut())\n+                if in_value <= DUST_LIMIT:\n+                    tx.vout[-1].nValue = DUST_LIMIT\n+                elif i < outputs - 1:\n+                    tx.vout[-1].nValue = in_value\n+                else:\n+                    tx.vout[-1].nValue = random.randint(DUST_LIMIT, in_value)\n+                in_value -= tx.vout[-1].nValue\n+                tx.vout[-1].scriptPubKey = random.choice(host_spks)\n+            fee += in_value\n+            assert(fee >= 0)\n+\n+            # For each inputs, make it fail once; then succeed once\n+            for fail_input in range(inputs + 1):\n+                # Wipe scriptSig/witness\n+                for i in range(inputs):\n+                    tx.vin[i].scriptSig = CScript()\n+                    tx.wit.vtxinwit[i] = CTxInWitness()\n+                # Fill inputs/witnesses\n+                for i in range(inputs):\n+                    fn = input_utxos[i].spender.sat_function\n+                    fn(tx, i, [utxo.output for utxo in input_utxos], i != fail_input)\n+                # Submit to mempool to check standardness\n+                standard = fail_input == inputs and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                if standard:\n+                    self.nodes[0].sendrawtransaction(tx.serialize().hex(), 0)\n+                    assert(self.nodes[0].getmempoolentry(tx.hash) is not None)\n+                else:\n+                    assert_raises_rpc_error(-26, None, self.nodes[0].sendrawtransaction, tx.serialize().hex(), 0)\n+                # Submit in a block\n+                tx.rehash()\n+                msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n+                self.block_submit(self.nodes[0], [tx], msg, witness=True, accept=fail_input == inputs, cb_pubkey=random.choice(host_pubkeys), fees=fee)\n+\n+    def build_spenders(self):\n+        VALID_SIGHASHES = [0,1,2,3,0x81,0x82,0x83]\n+        spenders = []\n+\n+        for annex in [None, bytes([ANNEX_TAG]) + random_bytes(random.randrange(0, 250))]:\n+            standard = annex is None\n+            sec1, sec2 = ECKey(), ECKey()\n+            sec1.generate()\n+            sec2.generate()\n+            pub1, pub2 = sec1.get_pubkey(), sec2.get_pubkey()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908724",
      "id" : 370908724,
      "in_reply_to_id" : 370147930,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODcyNA==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 403,
      "original_position" : 403,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348305579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908724",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908763"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What a waste of lines. Is this more readable?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:39:14Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908763",
      "id" : 370908763,
      "in_reply_to_id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwODc2Mw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348305617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370908763",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Lines don't really cost anything. This is definitely *readable*, compared to the big blob it replaces.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:52:25Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909411",
      "id" : 370909411,
      "in_reply_to_id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwOTQxMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348306215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909411",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909591"
         }
      },
      "author_association" : "MEMBER",
      "body" : "They cost screen space, and this isn't something that really requires reading.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T02:55:52Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909591",
      "id" : 370909591,
      "in_reply_to_id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwOTU5MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348306374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909591",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It feels like people can just scroll down if they aren't interested, or not if they are. I prefer to let the reader decide whether they desire to read or not. Anyway, it's not big enough to waste time over. Do ignore.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T03:00:08Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909779",
      "id" : 370909779,
      "in_reply_to_id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwOTc3OQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 348306555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370909779",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370916701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370916701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: indentation (here and L1781).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T06:10:32Z",
      "diff_hunk" : "@@ -1416,10 +1728,68 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, const ScriptExecutionData& execdata, ScriptError* serror)\n+{\n+    // OP_SUCCESSx processing overrides everything, including stack element size limits\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n+                return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+            }\n+            // New opcodes will be listed here. May use a different sigversion to modify existing opcodes.\n+            if (IsOpSuccess(opcode)) {\n+                if (flags & SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS) {\n+                    return set_error(serror, SCRIPT_ERR_DISCOURAGE_OP_SUCCESS);\n+                }\n+                return set_success(serror);\n+            }\n+        }\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+        }\n+    }\n+\n+    // Run the script interpreter.\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror, execdata)) return false;\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n+    if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256* tapleaf_hash)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    if (tapleaf_hash) *tapleaf_hash = k;\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;\n+        if (std::lexicographical_compare(k.begin(), k.end(), node_begin, node_begin + TAPROOT_CONTROL_NODE_SIZE)) {\n+           ss_branch << k << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370916701",
      "id" : 370916701,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjcwMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1777,
      "original_position" : 595,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 348312432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370916701",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370939945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370939945"
         }
      },
      "author_association" : "NONE",
      "body" : "Ah yes, good point about 87 constants, thanks for the clarification.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T15:42:05Z",
      "diff_hunk" : "@@ -326,3 +329,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370939945",
      "id" : 370939945,
      "in_reply_to_id" : 370024599,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzOTk0NQ==",
      "original_commit_id" : "41acd620b5a0018b9ab5eb709ef54fafa8937324",
      "original_line" : 337,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 17,
      "pull_request_review_id" : 348331546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370939945",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/60021837?v=4",
         "events_url" : "https://api.github.com/users/v1048576/events{/privacy}",
         "followers_url" : "https://api.github.com/users/v1048576/followers",
         "following_url" : "https://api.github.com/users/v1048576/following{/other_user}",
         "gists_url" : "https://api.github.com/users/v1048576/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/v1048576",
         "id" : 60021837,
         "login" : "v1048576",
         "node_id" : "MDQ6VXNlcjYwMDIxODM3",
         "organizations_url" : "https://api.github.com/users/v1048576/orgs",
         "received_events_url" : "https://api.github.com/users/v1048576/received_events",
         "repos_url" : "https://api.github.com/users/v1048576/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/v1048576/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/v1048576/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/v1048576"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948291"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "documentation nit: preference to not use -1 to indicate a sentinel for a unsigned type.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:30:36Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948291",
      "id" : 370948291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODI5MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 348338700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948291",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948398"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "UB nit: while this is safe, I believe, as it is used, it would be better to initialize this to either true or false should there be a bug, it would at least not invoke UB.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:32:40Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948398",
      "id" : 370948398,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODM5OA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 197,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 104,
      "pull_request_review_id" : 348338789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948398",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not initializing it means giving valgrind a chance to detect incorrect use. I prefer to keep values uninitialized if they're actually intended to not be used.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:35:52Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948552",
      "id" : 370948552,
      "in_reply_to_id" : 370948398,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODU1Mg==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 197,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 104,
      "pull_request_review_id" : 348338928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948552",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm generally not a fan of these Data interfaces which have all the bool x_init fields.\r\n\r\nAs an alternative, we could use an optional type wrapper.\r\n\r\nHowever, optional types depend on boost until c++17, which we shouldn't introduce consensus dependencies on.\r\n\r\nMy proposal would be to copy the definition of c++17 optional into https://github.com/bitcoin/bitcoin/blob/99813a9745fe10a58bedd7a4cb721faf14f907a4/src/optional.h and drop the boost dependency, and then use this here. This can be done as a PR separate from Taproot so as not to further burden this PR.\r\n\r\n\r\nHere, optionals express both the nothing set and not initialized state (hence dual-wrapped options) but perhaps we'd be OK in collapsing the wrapped ones to represent (not initialized or not set) OR value.\r\n\r\n```c++\r\n struct ScriptExecutionData\r\n {\r\n     //! The tapleaf hash.\r\n     Option<uint256> m_tapleaf_hash;\r\n     Option<Option<uint32_t>> m_codeseparator_pos;\r\n     //! Hash of the annex data, if any\r\n     Option<Option<uint256>> m_annex_hash;\r\n     /** How much validation weight is left (decremented for every successful signature check). */\r\n     Option<int64_t> m_validation_weight_left;\r\n };\r\n```\r\n\r\nThis would seem, to me, to make the interface quite a bit safer and eliminates a bunch of initialization logic & prevents UB from cropping up.\r\n\r\nIt would also be, in my opinion, a larger project (perhaps worthwhile) to generally rethink this state object to be accessed through an interface that guarantees the fields are accessed correctly -- e.g., once a m_validation_weight_left is set it can only be read or decreased, and the function to decrease can set error if the condition isn't met on underflow. Maybe not worth that large of a refactor though, I think optionals would already be an improvement.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:43:18Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948973",
      "id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODk3Mw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 348339318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370948973",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370949281"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's an interesting point I hadn't considered! Could be an interesting separate project idea to have a macro of something like\r\n\r\n`DEFINED_CONSENSUS(param) ---> if not VALGRIND_BUILD param endig`\r\n\r\nto make sure that we define these things when we build for consensus, but to leave them undefined for valigrind.\r\n\r\nThis could be expanded to, for class members which you want to have this check, to union/wrap and define an accessor function via macro to avoid class initialization and be able to check initialization for arbitrary things not just primitives.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:49:10Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949281",
      "id" : 370949281,
      "in_reply_to_id" : 370948398,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTI4MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 197,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 104,
      "pull_request_review_id" : 348339581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370949281",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370949751"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does that really add anything? Yes, it technically removes UB in this case, but replaces it with incorrect consensus code. Furthermore, there already is a runtime check to avoid it (the _init) flag, and the ability to detect it during tests through Valgrind/ubsan/... (in the even less likely case the _init flag is set incorrectly).\r\n\r\nI feel this is all overkill, and we should just stick to the common practice of not initializing variables that deliberately hold no value.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T18:59:08Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949751",
      "id" : 370949751,
      "in_reply_to_id" : 370948398,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTc1MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 197,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 104,
      "pull_request_review_id" : 348340028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370949751",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370950458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "My point was more that we don't get the valgrind checkability for non primitive types, which seems like a good property if we want it for primitive types. A 0'd hash should be treated as undefined so that valgrind could pick it up.\r\n\r\nBut I'm resolving this convo here as it's a sidetrack, as noted above, \"Could be an interesting separate project idea\".",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T19:12:51Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950458",
      "id" : 370950458,
      "in_reply_to_id" : 370948398,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MDQ1OA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 197,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 104,
      "pull_request_review_id" : 348340726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370950458",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370950492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree to an extent that all the _init variables are ugly, but I don't think that they're that bad if you see them as just runtime checks for invalid code. The same can be accomplished without them using ubsan/valgrind, in many cases.\r\n\r\nAbout using Option... It's arguably the right tool for the job, but there is no singular \"definition of c++17 optional\"; there is the libstdc++ implementation, and the libc++ one, both of which may be relying on platform specific extensions (I haven't checked). Even ignoring that, the libstdc++ one is 1500 lines of code, which I think is really overkill for what we'd get. Since the Boost one can't be used in libconsensus, I think the current code is not too bad.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-25T19:13:13Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950492",
      "id" : 370950492,
      "in_reply_to_id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MDQ5Mg==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 348340742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370950492",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371029813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371029813"
         }
      },
      "author_association" : "NONE",
      "body" : "I believe \"If the this nonce function ...\" should be \"If this nonce function ...\".",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-26T21:14:54Z",
      "diff_hunk" : "@@ -333,6 +413,54 @@ static SECP256K1_INLINE void buffer_append(unsigned char *buf, unsigned int *off\n     *offset += len;\n }\n \n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorrDerive\")||SHA256(\"BIPSchnorrDerive\"). */\n+static void secp256k1_nonce_function_bipschnorr_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x1cd78ec3ul;\n+    sha->s[1] = 0xc4425f87ul;\n+    sha->s[2] = 0xb4f1a9f1ul;\n+    sha->s[3] = 0xa16abd8dul;\n+    sha->s[4] = 0x5a6dea72ul;\n+    sha->s[5] = 0xd28469e3ul;\n+    sha->s[6] = 0x17119b2eul;\n+    sha->s[7] = 0x7bd19a16ul;\n+    sha->bytes = 64;\n+}\n+\n+/* This nonce function is described in BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki) */\n+static int nonce_function_bipschnorr(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    secp256k1_sha256 sha;\n+\n+    if (counter != 0) {\n+        return 0;\n+    }\n+    /* Tag the hash with algo16 which is important to avoid nonce reuse across\n+     * algorithms. If the this nonce function is used in BIP-schnorr signing as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371029813",
      "id" : 371029813,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyOTgxMw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 440,
      "original_position" : 252,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/secp256k1.c",
      "position" : null,
      "pull_request_review_id" : 348405313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371029813",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60033096?v=4",
         "events_url" : "https://api.github.com/users/constcast-glitch/events{/privacy}",
         "followers_url" : "https://api.github.com/users/constcast-glitch/followers",
         "following_url" : "https://api.github.com/users/constcast-glitch/following{/other_user}",
         "gists_url" : "https://api.github.com/users/constcast-glitch/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/constcast-glitch",
         "id" : 60033096,
         "login" : "constcast-glitch",
         "node_id" : "MDQ6VXNlcjYwMDMzMDk2",
         "organizations_url" : "https://api.github.com/users/constcast-glitch/orgs",
         "received_events_url" : "https://api.github.com/users/constcast-glitch/received_events",
         "repos_url" : "https://api.github.com/users/constcast-glitch/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/constcast-glitch/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/constcast-glitch/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/constcast-glitch"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371030754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371030754"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you repeat this comment here: https://github.com/bitcoin-core/secp256k1/pull/558  ?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-26T21:30:38Z",
      "diff_hunk" : "@@ -333,6 +413,54 @@ static SECP256K1_INLINE void buffer_append(unsigned char *buf, unsigned int *off\n     *offset += len;\n }\n \n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorrDerive\")||SHA256(\"BIPSchnorrDerive\"). */\n+static void secp256k1_nonce_function_bipschnorr_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x1cd78ec3ul;\n+    sha->s[1] = 0xc4425f87ul;\n+    sha->s[2] = 0xb4f1a9f1ul;\n+    sha->s[3] = 0xa16abd8dul;\n+    sha->s[4] = 0x5a6dea72ul;\n+    sha->s[5] = 0xd28469e3ul;\n+    sha->s[6] = 0x17119b2eul;\n+    sha->s[7] = 0x7bd19a16ul;\n+    sha->bytes = 64;\n+}\n+\n+/* This nonce function is described in BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki) */\n+static int nonce_function_bipschnorr(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    secp256k1_sha256 sha;\n+\n+    if (counter != 0) {\n+        return 0;\n+    }\n+    /* Tag the hash with algo16 which is important to avoid nonce reuse across\n+     * algorithms. If the this nonce function is used in BIP-schnorr signing as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371030754",
      "id" : 371030754,
      "in_reply_to_id" : 371029813,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzMDc1NA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 440,
      "original_position" : 252,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/secp256k1.c",
      "position" : null,
      "pull_request_review_id" : 348406096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371030754",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371031177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371031177"
         }
      },
      "author_association" : "NONE",
      "body" : "Done",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-26T21:37:06Z",
      "diff_hunk" : "@@ -333,6 +413,54 @@ static SECP256K1_INLINE void buffer_append(unsigned char *buf, unsigned int *off\n     *offset += len;\n }\n \n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIPSchnorrDerive\")||SHA256(\"BIPSchnorrDerive\"). */\n+static void secp256k1_nonce_function_bipschnorr_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x1cd78ec3ul;\n+    sha->s[1] = 0xc4425f87ul;\n+    sha->s[2] = 0xb4f1a9f1ul;\n+    sha->s[3] = 0xa16abd8dul;\n+    sha->s[4] = 0x5a6dea72ul;\n+    sha->s[5] = 0xd28469e3ul;\n+    sha->s[6] = 0x17119b2eul;\n+    sha->s[7] = 0x7bd19a16ul;\n+    sha->bytes = 64;\n+}\n+\n+/* This nonce function is described in BIP-schnorr\n+ * (https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki) */\n+static int nonce_function_bipschnorr(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {\n+    secp256k1_sha256 sha;\n+\n+    if (counter != 0) {\n+        return 0;\n+    }\n+    /* Tag the hash with algo16 which is important to avoid nonce reuse across\n+     * algorithms. If the this nonce function is used in BIP-schnorr signing as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371031177",
      "id" : 371031177,
      "in_reply_to_id" : 371029813,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzMTE3Nw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 440,
      "original_position" : 252,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/secp256k1.c",
      "position" : null,
      "pull_request_review_id" : 348406393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371031177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60033096?v=4",
         "events_url" : "https://api.github.com/users/constcast-glitch/events{/privacy}",
         "followers_url" : "https://api.github.com/users/constcast-glitch/followers",
         "following_url" : "https://api.github.com/users/constcast-glitch/following{/other_user}",
         "gists_url" : "https://api.github.com/users/constcast-glitch/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/constcast-glitch",
         "id" : 60033096,
         "login" : "constcast-glitch",
         "node_id" : "MDQ6VXNlcjYwMDMzMDk2",
         "organizations_url" : "https://api.github.com/users/constcast-glitch/orgs",
         "received_events_url" : "https://api.github.com/users/constcast-glitch/received_events",
         "repos_url" : "https://api.github.com/users/constcast-glitch/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/constcast-glitch/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/constcast-glitch/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/constcast-glitch"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371073789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371073789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be nice if there was an `IsValid()` function to check if the pubkey is actually valid, as opposed to the signature being invalid.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T06:07:23Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371073789",
      "id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Mzc4OQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348451722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371073789",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371077447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371077447"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There should be no need.\n\nPublic keys as specified by BIP340 are 32-byte arrays, not points or X coordinates or whatever. The signature validation algorithm takes as input a 32-byte public key, and 64-byte signature, and a 32-byte message.\n\nThis is intentionally different from how ECDSA works, where differences between encoding errors and invalid signatures are significant, and arguably the cause of all the trouble we went through with ECDSA encodings, and BIP66...\n\nSo, to be clear: there should never be a behavior difference between an invalid signature and invalidity due to invalid public keys. Both are just inputs for which the verification returns false. Having a way to distinguish the two would be a risk.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T06:27:03Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371077447",
      "id" : 371077447,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NzQ0Nw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348457942,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371077447",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371081681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371081681"
         }
      },
      "author_association" : "NONE",
      "body" : "> It would be nice if there was an `IsValid()` function to check if the pubkey is actually valid, as opposed to the signature being invalid.\r\n\r\n```\r\nclass XOnlyPubKey {\r\nprivate:\r\n    uint256 m_keydata;\r\n\r\npublic:\r\n    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\r\n\r\n    /** Verify a 64-byte Schnorr signature.\r\n     *\r\n     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\r\n     */\r\n    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\r\n    bool CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool sign) const;\r\n\r\n    const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\r\n    const unsigned char* data() const { return m_keydata.begin(); }\r\n    size_t size() const { return 32; }\r\n};\r\n```\r\n\r\nThis on-line instruction is already doing the job \r\n``XOnlyPubKey(const uint256& in) : m_keydata(in) {}``",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T06:44:51Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371081681",
      "id" : 371081681,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MTY4MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348461813,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371081681",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7686916?v=4",
         "events_url" : "https://api.github.com/users/StEvUgnIn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/StEvUgnIn/followers",
         "following_url" : "https://api.github.com/users/StEvUgnIn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/StEvUgnIn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/StEvUgnIn",
         "id" : 7686916,
         "login" : "StEvUgnIn",
         "node_id" : "MDQ6VXNlcjc2ODY5MTY=",
         "organizations_url" : "https://api.github.com/users/StEvUgnIn/orgs",
         "received_events_url" : "https://api.github.com/users/StEvUgnIn/received_events",
         "repos_url" : "https://api.github.com/users/StEvUgnIn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/StEvUgnIn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/StEvUgnIn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/StEvUgnIn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371085911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371085911"
         }
      },
      "author_association" : "NONE",
      "body" : "I examined libstdc++ implementation for RISC-V architechture and it seems portable and independent from any physical architecture\r\nhttps://github.com/riscv/riscv-gcc/commits/riscv-gcc-8.3.0/libstdc%2B%2B-v3",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T07:07:29Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371085911",
      "id" : 371085911,
      "in_reply_to_id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4NTkxMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 348466970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371085911",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7686916?v=4",
         "events_url" : "https://api.github.com/users/StEvUgnIn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/StEvUgnIn/followers",
         "following_url" : "https://api.github.com/users/StEvUgnIn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/StEvUgnIn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/StEvUgnIn",
         "id" : 7686916,
         "login" : "StEvUgnIn",
         "node_id" : "MDQ6VXNlcjc2ODY5MTY=",
         "organizations_url" : "https://api.github.com/users/StEvUgnIn/orgs",
         "received_events_url" : "https://api.github.com/users/StEvUgnIn/received_events",
         "repos_url" : "https://api.github.com/users/StEvUgnIn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/StEvUgnIn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/StEvUgnIn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/StEvUgnIn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371090589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sipa It is not useful to be able to distinguish between an invalid pubkey and an invalid signature? I don't understand the reasoning there. Indeed it should be helpful to be able to tell a user which part they fat fingered, if any.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T07:25:50Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090589",
      "id" : 371090589,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA5MDU4OQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348472760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371090589",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371090902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@StEvUgnIn No, I am talking about the call to secp256k1_xonly_pubkey_parse failing.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T07:27:13Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090902",
      "id" : 371090902,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA5MDkwMg==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348473180,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371090902",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371091495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371091495"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure, for users it may be useful to have a sanity check. But consensus code should never distinguish between invalid public key and invalid signature.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T07:29:40Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371091495",
      "id" : 371091495,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA5MTQ5NQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348473938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371091495",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371095590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371095590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree. That said, having `IsValid()` would be helpful for non-consensus use.. I guess that would be tempting to use in consensus code, so a warning comment might be needed.",
      "commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "created_at" : "2020-01-27T07:45:22Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371095590",
      "id" : 371095590,
      "in_reply_to_id" : 371073789,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA5NTU5MA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_position" : 15,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 348478776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "updated_at" : "2020-01-27T07:45:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371095590",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371411509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371411509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@StEvUgnIn We can't just copy GPL code, unfortunately. Using libc++'s version may be an option, but it still seems overkill to me (it also contains lots of libc++ specific macros, that may require additional files to be included).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-27T18:37:19Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371411509",
      "id" : 371411509,
      "in_reply_to_id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQxMTUwOQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 348885402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371411509",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371645313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371645313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assertion will be hit, because `cache` is null when using the below constructor:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b8048b814821913b1f4c1c2070ec68b0c9001ec8/src/script/interpreter.h#L258\r\n\r\nMaybe checking if txdata is non-null and complain if it isn't, at\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b8048b814821913b1f4c1c2070ec68b0c9001ec8/src/script/interpreter.cpp#L1638\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T07:40:38Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371645313",
      "id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTMxMw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349174435,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371645313",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371653934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371653934"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If someone does `txdata = PrecomputedTransactionData(tx);` and then later tries to do `txdata.Init(tx, spent_outputs);` this line will terminate, despite `m_amounts_spent_ready` not being updated based on the new spent_outputs. Perhaps\r\n\r\n```C++\r\nif (ready && spent_outputs.empty()) return;\r\n```\r\n\r\nEdit: maybe even split into `if !ready, make hashes` and `if !m_amounts_spend_ready`, do spent stuff. (also fixed description; m_spent_outputs is updated, but the bool is not)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:07:12Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371653934",
      "id" : 371653934,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1MzkzNA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1401,
      "original_position" : 345,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349185038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371653934",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371655553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371655553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well yes it would assert because that would be invalid. It seems it's just doing its job?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:12:15Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371655553",
      "id" : 371655553,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTU1Mw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349187181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371655553",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371658686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371658686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not arguing against the assert, I'm saying that we should catch 'cache is null' before this point.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:21:08Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371658686",
      "id" : 371658686,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1ODY4Ng==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349191089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371658686",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371663250"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Because it's misleading and confusing. The assert is not triggering for the right reasons (I don't even think it's triggering at all, though tbh I'm not sure how C++ deals with being passed a null value for a referenced non-reference like this).\r\n\r\nIt's checking whether the cache is ready, but in reality the cache is null. This method does not even take a ref to begin with. The one place it's called is L1638, which could just do an `assert(txdata)` before calling `SignatureHashSchnorr`.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:33:20Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663250",
      "id" : 371663250,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MzI1MA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349196821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371663250",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371663431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that helps. If you reach this point without the cache initialized, you're using the code incorrectly.\n\nWhat is perhaps not clear is that this is not just a cache - we can't recompute data in it if it missing based on other sources. We rely on it to pass in essential information about the spending that cannot be retrieved otherwise.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:33:48Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663431",
      "id" : 371663431,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MzQzMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349197043,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371663431",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371664502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371664502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, you're talking about null vs uninitialized. I'll investigate tomorrow. Dereferencing or invoking a member function of a null pointer is UB; if that can happen we should indeed catch it earlier. I can't check the code right now.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:36:41Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371664502",
      "id" : 371664502,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2NDUwMg==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349198500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371664502",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371667917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371667917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hm.. for v0 this is actually accomodated for\r\n```C++\r\n        const bool cacheready = cache && cache->ready;\r\n```\r\nwhereas for v1 this is mandatory. I still think it's unnecessarily unhelpful, and a bit scary to have non-ref null values in code paths (even if as you say this is a hint of a bigger problem).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:44:49Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371667917",
      "id" : 371667917,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2NzkxNw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349202739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371667917",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371669023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371669023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do \"non-ref null values\" mean?\n\nA reference to nullptr is illegal, always. Only pointers can be nullptr.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:47:20Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371669023",
      "id" : 371669023,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2OTAyMw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349204074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371669023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371674659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371674659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In `SignatureHashSchnorr`, the last parameter, defined as `const PrecomputedTransactionData& cache`, is `0x0000000000000000` for the case where `*this->txdata == nullptr` above. This may be using the code incorrectly, but it seems worth catching before that call above.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-28T08:58:59Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371674659",
      "id" : 371674659,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NDY1OQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 349210969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371674659",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r372771079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372771079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this should be called `SignatureHashSchnorr` and be `<typename T>` to match `interpreter.cpp` v.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-30T05:57:55Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;\n+static constexpr size_t TAPROOT_CONTROL_BASE_SIZE = 33;\n+static constexpr size_t TAPROOT_CONTROL_NODE_SIZE = 32;\n+static constexpr size_t TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\n+static constexpr size_t TAPROOT_CONTROL_MAX_SIZE = TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * TAPROOT_CONTROL_MAX_NODE_COUNT;\n \n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n \n+template <class T>\n+bool SignatureHashTap(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, unsigned int in_pos, uint8_t hash_type, SigVersion sigversion, const PrecomputedTransactionData& cache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r372771079",
      "id" : 372771079,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MTA3OQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 216,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 350595516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372771079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373074045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373074045"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin Don't forget that the `std` namespace get special treatment from the compiler.\r\nso copying code from `libstd` without checking it might actually contain implementation defined behavior that won't necessarily work correctly with a different compiler(or even just by being outside of the std namespace).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-30T17:01:35Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373074045",
      "id" : 373074045,
      "in_reply_to_id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3NDA0NQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 350987923,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373074045",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373351801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373351801"
         }
      },
      "author_association" : "NONE",
      "body" : "@kallewoof OK",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-01-31T07:51:32Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373351801",
      "id" : 373351801,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MTgwMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 351337332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373351801",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7686916?v=4",
         "events_url" : "https://api.github.com/users/StEvUgnIn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/StEvUgnIn/followers",
         "following_url" : "https://api.github.com/users/StEvUgnIn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/StEvUgnIn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/StEvUgnIn",
         "id" : 7686916,
         "login" : "StEvUgnIn",
         "node_id" : "MDQ6VXNlcjc2ODY5MTY=",
         "organizations_url" : "https://api.github.com/users/StEvUgnIn/orgs",
         "received_events_url" : "https://api.github.com/users/StEvUgnIn/received_events",
         "repos_url" : "https://api.github.com/users/StEvUgnIn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/StEvUgnIn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/StEvUgnIn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/StEvUgnIn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r384485907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384485907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the P2SH check necessary here? There is a test for `prevScript.IsWitnessProgram()` a few lines up, is there anyway the script could still be P2SH at this point?\r\nOr should this actually test `prev.scriptPubKey.IsPayToScriptHash()` which is the actual previous TX output script, defined before `prevScript` is updated to the redeem script.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-02-26T13:19:30Z",
      "diff_hunk" : "@@ -231,6 +231,30 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r384485907",
      "id" : 384485907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NTkwNw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 236,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 364889274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384485907",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r389978895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389978895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Adding the `!is_p2sh` here means that any transaction input spending a P2SH-wrapped segwit v1 output will be valid, but will fail standardness with`SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM` (\"Witness version reserved for soft-fork upgrades\") which seems like the wrong error message. We're not expecting P2SH-wrapped segwit v1 outputs to reinterpreted by a future soft-fork, we're simply leaving them unencumbered for safety reasons. I think for correctness we should return a new error type in that case.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-09T21:44:03Z",
      "diff_hunk" : "@@ -1428,45 +1798,78 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessProgram({witness.stack.begin(), witness.stack.end() - 1}, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessProgram(witness.stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n-    } else {\n-        // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n+        assert(false); // Unreachable code\n     }\n \n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r389978895",
      "id" : 389978895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3ODg5NQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1820,
      "original_position" : 647,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 371550181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389978895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-03-13T22:58:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-598964995",
      "id" : 598964995,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5ODk2NDk5NQ==",
      "updated_at" : "2020-03-13T22:58:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598964995",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've rebased this on master, and taken the most recent version of https://github.com/bitcoin-core/secp256k1/pull/558 (which I've saved at https://github.com/jnewbery/secp256k1/tree/819c3a6c1 since the PR will have commits squashed and further small changes made). The rebased branch is at https://github.com/jnewbery/bitcoin/tree/pr17977.1. Changes:\r\n\r\n- _O(1) OP_IF/NOTIF/ELSE/ENDIF script implementation_ and _Abstract out script execution out of VerifyWitnessProgram()_ have both been merged into master (#16902 and #18002) so are no longer part of this PR.\r\n- The interface to `secp256k1_xonly_pubkey_tweak_test` has been changed to take the 32 bytes serialized output pubkey.\r\n- 32 bytes pubkeys are now implicit even y, not implicit square y\r\n- tagged hashes have changed\r\n\r\nI haven't implemented the synthetic nonce/auxiliary randomness from https://github.com/bitcoin/bips/pull/893 in the test code. That could be done separately (but there's nothing to be done in bitcoind for this - it'd be more as demonstration code in the test framework).\r\n\r\nThe _[MOVEONLY] Move single-sig checking EvalScript code to EvalChecksig_ and _[REFACTOR] Initialize PrecomputedTransactionData in CheckInputs_ commits could be sliced off into their own PRs. There's not any benefit from those changes outside Taproot, but if people think it'd be useful to reduce the size of this PR, I'm happy to open and maintain those PRs.",
      "created_at" : "2020-03-17T21:18:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-600306118",
      "id" : 600306118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDMwNjExOA==",
      "updated_at" : "2020-03-17T21:18:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600306118",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, and included @jnewbery's changes from above.\r\n\r\nHere is what I did:\r\n* I created a rebase myself (with the old libsecp256k1, and old square pubkey rule).\r\n* Compared the final tree with John's version, allowing me to review the even-pubkey changes; everything looked correct, but I saw a few minor improvements.\r\n* I switched to John's version, apart from this patch:\r\n```diff\r\ndiff --git a/src/pubkey.cpp b/src/pubkey.cpp\r\nindex 246c19a8f8..2231a4ee71 100644\r\n--- a/src/pubkey.cpp\r\n+++ b/src/pubkey.cpp\r\n@@ -178,9 +178,8 @@ bool XOnlyPubKey::VerifySchnorr(const uint256 &hash, const std::vector<unsigned\r\n \r\n bool XOnlyPubKey::CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool negated) const\r\n {\r\n-    secp256k1_xonly_pubkey base_point, output_point;\r\n+    secp256k1_xonly_pubkey base_point;\r\n     if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &base_point, base.data())) return false;\r\n-    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &output_point, m_keydata.begin())) return false;\r\n     return secp256k1_xonly_pubkey_tweak_test(secp256k1_context_verify, m_keydata.begin(), negated, &base_point, hash.begin());\r\n }\r\n \r\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\r\nindex 12ad6e7236..c3dd00de43 100644\r\n--- a/src/script/interpreter.cpp\r\n+++ b/src/script/interpreter.cpp\r\n@@ -1812,7 +1812,6 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\r\n         } else {\r\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\r\n         }\r\n-        assert(false); // Unreachable code\r\n     } else if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {\r\n         if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\r\n         auto stack = witness.stack;\r\n@@ -1857,7 +1856,6 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\r\n             }\r\n             return set_success(serror);\r\n         }\r\n-        assert(false); // Unreachable code\r\n     } else {\r\n         if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\r\n             return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\r\n```\r\n* Also added a commit 61bdc448dffdc41ef03cb775bfb67e0dac1dca09, after noticing that an unnecessary stack copy was being made in `VerifyWitnessProgram`.\r\n* Pushed to the PR branch, and noticed that a new rebase was necessary.\r\n* Did another rebase.\r\n* Noticed the tests were failing, due to a bug introduced in #17319; fixed in 1d293165551dbc6403dba59c2e5a896c5ae5366e (submitted separately as #18374).",
      "created_at" : "2020-03-18T05:43:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-600435965",
      "id" : 600435965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDQzNTk2NQ==",
      "updated_at" : "2020-03-18T05:47:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600435965",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396012415"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems to be more of a potential improvement for later.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T17:39:59Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012415",
      "id" : 396012415,
      "in_reply_to_id" : 370948973,
      "line" : 182,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjQxNQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 89,
      "pull_request_review_id" : 378936564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396012415",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396012754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@kallewoof So, I suggest that maybe we add a way to test if a pubkey is valid later when wallet support is added. But as the current PR is solely consensus/validation code, I think it's simpler and safer to not expose that distinction for now.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T17:43:44Z",
      "diff_hunk" : "@@ -203,6 +203,25 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012754",
      "id" : 396012754,
      "in_reply_to_id" : 371073789,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjc1NA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 220,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : 15,
      "pull_request_review_id" : 378936837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396012754",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396018821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:56:16Z",
      "diff_hunk" : "@@ -0,0 +1,594 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import CScript, TaprootSignatureHash, taproot_construct, OP_0, OP_1, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD, OP_IF, OP_CODESEPARATOR, OP_ELSE, OP_ENDIF, OP_DROP, LEAF_VERSION_TAPSCRIPT, SIGHASH_SINGLE, is_op_success, CScriptOp, OP_RETURN, OP_VERIF, OP_1NEGATE, OP_EQUAL, OP_SWAP, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, OP_NOTIF, OP_2DROP, OP_NOT, OP_2DUP, OP_1SUB, OP_DUP, MAX_SCRIPT_ELEMENT_SIZE, LOCKTIME_THRESHOLD, ANNEX_TAG",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018821",
      "id" : 396018821,
      "in_reply_to_id" : 370908509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxODgyMQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 378942331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396018821",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396018978"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice catch, I finally looked into this, and I agree this is too fragile. I've changed `SignatureHashSchnorr` to take a pointer to a `PrecomputedTramsactionData` instead, and assert fail when it's null.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:57:26Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n         ready = true;\n+\n+        if (!m_spent_outputs.empty()) {\n+            m_amounts_spent_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_amounts_spent_ready = true;\n+        }\n     }\n }\n \n+template <class T>\n+PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+{\n+    Init(txTo, {});\n+}\n+\n // explicit instantiation\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+static const CHashWriter HasherTapLeaf = TaggedHash(\"TapLeaf\");\n+static const CHashWriter HasherTapBranch = TaggedHash(\"TapBranch\");\n+static const CHashWriter HasherTapTweak = TaggedHash(\"TapTweak\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData& cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    case SigVersion::TAPSCRIPT:\n+        ext_flag = 1;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache.ready && cache.m_amounts_spent_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018978",
      "id" : 396018978,
      "in_reply_to_id" : 371645313,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxODk3OA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1451,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 378942489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396018978",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's not called anywhere externally, so I've just dropped it from the header file.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:57:56Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;\n+static constexpr size_t TAPROOT_CONTROL_BASE_SIZE = 33;\n+static constexpr size_t TAPROOT_CONTROL_NODE_SIZE = 32;\n+static constexpr size_t TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\n+static constexpr size_t TAPROOT_CONTROL_MAX_SIZE = TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * TAPROOT_CONTROL_MAX_NODE_COUNT;\n \n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n \n+template <class T>\n+bool SignatureHashTap(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, unsigned int in_pos, uint8_t hash_type, SigVersion sigversion, const PrecomputedTransactionData& cache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019071",
      "id" : 396019071,
      "in_reply_to_id" : 372771079,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTA3MQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 216,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 378942552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019071",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. I've rewritten this to effectively treat `ready` as referring to the pre-taproot stuff and `m_amounts_spend_ready` for the rest.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:58:34Z",
      "diff_hunk" : "@@ -1209,27 +1379,141 @@ uint256 GetOutputsHash(const T& txTo)\n     for (const auto& txout : txTo.vout) {\n         ss << txout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();\n+}\n+\n+uint256 GetSpentAmountsHash(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n }\n \n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n+    m_spent_outputs = std::move(spent_outputs);\n+\n+    if (ready) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019184",
      "id" : 396019184,
      "in_reply_to_id" : 371653934,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTE4NA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1401,
      "original_position" : 345,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 378942640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019184",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:58:46Z",
      "diff_hunk" : "@@ -114,32 +120,101 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or -1 if none executed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019212",
      "id" : 396019212,
      "in_reply_to_id" : 370948291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTIxMg==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 182,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 378942672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019212",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T18:58:54Z",
      "diff_hunk" : "@@ -1416,10 +1728,68 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, const ScriptExecutionData& execdata, ScriptError* serror)\n+{\n+    // OP_SUCCESSx processing overrides everything, including stack element size limits\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n+                return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+            }\n+            // New opcodes will be listed here. May use a different sigversion to modify existing opcodes.\n+            if (IsOpSuccess(opcode)) {\n+                if (flags & SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS) {\n+                    return set_error(serror, SCRIPT_ERR_DISCOURAGE_OP_SUCCESS);\n+                }\n+                return set_success(serror);\n+            }\n+        }\n+    }\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+        }\n+    }\n+\n+    // Run the script interpreter.\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror, execdata)) return false;\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n+    if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256* tapleaf_hash)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    if (tapleaf_hash) *tapleaf_hash = k;\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;\n+        if (std::lexicographical_compare(k.begin(), k.end(), node_begin, node_begin + TAPROOT_CONTROL_NODE_SIZE)) {\n+           ss_branch << k << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019225",
      "id" : 396019225,
      "in_reply_to_id" : 370916701,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTIyNQ==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1777,
      "original_position" : 595,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 378942691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019225",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@pinheadmz Good point, this is wrong; it's supposed to test `prev.scriptPubKey` instead of `prevScript`. I've changed it to keep track of `p2sh`-ness above, and then test that instead.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T19:00:11Z",
      "diff_hunk" : "@@ -231,6 +231,30 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check P2TR standard limits\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !prevScript.IsPayToScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019344",
      "id" : 396019344,
      "in_reply_to_id" : 384485907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTM0NA==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 236,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 378942795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019344",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe we can just change the error message to also encompass things that we don't expect will ever be used? (for example, we don't expect witness programs with size below 32 - and certainly not ones with size below 20 - to be used, but they're still available for future extensions)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T19:01:26Z",
      "diff_hunk" : "@@ -1428,45 +1798,78 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessProgram({witness.stack.begin(), witness.stack.end() - 1}, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessProgram(witness.stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n-    } else {\n-        // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n+        assert(false); // Unreachable code\n     }\n \n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019473",
      "id" : 396019473,
      "in_reply_to_id" : 389978895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxOTQ3Mw==",
      "original_commit_id" : "b8048b814821913b1f4c1c2070ec68b0c9001ec8",
      "original_line" : 1820,
      "original_position" : 647,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 378942885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396019473",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396032513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396032513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I'm not 100% clear on our`include` guidelines - `string` is included via `hash.h`, so if that's sufficient this line is unnecessary, if that's not sufficient, then we should also include `uint256.h`, etc here.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T21:55:09Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n \n+#include <string>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396032513",
      "id" : 396032513,
      "line" : 9,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzMjUxMw==",
      "original_commit_id" : "7641c52162d383619ceb4dbf430c02e26864eff6",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : 4,
      "pull_request_review_id" : 378954769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396032513",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396039037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396039037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Guidelines say to include what you use, so including seems correct to me.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-21T23:36:00Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n \n+#include <string>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396039037",
      "id" : 396039037,
      "in_reply_to_id" : 396032513,
      "line" : 9,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAzOTAzNw==",
      "original_commit_id" : "7641c52162d383619ceb4dbf430c02e26864eff6",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : 4,
      "pull_request_review_id" : 378960074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396039037",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r397398915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397398915"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should `stack.front()` be preferred over `stack[0]`?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-24T19:12:53Z",
      "diff_hunk" : "@@ -1478,51 +1727,136 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool ExecuteWitnessScript(std::vector<valtype>::const_iterator begin, std::vector<valtype>::const_iterator end, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, const ScriptExecutionData& execdata, ScriptError* serror)\n {\n-    std::vector<valtype> stack{begin, end};\n+    std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n+\n+    // OP_SUCCESSx processing overrides everything, including stack element size limits\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n+                return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+            }\n+            // New opcodes will be listed here. May use a different sigversion to modify existing opcodes.\n+            if (IsOpSuccess(opcode)) {\n+                if (flags & SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS) {\n+                    return set_error(serror, SCRIPT_ERR_DISCOURAGE_OP_SUCCESS);\n+                }\n+                return set_success(serror);\n+            }\n+        }\n+    }\n \n     // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n     for (const valtype& elem : stack) {\n         if (elem.size() > MAX_SCRIPT_ELEMENT_SIZE) return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n     }\n \n     // Run the script interpreter.\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror)) return false;\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror, execdata)) return false;\n \n     // Scripts inside witness implicitly require cleanstack behaviour\n     if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n     if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n     return true;\n }\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256* tapleaf_hash)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    if (tapleaf_hash) *tapleaf_hash = k;\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;\n+        if (std::lexicographical_compare(k.begin(), k.end(), node_begin, node_begin + TAPROOT_CONTROL_NODE_SIZE)) {\n+            ss_branch << k << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE);\n+        } else {\n+            ss_branch << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE) << k;\n+        }\n+        k = ss_branch.GetSHA256();\n+    }\n+    k = (CHashWriter(HasherTapTweak) << MakeSpan(p) << k).GetSHA256();\n+    return q.CheckPayToContract(p, k, control[0] & 1);\n+}\n+\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n {\n     CScript scriptPubKey;\n+    Span<const valtype> stack = MakeSpan(witness.stack);\n+    ScriptExecutionData execdata;\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n             // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n-            if (witness.stack.size() == 0) {\n+            if (stack.size() == 0) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n-            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end() - 1, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n-            if (witness.stack.size() != 2) {\n+            if (stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end(), scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            const valtype& annex = SpanPopBack(stack);\n+            execdata.m_annex_hash = (CHashWriter(SER_GETHASH, 0) << annex).GetSHA256();\n+            execdata.m_annex_present = true;\n+        } else {\n+            execdata.m_annex_present = false;\n+        }\n+        execdata.m_annex_init = true;\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack[0], program, SigVersion::TAPROOT, execdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r397398915",
      "id" : 397398915,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5ODkxNQ==",
      "original_commit_id" : "98ad33ac24ab6c64e1ff7087f02b66f763678720",
      "original_line" : 1833,
      "original_position" : 576,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 380620536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397398915",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r398871493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398871493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-26T20:30:30Z",
      "diff_hunk" : "@@ -1478,51 +1727,136 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool ExecuteWitnessScript(std::vector<valtype>::const_iterator begin, std::vector<valtype>::const_iterator end, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, const ScriptExecutionData& execdata, ScriptError* serror)\n {\n-    std::vector<valtype> stack{begin, end};\n+    std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n+\n+    // OP_SUCCESSx processing overrides everything, including stack element size limits\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n+                return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+            }\n+            // New opcodes will be listed here. May use a different sigversion to modify existing opcodes.\n+            if (IsOpSuccess(opcode)) {\n+                if (flags & SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS) {\n+                    return set_error(serror, SCRIPT_ERR_DISCOURAGE_OP_SUCCESS);\n+                }\n+                return set_success(serror);\n+            }\n+        }\n+    }\n \n     // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n     for (const valtype& elem : stack) {\n         if (elem.size() > MAX_SCRIPT_ELEMENT_SIZE) return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n     }\n \n     // Run the script interpreter.\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror)) return false;\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror, execdata)) return false;\n \n     // Scripts inside witness implicitly require cleanstack behaviour\n     if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n     if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n     return true;\n }\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256* tapleaf_hash)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    if (tapleaf_hash) *tapleaf_hash = k;\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;\n+        if (std::lexicographical_compare(k.begin(), k.end(), node_begin, node_begin + TAPROOT_CONTROL_NODE_SIZE)) {\n+            ss_branch << k << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE);\n+        } else {\n+            ss_branch << Span<const unsigned char>(node_begin, TAPROOT_CONTROL_NODE_SIZE) << k;\n+        }\n+        k = ss_branch.GetSHA256();\n+    }\n+    k = (CHashWriter(HasherTapTweak) << MakeSpan(p) << k).GetSHA256();\n+    return q.CheckPayToContract(p, k, control[0] & 1);\n+}\n+\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n {\n     CScript scriptPubKey;\n+    Span<const valtype> stack = MakeSpan(witness.stack);\n+    ScriptExecutionData execdata;\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n             // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n-            if (witness.stack.size() == 0) {\n+            if (stack.size() == 0) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n-            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end() - 1, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n-            if (witness.stack.size() != 2) {\n+            if (stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end(), scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            const valtype& annex = SpanPopBack(stack);\n+            execdata.m_annex_hash = (CHashWriter(SER_GETHASH, 0) << annex).GetSHA256();\n+            execdata.m_annex_present = true;\n+        } else {\n+            execdata.m_annex_present = false;\n+        }\n+        execdata.m_annex_init = true;\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack[0], program, SigVersion::TAPROOT, execdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r398871493",
      "id" : 398871493,
      "in_reply_to_id" : 397398915,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3MTQ5Mw==",
      "original_commit_id" : "98ad33ac24ab6c64e1ff7087f02b66f763678720",
      "original_line" : 1833,
      "original_position" : 576,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 382392978,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398871493",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on top of #18388, #18422, and #18401, and addressed a number of comments.",
      "created_at" : "2020-03-26T20:31:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-604669232",
      "id" : 604669232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDY2OTIzMg==",
      "updated_at" : "2020-03-26T20:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604669232",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-03-27T07:17:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-604851395",
      "id" : 604851395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDg1MTM5NQ==",
      "updated_at" : "2020-03-27T07:17:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604851395",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased now that #18388 (Span stack) is merged.",
      "created_at" : "2020-03-27T20:48:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-605308348",
      "id" : 605308348,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTMwODM0OA==",
      "updated_at" : "2020-03-27T20:48:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605308348",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399680669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399680669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: could these two bools be replaced with an `Optional<bool>`? Optional is std from c++17 but currently implemented using boost::optional. Do we prefer to keep that out of consensus code?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T16:24:13Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399680669",
      "id" : 399680669,
      "line" : 195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MDY2OQ==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 195,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 102,
      "pull_request_review_id" : 383327014,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399680669",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399683139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399683139"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this just a duplicate of `WITNESS_V1_TAPROOT_SIZE`? It's only used once in `VerifyWitnessProgram()`. Can we replace that usage with `WITNESS_V1_TAPROOT_SIZE`?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T16:46:23Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399683139",
      "id" : 399683139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MzEzOQ==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 206,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 383328887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399683139",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399694732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We can't use boost in libconsensus (well we could if we add a dependency mess to it, but I suspect we rather not). There was an earlier discussion in this PR about this, including the option of including a simple native Optional type definition. I think this is overkill, and this approach is fine for now - we can switch to std::optional once it's available.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T18:37:35Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694732",
      "id" : 399694732,
      "in_reply_to_id" : 399680669,
      "line" : 195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5NDczMg==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 195,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 102,
      "pull_request_review_id" : 383338094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399694732",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399694847"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~The constants happen to be identical, but there is no a-priori reason why they would be (if you wouldn't know the BIP, say). They're separate concepts, so merging the constants would IMO defeat the purpose of having a named constant in the first place.~~",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T18:38:36Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694847",
      "id" : 399694847,
      "in_reply_to_id" : 399683139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5NDg0Nw==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 206,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 383338186,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399694847",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399708460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399708460"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm confused by what the difference is.\r\n\r\nIn policy.cpp:\r\n\r\n```\r\n        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !p2sh) {\r\n```\r\n\r\nIn interpreter.cpp:\r\n\r\n```\r\n    } else if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {\r\n```\r\n\r\nAre those not comparing the same data to the same constant, just with different constant names?\r\n\r\n(those functions use the same constant names for segwit V0 scripthash program sizes:\r\n\r\n```\r\n        if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\r\n```\r\n\r\nand\r\n\r\n```\r\n        if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\r\n```\r\n)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T20:54:51Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399708460",
      "id" : 399708460,
      "in_reply_to_id" : 399683139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwODQ2MA==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 206,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 383348789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399708460",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399710184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399710184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, of course! Sorry, I misread; thinking that one was the constant for (v0) P2WSH. Will merge them into one.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T21:12:57Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399710184",
      "id" : 399710184,
      "in_reply_to_id" : 399683139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxMDE4NA==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 206,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 383350124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399710184",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399716976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399716976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-03-28T22:26:34Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;\n+    //! Whether an annex is present.\n+    bool m_annex_present;\n+    //! Hash of the annex data.\n+    uint256 m_annex_hash;\n+\n+    /** Whether m_validation_weight_left is initialized. */\n+    bool m_validation_weight_left_init = false;\n+    /** How much validation weight is left (decremented for every successful signature check). */\n+    int64_t m_validation_weight_left;\n };\n \n /** Signature hash sizes */\n static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n+static constexpr size_t WITNESS_V1_TAPROOT_SIZE = 32;\n+\n+\n+static constexpr uint8_t TAPROOT_LEAF_MASK = 0xfe;\n+static constexpr uint8_t TAPROOT_LEAF_TAPSCRIPT = 0xc0;\n+static constexpr size_t TAPROOT_PROGRAM_SIZE = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399716976",
      "id" : 399716976,
      "in_reply_to_id" : 399683139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNjk3Ng==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 206,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 383354971,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399716976",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Made another change: the policy-checking code now also uses Span stacks.",
      "created_at" : "2020-03-28T22:27:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-605527885",
      "id" : 605527885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTUyNzg4NQ==",
      "updated_at" : "2020-03-28T22:27:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605527885",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-10T18:44:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-612164511",
      "id" : 612164511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjE2NDUxMQ==",
      "updated_at" : "2020-04-10T18:44:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612164511",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Don't rebase yet. I hope to get #18401 merged soon.",
      "created_at" : "2020-04-10T20:30:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-612203848",
      "id" : 612203848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjIwMzg0OA==",
      "updated_at" : "2020-04-10T20:30:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612203848",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r407052056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407052056"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Optional nit (feel free to ignore): Refer to the BIP (341) explaining why single hashes are added. https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-15",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-04-11T11:23:46Z",
      "diff_hunk" : "@@ -114,28 +120,92 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r407052056",
      "id" : 407052056,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MjA1Ng==",
      "original_commit_id" : "e83b1772d00c5e8538675735ce3df83c8fa4efdb",
      "original_line" : 147,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 391758259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407052056",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've rebased this branch on master here: https://github.com/jnewbery/bitcoin/tree/pr17977.2 (using the same libsecp commit).\r\n\r\nThis did require one additional commit https://github.com/jnewbery/bitcoin/commit/df38ebef99229a29c16cda571ded4a3613ead743 due to the new assert added in `PrecomputedTransactionData::Init()`. I'll PR that separately.",
      "created_at" : "2020-04-16T19:19:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-614846939",
      "id" : 614846939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDg0NjkzOQ==",
      "updated_at" : "2020-04-16T19:19:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614846939",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've rebased on master again now that https://github.com/jnewbery/bitcoin/commit/df38ebef99229a29c16cda571ded4a3613ead743 is merged. Here: https://github.com/jnewbery/bitcoin/tree/pr17977.3",
      "created_at" : "2020-04-19T15:21:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-616160883",
      "id" : 616160883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNjE2MDg4Mw==",
      "updated_at" : "2020-04-19T15:21:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616160883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery Did the rebase myself, and ended up with an almost identical tree as yours. Yours was slightly cleaner, so I used that one, rebased it on a new secp256k1 subtree merge, and pushed it.",
      "created_at" : "2020-04-19T21:34:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-616228768",
      "id" : 616228768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNjIyODc2OA==",
      "updated_at" : "2020-04-19T21:34:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616228768",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "BTW if willing https://github.com/bitcoin/bitcoin/pull/18071 plucks out some of the changes from taproot & should be a relatively easy rebase. A couple symbol names are changed for clarity as the crypto return value has changed from the double hash to the single. ",
      "created_at" : "2020-04-21T19:14:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-617359858",
      "id" : 617359858,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNzM1OTg1OA==",
      "updated_at" : "2020-04-21T19:14:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617359858",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-27T00:35:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-619650782",
      "id" : 619650782,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTY1MDc4Mg==",
      "updated_at" : "2020-04-27T00:35:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619650782",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, updated libsecp256k1 branch, and converted the Schnorr framework test to a Python unittest (see #18576).",
      "created_at" : "2020-05-02T21:19:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-623014565",
      "id" : 623014565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzAxNDU2NQ==",
      "updated_at" : "2020-05-02T21:19:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623014565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r419018428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419018428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/functional/test_framework/address.py:10:1: F401 '.script.hash256' imported but unused",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-05-02T22:58:24Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n import enum\n \n+from .base58 import byte_to_base58\n from .script import hash256, hash160, sha256, CScript, OP_0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r419018428",
      "id" : 419018428,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxODQyOA==",
      "original_commit_id" : "c547a9683bd42e23242cc073fcef9bf4bfe91653",
      "original_line" : 10,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/address.py",
      "position" : null,
      "pull_request_review_id" : 404566752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419018428",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r420596666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420596666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-05-06T07:34:10Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n import enum\n \n+from .base58 import byte_to_base58\n from .script import hash256, hash160, sha256, CScript, OP_0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r420596666",
      "id" : 420596666,
      "in_reply_to_id" : 419018428,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjY2Ng==",
      "original_commit_id" : "c547a9683bd42e23242cc073fcef9bf4bfe91653",
      "original_line" : 10,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/address.py",
      "position" : null,
      "pull_request_review_id" : 406365052,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420596666",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa IIUC, the secp256k1 changes here are currently updating our subtree to upstream @ https://github.com/bitcoin-core/secp256k1/commit/e9fccd4de1f2b382545dfbadeae54868447e2cdf; with https://github.com/bitcoin-core/secp256k1/pull/558 on top. \r\n\r\nGiven there's been another push to https://github.com/bitcoin-core/secp256k1/pull/558, as well as additional merges to secp256k1 master, and, it's now been more than a year since we [last updated our subtree](https://github.com/bitcoin/bitcoin/pull/15703), could you pull the secp256k1 subtree update out of here, and PR it separately? Then we'd have less change here, and what's left would just be Schnorr related (#558). It's also a good time as we are early in the 0.21 cycle.",
      "created_at" : "2020-05-22T08:40:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632574049",
      "id" : 632574049,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjU3NDA0OQ==",
      "updated_at" : "2020-05-22T08:40:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632574049",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased to include the new bitcoin-core/secp256k1#558.\r\n\r\n@fanquake Will do, as soon as a few recent improvements are merged in the secp256k1 repository.",
      "created_at" : "2020-05-22T20:17:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632894808",
      "id" : 632894808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjg5NDgwOA==",
      "updated_at" : "2020-05-23T00:15:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632894808",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated now to include the changes in https://github.com/bitcoin/bips/pull/920.",
      "created_at" : "2020-05-23T00:14:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632952016",
      "id" : 632952016,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjk1MjAxNg==",
      "updated_at" : "2020-05-23T00:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632952016",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-30T17:17:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-636359543",
      "id" : 636359543,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNjM1OTU0Mw==",
      "updated_at" : "2020-05-30T17:17:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636359543",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on top of #19228 ",
      "created_at" : "2020-06-10T00:49:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-641655191",
      "id" : 641655191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTY1NTE5MQ==",
      "updated_at" : "2020-06-10T00:49:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641655191",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-06-10T14:38:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-642053046",
      "id" : 642053046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjA1MzA0Ng==",
      "updated_at" : "2020-06-10T14:38:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642053046",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after merge of #19228 and #18468.",
      "created_at" : "2020-06-18T16:27:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-646144752",
      "id" : 646144752,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjE0NDc1Mg==",
      "updated_at" : "2020-06-18T16:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646144752",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r448490009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448490009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason not to put the cheap policy check before VerifyTaprootCommitment() ? ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-01T16:45:21Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r448490009",
      "id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5MDAwOQ==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 441036603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448490009",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454607993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454607993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`s/32/hash.size()/` if you don't mind",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T19:57:40Z",
      "diff_hunk" : "@@ -87,3 +87,10 @@ CHashWriter TaggedHash(const std::string& tag)\n     writer << taghash << taghash;\n     return writer;\n }\n+\n+uint256 SHA256Uint256(const uint256& hash)\n+{\n+    uint256 result;\n+    CSHA256().Write(hash.begin(), 32).Finalize(result.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454607993",
      "id" : 454607993,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNzk5Mw==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 94,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454607993",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454610820"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this ever expected to not hit?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:02:59Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n+        if (!m_spent_outputs.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610820",
      "id" : 454610820,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMDgyMA==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 1417,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454610820",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454610931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this for simply catching assertion condition?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:03:16Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n+        if (!m_spent_outputs.empty()) {\n+            m_spent_amounts_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_spent_scripts_hash = GetSpentScriptsHash(m_spent_outputs);\n+            m_spent_outputs_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610931",
      "id" : 454610931,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMDkzMQ==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 1420,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454610931",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454613765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454613765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`s/32/m_keydata.size()/`",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:08:37Z",
      "diff_hunk" : "@@ -203,6 +203,23 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n+\n+    const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n+    size_t size() const { return 32; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454613765",
      "id" : 454613765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMzc2NQ==",
      "original_commit_id" : "05b00d5eabea621d2cab55362f6c5a21f74311df",
      "original_line" : 220,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454613765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454624482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please annotate `/* is_p2sh */`",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:28:26Z",
      "diff_hunk" : "@@ -1724,7 +1778,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n                 // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n                 return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n             }\n-            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror, false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624482",
      "id" : 454624482,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNDQ4Mg==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1781,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454624482",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454624548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please annotate `/* is_p2sh */`",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:28:32Z",
      "diff_hunk" : "@@ -1769,7 +1823,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n                     // reintroduce malleability.\n                     return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n                 }\n-                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror, true)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624548",
      "id" : 454624548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNDU0OA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1826,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454624548",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454627469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454627469"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could mention the key could be busted too.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:33:49Z",
      "diff_hunk" : "@@ -91,6 +95,10 @@ std::string ScriptErrorString(const ScriptError serror)\n             return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n             return \"Using non-compressed keys in segwit\";\n+        case SCRIPT_ERR_TAPROOT_INVALID_SIG:\n+            return \"Invalid signature for Taproot key path spending\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454627469",
      "id" : 454627469,
      "line" : 103,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNzQ2OQ==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 103,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/script_error.cpp",
      "position" : 20,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454627469",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454634063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454634063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "did I miss why the const is dropped here?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:45:46Z",
      "diff_hunk" : "@@ -1391,9 +1391,9 @@ bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_p\n     }\n \n     // Data about the input/prevout being spent\n-    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n-    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n-    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    assert(execdata.m_annex_init);\n+    bool have_annex = execdata.m_annex_present;\n+    uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454634063",
      "id" : 454634063,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzNDA2Mw==",
      "original_commit_id" : "da73c5e3eb01bb362f6427fa7302079f3d981ac5",
      "original_line" : 1396,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454634063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454635726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454635726"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice when time comes.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:48:52Z",
      "diff_hunk" : "@@ -114,28 +120,94 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_amounts_spent_hash;\n+    bool m_amounts_spent_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool ready = false;\n+    std::vector<CTxOut> m_spent_outputs;\n+\n+    PrecomputedTransactionData() = default;\n+\n+    template <class T>\n+    void Init(const T& tx, std::vector<CTxOut> spent_outputs);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n };\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16\n+    WITNESS_V0 = 1,  //!< Witness v0 (P2WPKH and P2WSH); see BIP 141\n+    TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n+    TAPSCRIPT = 3,   //!< Witness v1 with non-P2SH 32 byte program (Taproot), script path spending, leaf version 0xc0 (Tapscript); see BIP 342\n+};\n+\n+struct ScriptExecutionData\n+{\n+    //! Whether m_tapleaf_hash is initialized.\n+    bool m_tapleaf_hash_init = false;\n+    //! The tapleaf hash.\n+    uint256 m_tapleaf_hash;\n+\n+    //! Whether m_codeseparator_pos is initialized.\n+    bool m_codeseparator_pos_init = false;\n+    //! Opcode position of the last executed OP_CODESEPARATOR (or 0xFFFFFFFF if none executed).\n+    uint32_t m_codeseparator_pos;\n+\n+    //! Whether m_annex_present and m_annex_hash are initialized.\n+    bool m_annex_init = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454635726",
      "id" : 454635726,
      "in_reply_to_id" : 399680669,
      "line" : 195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzNTcyNg==",
      "original_commit_id" : "b1e76bda23e80a4b9e510d7ea1e065f819694a93",
      "original_line" : 195,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 102,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454635726",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454637523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454637523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The following validation sequence is consensus critical.\r\n\r\nYou don't say",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T20:52:05Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454637523",
      "id" : 454637523,
      "line" : 376,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzNzUyMw==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 376,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 27,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454637523",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454650575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454650575"
         }
      },
      "author_association" : "MEMBER",
      "body" : "N.B.: Let's make sure there's a test that catches the >4 bytes rule for addition",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T21:16:49Z",
      "diff_hunk" : "@@ -1029,9 +1098,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 }\n                 break;\n \n+                case OP_CHECKSIGADD:\n+                {\n+                    // OP_CHECKSIGADD is only available in Tapscript\n+                    if (sigversion != SigVersion::TAPSCRIPT) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+\n+                    // (sig num pubkey -- num)\n+                    if (stack.size() < 3) return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    const valtype& sig = stacktop(-3);\n+                    const CScriptNum num(stacktop(-2), fRequireMinimal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454650575",
      "id" : 454650575,
      "line" : 1107,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1MDU3NQ==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1107,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 158,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454650575",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454656075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454656075"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The various peppering of `sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0` and `sigversion != SigVersion::TAPSCRIPT` makes me a little uneasy. Synchronize these checks?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-14T21:28:11Z",
      "diff_hunk" : "@@ -408,9 +473,12 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n             if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n                 return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n \n-            // Note how OP_RESERVED does not count towards the opcode limit.\n-            if (opcode > OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)\n-                return set_error(serror, SCRIPT_ERR_OP_COUNT);\n+            if (sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454656075",
      "id" : 454656075,
      "line" : 473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NjA3NQ==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 473,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 110,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454656075",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455042663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455042663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this would be easy/nice to split out for unit tests",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-15T13:16:56Z",
      "diff_hunk" : "@@ -1634,6 +1740,25 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    // OP_SUCCESSx processing overrides everything, including stack element size limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455042663",
      "id" : 455042663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MjY2Mw==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1743,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455042663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455048734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455048734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it'd be cleaner to just make the `Span` here, then use it for next 4 lines?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-15T13:25:16Z",
      "diff_hunk" : "@@ -1645,14 +1648,34 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455048734",
      "id" : 455048734,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0ODczNA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1659,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455048734",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455057389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455057389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Currently this only enforces `MAX_STANDARD_TAPSCRIPT_STACK_ITEM_SIZE` on top of consensus checks, yes?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-15T13:37:34Z",
      "diff_hunk" : "@@ -231,6 +233,34 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check Taproot standardness limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455057389",
      "id" : 455057389,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1NzM4OQ==",
      "original_commit_id" : "43cbfab02a4349e6510068bbee39d836de954d68",
      "original_line" : 237,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455057389",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455059396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should mention/rename it to show it's \"add\" not \"mult\"",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-15T13:40:22Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059396",
      "id" : 455059396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTM5Ng==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 437,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455059396",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455059451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should mention/rename it to show it's \"add\" not \"mult\"",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-15T13:40:26Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_pubkey(key, tweak):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059451",
      "id" : 455059451,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTQ1MQ==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 459,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 448420413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455059451",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455901409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455901409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Afaik no, because `CheckInputScripts` returns early for coinbase transactions. An assert here would make more sense",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-16T16:06:56Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n+        if (!m_spent_outputs.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455901409",
      "id" : 455901409,
      "in_reply_to_id" : 454610820,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTQwOQ==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 1417,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 449998173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455901409",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456016445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456016445"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also perhaps this is checked elsewhere by the logic that sets this SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION flag, but don't we need to check the flag version is not currently defined here?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-16T19:19:31Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456016445",
      "id" : 456016445,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxNjQ0NQ==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 450145538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456016445",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456018116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456018116"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah I think @theuni commented from an earlier commit, so it wasn't showing that a version is defined.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-16T19:22:05Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456018116",
      "id" : 456018116,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODExNg==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 450148286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456018116",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I reviewed the tests(way more comprehensive than I thought), and made some commits which I believe increase readability quite a bit and test case(s): https://github.com/instagibbs/bitcoin/commits/taproot_tests\r\n\r\nTests cases I'd like covered:\r\n- [x] Invalid CScriptNum( too large) as input to `CHECKSIGADD`\r\n- [ ] Tests prior to activation of taproot (ideally you could run all the tests again, make sure they always pass block validity, even \"damaged\" cases? Future Work since no activation method is specified anyways yet.)\r\n- [x] Too large for script push prior to OP_SUCCESSX causes failure(but not after)\r\n- [x] If OP_SUCCESSX is hit, stack element sizes don't exist\r\n- [x] OP_CHECKSIGADD does the correct thing with valid inputs\r\n- [x] Test that taproot/tapscript sigs don't count towards legacy/segwitv0 block sig limits.\r\n- [x] Adapt tests to explicitly check for reject message reasons for txns/blocks where possible\r\n- [ ]  \"Signature opcodes with unknown public key type and non-empty signature are also counted.\"\r\n- [ ] Test empty signatures executed don't count towards txin sigop limit\r\n... will update list as I go",
      "created_at" : "2020-07-17T14:13:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660129903",
      "id" : 660129903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MDEyOTkwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-21T20:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660129903",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456607326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456607326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FYI nonstandard txns are rejected by default in regtest now ( I don't mind explicit args in tests so meh)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-17T18:29:35Z",
      "diff_hunk" : "@@ -0,0 +1,638 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_SINGLE,\n+    TaprootSignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_privkey\n+from test_framework.address import program_to_witness, script_to_p2sh, hash160\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script):\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-par=1\"]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456607326",
      "id" : 456607326,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNzMyNg==",
      "original_commit_id" : "23985b72beb1bc3bfc68086ad874ebe3e53b9364",
      "original_line" : 311,
      "original_position" : 311,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 450872865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456607326",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456950774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456950774"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@theuni I think it's preferable to do checks for consensus-invalidity first, so that the error code you get is more consistent. As it isn't inherently more expensive for an attacker to create a policy-invalid spend instead of one that just has an invalid signature say, I don't think it matters for DoS resistance either.\r\n\r\n@JeremyRubin I have no idea what you're trying to say.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:16:44Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456950774",
      "id" : 456950774,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MDc3NA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 451160054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456950774",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456951409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this is fine right now, but if this code ends up being reused in signing logic, it will actually be empty in cases where not all spent outputs are known (e.g. legacy signing through some RPCs).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:23:13Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n+        if (!m_spent_outputs.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951409",
      "id" : 456951409,
      "in_reply_to_id" : 454610820,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MTQwOQ==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 1417,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451160435,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456951409",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456951479"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. It's an alternative to using optional here (which would otherwise pull in boost stuff into libconsensus, unless we wait for c++17).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:24:01Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);\n+        m_sequences_hash = GetSequenceHash(txTo);\n+        hashSequence = SHA256Uint256(m_sequences_hash);\n+        m_outputs_hash = GetOutputsHash(txTo);\n+        hashOutputs = SHA256Uint256(m_outputs_hash);\n+        if (!m_spent_outputs.empty()) {\n+            m_spent_amounts_hash = GetSpentAmountsHash(m_spent_outputs);\n+            m_spent_scripts_hash = GetSpentScriptsHash(m_spent_outputs);\n+            m_spent_outputs_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951479",
      "id" : 456951479,
      "in_reply_to_id" : 454610931,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MTQ3OQ==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 1420,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451160479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456951479",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456952147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456952147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you have a suggested string?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:30:34Z",
      "diff_hunk" : "@@ -91,6 +95,10 @@ std::string ScriptErrorString(const ScriptError serror)\n             return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n             return \"Using non-compressed keys in segwit\";\n+        case SCRIPT_ERR_TAPROOT_INVALID_SIG:\n+            return \"Invalid signature for Taproot key path spending\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456952147",
      "id" : 456952147,
      "in_reply_to_id" : 454627469,
      "line" : 103,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MjE0Nw==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 103,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/script_error.cpp",
      "position" : 20,
      "pull_request_review_id" : 451160906,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456952147",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456953262"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "![image](https://user-images.githubusercontent.com/886523/87884608-482e7a80-c9c4-11ea-9e15-4fc36b01c974.png)\r\n@theuni comment shows up on this line, which is later amended to \r\n\r\n![image](https://user-images.githubusercontent.com/886523/87884712-2d103a80-c9c5-11ea-9da4-0fdc12fdd3cb.png)\r\n\r\n\r\nSo I was simply confused from the tagged snippet as to why it did not check the taproot leaf version.\r\n\r\nBut the reason is because @theuni dropped his comment on an earlier commit, and github didn't tag it as outdated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:41:54Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953262",
      "id" : 456953262,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzI2Mg==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 451161622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456953262",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456953921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a bit annoying, as this loop has multiple distinct return branches, and it returning success can mean either continue execution or not.\r\n\r\nHappy to take some code if you have a suggestion, though.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:48:51Z",
      "diff_hunk" : "@@ -1634,6 +1740,25 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    // OP_SUCCESSx processing overrides everything, including stack element size limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953921",
      "id" : 456953921,
      "in_reply_to_id" : 455042663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzkyMQ==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1743,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451162059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456953921",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456954404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456954404"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I see. That also explains why it may look like these two could easily be swapped @theuni - it's only in a later commit that something is added in between them (and the order matters).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T20:53:34Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456954404",
      "id" : 456954404,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDQwNA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 451162409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456954404",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456955941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456955941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think in theory @theuni's point stands, we could add a cheap check ahead of verifytaprootcommitment that checks and aborts if it's an unknown leaf version, but yes the final state makes more sense as is.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:09:35Z",
      "diff_hunk" : "@@ -1674,11 +1697,42 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n+    } else if (witversion == 1 && program.size() == WITNESS_V1_TAPROOT_SIZE && !is_p2sh) {\n+        // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n+        if (!(flags & SCRIPT_VERIFY_TAPROOT)) return set_success(serror);\n+        if (stack.size() == 0) return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {\n+            // Drop annex\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX) return set_error(serror, SCRIPT_ERR_DISCOURAGE_UNKNOWN_ANNEX);\n+            SpanPopBack(stack);\n+        }\n+        if (stack.size() == 1) {\n+            // Key path spending (stack size is 1 after removing optional annex)\n+            if (!checker.CheckSigSchnorr(stack.front(), program, SigVersion::TAPROOT)) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_INVALID_SIG);\n+            }\n+            return set_success(serror);\n+        } else {\n+            // Script path spending (stack size is >1 after removing optional annex)\n+            const valtype& control = SpanPopBack(stack);\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n+                return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n+            }\n+            if (!VerifyTaprootCommitment(control, program, scriptPubKey)) {\n+                return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+            }\n+            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456955941",
      "id" : 456955941,
      "in_reply_to_id" : 448490009,
      "line" : 1897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTk0MQ==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1897,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 628,
      "pull_request_review_id" : 451163518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456955941",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956498"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:15:12Z",
      "diff_hunk" : "@@ -87,3 +87,10 @@ CHashWriter TaggedHash(const std::string& tag)\n     writer << taghash << taghash;\n     return writer;\n }\n+\n+uint256 SHA256Uint256(const uint256& hash)\n+{\n+    uint256 result;\n+    CSHA256().Write(hash.begin(), 32).Finalize(result.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956498",
      "id" : 456956498,
      "in_reply_to_id" : 454607993,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjQ5OA==",
      "original_commit_id" : "146952354b534b4684c9b94fd9bfe5817b063eb3",
      "original_line" : 94,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 451163861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956498",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:15:23Z",
      "diff_hunk" : "@@ -203,6 +203,23 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not 64 bytes, or the public key is not fully valid, false is returned.\n+     */\n+    bool VerifySchnorr(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n+\n+    const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n+    size_t size() const { return 32; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956510",
      "id" : 456956510,
      "in_reply_to_id" : 454613765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjUxMA==",
      "original_commit_id" : "05b00d5eabea621d2cab55362f6c5a21f74311df",
      "original_line" : 220,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : null,
      "pull_request_review_id" : 451163870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956510",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956524"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:15:30Z",
      "diff_hunk" : "@@ -1724,7 +1778,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n                 // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n                 return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n             }\n-            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror, false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956524",
      "id" : 456956524,
      "in_reply_to_id" : 454624482,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjUyNA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1781,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451163878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956524",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:15:43Z",
      "diff_hunk" : "@@ -1769,7 +1823,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n                     // reintroduce malleability.\n                     return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n                 }\n-                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror, true)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956547",
      "id" : 456956547,
      "in_reply_to_id" : 454624548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjU0Nw==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1826,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451163894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956547",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nope, fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:15:53Z",
      "diff_hunk" : "@@ -1391,9 +1391,9 @@ bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_p\n     }\n \n     // Data about the input/prevout being spent\n-    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n-    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n-    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    assert(execdata.m_annex_init);\n+    bool have_annex = execdata.m_annex_present;\n+    uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956571",
      "id" : 456956571,
      "in_reply_to_id" : 454634063,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjU3MQ==",
      "original_commit_id" : "da73c5e3eb01bb362f6427fa7302079f3d981ac5",
      "original_line" : 1396,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451163909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956571",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956599"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know, right?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:16:04Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956599",
      "id" : 456956599,
      "in_reply_to_id" : 454637523,
      "line" : 376,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjU5OQ==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 376,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 27,
      "pull_request_review_id" : 451163924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956599",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:16:11Z",
      "diff_hunk" : "@@ -1029,9 +1098,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 }\n                 break;\n \n+                case OP_CHECKSIGADD:\n+                {\n+                    // OP_CHECKSIGADD is only available in Tapscript\n+                    if (sigversion != SigVersion::TAPSCRIPT) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+\n+                    // (sig num pubkey -- num)\n+                    if (stack.size() < 3) return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    const valtype& sig = stacktop(-3);\n+                    const CScriptNum num(stacktop(-2), fRequireMinimal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956607",
      "id" : 456956607,
      "in_reply_to_id" : 454650575,
      "line" : 1107,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjYwNw==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1107,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 158,
      "pull_request_review_id" : 451163931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956607",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There was only one `sigversion != SigVersion::TAPSCRIPT` so I've changed that to the other one.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:16:35Z",
      "diff_hunk" : "@@ -408,9 +473,12 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n             if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n                 return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n \n-            // Note how OP_RESERVED does not count towards the opcode limit.\n-            if (opcode > OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)\n-                return set_error(serror, SCRIPT_ERR_OP_COUNT);\n+            if (sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956634",
      "id" : 456956634,
      "in_reply_to_id" : 454656075,
      "line" : 473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjYzNA==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 473,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 110,
      "pull_request_review_id" : 451163960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956634",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, updated comment.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:16:58Z",
      "diff_hunk" : "@@ -231,6 +233,34 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check Taproot standardness limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956659",
      "id" : 456956659,
      "in_reply_to_id" : 455057389,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjY1OQ==",
      "original_commit_id" : "43cbfab02a4349e6510068bbee39d836de954d68",
      "original_line" : 237,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : null,
      "pull_request_review_id" : 451163986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea, done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:17:07Z",
      "diff_hunk" : "@@ -1645,14 +1648,34 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script)\n+{\n+    int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+    XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    XOnlyPubKey q{uint256(program)};\n+    uint256 k = (CHashWriter(HasherTapLeaf) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    for (int i = 0; i < path_len; ++i) {\n+        CHashWriter ss_branch = HasherTapBranch;\n+        auto node_begin = control.data() + TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956678",
      "id" : 456956678,
      "in_reply_to_id" : 455048734,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjY3OA==",
      "original_commit_id" : "a9f418aeb0d31acadd0d5114158fb1fcb9094f40",
      "original_line" : 1659,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451163995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956678",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:17:17Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956697",
      "id" : 456956697,
      "in_reply_to_id" : 455059396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjY5Nw==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 437,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 451164006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956705"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:17:23Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_pubkey(key, tweak):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956705",
      "id" : 456956705,
      "in_reply_to_id" : 455059451,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjcwNQ==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 459,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 451164014,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956705",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956776"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-19T21:17:44Z",
      "diff_hunk" : "@@ -0,0 +1,638 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_SINGLE,\n+    TaprootSignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_privkey\n+from test_framework.address import program_to_witness, script_to_p2sh, hash160\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script):\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-par=1\"]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956776",
      "id" : 456956776,
      "in_reply_to_id" : 456607326,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1Njc3Ng==",
      "original_commit_id" : "23985b72beb1bc3bfc68086ad874ebe3e53b9364",
      "original_line" : 311,
      "original_position" : 311,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 451164036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456956776",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, updated to latest version of https://github.com/bitcoin-core/secp256k1/pull/558, and addressed a number of comments above.\r\n\r\n@Sjors The revert commits are a side-effect of using `git subtree` to switch to https://github.com/bitcoin-core/secp256k1/pull/558 (which itself is not based on secp256k1 master, so things in master but not there get reverted). Yes, the plan is to merge the Schnorr code in libsecp256k1, and then update subtree in this repo, before actually merging this PR.\r\n\r\n@instagibbs All of those test improvements look great! I'd prefer not picking up dozens of tiny commits for them though; do you want me to just squash them into the relevant commit here, or do you want to wait until you've done more? One nit: when adding overall comments about what a Python function does, use `\"\"\"bla\"\"\"` docstrings instead of `# comments`.",
      "created_at" : "2020-07-19T21:22:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660711810",
      "id" : 660711810,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MDcxMTgxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-19T21:28:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660711810",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456981308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456981308"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah found out the hard way after trying a few times.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-20T01:08:34Z",
      "diff_hunk" : "@@ -1634,6 +1740,25 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    // OP_SUCCESSx processing overrides everything, including stack element size limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456981308",
      "id" : 456981308,
      "in_reply_to_id" : 455042663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTMwOA==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1743,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 451199595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456981308",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa take the tests in any form you'd like, I just thought it would be easier for you to review the changes. \r\n\r\nI'm done for now, so feel free to check off any un-ticked boxes yourself.",
      "created_at" : "2020-07-20T01:09:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660744498",
      "id" : 660744498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MDc0NDQ5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-20T01:10:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660744498",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456983701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456983701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I ended up writing that test, in the branch I posted.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-20T01:24:24Z",
      "diff_hunk" : "@@ -1029,9 +1098,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 }\n                 break;\n \n+                case OP_CHECKSIGADD:\n+                {\n+                    // OP_CHECKSIGADD is only available in Tapscript\n+                    if (sigversion != SigVersion::TAPSCRIPT) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+\n+                    // (sig num pubkey -- num)\n+                    if (stack.size() < 3) return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    const valtype& sig = stacktop(-3);\n+                    const CScriptNum num(stacktop(-2), fRequireMinimal);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456983701",
      "id" : 456983701,
      "in_reply_to_id" : 454650575,
      "line" : 1107,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MzcwMQ==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 1107,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 158,
      "pull_request_review_id" : 451209024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456983701",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@instagibbs All your test improvements squashed into the relevant commits here.",
      "created_at" : "2020-07-20T01:57:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660756608",
      "id" : 660756608,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MDc1NjYwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-20T01:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660756608",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456992780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456992780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wondering if you could un-magic this constant a bit. I was going to attempt to write another case for unknown pubkey using this template, but ran out of motivation to reverse engineer it.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-20T02:11:05Z",
      "diff_hunk" : "@@ -0,0 +1,745 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey\n+from test_framework.address import program_to_witness, script_to_p2sh, hash160\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths_no_sig(spenders, info, comment, standard, success, failure):\n+    \"\"\"Same as spender_two_paths but not support for signatures or padding witness.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    # Empty witness required\n+    def fn(t, i, u, v):\n+        return []\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, cb_pubkey=None, fees=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output\n+        # It's physically impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all\n+        # transactions. N.B. this test means no spenders can ever spend non-taproot/tapscript outputs,\n+        # or those at least have to be accounted for here.\n+\n+        def MaybeIsPayToPubKey(script):\n+            return script[-1] == OP_CHECKSIG\n+\n+        legacy_checksigs = 0 if cb_pubkey is None else 1 # P2PK output in coinbase back to wallet\n+        for tx in txs:\n+            for output in tx.vout:\n+                if MaybeIsPayToPubKey(output.scriptPubKey):\n+                    legacy_checksigs += 1\n+        extra_output_script = CScript([OP_CHECKSIG]*(MAX_BLOCK_SIGOPS-legacy_checksigs))\n+\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(block.serialize(True).hex())\n+        if (accept):\n+            assert node.getbestblockhash() == block.hash, \"Failed to accept: \" + msg\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n+\n+    def test_spenders(self, spenders, input_counts):\n+        \"\"\"Run randomized tests with a number of \"spenders\".\n+\n+        Steps:\n+            1) Generate an appropriate UTXO for each spender to test spend conditions\n+            2) Generate 100 random addresses of all wallet types: pkh/sh_wpkh/wpkh\n+            3) Select random number of inputs from (1)\n+            4) Select random number of addresses from (2) as outputs\n+\n+        Each spender embodies a test; in a large randomized test, it is verified\n+        that toggling the valid argument to each lambda toggles the validity of\n+        the transaction. This is accomplished by constructing transactions consisting\n+        of all valid inputs, except one invalid one.\n+        \"\"\"\n+\n+        # Construct a UTXO to spend for each of the spenders, with the script to satisfy being given by the spender\n+        self.nodes[0].generate(110)\n+        bal = self.nodes[0].getbalance() * 3 / (4 * len(spenders))\n+        random.shuffle(spenders)\n+        num_spenders = len(spenders)\n+        utxos = []\n+        while len(spenders):\n+            # Create the necessary outputs in multiple transactions, as sPKs may be repeated in test cases(which sendmany does not support)\n+            outputs = {}\n+            new_spenders = []\n+            batch = []\n+            for spender in spenders:\n+                addr = spender.address\n+                if len(batch) == 100 or addr in outputs:\n+                    new_spenders.append(spender)\n+                else:\n+                    amount = random.randrange(int(bal * 95000000), int(bal * 105000000))\n+                    outputs[addr] = amount / 100000000\n+                    batch.append(spender)\n+            self.log.info(\"Constructing %i UTXOs for spending tests\" % len(batch))\n+            tx = tx_from_hex(self.nodes[0].getrawtransaction(self.nodes[0].sendmany(\"\", outputs)))\n+            tx.rehash()\n+            spenders = new_spenders\n+            random.shuffle(spenders)\n+\n+            # Map created UTXOs back to the spenders they were created for\n+            for n, out in enumerate(tx.vout):\n+                for spender in batch:\n+                    if out.scriptPubKey == spender.script:\n+                        utxos.append(UTXOData(input=COutPoint(tx.sha256, n), output=out, spender=spender))\n+                        break\n+        assert(len(utxos) == num_spenders)\n+        random.shuffle(utxos)\n+        self.nodes[0].generate(1)\n+\n+        # Construct a bunch of sPKs that send coins back to the host wallet\n+        self.log.info(\"Constructing 100 addresses for returning coins\")\n+        host_spks = []\n+        host_pubkeys = []\n+        for i in range(100):\n+            addr = self.nodes[0].getnewaddress(address_type=random.choice([\"legacy\", \"p2sh-segwit\", \"bech32\"]))\n+            info = self.nodes[0].getaddressinfo(addr)\n+            spk = hex_str_to_bytes(info['scriptPubKey'])\n+            host_spks.append(spk)\n+            host_pubkeys.append(hex_str_to_bytes(info['pubkey']))\n+\n+        # Pick random subsets of UTXOs to construct transactions with\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        block = self.nodes[0].getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+        while len(utxos):\n+            tx = CTransaction()\n+            tx.nVersion = random.choice([1, 2, random.randint(-0x80000000, 0x7fffffff)])\n+            min_sequence = (tx.nVersion != 1 and tx.nVersion != 0) * 0x80000000  # The minimum sequence number to disable relative locktime\n+            if random.choice([True, False]):\n+                tx.nLockTime = random.randrange(LOCKTIME_THRESHOLD, self.lastblocktime - 7200)  # all absolute locktimes in the past\n+            else:\n+                tx.nLockTime = random.randrange(self.lastblockheight + 1)  # all block heights in the past\n+\n+            # Pick 1 to 4 UTXOs to construct transaction inputs\n+            acceptable_input_counts = [cnt for cnt in input_counts if cnt <= len(utxos)]\n+            while True:\n+                inputs = random.choice(acceptable_input_counts)\n+                remaining = len(utxos) - inputs\n+                if remaining == 0 or remaining >= max(input_counts) or remaining in input_counts:\n+                    break\n+            input_utxos = utxos[-inputs:]\n+            utxos = utxos[:-inputs]\n+            fee = random.randrange(MIN_FEE * 2, MIN_FEE * 4)  # 10000-20000 sat fee\n+            in_value = sum(utxo.output.nValue for utxo in input_utxos) - fee\n+            tx.vin = [CTxIn(outpoint=input_utxos[i].input, nSequence=random.randint(min_sequence, 0xffffffff)) for i in range(inputs)]\n+            tx.wit.vtxinwit = [CTxInWitness() for i in range(inputs)]\n+            self.log.info(\"Test: %s\" % (\", \".join(utxo.spender.comment for utxo in input_utxos)))\n+\n+            # Add 1 to 4 outputs\n+            outputs = random.choice([1, 2, 3, 4])\n+            assert in_value >= 0 and fee - outputs * DUST_LIMIT >= MIN_FEE\n+            for i in range(outputs):\n+                tx.vout.append(CTxOut())\n+                if in_value <= DUST_LIMIT:\n+                    tx.vout[-1].nValue = DUST_LIMIT\n+                elif i < outputs - 1:\n+                    tx.vout[-1].nValue = in_value\n+                else:\n+                    tx.vout[-1].nValue = random.randint(DUST_LIMIT, in_value)\n+                in_value -= tx.vout[-1].nValue\n+                tx.vout[-1].scriptPubKey = random.choice(host_spks)\n+            fee += in_value\n+            assert(fee >= 0)\n+\n+            # Sign each input incorrectly once on each complete signing pass, except the very last\n+            for fail_input in range(inputs + 1):\n+                # Wipe scriptSig/witness\n+                for i in range(inputs):\n+                    tx.vin[i].scriptSig = CScript()\n+                    tx.wit.vtxinwit[i] = CTxInWitness()\n+                # Fill inputs/witnesses\n+                for i in range(inputs):\n+                    fn = input_utxos[i].spender.sat_function\n+                    fn(tx, i, [utxo.output for utxo in input_utxos], i != fail_input)\n+                # Submit to mempool to check standardness\n+                is_standard_tx = fail_input == inputs and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                tx.rehash()\n+                if is_standard_tx:\n+                    self.nodes[0].sendrawtransaction(tx.serialize().hex(), 0)\n+                    assert(self.nodes[0].getmempoolentry(tx.hash) is not None)\n+                else:\n+                    assert_raises_rpc_error(-26, None, self.nodes[0].sendrawtransaction, tx.serialize().hex(), 0)\n+                # Submit in a block\n+                msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n+                self.block_submit(self.nodes[0], [tx], msg, witness=True, accept=fail_input == inputs, cb_pubkey=random.choice(host_pubkeys), fees=fee)\n+\n+    def build_spenders(self):\n+        VALID_SIGHASHES = [SIGHASH_DEFAULT, SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE, SIGHASH_ANYONECANPAY + SIGHASH_ALL, \\\n+                SIGHASH_ANYONECANPAY + SIGHASH_NONE, SIGHASH_ANYONECANPAY + SIGHASH_SINGLE]\n+        spenders = []\n+\n+        # Two features: No annex, and annex with random number of random bytes.\n+        for annex in [None, bytes([ANNEX_TAG]) + random_bytes(random.randrange(0, 250))]:\n+            # Non-empty annex is non-standard\n+            no_annex = annex is None\n+            sec1, sec2 = generate_privkey(), generate_privkey()\n+            pub1, _ = compute_xonly_pubkey(sec1)\n+            pub2, _ = compute_xonly_pubkey(sec2)\n+\n+            # Sighash mutation tests (test all sighash combinations)\n+            for hashtype in VALID_SIGHASHES:\n+                # Pure pubkey\n+                info = taproot_construct(pub1)\n+                # As an example, comment argument under this line means \"Sighash test for p2tr, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # Pubkey/P2PK script combination\n+                scripts = [CScript(random_checksig_style(pub2))]\n+                info = taproot_construct(pub1, scripts)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through p2pk key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+\n+            # For more complex scripts only test one sighash type\n+            hashtype = random.choice(VALID_SIGHASHES)\n+            scripts = [\n+                CScript(random_checksig_style(pub2) + bytes([OP_CODESEPARATOR])),  # codesep after checksig\n+                CScript(bytes([OP_CODESEPARATOR]) + random_checksig_style(pub2)),  # codesep before checksig\n+                CScript([bytes([1,2,3]), OP_DROP, OP_IF, OP_CODESEPARATOR, pub1, OP_ELSE, OP_CODESEPARATOR, pub2, OP_ENDIF, OP_CHECKSIG]),  # branch dependent codesep\n+            ]\n+            info = taproot_construct(pub1, scripts)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s1\", script=scripts[1], key=sec2, hashtype=hashtype, annex=annex, pos=0, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2a\", script=scripts[2], key=sec1, hashtype=hashtype, annex=annex, pos=3, suffix=[bytes([1])], standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2b\", script=scripts[2], key=sec2, hashtype=hashtype, annex=annex, pos=6, suffix=[bytes([])], standard=no_annex)\n+\n+            # Taproot max Merkle path length\n+            scripts = [\n+                CScript([pub2, OP_CHECKSIG]),\n+                [\n+                    CScript([pub1, OP_CHECKSIG]),\n+                    CScript([OP_RETURN])\n+                ]\n+            ]\n+            info = taproot_construct(pub1, nested_script(scripts, 127))\n+            spender_two_paths(spenders, info, \"taproot/merklelimit\", standard=no_annex, success={\"key\": sec2, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[0]}, failure={\"key\": sec1, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[1][0]})\n+\n+            # Above OP_16 to avoid minimal encoding complaints\n+            checksigadd_val = random.randrange(17, 100)\n+            checksigadd_arg = CScriptNum(checksigadd_val)\n+            checksigadd_result = CScriptNum(checksigadd_val+1)\n+\n+            # Illegally-large number for script arithmetic input\n+            oversize_number = 2**31\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number))), 6)\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number-1))), 5)\n+\n+            # Various BIP342 features\n+            scripts = [\n+                # 0) drop stack element and OP_CHECKSIG\n+                CScript([OP_DROP, pub2, OP_CHECKSIG]),\n+                # 1) normal OP_CHECKSIG\n+                CScript([pub2, OP_CHECKSIG]),\n+                # 2) normal OP_CHECKSIGVERIFY\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1]),\n+                # 3) Hypothetical OP_CHECKMULTISIG script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIG]),\n+                # 4) Hypothetical OP_CHECKMULTISIGVERIFY script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIGVERIFY, OP_1]),\n+                # 5) OP_IF script that needs a true input\n+                CScript([OP_IF, pub2, OP_CHECKSIG, OP_ELSE, OP_RETURN, OP_ENDIF]),\n+                # 6) OP_NOTIF script that needs a true input\n+                CScript([OP_NOTIF, OP_RETURN, OP_ELSE, pub2, OP_CHECKSIG, OP_ENDIF]),\n+                # 7) OP_CHECKSIG with an empty key\n+                CScript([OP_0, OP_CHECKSIG]),\n+                # 8) OP_CHECKSIGVERIFY with an empty key\n+                CScript([OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 9) normal OP_CHECKSIGADD that also ensures return value is correct\n+                CScript([OP_0, pub2, OP_CHECKSIGADD, OP_1, OP_EQUAL]),\n+                # 10) OP_CHECKSIGADD with empty key\n+                CScript([OP_0, OP_0, OP_CHECKSIGADD]),\n+                # 11) OP_CHECKSIGADD with missing counter stack element\n+                CScript([pub2, OP_CHECKSIGADD]),\n+                # 12) OP_CHECKSIG that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, pub1, OP_CHECKSIG, OP_NOT]),\n+                # 13) OP_CHECKSIG with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_CHECKSIG, OP_NOT]),\n+                # 14) OP_CHECKSIGADD that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, pub1, OP_CHECKSIGADD, OP_NOT]),\n+                # 15) OP_CHECKSIGADD with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGADD, OP_NOT]),\n+                # 16) OP_CHECKSIG with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIG]),\n+                # 17) OP_CHECKSIGADD with unknown pubkey type\n+                CScript([OP_0, OP_1, OP_CHECKSIGADD]),\n+                # 18) OP_CHECKSIGVERIFY with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIGVERIFY, OP_1]),\n+                # 19) script longer than 10000 bytes and over 201 non-push opcodes\n+                CScript([OP_0, OP_0, OP_2DROP] * 10001 + [pub2, OP_CHECKSIG]),\n+                # 20) OP_CHECKSIGVERIFY with empty key\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 21) Script that grows the stack to 1000 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 999 + [OP_DROP] * 999),\n+                # 22) Script that grows the stack to 1001 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 1000 + [OP_DROP] * 1000),\n+                # 23) Script that expects an input stack of 1000 elements\n+                CScript([OP_DROP] * 999 + [pub2, OP_CHECKSIG]),\n+                # 24) Script that expects an input stack of 1001 elements\n+                CScript([OP_DROP] * 1000 + [pub2, OP_CHECKSIG]),\n+                # 25) Script that pushes a 520 byte element\n+                CScript([random_bytes(520), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 26) Script that pushes a 521 byte element\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 27) Script that pushes a 521 byte element and OP_SUCCESSX\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG, random_op_success()]),\n+                # 28) Pushes random CScriptNum value, checks OP_CHECKSIGADD result\n+                CScript([checksigadd_arg, pub2, OP_CHECKSIGADD, checksigadd_result, OP_EQUAL]),\n+                # 30) CHECKSIGADD that succeeds with proper sig because numeric argument number is <=4 bytes\n+                CScript([CScriptNum(oversize_number-1), pub2, OP_CHECKSIGADD]),\n+                # 29) CHECKSIGADD that must fail because numeric argument number is >4 bytes\n+                CScript([CScriptNum(oversize_number), pub2, OP_CHECKSIGADD]),\n+            ]\n+            # For the next test we must predict the exact witness size\n+            witness_size = 141 + (hashtype != 0) + (0 if annex is None else len(annex) + 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456992780",
      "id" : 456992780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5Mjc4MA==",
      "original_commit_id" : "42bda3592c3fc4d5169b2f53e80780ed46a0854c",
      "original_line" : 701,
      "original_position" : 655,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 451238404,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456992780",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed in some more functional test improvements by @instagibbs. The failed spenders no check for expected error messages in block validation.",
      "created_at" : "2020-07-21T20:55:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-662101568",
      "id" : 662101568,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MjEwMTU2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-21T20:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662101568",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459503234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459503234"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467: let's document that `uint256 GetPrevoutHash` and `GetSequenceHash` (now) return a single SHA256 hash.\r\n\r\nPerhaps we should rename them to GetPrevout**s**Hash and GetSequence**s**Hash, consistent with `GetSpentAmountsHash` and `GetSpentScriptsHash`.\r\n\r\nIn BIP-341 the phrasing is slightly ambiguous: \"sha_prevouts (32): the SHA256 of the serialization of all input outpoints.\" It could be more clear that this means concatenate all previous and then hash them, rather than to concatenate the hashes. Changing the variable name helps with that clarity too.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T14:43:20Z",
      "diff_hunk" : "@@ -1265,7 +1265,7 @@ uint256 GetPrevoutHash(const T& txTo)\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459503234",
      "id" : 459503234,
      "line" : 1360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMzIzNA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1360,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 200,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459503234",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459527853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459527853"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467: maybe rename to `m_prevouts_hash_v0` or `m_prevouts_double_hash`?\r\n\r\nIn addition, shouldn't we skip calculating hashes we don't need depending on the witness version? Or is that negligible for validation performance (sorry, too lazy to bench this myself)?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T15:16:08Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459527853",
      "id" : 459527853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyNzg1Mw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1321,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459527853",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459531548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459531548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467 : `TapSighash` is written in camel case (`TapSigHash`) most of the time in BIP 341 (which would be my preference too).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T15:21:08Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459531548",
      "id" : 459531548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzMTU0OA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459531548",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459653999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459653999"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467: `EPOCH` is explained in BIP-341, but missing from \"the message is the concatenation of the following data, in order\"",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T18:42:46Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459653999",
      "id" : 459653999,
      "line" : 1494,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1Mzk5OQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1494,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 347,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459653999",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459663568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459663568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5: this could lead to confusion if a later upgrade adds and permits a new SIGHASH type, given that the BIP specifies this as a negative: \"If `hash_type & 3` does not equal `SIGHASH_NONE` or `SIGHASH_SINGLE`\".",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:00:01Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459663568",
      "id" : 459663568,
      "line" : 1513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzU2OA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1513,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 366,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459663568",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459665027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459665027"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5: The BIP (still?) says `0x50` (I see this completely changes in a later commit, so will revisit then)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:02:48Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459665027",
      "id" : 459665027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NTAyNw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1392,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459665027",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459669929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459669929"
         }
      },
      "author_association" : "MEMBER",
      "body" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467 : isn't this missing a `compact_size(size of annex)` prefix?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:12:16Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459669929",
      "id" : 459669929,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTkyOQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1403,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454191846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459669929",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459677698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459677698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought that was implicit with vector serializations like this.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:26:43Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459677698",
      "id" : 459677698,
      "in_reply_to_id" : 459669929,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzY5OA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1403,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454431755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459677698",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459686936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459686936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Having bumped my head against (missing) size bytes in serialisations, e.g with libwally, let's at least add a comment to that effect.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:44:59Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459686936",
      "id" : 459686936,
      "in_reply_to_id" : 459669929,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4NjkzNg==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1403,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454443375,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459686936",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459689700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459689700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Vectors are serialized everywhere this way. Do we need to add comments also to block, transaction inputs, transaction outputs, ADDR messages, all lists in the protocol, ...?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T19:50:45Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459689700",
      "id" : 459689700,
      "in_reply_to_id" : 459669929,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4OTcwMA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1403,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454447001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459689700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459742867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459742867"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors please review \r\nhttps://github.com/bitcoin/bitcoin/pull/18071/files which proposes something similar.\r\n\r\n",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T21:38:43Z",
      "diff_hunk" : "@@ -1265,7 +1265,7 @@ uint256 GetPrevoutHash(const T& txTo)\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459742867",
      "id" : 459742867,
      "in_reply_to_id" : 459503234,
      "line" : 1360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Mjg2Nw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1360,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 200,
      "pull_request_review_id" : 454513752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459742867",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459744786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459744786"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "these are computed at the txn level, so you'd need to add some code which detects if there is no input of that type. Maybe worthwhile?\r\n\r\nBut keep in mind that taproot isn't calculating anything new, just caching the intermediate results...",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T21:42:54Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459744786",
      "id" : 459744786,
      "in_reply_to_id" : 459527853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDc4Ng==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1321,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454516006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459744786",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459769788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459769788"
         }
      },
      "author_association" : "NONE",
      "body" : "Hate to do this: capitalisation. Tagged hash",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-23T22:47:51Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/nonce\")||SHA256(\"BIP340/nonce\"). */\n+static void secp256k1_nonce_function_bip340_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa96e75cbul;\n+    sha->s[1] = 0x74f9f0acul;\n+    sha->s[2] = 0xc49e3c98ul;\n+    sha->s[3] = 0x202f99baul;\n+    sha->s[4] = 0x8946a616ul;\n+    sha->s[5] = 0x4accf415ul;\n+    sha->s[6] = 0x86e335c3ul;\n+    sha->s[7] = 0x48d0a072ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/aux\")||SHA256(\"BIP340/aux\"). */\n+static void secp256k1_nonce_function_bip340_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x5d74a872ul;\n+    sha->s[1] = 0xd57064d4ul;\n+    sha->s[2] = 0x89495becul;\n+    sha->s[3] = 0x910f46f5ul;\n+    sha->s[4] = 0xcbc6fd3eul;\n+    sha->s[5] = 0xaf05d9d0ul;\n+    sha->s[6] = 0xcb781ce6ul;\n+    sha->s[7] = 0x062930acul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo16 argument for nonce_function_bip340 to derive the nonce exactly as stated in BIP-340\n+ * by using the correct tagged hash function. */\n+static const unsigned char bip340_algo16[16] = \"BIP340/nonce\\0\\0\\0\\0\";\n+\n+static int nonce_function_bip340(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo16, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+\n+    if (algo16 == NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip340_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    }\n+\n+    /* Tag the hash with algo16 which is important to avoid nonce reuse across\n+     * algorithms. If this nonce function is used in BIP-340 signing as defined\n+     * in the spec, an optimized tagging implementation is used. */\n+    if (memcmp(algo16, bip340_algo16, 16) == 0) {\n+        secp256k1_nonce_function_bip340_sha256_tagged(&sha);\n+    } else {\n+        int algo16_len = 16;\n+        /* Remove terminating null bytes */\n+        while (algo16_len > 0 && !algo16[algo16_len - 1]) {\n+            algo16_len--;\n+        }\n+        secp256k1_sha256_initialize_tagged(&sha, algo16, algo16_len);\n+    }\n+\n+    /* Hash (masked-)key||pk||msg using the tagged hash as per the spec */\n+    if (data != NULL) {\n+        secp256k1_sha256_write(&sha, masked_key, 32);\n+    } else {\n+        secp256k1_sha256_write(&sha, key32, 32);\n+    }\n+    secp256k1_sha256_write(&sha, xonly_pk32, 32);\n+    secp256k1_sha256_write(&sha, msg32, 32);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340 = nonce_function_bip340;\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/challenge\")||SHA256(\"BIP340/challenge\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x71985ac9ul;\n+    sha->s[1] = 0x198317a2ul;\n+    sha->s[2] = 0x60b6e581ul;\n+    sha->s[3] = 0x54c109b6ul;\n+    sha->s[4] = 0x64bac2fdul;\n+    sha->s[5] = 0x91231de2ul;\n+    sha->s[6] = 0x7301ebdeul;\n+    sha->s[7] = 0x87635f83ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg32, const secp256k1_keypair *keypair, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    secp256k1_scalar sk;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    unsigned char buf[32] = { 0 };\n+    unsigned char pk_buf[32];\n+    unsigned char seckey[32];\n+    int ret = 1;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(keypair != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bip340;\n+    }\n+\n+    ret &= secp256k1_keypair_load(ctx, &sk, &pk, keypair);\n+    /* Because we are signing for a x-only pubkey, the secret key is negated\n+     * before signing if the point corresponding to the secret key does not\n+     * have an even Y. */\n+    if (secp256k1_fe_is_odd(&pk.y)) {\n+        secp256k1_scalar_negate(&sk, &sk);\n+    }\n+\n+    secp256k1_scalar_get_b32(seckey, &sk);\n+    secp256k1_fe_get_b32(pk_buf, &pk.x);\n+    ret &= !!noncefp(buf, msg32, seckey, pk_buf, bip340_algo16, (void*)ndata);\n+    secp256k1_scalar_set_b32(&k, buf, NULL);\n+    ret &= !secp256k1_scalar_is_zero(&k);\n+    secp256k1_scalar_cmov(&k, &secp256k1_scalar_one, !ret);\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+\n+    /* We declassify r to allow using it as a branch point. This is fine\n+     * because r is not a secret. */\n+    secp256k1_declassify(ctx, &r, sizeof(r));\n+    if (!secp256k1_fe_is_quad_var(&r.y)) {\n+        secp256k1_scalar_negate(&k, &k);\n+    }\n+    secp256k1_fe_normalize_var(&r.x);\n+    secp256k1_fe_get_b32(&sig64[0], &r.x);\n+\n+    /* tagged hash(r.x, pk.x, msg32) */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459769788",
      "id" : 459769788,
      "line" : 161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2OTc4OA==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 161,
      "original_position" : 161,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : 161,
      "pull_request_review_id" : 454545537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459769788",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/2796318?v=4",
         "events_url" : "https://api.github.com/users/brmdbr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brmdbr/followers",
         "following_url" : "https://api.github.com/users/brmdbr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brmdbr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brmdbr",
         "id" : 2796318,
         "login" : "brmdbr",
         "node_id" : "MDQ6VXNlcjI3OTYzMTg=",
         "organizations_url" : "https://api.github.com/users/brmdbr/orgs",
         "received_events_url" : "https://api.github.com/users/brmdbr/received_events",
         "repos_url" : "https://api.github.com/users/brmdbr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brmdbr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brmdbr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brmdbr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Don't `m_spent_amounts_hash` and `m_spent_scripts_hash` (below) add two extra hash operations when verifying SegWit transactions?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:25:16Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946237",
      "id" : 459946237,
      "in_reply_to_id" : 459527853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NjIzNw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1321,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454747939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946237",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`hash` is the wrong name for this param. It should be `input` to match the header declaration (although I think `preimage` would be better still).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:25:48Z",
      "diff_hunk" : "@@ -77,3 +78,19 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((const unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());\n+    writer << taghash << taghash;\n+    return writer;\n+}\n+\n+uint256 SHA256Uint256(const uint256& hash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946492",
      "id" : 459946492,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NjQ5Mg==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 91,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 454748239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, you're right, it's actually the BIP that explicitly mentions it only here.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:26:45Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946917",
      "id" : 459946917,
      "in_reply_to_id" : 459669929,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NjkxNw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1403,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454748777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459946917",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459954502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459954502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with @Sjors (https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459527853) that these should be renamed. `m_prevouts_hash` and `hashPrevouts` doesn't communicate that one of these members is the SHA256 digest and the other is the dSHA256 digest. I'd propose `m_prevouts_sha256` and `m_prevouts_double_sha256`, but anything that communicates what these are would be an improvement.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:44:01Z",
      "diff_hunk" : "@@ -114,33 +120,92 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_spent_amounts_hash, m_spent_scripts_hash;\n+    bool m_spent_outputs_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459954502",
      "id" : 459954502,
      "line" : 157,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NDUwMg==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 157,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 60,
      "pull_request_review_id" : 454748239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459954502",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459958265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459958265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: sort :)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:52:15Z",
      "diff_hunk" : "@@ -7,6 +7,17 @@\n keys, and is trivially vulnerable to side channel attacks. Do not use for\n anything but tests.\"\"\"\n import random\n+import hashlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459958265",
      "id" : 459958265,
      "line" : 11,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1ODI2NQ==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 11,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : 12,
      "pull_request_review_id" : 454748239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459958265",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459959814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459959814"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should this be `tweak_add_pubkey`?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T09:55:32Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_pubkey(key, tweak):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459959814",
      "id" : 459959814,
      "in_reply_to_id" : 455059451,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1OTgxNA==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 459,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 454748239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459959814",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460037618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460037618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah looks like this didn't change",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T13:01:44Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_pubkey(key, tweak):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460037618",
      "id" : 460037618,
      "in_reply_to_id" : 455059451,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzYxOA==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 459,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 454866583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460037618",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460079736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460079736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I would prefer the `execdata` before `serror`. Would also be more consistent with `ExecuteWitnessScript`.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T14:15:28Z",
      "diff_hunk" : "@@ -371,7 +371,7 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, ScriptExecutionData execdata)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460079736",
      "id" : 460079736,
      "line" : 432,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3OTczNg==",
      "original_commit_id" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8",
      "original_line" : 432,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 83,
      "pull_request_review_id" : 454922269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460079736",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460091608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460091608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b7a7f6ab2ccc30e323a5396c27cb82ffd613550b nit: these comments could be introduced in 41d08f5d77f52bec0e31bb081d85fff2d67d0467 (which adds `TAPROOT = 2`)",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T14:33:58Z",
      "diff_hunk" : "@@ -146,14 +158,21 @@ struct PrecomputedTransactionData\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n-    TAPROOT = 2,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460091608",
      "id" : 460091608,
      "line" : 176,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MTYwOA==",
      "original_commit_id" : "b7a7f6ab2ccc30e323a5396c27cb82ffd613550b",
      "original_line" : 176,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 83,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460091608",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460163407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460163407"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8 nit: `m_annex_hash` is only initialized if `m_annex_present` is `true`, though I doubt it will confuse anyone. Alternate wordings:\r\n```cpp\r\n//! Whether m_annex_present is initialized\r\n```\r\n\r\nOr:\r\n```cpp\r\n //! Whether m_annex_present and (when needed) m_annex_hash are initialized.\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T16:35:39Z",
      "diff_hunk" : "@@ -163,6 +163,16 @@ enum class SigVersion\n     TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n };\n \n+struct ScriptExecutionData\n+{\n+    //! Whether m_annex_present and m_annex_hash are initialized.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460163407",
      "id" : 460163407,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MzQwNw==",
      "original_commit_id" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8",
      "original_line" : 168,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460163407",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460173936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460173936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think these runtime constants tend to be formatted like normal variables in the rest of the code base, i.e. snake case. But there does not seem to be a particular rule on these in the style guide.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T16:54:49Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460173936",
      "id" : 460173936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MzkzNg==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454922269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460173936",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460174647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460174647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "styleguide nit:\r\n```suggestion\r\n        for (unsigned int i = 0; i < tx.vin.size(); ++i) {\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T16:56:08Z",
      "diff_hunk" : "@@ -1540,13 +1540,19 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const C\n     }\n \n     if (!txdata.m_ready) {\n-        txdata.Init(tx);\n+        std::vector<CTxOut> spent_outputs;\n+        spent_outputs.reserve(tx.vin.size());\n+\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460174647",
      "id" : 460174647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDY0Nw==",
      "original_commit_id" : "14d2178048ba7aecaf2e69a283968c6554c127cb",
      "original_line" : 1546,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 454922269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460174647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460187918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460187918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps the comment can be expanded to clarify how `success` is used by the caller:\r\n\r\n```\r\nIf script execution doesn't trigger an error, success is added to the stack.\r\nOP_CHECKSIGVERIFY immediately fails if success is false, whereas with\r\nOP_CHECKSIG(_ADD) it's up to the rest of the script to\r\ndecide what to do with the signature result, typically based on the number\r\nof non-empty signatures.\r\n```\r\n\r\nRenaming `success` to `did_sign` makes its purpose more clear (but we're kinda stuck with this variable name).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T17:22:43Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460187918",
      "id" : 460187918,
      "in_reply_to_id" : 454637523,
      "line" : 376,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4NzkxOA==",
      "original_commit_id" : "7cdc010c70aa5e65e6b8e149b7f22e2fc93697fc",
      "original_line" : 376,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 27,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460187918",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460213001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460213001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would find it marginally more readable to use `!sig.empty()` in the `if` statements below and move `success = !sig.empty();` all the way to the bottom. ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T18:14:20Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --\n+     *    upgradable public key versions precede other rules;\n+     *    the script execution fails when using empty signature with invalid public key;\n+     *    the script execution fails when using non-empty invalid signature.\n+     */\n+    success = !sig.empty();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460213001",
      "id" : 460213001,
      "line" : 381,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzAwMQ==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 381,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 32,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460213001",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460216726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460216726"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n/** Helper for OP_CHECKSIG, OP_CHECKSIGVERIFY and OP_CHECKSIGADD\r\n```",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T18:22:02Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --\n+     *    upgradable public key versions precede other rules;\n+     *    the script execution fails when using empty signature with invalid public key;\n+     *    the script execution fails when using non-empty invalid signature.\n+     */\n+    success = !sig.empty();\n+    if (success) {\n+        // Implement the sigops/witnesssize ratio test.\n+        // Passing with an upgradable public key version is also counted.\n+        assert(execdata.m_validation_weight_left_init);\n+        execdata.m_validation_weight_left -= VALIDATION_WEIGHT_PER_SIGOP_PASSED;\n+        if (execdata.m_validation_weight_left < 0) {\n+            return set_error(serror, SCRIPT_ERR_TAPSCRIPT_VALIDATION_WEIGHT);\n+        }\n+    }\n+    if (pubkey.size() == 0) {\n+        return set_error(serror, SCRIPT_ERR_PUBKEYTYPE);\n+    } else if (pubkey.size() == 32) {\n+        if (success && !checker.CheckSigSchnorr(sig, pubkey, sigversion, execdata)) {\n+            return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);\n+        }\n+    } else {\n+        /*\n+         *  New public key version softforks should be defined before this `else` block.\n+         *  Generally, the new code should not do anything but failing the script execution. To avoid\n+         *  consensus bugs, it should not modify any existing values (including success).\n+         */\n+        if ((flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE) != 0) {\n+            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_PUBKEYTYPE);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+/** Helper for OP_CHECKSIG and OP_CHECKSIGVERIFY",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460216726",
      "id" : 460216726,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNjcyNg==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 411,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460216726",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460235730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460235730"
         }
      },
      "author_association" : "MEMBER",
      "body" : "But only if `OP_SUCCESSx` occurred earlier?  Is it worth the effort to check the whole script for `OP_SUCCESSx` before and then do second pass for other conditions?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T19:03:07Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460235730",
      "id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNTczMA==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 454937759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460235730",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460248927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460248927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah yes those are extra, but only when haswitness. I suppose we could add a function hasv1witness? ",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T19:32:16Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460248927",
      "id" : 460248927,
      "in_reply_to_id" : 459527853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0ODkyNw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1321,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 455136592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460248927",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460252562"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nope, the spec is defined as first parsing the script into opcodes to check for OP_SUCCESSx, and then executing.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T19:40:23Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252562",
      "id" : 460252562,
      "in_reply_to_id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MjU2Mg==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 455141238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460252562",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460252714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "so you should check for e.g. unexecuted branches as well.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T19:40:45Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252714",
      "id" : 460252714,
      "in_reply_to_id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MjcxNA==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 455141439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460252714",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Also reviewed [8594b77](https://github.com/bitcoin/bitcoin/commit/8594b77415c290089d2e88fd2c09dbfecef995ba) (BIP 340) until [988d7a7](https://github.com/bitcoin/bitcoin/commit/988d7a795cfc29b37c3ea3359fb69412ab04de53) (BIP 342)\r\n> \r\n> There's two future anticipated features the BIPs: batch-verification and annexes. Is there any proof of concept code that can be used to sanity check this PR (and the BIPs themselves)?\r\n\r\nNot sure if this is helpful but there's https://github.com/bitcoin-core/secp256k1/pull/760.",
      "created_at" : "2020-07-24T20:25:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-663719592",
      "id" : 663719592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MzcxOTU5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-24T20:25:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663719592",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460286926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460286926"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/17977#pullrequestreview-348338789",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-24T21:02:56Z",
      "diff_hunk" : "@@ -163,6 +163,16 @@ enum class SigVersion\n     TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n };\n \n+struct ScriptExecutionData\n+{\n+    //! Whether m_annex_present and m_annex_hash are initialized.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460286926",
      "id" : 460286926,
      "in_reply_to_id" : 460163407,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4NjkyNg==",
      "original_commit_id" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8",
      "original_line" : 168,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 455184101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460286926",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460376582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460376582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Afaik this code fails if it finds an unknown OPCODE _before_ OP_SUCCESSx, so then it doesn't match the spec?",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-25T07:23:57Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460376582",
      "id" : 460376582,
      "in_reply_to_id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NjU4Mg==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 455268192,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460376582",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460377065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Assuming this is in reply to https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459531548\r\nThe string \"TapSighash\" itself, not the variable name, is consensus critical, because it gets hashed into transactions. So the code style guidelines aren't relevant.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-25T07:30:09Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377065",
      "id" : 460377065,
      "in_reply_to_id" : 460173936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NzA2NQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 455268480,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460377065",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460377134"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If by unknown opcode you mean undecodable, no - because if an opcode can't be decoded, there are also no other opcodes decodable after it.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-25T07:30:38Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377134",
      "id" : 460377134,
      "in_reply_to_id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NzEzNA==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 455268530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460377134",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460393487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460393487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It wasn't entirely clear to me what `GetScriptOp` does, in particular what happens if an `opcode` does not occur in the `opcodetype` enum, but [apparently this is fine](https://stackoverflow.com/a/18195408).",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-25T10:59:58Z",
      "diff_hunk" : "@@ -1634,6 +1737,30 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        // OP_SUCCESSx processing overrides everything, including stack element size limits\n+        CScript::const_iterator pc = scriptPubKey.begin();\n+        while (pc < scriptPubKey.end()) {\n+            opcodetype opcode;\n+            if (!scriptPubKey.GetOp(pc, opcode)) {\n+                // Note how this condition would not be reached if an unknown OP_SUCCESSx was found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460393487",
      "id" : 460393487,
      "in_reply_to_id" : 460235730,
      "line" : 1776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5MzQ4Nw==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 1776,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 504,
      "pull_request_review_id" : 455278389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460393487",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I still have to do this.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:49:48Z",
      "diff_hunk" : "@@ -0,0 +1,745 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey\n+from test_framework.address import program_to_witness, script_to_p2sh, hash160\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths_no_sig(spenders, info, comment, standard, success, failure):\n+    \"\"\"Same as spender_two_paths but not support for signatures or padding witness.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    # Empty witness required\n+    def fn(t, i, u, v):\n+        return []\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, cb_pubkey=None, fees=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output\n+        # It's physically impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all\n+        # transactions. N.B. this test means no spenders can ever spend non-taproot/tapscript outputs,\n+        # or those at least have to be accounted for here.\n+\n+        def MaybeIsPayToPubKey(script):\n+            return script[-1] == OP_CHECKSIG\n+\n+        legacy_checksigs = 0 if cb_pubkey is None else 1 # P2PK output in coinbase back to wallet\n+        for tx in txs:\n+            for output in tx.vout:\n+                if MaybeIsPayToPubKey(output.scriptPubKey):\n+                    legacy_checksigs += 1\n+        extra_output_script = CScript([OP_CHECKSIG]*(MAX_BLOCK_SIGOPS-legacy_checksigs))\n+\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(block.serialize(True).hex())\n+        if (accept):\n+            assert node.getbestblockhash() == block.hash, \"Failed to accept: \" + msg\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n+\n+    def test_spenders(self, spenders, input_counts):\n+        \"\"\"Run randomized tests with a number of \"spenders\".\n+\n+        Steps:\n+            1) Generate an appropriate UTXO for each spender to test spend conditions\n+            2) Generate 100 random addresses of all wallet types: pkh/sh_wpkh/wpkh\n+            3) Select random number of inputs from (1)\n+            4) Select random number of addresses from (2) as outputs\n+\n+        Each spender embodies a test; in a large randomized test, it is verified\n+        that toggling the valid argument to each lambda toggles the validity of\n+        the transaction. This is accomplished by constructing transactions consisting\n+        of all valid inputs, except one invalid one.\n+        \"\"\"\n+\n+        # Construct a UTXO to spend for each of the spenders, with the script to satisfy being given by the spender\n+        self.nodes[0].generate(110)\n+        bal = self.nodes[0].getbalance() * 3 / (4 * len(spenders))\n+        random.shuffle(spenders)\n+        num_spenders = len(spenders)\n+        utxos = []\n+        while len(spenders):\n+            # Create the necessary outputs in multiple transactions, as sPKs may be repeated in test cases(which sendmany does not support)\n+            outputs = {}\n+            new_spenders = []\n+            batch = []\n+            for spender in spenders:\n+                addr = spender.address\n+                if len(batch) == 100 or addr in outputs:\n+                    new_spenders.append(spender)\n+                else:\n+                    amount = random.randrange(int(bal * 95000000), int(bal * 105000000))\n+                    outputs[addr] = amount / 100000000\n+                    batch.append(spender)\n+            self.log.info(\"Constructing %i UTXOs for spending tests\" % len(batch))\n+            tx = tx_from_hex(self.nodes[0].getrawtransaction(self.nodes[0].sendmany(\"\", outputs)))\n+            tx.rehash()\n+            spenders = new_spenders\n+            random.shuffle(spenders)\n+\n+            # Map created UTXOs back to the spenders they were created for\n+            for n, out in enumerate(tx.vout):\n+                for spender in batch:\n+                    if out.scriptPubKey == spender.script:\n+                        utxos.append(UTXOData(input=COutPoint(tx.sha256, n), output=out, spender=spender))\n+                        break\n+        assert(len(utxos) == num_spenders)\n+        random.shuffle(utxos)\n+        self.nodes[0].generate(1)\n+\n+        # Construct a bunch of sPKs that send coins back to the host wallet\n+        self.log.info(\"Constructing 100 addresses for returning coins\")\n+        host_spks = []\n+        host_pubkeys = []\n+        for i in range(100):\n+            addr = self.nodes[0].getnewaddress(address_type=random.choice([\"legacy\", \"p2sh-segwit\", \"bech32\"]))\n+            info = self.nodes[0].getaddressinfo(addr)\n+            spk = hex_str_to_bytes(info['scriptPubKey'])\n+            host_spks.append(spk)\n+            host_pubkeys.append(hex_str_to_bytes(info['pubkey']))\n+\n+        # Pick random subsets of UTXOs to construct transactions with\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        block = self.nodes[0].getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+        while len(utxos):\n+            tx = CTransaction()\n+            tx.nVersion = random.choice([1, 2, random.randint(-0x80000000, 0x7fffffff)])\n+            min_sequence = (tx.nVersion != 1 and tx.nVersion != 0) * 0x80000000  # The minimum sequence number to disable relative locktime\n+            if random.choice([True, False]):\n+                tx.nLockTime = random.randrange(LOCKTIME_THRESHOLD, self.lastblocktime - 7200)  # all absolute locktimes in the past\n+            else:\n+                tx.nLockTime = random.randrange(self.lastblockheight + 1)  # all block heights in the past\n+\n+            # Pick 1 to 4 UTXOs to construct transaction inputs\n+            acceptable_input_counts = [cnt for cnt in input_counts if cnt <= len(utxos)]\n+            while True:\n+                inputs = random.choice(acceptable_input_counts)\n+                remaining = len(utxos) - inputs\n+                if remaining == 0 or remaining >= max(input_counts) or remaining in input_counts:\n+                    break\n+            input_utxos = utxos[-inputs:]\n+            utxos = utxos[:-inputs]\n+            fee = random.randrange(MIN_FEE * 2, MIN_FEE * 4)  # 10000-20000 sat fee\n+            in_value = sum(utxo.output.nValue for utxo in input_utxos) - fee\n+            tx.vin = [CTxIn(outpoint=input_utxos[i].input, nSequence=random.randint(min_sequence, 0xffffffff)) for i in range(inputs)]\n+            tx.wit.vtxinwit = [CTxInWitness() for i in range(inputs)]\n+            self.log.info(\"Test: %s\" % (\", \".join(utxo.spender.comment for utxo in input_utxos)))\n+\n+            # Add 1 to 4 outputs\n+            outputs = random.choice([1, 2, 3, 4])\n+            assert in_value >= 0 and fee - outputs * DUST_LIMIT >= MIN_FEE\n+            for i in range(outputs):\n+                tx.vout.append(CTxOut())\n+                if in_value <= DUST_LIMIT:\n+                    tx.vout[-1].nValue = DUST_LIMIT\n+                elif i < outputs - 1:\n+                    tx.vout[-1].nValue = in_value\n+                else:\n+                    tx.vout[-1].nValue = random.randint(DUST_LIMIT, in_value)\n+                in_value -= tx.vout[-1].nValue\n+                tx.vout[-1].scriptPubKey = random.choice(host_spks)\n+            fee += in_value\n+            assert(fee >= 0)\n+\n+            # Sign each input incorrectly once on each complete signing pass, except the very last\n+            for fail_input in range(inputs + 1):\n+                # Wipe scriptSig/witness\n+                for i in range(inputs):\n+                    tx.vin[i].scriptSig = CScript()\n+                    tx.wit.vtxinwit[i] = CTxInWitness()\n+                # Fill inputs/witnesses\n+                for i in range(inputs):\n+                    fn = input_utxos[i].spender.sat_function\n+                    fn(tx, i, [utxo.output for utxo in input_utxos], i != fail_input)\n+                # Submit to mempool to check standardness\n+                is_standard_tx = fail_input == inputs and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                tx.rehash()\n+                if is_standard_tx:\n+                    self.nodes[0].sendrawtransaction(tx.serialize().hex(), 0)\n+                    assert(self.nodes[0].getmempoolentry(tx.hash) is not None)\n+                else:\n+                    assert_raises_rpc_error(-26, None, self.nodes[0].sendrawtransaction, tx.serialize().hex(), 0)\n+                # Submit in a block\n+                msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n+                self.block_submit(self.nodes[0], [tx], msg, witness=True, accept=fail_input == inputs, cb_pubkey=random.choice(host_pubkeys), fees=fee)\n+\n+    def build_spenders(self):\n+        VALID_SIGHASHES = [SIGHASH_DEFAULT, SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE, SIGHASH_ANYONECANPAY + SIGHASH_ALL, \\\n+                SIGHASH_ANYONECANPAY + SIGHASH_NONE, SIGHASH_ANYONECANPAY + SIGHASH_SINGLE]\n+        spenders = []\n+\n+        # Two features: No annex, and annex with random number of random bytes.\n+        for annex in [None, bytes([ANNEX_TAG]) + random_bytes(random.randrange(0, 250))]:\n+            # Non-empty annex is non-standard\n+            no_annex = annex is None\n+            sec1, sec2 = generate_privkey(), generate_privkey()\n+            pub1, _ = compute_xonly_pubkey(sec1)\n+            pub2, _ = compute_xonly_pubkey(sec2)\n+\n+            # Sighash mutation tests (test all sighash combinations)\n+            for hashtype in VALID_SIGHASHES:\n+                # Pure pubkey\n+                info = taproot_construct(pub1)\n+                # As an example, comment argument under this line means \"Sighash test for p2tr, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # Pubkey/P2PK script combination\n+                scripts = [CScript(random_checksig_style(pub2))]\n+                info = taproot_construct(pub1, scripts)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through p2pk key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+\n+            # For more complex scripts only test one sighash type\n+            hashtype = random.choice(VALID_SIGHASHES)\n+            scripts = [\n+                CScript(random_checksig_style(pub2) + bytes([OP_CODESEPARATOR])),  # codesep after checksig\n+                CScript(bytes([OP_CODESEPARATOR]) + random_checksig_style(pub2)),  # codesep before checksig\n+                CScript([bytes([1,2,3]), OP_DROP, OP_IF, OP_CODESEPARATOR, pub1, OP_ELSE, OP_CODESEPARATOR, pub2, OP_ENDIF, OP_CHECKSIG]),  # branch dependent codesep\n+            ]\n+            info = taproot_construct(pub1, scripts)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s1\", script=scripts[1], key=sec2, hashtype=hashtype, annex=annex, pos=0, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2a\", script=scripts[2], key=sec1, hashtype=hashtype, annex=annex, pos=3, suffix=[bytes([1])], standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2b\", script=scripts[2], key=sec2, hashtype=hashtype, annex=annex, pos=6, suffix=[bytes([])], standard=no_annex)\n+\n+            # Taproot max Merkle path length\n+            scripts = [\n+                CScript([pub2, OP_CHECKSIG]),\n+                [\n+                    CScript([pub1, OP_CHECKSIG]),\n+                    CScript([OP_RETURN])\n+                ]\n+            ]\n+            info = taproot_construct(pub1, nested_script(scripts, 127))\n+            spender_two_paths(spenders, info, \"taproot/merklelimit\", standard=no_annex, success={\"key\": sec2, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[0]}, failure={\"key\": sec1, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[1][0]})\n+\n+            # Above OP_16 to avoid minimal encoding complaints\n+            checksigadd_val = random.randrange(17, 100)\n+            checksigadd_arg = CScriptNum(checksigadd_val)\n+            checksigadd_result = CScriptNum(checksigadd_val+1)\n+\n+            # Illegally-large number for script arithmetic input\n+            oversize_number = 2**31\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number))), 6)\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number-1))), 5)\n+\n+            # Various BIP342 features\n+            scripts = [\n+                # 0) drop stack element and OP_CHECKSIG\n+                CScript([OP_DROP, pub2, OP_CHECKSIG]),\n+                # 1) normal OP_CHECKSIG\n+                CScript([pub2, OP_CHECKSIG]),\n+                # 2) normal OP_CHECKSIGVERIFY\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1]),\n+                # 3) Hypothetical OP_CHECKMULTISIG script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIG]),\n+                # 4) Hypothetical OP_CHECKMULTISIGVERIFY script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIGVERIFY, OP_1]),\n+                # 5) OP_IF script that needs a true input\n+                CScript([OP_IF, pub2, OP_CHECKSIG, OP_ELSE, OP_RETURN, OP_ENDIF]),\n+                # 6) OP_NOTIF script that needs a true input\n+                CScript([OP_NOTIF, OP_RETURN, OP_ELSE, pub2, OP_CHECKSIG, OP_ENDIF]),\n+                # 7) OP_CHECKSIG with an empty key\n+                CScript([OP_0, OP_CHECKSIG]),\n+                # 8) OP_CHECKSIGVERIFY with an empty key\n+                CScript([OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 9) normal OP_CHECKSIGADD that also ensures return value is correct\n+                CScript([OP_0, pub2, OP_CHECKSIGADD, OP_1, OP_EQUAL]),\n+                # 10) OP_CHECKSIGADD with empty key\n+                CScript([OP_0, OP_0, OP_CHECKSIGADD]),\n+                # 11) OP_CHECKSIGADD with missing counter stack element\n+                CScript([pub2, OP_CHECKSIGADD]),\n+                # 12) OP_CHECKSIG that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, pub1, OP_CHECKSIG, OP_NOT]),\n+                # 13) OP_CHECKSIG with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_CHECKSIG, OP_NOT]),\n+                # 14) OP_CHECKSIGADD that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, pub1, OP_CHECKSIGADD, OP_NOT]),\n+                # 15) OP_CHECKSIGADD with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGADD, OP_NOT]),\n+                # 16) OP_CHECKSIG with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIG]),\n+                # 17) OP_CHECKSIGADD with unknown pubkey type\n+                CScript([OP_0, OP_1, OP_CHECKSIGADD]),\n+                # 18) OP_CHECKSIGVERIFY with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIGVERIFY, OP_1]),\n+                # 19) script longer than 10000 bytes and over 201 non-push opcodes\n+                CScript([OP_0, OP_0, OP_2DROP] * 10001 + [pub2, OP_CHECKSIG]),\n+                # 20) OP_CHECKSIGVERIFY with empty key\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 21) Script that grows the stack to 1000 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 999 + [OP_DROP] * 999),\n+                # 22) Script that grows the stack to 1001 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 1000 + [OP_DROP] * 1000),\n+                # 23) Script that expects an input stack of 1000 elements\n+                CScript([OP_DROP] * 999 + [pub2, OP_CHECKSIG]),\n+                # 24) Script that expects an input stack of 1001 elements\n+                CScript([OP_DROP] * 1000 + [pub2, OP_CHECKSIG]),\n+                # 25) Script that pushes a 520 byte element\n+                CScript([random_bytes(520), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 26) Script that pushes a 521 byte element\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 27) Script that pushes a 521 byte element and OP_SUCCESSX\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG, random_op_success()]),\n+                # 28) Pushes random CScriptNum value, checks OP_CHECKSIGADD result\n+                CScript([checksigadd_arg, pub2, OP_CHECKSIGADD, checksigadd_result, OP_EQUAL]),\n+                # 30) CHECKSIGADD that succeeds with proper sig because numeric argument number is <=4 bytes\n+                CScript([CScriptNum(oversize_number-1), pub2, OP_CHECKSIGADD]),\n+                # 29) CHECKSIGADD that must fail because numeric argument number is >4 bytes\n+                CScript([CScriptNum(oversize_number), pub2, OP_CHECKSIGADD]),\n+            ]\n+            # For the next test we must predict the exact witness size\n+            witness_size = 141 + (hashtype != 0) + (0 if annex is None else len(annex) + 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316019",
      "id" : 461316019,
      "in_reply_to_id" : 456992780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjAxOQ==",
      "original_commit_id" : "42bda3592c3fc4d5169b2f53e80780ed46a0854c",
      "original_line" : 701,
      "original_position" : 655,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 456299801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316019",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added some extra comments.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:50:02Z",
      "diff_hunk" : "@@ -1265,7 +1265,7 @@ uint256 GetPrevoutHash(const T& txTo)\n     for (const auto& txin : txTo.vin) {\n         ss << txin.prevout;\n     }\n-    return ss.GetHash();\n+    return ss.GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316101",
      "id" : 461316101,
      "in_reply_to_id" : 459503234,
      "line" : 1360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjEwMQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1360,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 200,
      "pull_request_review_id" : 456299871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316101",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316301"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've made some significant changes here; the code will now detect if a transaction needs BIP341 and/or BIP143 sighashing, and then only precompute what is needed for the existing ones.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:50:53Z",
      "diff_hunk" : "@@ -1299,9 +1317,17 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_o\n \n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n-        hashPrevouts = GetPrevoutHash(txTo);\n-        hashSequence = GetSequenceHash(txTo);\n-        hashOutputs = GetOutputsHash(txTo);\n+        m_prevouts_hash = GetPrevoutHash(txTo);\n+        hashPrevouts = SHA256Uint256(m_prevouts_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316301",
      "id" : 461316301,
      "in_reply_to_id" : 459527853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjMwMQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1321,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 456300116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316301",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The constant itself is consensus-critical.\r\n\r\nThe name of the variable was a style violation; it's a constant, it should be ALL_CAPS. Did that.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:51:56Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316594",
      "id" : 461316594,
      "in_reply_to_id" : 459531548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjU5NA==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 456300426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316594",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The epoch is explained in footnote 19 of BIP341. Not sure what is missing.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:52:43Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316813",
      "id" : 461316813,
      "in_reply_to_id" : 459653999,
      "line" : 1494,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjgxMw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1494,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 347,
      "pull_request_review_id" : 456300684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316813",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316943"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If this code is reused for a new sighash algorithm, this will be the least of our problems.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:53:08Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316943",
      "id" : 461316943,
      "in_reply_to_id" : 459663568,
      "line" : 1513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjk0Mw==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1513,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 366,
      "pull_request_review_id" : 456300833,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316943",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch, fixed.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:53:17Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HasherTapSighash;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (output_type != SIGHASH_ALL && output_type != SIGHASH_SINGLE && output_type != SIGHASH_NONE) return false;\n+    if (input_type != SIGHASH_ANYONECANPAY && input_type != 0) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_hash;\n+        ss << cache->m_spent_amounts_hash;\n+        ss << cache->m_spent_scripts_hash;\n+        ss << cache->m_sequences_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == 0xff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316995",
      "id" : 461316995,
      "in_reply_to_id" : 459665027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjk5NQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1392,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 456300870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461316995",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Comments for the libsecp256k1 changes should go to the PR there: https://github.com/bitcoin-core/secp256k1/pull/558",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:54:03Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Andrew Poelstra                                 *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+\n+#include \"include/secp256k1.h\"\n+#include \"include/secp256k1_schnorrsig.h\"\n+#include \"hash.h\"\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/nonce\")||SHA256(\"BIP340/nonce\"). */\n+static void secp256k1_nonce_function_bip340_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0xa96e75cbul;\n+    sha->s[1] = 0x74f9f0acul;\n+    sha->s[2] = 0xc49e3c98ul;\n+    sha->s[3] = 0x202f99baul;\n+    sha->s[4] = 0x8946a616ul;\n+    sha->s[5] = 0x4accf415ul;\n+    sha->s[6] = 0x86e335c3ul;\n+    sha->s[7] = 0x48d0a072ul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/aux\")||SHA256(\"BIP340/aux\"). */\n+static void secp256k1_nonce_function_bip340_sha256_tagged_aux(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x5d74a872ul;\n+    sha->s[1] = 0xd57064d4ul;\n+    sha->s[2] = 0x89495becul;\n+    sha->s[3] = 0x910f46f5ul;\n+    sha->s[4] = 0xcbc6fd3eul;\n+    sha->s[5] = 0xaf05d9d0ul;\n+    sha->s[6] = 0xcb781ce6ul;\n+    sha->s[7] = 0x062930acul;\n+\n+    sha->bytes = 64;\n+}\n+\n+/* algo16 argument for nonce_function_bip340 to derive the nonce exactly as stated in BIP-340\n+ * by using the correct tagged hash function. */\n+static const unsigned char bip340_algo16[16] = \"BIP340/nonce\\0\\0\\0\\0\";\n+\n+static int nonce_function_bip340(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo16, void *data) {\n+    secp256k1_sha256 sha;\n+    unsigned char masked_key[32];\n+    int i;\n+\n+    if (algo16 == NULL) {\n+        return 0;\n+    }\n+\n+    if (data != NULL) {\n+        secp256k1_nonce_function_bip340_sha256_tagged_aux(&sha);\n+        secp256k1_sha256_write(&sha, data, 32);\n+        secp256k1_sha256_finalize(&sha, masked_key);\n+        for (i = 0; i < 32; i++) {\n+            masked_key[i] ^= key32[i];\n+        }\n+    }\n+\n+    /* Tag the hash with algo16 which is important to avoid nonce reuse across\n+     * algorithms. If this nonce function is used in BIP-340 signing as defined\n+     * in the spec, an optimized tagging implementation is used. */\n+    if (memcmp(algo16, bip340_algo16, 16) == 0) {\n+        secp256k1_nonce_function_bip340_sha256_tagged(&sha);\n+    } else {\n+        int algo16_len = 16;\n+        /* Remove terminating null bytes */\n+        while (algo16_len > 0 && !algo16[algo16_len - 1]) {\n+            algo16_len--;\n+        }\n+        secp256k1_sha256_initialize_tagged(&sha, algo16, algo16_len);\n+    }\n+\n+    /* Hash (masked-)key||pk||msg using the tagged hash as per the spec */\n+    if (data != NULL) {\n+        secp256k1_sha256_write(&sha, masked_key, 32);\n+    } else {\n+        secp256k1_sha256_write(&sha, key32, 32);\n+    }\n+    secp256k1_sha256_write(&sha, xonly_pk32, 32);\n+    secp256k1_sha256_write(&sha, msg32, 32);\n+    secp256k1_sha256_finalize(&sha, nonce32);\n+    return 1;\n+}\n+\n+const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340 = nonce_function_bip340;\n+\n+/* Initializes SHA256 with fixed midstate. This midstate was computed by applying\n+ * SHA256 to SHA256(\"BIP340/challenge\")||SHA256(\"BIP340/challenge\"). */\n+static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {\n+    secp256k1_sha256_initialize(sha);\n+    sha->s[0] = 0x71985ac9ul;\n+    sha->s[1] = 0x198317a2ul;\n+    sha->s[2] = 0x60b6e581ul;\n+    sha->s[3] = 0x54c109b6ul;\n+    sha->s[4] = 0x64bac2fdul;\n+    sha->s[5] = 0x91231de2ul;\n+    sha->s[6] = 0x7301ebdeul;\n+    sha->s[7] = 0x87635f83ul;\n+    sha->bytes = 64;\n+}\n+\n+int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg32, const secp256k1_keypair *keypair, secp256k1_nonce_function_hardened noncefp, void *ndata) {\n+    secp256k1_scalar sk;\n+    secp256k1_scalar e;\n+    secp256k1_scalar k;\n+    secp256k1_gej rj;\n+    secp256k1_ge pk;\n+    secp256k1_ge r;\n+    secp256k1_sha256 sha;\n+    unsigned char buf[32] = { 0 };\n+    unsigned char pk_buf[32];\n+    unsigned char seckey[32];\n+    int ret = 1;\n+\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n+    ARG_CHECK(sig64 != NULL);\n+    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(keypair != NULL);\n+\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_bip340;\n+    }\n+\n+    ret &= secp256k1_keypair_load(ctx, &sk, &pk, keypair);\n+    /* Because we are signing for a x-only pubkey, the secret key is negated\n+     * before signing if the point corresponding to the secret key does not\n+     * have an even Y. */\n+    if (secp256k1_fe_is_odd(&pk.y)) {\n+        secp256k1_scalar_negate(&sk, &sk);\n+    }\n+\n+    secp256k1_scalar_get_b32(seckey, &sk);\n+    secp256k1_fe_get_b32(pk_buf, &pk.x);\n+    ret &= !!noncefp(buf, msg32, seckey, pk_buf, bip340_algo16, (void*)ndata);\n+    secp256k1_scalar_set_b32(&k, buf, NULL);\n+    ret &= !secp256k1_scalar_is_zero(&k);\n+    secp256k1_scalar_cmov(&k, &secp256k1_scalar_one, !ret);\n+\n+    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);\n+    secp256k1_ge_set_gej(&r, &rj);\n+\n+    /* We declassify r to allow using it as a branch point. This is fine\n+     * because r is not a secret. */\n+    secp256k1_declassify(ctx, &r, sizeof(r));\n+    if (!secp256k1_fe_is_quad_var(&r.y)) {\n+        secp256k1_scalar_negate(&k, &k);\n+    }\n+    secp256k1_fe_normalize_var(&r.x);\n+    secp256k1_fe_get_b32(&sig64[0], &r.x);\n+\n+    /* tagged hash(r.x, pk.x, msg32) */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317204",
      "id" : 461317204,
      "in_reply_to_id" : 459769788,
      "line" : 161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNzIwNA==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 161,
      "original_position" : 161,
      "original_start_line" : null,
      "path" : "src/secp256k1/src/modules/schnorrsig/main_impl.h",
      "position" : 161,
      "pull_request_review_id" : 456301098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317204",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed it to `data`. I think `preimage` is more useful when you're talking about a hash input that generates a specified output.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:54:48Z",
      "diff_hunk" : "@@ -77,3 +78,19 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+CHashWriter TaggedHash(const std::string& tag)\n+{\n+    CHashWriter writer(SER_GETHASH, 0);\n+    uint256 taghash;\n+    CSHA256().Write((const unsigned char*)tag.data(), tag.size()).Finalize(taghash.begin());\n+    writer << taghash << taghash;\n+    return writer;\n+}\n+\n+uint256 SHA256Uint256(const uint256& hash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317427",
      "id" : 461317427,
      "in_reply_to_id" : 459946492,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNzQyNw==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 91,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/hash.cpp",
      "position" : null,
      "pull_request_review_id" : 456301320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317427",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317688"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed the BIP341 ones with just a `_bip341_` in the name, which is as specific as it can be, I think. I'm trying not to touch too much other stuff, so the others keep their name.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:55:44Z",
      "diff_hunk" : "@@ -114,33 +120,92 @@ enum\n     // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n     //\n     SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n+\n+    // Taproot/Tapscript validation (BIPs 341 & 342)\n+    //\n+    SCRIPT_VERIFY_TAPROOT = (1U << 17),\n+\n+    // Making unknown Taproot leaf versions non-standard\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1U << 18),\n+\n+    // Making the use of (unknown) annexes non-standard (currently no annexes are known)\n+    //\n+    SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX = (1U << 19),\n+\n+    // Making unknown OP_SUCCESS non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1U << 20),\n+\n+    // Making unknown public key versions (in BIP 342 scripts) non-standard\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1U << 21),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData\n {\n+    //! Single-SHA256 versions\n+    uint256 m_prevouts_hash, m_sequences_hash, m_outputs_hash, m_spent_amounts_hash, m_spent_scripts_hash;\n+    bool m_spent_outputs_ready = false;\n+\n+    //! Double-SHA256 versions\n     uint256 hashPrevouts, hashSequence, hashOutputs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317688",
      "id" : 461317688,
      "in_reply_to_id" : 459954502,
      "line" : 157,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNzY4OA==",
      "original_commit_id" : "ad51604f57aaa311529bd302e069c26dac818ad6",
      "original_line" : 157,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 60,
      "pull_request_review_id" : 456301579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317688",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:55:57Z",
      "diff_hunk" : "@@ -146,14 +158,21 @@ struct PrecomputedTransactionData\n \n enum class SigVersion\n {\n-    BASE = 0,\n-    WITNESS_V0 = 1,\n-    TAPROOT = 2,\n+    BASE = 0,        //!< Bare scripts and P2SH redeemscripts; see BIP 16",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317743",
      "id" : 461317743,
      "in_reply_to_id" : 460091608,
      "line" : 176,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNzc0Mw==",
      "original_commit_id" : "b7a7f6ab2ccc30e323a5396c27cb82ffd613550b",
      "original_line" : 176,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 83,
      "pull_request_review_id" : 456301645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461317743",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:57:14Z",
      "diff_hunk" : "@@ -163,6 +163,16 @@ enum class SigVersion\n     TAPROOT = 2,     //!< Witness v1 with non-P2SH 32 byte program (Taproot), key path spending; see BIP 341\n };\n \n+struct ScriptExecutionData\n+{\n+    //! Whether m_annex_present and m_annex_hash are initialized.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318080",
      "id" : 461318080,
      "in_reply_to_id" : 460163407,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODA4MA==",
      "original_commit_id" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8",
      "original_line" : 168,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 456302046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318080",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure. The result is always _exactly_ equal to `!sig.empty()` if no failure occurs, so I think this makes sense.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:57:53Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --\n+     *    upgradable public key versions precede other rules;\n+     *    the script execution fails when using empty signature with invalid public key;\n+     *    the script execution fails when using non-empty invalid signature.\n+     */\n+    success = !sig.empty();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318243",
      "id" : 461318243,
      "in_reply_to_id" : 460213001,
      "line" : 381,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODI0Mw==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 381,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 32,
      "pull_request_review_id" : 456302269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318243",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:58:17Z",
      "diff_hunk" : "@@ -371,6 +368,67 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n+static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+{\n+    assert(sigversion == SigVersion::TAPSCRIPT);\n+\n+    /*\n+     *  The following validation sequence is consensus critical. Please note how --\n+     *    upgradable public key versions precede other rules;\n+     *    the script execution fails when using empty signature with invalid public key;\n+     *    the script execution fails when using non-empty invalid signature.\n+     */\n+    success = !sig.empty();\n+    if (success) {\n+        // Implement the sigops/witnesssize ratio test.\n+        // Passing with an upgradable public key version is also counted.\n+        assert(execdata.m_validation_weight_left_init);\n+        execdata.m_validation_weight_left -= VALIDATION_WEIGHT_PER_SIGOP_PASSED;\n+        if (execdata.m_validation_weight_left < 0) {\n+            return set_error(serror, SCRIPT_ERR_TAPSCRIPT_VALIDATION_WEIGHT);\n+        }\n+    }\n+    if (pubkey.size() == 0) {\n+        return set_error(serror, SCRIPT_ERR_PUBKEYTYPE);\n+    } else if (pubkey.size() == 32) {\n+        if (success && !checker.CheckSigSchnorr(sig, pubkey, sigversion, execdata)) {\n+            return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);\n+        }\n+    } else {\n+        /*\n+         *  New public key version softforks should be defined before this `else` block.\n+         *  Generally, the new code should not do anything but failing the script execution. To avoid\n+         *  consensus bugs, it should not modify any existing values (including success).\n+         */\n+        if ((flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE) != 0) {\n+            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_PUBKEYTYPE);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+/** Helper for OP_CHECKSIG and OP_CHECKSIGVERIFY",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318327",
      "id" : 461318327,
      "in_reply_to_id" : 460216726,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODMyNw==",
      "original_commit_id" : "988d7a795cfc29b37c3ea3359fb69412ab04de53",
      "original_line" : 411,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 456302370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318327",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Meh.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:58:28Z",
      "diff_hunk" : "@@ -371,7 +371,7 @@ static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScrip\n     return true;\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, ScriptExecutionData execdata)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318367",
      "id" : 461318367,
      "in_reply_to_id" : 460079736,
      "line" : 432,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODM2Nw==",
      "original_commit_id" : "cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8",
      "original_line" : 432,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 83,
      "pull_request_review_id" : 456302413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318367",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318419"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed the variable name.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:58:42Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318419",
      "id" : 461318419,
      "in_reply_to_id" : 460173936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODQxOQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 456302488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318419",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318457"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T04:58:49Z",
      "diff_hunk" : "@@ -1540,13 +1540,19 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const C\n     }\n \n     if (!txdata.m_ready) {\n-        txdata.Init(tx);\n+        std::vector<CTxOut> spent_outputs;\n+        spent_outputs.reserve(tx.vin.size());\n+\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318457",
      "id" : 461318457,
      "in_reply_to_id" : 460174647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxODQ1Nw==",
      "original_commit_id" : "14d2178048ba7aecaf2e69a283968c6554c127cb",
      "original_line" : 1546,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 456302520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461318457",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, updated to latest libsecp256k1 Schnorr PR, addressed a number of comments (though there are a few left). The biggest change is that the sighash precomputation now takes into account whether a transaction contains/needs taproot precomputation or not.\r\n\r\nI also improved the functional tests. It now includes P2PKH/P2WPKH/P2SH-P2WPKH spends as well, just to make sure transactions with mixes have their sighashes computed correctly still. The framework now also tracks (pre-taproot) sigops, to accurately fill the block with them.\r\n\r\nThe BIP340 implementation in the test framework is also updated to the latest spec (including support for the auxiliary randomness), and implements/contains the BIP's test vectors now (which are verified against the secp256k1 implementation as well).",
      "created_at" : "2020-07-28T05:02:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-664777875",
      "id" : 664777875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NDc3Nzg3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-28T05:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664777875",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461603352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461603352"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Last sentence here is outdated.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T14:01:11Z",
      "diff_hunk" : "@@ -0,0 +1,797 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS_WEIGHT,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    SegwitV0SignatureHash,\n+    LegacySignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n+from test_framework.address import (\n+    program_to_witness,\n+    script_to_p2sh,\n+    hash160,\n+    key_to_p2wpkh,\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2pkh,\n+)\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+# - A string with an expected error message for failure case if known\n+# - The (pre-taproot) sigops weight consumed by a succesful spend\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function,err_msg,sigops_weight\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_legacy(spenders, key, comment, hashtype, segwit, p2sh):\n+    \"\"\"Legacy signing (P2PKH, P2SH-P2PKH, P2WPKH, P2SH-P2WPKH, with signatures on valid/invalid sighashes).\"\"\"\n+    eckey = ECKey()\n+    eckey.set(key, True)\n+    pubkey = eckey.get_pubkey().get_bytes()\n+    pubkeyhash = hash160(pubkey)\n+    sigops_weight = 0\n+    if segwit:\n+        sigops_weight += 1\n+        spk = CScript([OP_0, pubkeyhash])\n+        if p2sh:\n+            addr = key_to_p2sh_p2wpkh(pubkey)\n+        else:\n+            addr = key_to_p2wpkh(pubkey)\n+    else:\n+        sigops_weight += 1 * WITNESS_SCALE_FACTOR\n+        spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if p2sh:\n+            addr = script_to_p2sh(spk)\n+        else:\n+            addr = key_to_p2pkh(pubkey)\n+    if p2sh:\n+        redeemscript = spk\n+        spk = CScript([OP_HASH160, hash160(redeemscript), OP_EQUAL])\n+\n+    def fn(t, i, u, v):\n+        script = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if segwit:\n+            sig_hash = SegwitV0SignatureHash(script, t, i, hashtype, u[i].nValue)\n+        else:\n+            sig_hash = LegacySignatureHash(script, t, i, hashtype)[0]\n+        if not v:\n+            sig_hash = damage_bytes(sig_hash)\n+        sig = eckey.sign_ecdsa(sig_hash) + bytes([hashtype])\n+        if segwit:\n+            t.wit.vtxinwit[i].scriptWitness.stack = [sig, pubkey]\n+        else:\n+            t.vin[i].scriptSig = CScript([sig, pubkey])\n+        if p2sh:\n+            t.vin[i].scriptSig = bytes(t.vin[i].scriptSig) + CScript([redeemscript])\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=True, sat_function=fn, err_msg=None, sigops_weight=sigops_weight))\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=None, sigops_weight=0))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid(spenders, info, comment, err_msg=None, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script, err_msg=None):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output.\n+        # It is not impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461603352",
      "id" : 461603352,
      "line" : 407,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwMzM1Mg==",
      "original_commit_id" : "92d3928ed13d9287b24532e5be863fc6a505c069",
      "original_line" : 407,
      "original_position" : 410,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : 407,
      "pull_request_review_id" : 456661508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461603352",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461605876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461605876"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nice, you may get 1 to 3 sigops weight left over by chance, but tests will blow that out regularly.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T14:04:34Z",
      "diff_hunk" : "@@ -0,0 +1,797 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS_WEIGHT,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    SegwitV0SignatureHash,\n+    LegacySignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n+from test_framework.address import (\n+    program_to_witness,\n+    script_to_p2sh,\n+    hash160,\n+    key_to_p2wpkh,\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2pkh,\n+)\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+# - A string with an expected error message for failure case if known\n+# - The (pre-taproot) sigops weight consumed by a succesful spend\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function,err_msg,sigops_weight\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_legacy(spenders, key, comment, hashtype, segwit, p2sh):\n+    \"\"\"Legacy signing (P2PKH, P2SH-P2PKH, P2WPKH, P2SH-P2WPKH, with signatures on valid/invalid sighashes).\"\"\"\n+    eckey = ECKey()\n+    eckey.set(key, True)\n+    pubkey = eckey.get_pubkey().get_bytes()\n+    pubkeyhash = hash160(pubkey)\n+    sigops_weight = 0\n+    if segwit:\n+        sigops_weight += 1\n+        spk = CScript([OP_0, pubkeyhash])\n+        if p2sh:\n+            addr = key_to_p2sh_p2wpkh(pubkey)\n+        else:\n+            addr = key_to_p2wpkh(pubkey)\n+    else:\n+        sigops_weight += 1 * WITNESS_SCALE_FACTOR\n+        spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if p2sh:\n+            addr = script_to_p2sh(spk)\n+        else:\n+            addr = key_to_p2pkh(pubkey)\n+    if p2sh:\n+        redeemscript = spk\n+        spk = CScript([OP_HASH160, hash160(redeemscript), OP_EQUAL])\n+\n+    def fn(t, i, u, v):\n+        script = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if segwit:\n+            sig_hash = SegwitV0SignatureHash(script, t, i, hashtype, u[i].nValue)\n+        else:\n+            sig_hash = LegacySignatureHash(script, t, i, hashtype)[0]\n+        if not v:\n+            sig_hash = damage_bytes(sig_hash)\n+        sig = eckey.sign_ecdsa(sig_hash) + bytes([hashtype])\n+        if segwit:\n+            t.wit.vtxinwit[i].scriptWitness.stack = [sig, pubkey]\n+        else:\n+            t.vin[i].scriptSig = CScript([sig, pubkey])\n+        if p2sh:\n+            t.vin[i].scriptSig = bytes(t.vin[i].scriptSig) + CScript([redeemscript])\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=True, sat_function=fn, err_msg=None, sigops_weight=sigops_weight))\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=None, sigops_weight=0))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid(spenders, info, comment, err_msg=None, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script, err_msg=None):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output.\n+        # It is not impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all\n+        # transactions.\n+        extra_output_script = CScript([OP_CHECKSIG]*((MAX_BLOCK_SIGOPS_WEIGHT - sigops_weight) // WITNESS_SCALE_FACTOR))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461605876",
      "id" : 461605876,
      "line" : 409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNTg3Ng==",
      "original_commit_id" : "92d3928ed13d9287b24532e5be863fc6a505c069",
      "original_line" : 409,
      "original_position" : 412,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : 409,
      "pull_request_review_id" : 456661508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461605876",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461854603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461854603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I know, but it's a lot harder to test that accurately (it needs creating outputs and spending them using witness spends, ...).\r\n\r\nIdeally, we'd also test that if you have one sigop too many, things also fail. Otherwise it could be the case that some of the  sigops estimates in the test are overestimates.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T20:21:04Z",
      "diff_hunk" : "@@ -0,0 +1,797 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS_WEIGHT,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    SegwitV0SignatureHash,\n+    LegacySignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n+from test_framework.address import (\n+    program_to_witness,\n+    script_to_p2sh,\n+    hash160,\n+    key_to_p2wpkh,\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2pkh,\n+)\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+# - A string with an expected error message for failure case if known\n+# - The (pre-taproot) sigops weight consumed by a succesful spend\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function,err_msg,sigops_weight\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_legacy(spenders, key, comment, hashtype, segwit, p2sh):\n+    \"\"\"Legacy signing (P2PKH, P2SH-P2PKH, P2WPKH, P2SH-P2WPKH, with signatures on valid/invalid sighashes).\"\"\"\n+    eckey = ECKey()\n+    eckey.set(key, True)\n+    pubkey = eckey.get_pubkey().get_bytes()\n+    pubkeyhash = hash160(pubkey)\n+    sigops_weight = 0\n+    if segwit:\n+        sigops_weight += 1\n+        spk = CScript([OP_0, pubkeyhash])\n+        if p2sh:\n+            addr = key_to_p2sh_p2wpkh(pubkey)\n+        else:\n+            addr = key_to_p2wpkh(pubkey)\n+    else:\n+        sigops_weight += 1 * WITNESS_SCALE_FACTOR\n+        spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if p2sh:\n+            addr = script_to_p2sh(spk)\n+        else:\n+            addr = key_to_p2pkh(pubkey)\n+    if p2sh:\n+        redeemscript = spk\n+        spk = CScript([OP_HASH160, hash160(redeemscript), OP_EQUAL])\n+\n+    def fn(t, i, u, v):\n+        script = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+        if segwit:\n+            sig_hash = SegwitV0SignatureHash(script, t, i, hashtype, u[i].nValue)\n+        else:\n+            sig_hash = LegacySignatureHash(script, t, i, hashtype)[0]\n+        if not v:\n+            sig_hash = damage_bytes(sig_hash)\n+        sig = eckey.sign_ecdsa(sig_hash) + bytes([hashtype])\n+        if segwit:\n+            t.wit.vtxinwit[i].scriptWitness.stack = [sig, pubkey]\n+        else:\n+            t.vin[i].scriptSig = CScript([sig, pubkey])\n+        if p2sh:\n+            t.vin[i].scriptSig = bytes(t.vin[i].scriptSig) + CScript([redeemscript])\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=True, sat_function=fn, err_msg=None, sigops_weight=sigops_weight))\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=None, sigops_weight=0))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid(spenders, info, comment, err_msg=None, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure, err_msg=None):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script, err_msg=None):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn, err_msg=err_msg, sigops_weight=0))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output.\n+        # It is not impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all\n+        # transactions.\n+        extra_output_script = CScript([OP_CHECKSIG]*((MAX_BLOCK_SIGOPS_WEIGHT - sigops_weight) // WITNESS_SCALE_FACTOR))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461854603",
      "id" : 461854603,
      "in_reply_to_id" : 461605876,
      "line" : 409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg1NDYwMw==",
      "original_commit_id" : "92d3928ed13d9287b24532e5be863fc6a505c069",
      "original_line" : 409,
      "original_position" : 412,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : 409,
      "pull_request_review_id" : 456981742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461854603",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461872479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461872479"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bips/pull/954 for fixing the consensus-critical inconsistency.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T20:54:21Z",
      "diff_hunk" : "@@ -1319,6 +1345,76 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HasherTapSighash = TaggedHash(\"TapSighash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461872479",
      "id" : 461872479,
      "in_reply_to_id" : 459531548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MjQ3OQ==",
      "original_commit_id" : "41d08f5d77f52bec0e31bb081d85fff2d67d0467",
      "original_line" : 1348,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 457004350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461872479",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461954582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Better now? I've extended the test further too, and moved it to its own section.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T23:40:40Z",
      "diff_hunk" : "@@ -0,0 +1,745 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test Taproot softfork (BIPs 340-342)\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    create_block,\n+    add_witness_commitment,\n+    MAX_BLOCK_SIGOPS,\n+)\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, CTxInWitness\n+from test_framework.script import (\n+    ANNEX_TAG,\n+    CScript,\n+    CScriptNum,\n+    CScriptOp,\n+    LEAF_VERSION_TAPSCRIPT,\n+    LOCKTIME_THRESHOLD,\n+    MAX_SCRIPT_ELEMENT_SIZE,\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_1SUB,\n+    OP_1NEGATE,\n+    OP_2DROP,\n+    OP_2DUP,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKMULTISIGVERIFY,\n+    OP_CHECKSIG,\n+    OP_CHECKSIGADD,\n+    OP_CHECKSIGVERIFY,\n+    OP_CODESEPARATOR,\n+    OP_DROP,\n+    OP_DUP,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_NOT,\n+    OP_NOTIF,\n+    OP_PUSHDATA1,\n+    OP_RETURN,\n+    OP_SWAP,\n+    OP_VERIF,\n+    SIGHASH_DEFAULT,\n+    SIGHASH_ALL,\n+    SIGHASH_NONE,\n+    SIGHASH_SINGLE,\n+    SIGHASH_ANYONECANPAY,\n+    TaprootSignatureHash,\n+    is_op_success,\n+    taproot_construct,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error, hex_str_to_bytes, assert_equal\n+from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey\n+from test_framework.address import program_to_witness, script_to_p2sh, hash160\n+from collections import namedtuple\n+from io import BytesIO\n+import random\n+import struct\n+\n+EMPTYWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)\"\n+INVALIDKEYPATHSIG_ERROR = \"non-mandatory-script-verify-flag (Invalid signature for Taproot key path spending) (code 64)\"\n+UNKNOWNWITNESS_ERROR = \"non-mandatory-script-verify-flag (Witness version reserved for soft-fork upgrades) (code 64)\"\n+\n+DUST_LIMIT = 600\n+MIN_FEE = 5000\n+\n+def tx_from_hex(hexstring):\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n+    tx.deserialize(f)\n+    return tx\n+\n+def get_taproot_bech32(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return program_to_witness(1, info[2:])\n+\n+def get_version1_p2sh(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return script_to_p2sh(info)\n+\n+def get_p2sh_spk(info):\n+    if isinstance(info, tuple):\n+        info = info[0]\n+    return CScript([OP_HASH160, hash160(info), OP_EQUAL])\n+\n+def random_op_success():\n+    ret = 0\n+    while (not is_op_success(ret)):\n+        ret = random.randint(0x50, 0xfe)\n+    return CScriptOp(ret)\n+\n+def random_unknown_leaf_ver(no_annex_tag=True):\n+    ret = LEAF_VERSION_TAPSCRIPT\n+    while (ret == LEAF_VERSION_TAPSCRIPT or (no_annex_tag and ret == (ANNEX_TAG & 0xfe))):\n+        ret = random.randrange(128) * 2\n+    return ret\n+\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+\n+# TODO-TAPROOT Use this in a test\n+def random_script(size, no_success=True):\n+    ret = bytes()\n+    while (len(ret) < size):\n+        remain = size - len(ret)\n+        opcode = random.randrange(256)\n+        while (no_success and is_op_success(opcode)):\n+            opcode = random.randrange(256)\n+        if opcode == 0 or opcode >= OP_1NEGATE:\n+            ret += bytes([opcode])\n+        elif opcode <= 75 and opcode <= remain - 1:\n+            ret += bytes([opcode]) + random_bytes(opcode)\n+        elif opcode == 76 and remain >= 2:\n+            pushsize = random.randint(0, min(0xff, remain - 2))\n+            ret += bytes([opcode]) + bytes([pushsize]) + random_bytes(pushsize)\n+        elif opcode == 77 and remain >= 3:\n+            pushsize = random.randint(0, min(0xffff, remain - 3))\n+            ret += bytes([opcode]) + struct.pack(b'<H', pushsize) + random_bytes(pushsize)\n+        elif opcode == 78 and remain >= 5:\n+            pushsize = random.randint(0, min(0xffffffff, remain - 5))\n+            ret += bytes([opcode]) + struct.pack(b'<I', pushsize) + random_bytes(pushsize)\n+    assert len(ret) == size\n+    return ret\n+\n+# TODO-TAPROOT Use this in a test\n+def random_invalid_push(size):\n+    assert size > 0\n+    ret = bytes()\n+    opcode = 78\n+    if size <= 75:\n+        opcode = random.randint(75, 78)\n+    elif size <= 255:\n+        opcode = random.randint(76, 78)\n+    elif size <= 0xffff:\n+        opcode = random.randint(77, 78)\n+    if opcode == 75:\n+        ret = bytes([size]) + random_bytes(size - 1)\n+    elif opcode == 76:\n+        ret = bytes([opcode]) + bytes([size]) + random_bytes(size - 2)\n+    elif opcode == 77:\n+        ret = bytes([opcode]) + struct.pack(b'<H', size) + random_bytes(max(0, size - 3))\n+    else:\n+        ret = bytes([opcode]) + struct.pack(b'<I', size) + random_bytes(max(0, size - 5))\n+    assert len(ret) >= size\n+    return ret[:size]\n+\n+def random_checksig_style(pubkey):\n+    \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n+    opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n+    if (opcode == OP_CHECKSIGVERIFY):\n+        ret = CScript([pubkey, opcode, OP_1])\n+    elif (opcode == OP_CHECKSIGADD):\n+        num = random.choice([0, 0x7fffffff, -0x7fffffff])\n+        ret = CScript([num, pubkey, opcode, num + 1, OP_EQUAL])\n+    else:\n+        ret = CScript([pubkey, opcode])\n+    return bytes(ret)\n+\n+def damage_bytes(b):\n+    \"\"\"Flips one bit at random in a byte string.\"\"\"\n+    return (int.from_bytes(b, 'big') ^ (1 << random.randrange(len(b) * 8))).to_bytes(len(b), 'big')\n+\n+# Each spender is a tuple of:\n+# - A scriptPubKey which is to be spent from (CScript)\n+# - An address for that scriptPubKey (string)\n+# - A comment describing the test (string)\n+# - Whether the spending (on itself) is expected to be standard (bool)\n+# - A witness stack-producing lambda taking as inputs:\n+#   - A transaction to sign (CTransaction)\n+#   - An input position (int)\n+#   - The spent UTXOs by this transaction (list of CTxOut)\n+#   - Whether to produce a valid spend (bool)\n+\n+Spender = namedtuple(\"Spender\", \"script,address,comment,is_standard,sat_function\")\n+\n+def spend_no_sig(tx, input_index, spent_utxos, info, script):\n+    \"\"\"Construct witness.\"\"\"\n+    script = script[\"script\"]\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = [script, info[2][script]]\n+\n+def spend_single_sig(tx, input_index, spent_utxos, info, key, annex=None, hashtype=0, prefix=None, suffix=None, script=None, pos=-1, damage=False):\n+    if prefix is None:\n+        prefix = []\n+    if suffix is None:\n+        suffix = []\n+\n+    ht = hashtype\n+\n+    damage_type = random.randrange(5) if damage else -1\n+    '''\n+    * 0. bit flip the sighash\n+    * 1. bit flip the signature\n+    * If the expected hashtype is 0:\n+    -- 2. append a 0 to the signature\n+    -- 3. append a random value of 1-255 to the signature\n+    * If the expected hashtype is not 0:\n+    -- 2. do not append hashtype to the signature\n+    -- 3. append a random incorrect value of 0-255 to the signature\n+    * 4. extra witness element\n+    '''\n+\n+    # Taproot key path spend: tweak key\n+    if script is None:\n+        _, negated = compute_xonly_pubkey(key)\n+        key = tweak_add_privkey(key, info[1], negated)\n+        assert(key is not None)\n+\n+    # Change SIGHASH_SINGLE into SIGHASH_ALL if no corresponding output\n+    if (ht & 3 == SIGHASH_SINGLE and input_index >= len(tx.vout)):\n+        ht ^= 2\n+    # Compute sighash\n+    if script:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=True, script=script, codeseparator_pos=pos, annex=annex)\n+    else:\n+        sighash = TaprootSignatureHash(tx, spent_utxos, ht, input_index, scriptpath=False, annex=annex)\n+    if damage_type == 0:\n+        sighash = damage_bytes(sighash)\n+    # Compute signature\n+    sig = sign_schnorr(key, sighash)\n+    if damage_type == 1:\n+        sig = damage_bytes(sig)\n+    if damage_type == 2:\n+        if ht == 0:\n+            sig += bytes([0])\n+    elif damage_type == 3:\n+        random_ht = ht\n+        while random_ht == ht:\n+            random_ht = random.randrange(256)\n+        sig += bytes([random_ht])\n+    elif ht > 0:\n+        sig += bytes([ht])\n+    # Construct witness\n+    ret = prefix + [sig] + suffix\n+    if script is not None:\n+        ret += [script, info[2][script]]\n+    if annex is not None:\n+        ret += [annex]\n+    if damage_type == 4:\n+        ret = [random_bytes(random.randrange(5))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+def spend_alwaysvalid(tx, input_index, info, script, annex=None, damage=False):\n+    if isinstance(script, tuple):\n+        version, script = script\n+    ret = [script, info[2][script]]\n+    if damage:\n+        # With 50% chance, we bit flip the script (unless the script is an empty vector)\n+        # With 50% chance, we bit flip the control block\n+        if random.choice([True, False]) or len(ret[0]) == 0:\n+            # Annex is always required for leaf version 0x50\n+            # Unless the original version is 0x50, we couldn't convert it to 0x50 without using annex\n+            tmp = damage_bytes(ret[1])\n+            while annex is None and tmp[0] == ANNEX_TAG and ret[1][0] != ANNEX_TAG:\n+                tmp = damage_bytes(ret[1])\n+            ret[1] = tmp\n+        else:\n+            ret[0] = damage_bytes(ret[0])\n+    if annex is not None:\n+        ret += [annex]\n+    # Randomly add input witness\n+    if random.choice([True, False]):\n+        for i in range(random.randint(1, 10)):\n+            ret = [random_bytes(random.randint(0, MAX_SCRIPT_ELEMENT_SIZE * 2))] + ret\n+    tx.wit.vtxinwit[input_index].scriptWitness.stack = ret\n+\n+# N.B. Function arguments below: t(ransaction), i(ndex to spend), u(txos being spent), v(alid signature?)\n+\n+def spender_sighash_mutation(spenders, info, comment, standard=True, **kwargs):\n+    \"\"\"Mutates signature randomly when failure for the inputs is requested.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths(spenders, info, comment, standard, success, failure):\n+    \"\"\"Gives caller a way to specify two merkle paths to test validity satisfaction: One expected success, and one failure.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_single_sig(t, i, u, damage=False, info=info, **(success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid(spenders, info, comment, **kwargs):\n+    \"\"\"Mutates the witness when requested, intended for otherwise always true scripts.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_alwaysvalid(t, i, damage=not v, info=info, **kwargs)\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=False, sat_function=fn))\n+\n+def spender_two_paths_alwaysvalid(spenders, info, comment, standard, success, failure):\n+    \"\"\"Allows specifying both a success and failure script without any signatures or additional witness data required.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    def fn(t, i, u, v):\n+        return spend_no_sig(t, i, u, info, (success if v else failure))\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_alwaysvalid_p2sh(spenders, info, comment, standard, script):\n+    \"\"\"Tests that p2sh-wrapping witness program v1 are always valid, since they are not covered by tapscript.\"\"\"\n+    spk = get_p2sh_spk(info)\n+    addr = get_version1_p2sh(info)\n+\n+    def fn(t, i, u, v):\n+        if v:\n+            t.vin[i].scriptSig = CScript([info[0]])\n+            # Empty control block is only invalid if we apply taproot rules,\n+            # which we shouldn't if the spend is wrapped in P2SH\n+            t.wit.vtxinwit[i].scriptWitness.stack = [script, bytes()]\n+        else:\n+            t.vin[i].scriptSig = CScript()\n+        return\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def spender_two_paths_no_sig(spenders, info, comment, standard, success, failure):\n+    \"\"\"Same as spender_two_paths but not support for signatures or padding witness.\"\"\"\n+    spk = info[0]\n+    addr = get_taproot_bech32(info)\n+\n+    # Empty witness required\n+    def fn(t, i, u, v):\n+        return []\n+\n+    spenders.append(Spender(script=spk, address=addr, comment=comment, is_standard=standard, sat_function=fn))\n+\n+def nested_script(script, depth):\n+    if depth == 0:\n+        return script\n+    return [nested_script(script, depth - 1), CScript([OP_RETURN])]\n+\n+UTXOData = namedtuple('UTXOData', 'input,output,spender')\n+\n+class TaprootTest(BitcoinTestFramework):\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-par=1\"]]\n+\n+    def block_submit(self, node, txs, msg, cb_pubkey=None, fees=0, witness=False, accept=False):\n+\n+        # Deplete block of any non-tapscript sigops using a single additional 0-value coinbase output\n+        # It's physically impossible to fit enough tapscript sigops to hit the old 80k limit without\n+        # busting txin-level limits. We simply have to account for the p2pk outputs in all\n+        # transactions. N.B. this test means no spenders can ever spend non-taproot/tapscript outputs,\n+        # or those at least have to be accounted for here.\n+\n+        def MaybeIsPayToPubKey(script):\n+            return script[-1] == OP_CHECKSIG\n+\n+        legacy_checksigs = 0 if cb_pubkey is None else 1 # P2PK output in coinbase back to wallet\n+        for tx in txs:\n+            for output in tx.vout:\n+                if MaybeIsPayToPubKey(output.scriptPubKey):\n+                    legacy_checksigs += 1\n+        extra_output_script = CScript([OP_CHECKSIG]*(MAX_BLOCK_SIGOPS-legacy_checksigs))\n+\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(block.serialize(True).hex())\n+        if (accept):\n+            assert node.getbestblockhash() == block.hash, \"Failed to accept: \" + msg\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n+\n+    def test_spenders(self, spenders, input_counts):\n+        \"\"\"Run randomized tests with a number of \"spenders\".\n+\n+        Steps:\n+            1) Generate an appropriate UTXO for each spender to test spend conditions\n+            2) Generate 100 random addresses of all wallet types: pkh/sh_wpkh/wpkh\n+            3) Select random number of inputs from (1)\n+            4) Select random number of addresses from (2) as outputs\n+\n+        Each spender embodies a test; in a large randomized test, it is verified\n+        that toggling the valid argument to each lambda toggles the validity of\n+        the transaction. This is accomplished by constructing transactions consisting\n+        of all valid inputs, except one invalid one.\n+        \"\"\"\n+\n+        # Construct a UTXO to spend for each of the spenders, with the script to satisfy being given by the spender\n+        self.nodes[0].generate(110)\n+        bal = self.nodes[0].getbalance() * 3 / (4 * len(spenders))\n+        random.shuffle(spenders)\n+        num_spenders = len(spenders)\n+        utxos = []\n+        while len(spenders):\n+            # Create the necessary outputs in multiple transactions, as sPKs may be repeated in test cases(which sendmany does not support)\n+            outputs = {}\n+            new_spenders = []\n+            batch = []\n+            for spender in spenders:\n+                addr = spender.address\n+                if len(batch) == 100 or addr in outputs:\n+                    new_spenders.append(spender)\n+                else:\n+                    amount = random.randrange(int(bal * 95000000), int(bal * 105000000))\n+                    outputs[addr] = amount / 100000000\n+                    batch.append(spender)\n+            self.log.info(\"Constructing %i UTXOs for spending tests\" % len(batch))\n+            tx = tx_from_hex(self.nodes[0].getrawtransaction(self.nodes[0].sendmany(\"\", outputs)))\n+            tx.rehash()\n+            spenders = new_spenders\n+            random.shuffle(spenders)\n+\n+            # Map created UTXOs back to the spenders they were created for\n+            for n, out in enumerate(tx.vout):\n+                for spender in batch:\n+                    if out.scriptPubKey == spender.script:\n+                        utxos.append(UTXOData(input=COutPoint(tx.sha256, n), output=out, spender=spender))\n+                        break\n+        assert(len(utxos) == num_spenders)\n+        random.shuffle(utxos)\n+        self.nodes[0].generate(1)\n+\n+        # Construct a bunch of sPKs that send coins back to the host wallet\n+        self.log.info(\"Constructing 100 addresses for returning coins\")\n+        host_spks = []\n+        host_pubkeys = []\n+        for i in range(100):\n+            addr = self.nodes[0].getnewaddress(address_type=random.choice([\"legacy\", \"p2sh-segwit\", \"bech32\"]))\n+            info = self.nodes[0].getaddressinfo(addr)\n+            spk = hex_str_to_bytes(info['scriptPubKey'])\n+            host_spks.append(spk)\n+            host_pubkeys.append(hex_str_to_bytes(info['pubkey']))\n+\n+        # Pick random subsets of UTXOs to construct transactions with\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        block = self.nodes[0].getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+        while len(utxos):\n+            tx = CTransaction()\n+            tx.nVersion = random.choice([1, 2, random.randint(-0x80000000, 0x7fffffff)])\n+            min_sequence = (tx.nVersion != 1 and tx.nVersion != 0) * 0x80000000  # The minimum sequence number to disable relative locktime\n+            if random.choice([True, False]):\n+                tx.nLockTime = random.randrange(LOCKTIME_THRESHOLD, self.lastblocktime - 7200)  # all absolute locktimes in the past\n+            else:\n+                tx.nLockTime = random.randrange(self.lastblockheight + 1)  # all block heights in the past\n+\n+            # Pick 1 to 4 UTXOs to construct transaction inputs\n+            acceptable_input_counts = [cnt for cnt in input_counts if cnt <= len(utxos)]\n+            while True:\n+                inputs = random.choice(acceptable_input_counts)\n+                remaining = len(utxos) - inputs\n+                if remaining == 0 or remaining >= max(input_counts) or remaining in input_counts:\n+                    break\n+            input_utxos = utxos[-inputs:]\n+            utxos = utxos[:-inputs]\n+            fee = random.randrange(MIN_FEE * 2, MIN_FEE * 4)  # 10000-20000 sat fee\n+            in_value = sum(utxo.output.nValue for utxo in input_utxos) - fee\n+            tx.vin = [CTxIn(outpoint=input_utxos[i].input, nSequence=random.randint(min_sequence, 0xffffffff)) for i in range(inputs)]\n+            tx.wit.vtxinwit = [CTxInWitness() for i in range(inputs)]\n+            self.log.info(\"Test: %s\" % (\", \".join(utxo.spender.comment for utxo in input_utxos)))\n+\n+            # Add 1 to 4 outputs\n+            outputs = random.choice([1, 2, 3, 4])\n+            assert in_value >= 0 and fee - outputs * DUST_LIMIT >= MIN_FEE\n+            for i in range(outputs):\n+                tx.vout.append(CTxOut())\n+                if in_value <= DUST_LIMIT:\n+                    tx.vout[-1].nValue = DUST_LIMIT\n+                elif i < outputs - 1:\n+                    tx.vout[-1].nValue = in_value\n+                else:\n+                    tx.vout[-1].nValue = random.randint(DUST_LIMIT, in_value)\n+                in_value -= tx.vout[-1].nValue\n+                tx.vout[-1].scriptPubKey = random.choice(host_spks)\n+            fee += in_value\n+            assert(fee >= 0)\n+\n+            # Sign each input incorrectly once on each complete signing pass, except the very last\n+            for fail_input in range(inputs + 1):\n+                # Wipe scriptSig/witness\n+                for i in range(inputs):\n+                    tx.vin[i].scriptSig = CScript()\n+                    tx.wit.vtxinwit[i] = CTxInWitness()\n+                # Fill inputs/witnesses\n+                for i in range(inputs):\n+                    fn = input_utxos[i].spender.sat_function\n+                    fn(tx, i, [utxo.output for utxo in input_utxos], i != fail_input)\n+                # Submit to mempool to check standardness\n+                is_standard_tx = fail_input == inputs and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                tx.rehash()\n+                if is_standard_tx:\n+                    self.nodes[0].sendrawtransaction(tx.serialize().hex(), 0)\n+                    assert(self.nodes[0].getmempoolentry(tx.hash) is not None)\n+                else:\n+                    assert_raises_rpc_error(-26, None, self.nodes[0].sendrawtransaction, tx.serialize().hex(), 0)\n+                # Submit in a block\n+                msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n+                self.block_submit(self.nodes[0], [tx], msg, witness=True, accept=fail_input == inputs, cb_pubkey=random.choice(host_pubkeys), fees=fee)\n+\n+    def build_spenders(self):\n+        VALID_SIGHASHES = [SIGHASH_DEFAULT, SIGHASH_ALL, SIGHASH_NONE, SIGHASH_SINGLE, SIGHASH_ANYONECANPAY + SIGHASH_ALL, \\\n+                SIGHASH_ANYONECANPAY + SIGHASH_NONE, SIGHASH_ANYONECANPAY + SIGHASH_SINGLE]\n+        spenders = []\n+\n+        # Two features: No annex, and annex with random number of random bytes.\n+        for annex in [None, bytes([ANNEX_TAG]) + random_bytes(random.randrange(0, 250))]:\n+            # Non-empty annex is non-standard\n+            no_annex = annex is None\n+            sec1, sec2 = generate_privkey(), generate_privkey()\n+            pub1, _ = compute_xonly_pubkey(sec1)\n+            pub2, _ = compute_xonly_pubkey(sec2)\n+\n+            # Sighash mutation tests (test all sighash combinations)\n+            for hashtype in VALID_SIGHASHES:\n+                # Pure pubkey\n+                info = taproot_construct(pub1)\n+                # As an example, comment argument under this line means \"Sighash test for p2tr, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # Pubkey/P2PK script combination\n+                scripts = [CScript(random_checksig_style(pub2))]\n+                info = taproot_construct(pub1, scripts)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through taproot key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+                # As an example, comment argument under this line means \"Sighash test for p2pk script in p2tr pubkey, spent through p2pk key\".\n+                spender_sighash_mutation(spenders, info, \"sighash/p2pk#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+\n+            # For more complex scripts only test one sighash type\n+            hashtype = random.choice(VALID_SIGHASHES)\n+            scripts = [\n+                CScript(random_checksig_style(pub2) + bytes([OP_CODESEPARATOR])),  # codesep after checksig\n+                CScript(bytes([OP_CODESEPARATOR]) + random_checksig_style(pub2)),  # codesep before checksig\n+                CScript([bytes([1,2,3]), OP_DROP, OP_IF, OP_CODESEPARATOR, pub1, OP_ELSE, OP_CODESEPARATOR, pub2, OP_ENDIF, OP_CHECKSIG]),  # branch dependent codesep\n+            ]\n+            info = taproot_construct(pub1, scripts)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#pk\", key=sec1, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s0\", script=scripts[0], key=sec2, hashtype=hashtype, annex=annex, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s1\", script=scripts[1], key=sec2, hashtype=hashtype, annex=annex, pos=0, standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2a\", script=scripts[2], key=sec1, hashtype=hashtype, annex=annex, pos=3, suffix=[bytes([1])], standard=no_annex)\n+            spender_sighash_mutation(spenders, info, \"sighash/codesep#s2b\", script=scripts[2], key=sec2, hashtype=hashtype, annex=annex, pos=6, suffix=[bytes([])], standard=no_annex)\n+\n+            # Taproot max Merkle path length\n+            scripts = [\n+                CScript([pub2, OP_CHECKSIG]),\n+                [\n+                    CScript([pub1, OP_CHECKSIG]),\n+                    CScript([OP_RETURN])\n+                ]\n+            ]\n+            info = taproot_construct(pub1, nested_script(scripts, 127))\n+            spender_two_paths(spenders, info, \"taproot/merklelimit\", standard=no_annex, success={\"key\": sec2, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[0]}, failure={\"key\": sec1, \"hashtype\": hashtype, \"annex\": annex, \"script\": scripts[1][0]})\n+\n+            # Above OP_16 to avoid minimal encoding complaints\n+            checksigadd_val = random.randrange(17, 100)\n+            checksigadd_arg = CScriptNum(checksigadd_val)\n+            checksigadd_result = CScriptNum(checksigadd_val+1)\n+\n+            # Illegally-large number for script arithmetic input\n+            oversize_number = 2**31\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number))), 6)\n+            assert_equal(len(CScriptNum.encode(CScriptNum(oversize_number-1))), 5)\n+\n+            # Various BIP342 features\n+            scripts = [\n+                # 0) drop stack element and OP_CHECKSIG\n+                CScript([OP_DROP, pub2, OP_CHECKSIG]),\n+                # 1) normal OP_CHECKSIG\n+                CScript([pub2, OP_CHECKSIG]),\n+                # 2) normal OP_CHECKSIGVERIFY\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1]),\n+                # 3) Hypothetical OP_CHECKMULTISIG script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIG]),\n+                # 4) Hypothetical OP_CHECKMULTISIGVERIFY script that takes a single sig as input\n+                CScript([OP_0, OP_SWAP, OP_1, pub2, OP_1, OP_CHECKMULTISIGVERIFY, OP_1]),\n+                # 5) OP_IF script that needs a true input\n+                CScript([OP_IF, pub2, OP_CHECKSIG, OP_ELSE, OP_RETURN, OP_ENDIF]),\n+                # 6) OP_NOTIF script that needs a true input\n+                CScript([OP_NOTIF, OP_RETURN, OP_ELSE, pub2, OP_CHECKSIG, OP_ENDIF]),\n+                # 7) OP_CHECKSIG with an empty key\n+                CScript([OP_0, OP_CHECKSIG]),\n+                # 8) OP_CHECKSIGVERIFY with an empty key\n+                CScript([OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 9) normal OP_CHECKSIGADD that also ensures return value is correct\n+                CScript([OP_0, pub2, OP_CHECKSIGADD, OP_1, OP_EQUAL]),\n+                # 10) OP_CHECKSIGADD with empty key\n+                CScript([OP_0, OP_0, OP_CHECKSIGADD]),\n+                # 11) OP_CHECKSIGADD with missing counter stack element\n+                CScript([pub2, OP_CHECKSIGADD]),\n+                # 12) OP_CHECKSIG that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, pub1, OP_CHECKSIG, OP_NOT]),\n+                # 13) OP_CHECKSIG with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_CHECKSIG, OP_NOT]),\n+                # 14) OP_CHECKSIGADD that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, pub1, OP_CHECKSIGADD, OP_NOT]),\n+                # 15) OP_CHECKSIGADD with empty key that needs invalid signature\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGADD, OP_NOT]),\n+                # 16) OP_CHECKSIG with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIG]),\n+                # 17) OP_CHECKSIGADD with unknown pubkey type\n+                CScript([OP_0, OP_1, OP_CHECKSIGADD]),\n+                # 18) OP_CHECKSIGVERIFY with unknown pubkey type\n+                CScript([OP_1, OP_CHECKSIGVERIFY, OP_1]),\n+                # 19) script longer than 10000 bytes and over 201 non-push opcodes\n+                CScript([OP_0, OP_0, OP_2DROP] * 10001 + [pub2, OP_CHECKSIG]),\n+                # 20) OP_CHECKSIGVERIFY with empty key\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_0, OP_0, OP_CHECKSIGVERIFY, OP_1]),\n+                # 21) Script that grows the stack to 1000 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 999 + [OP_DROP] * 999),\n+                # 22) Script that grows the stack to 1001 elements\n+                CScript([pub2, OP_CHECKSIGVERIFY, OP_1] + [OP_DUP] * 1000 + [OP_DROP] * 1000),\n+                # 23) Script that expects an input stack of 1000 elements\n+                CScript([OP_DROP] * 999 + [pub2, OP_CHECKSIG]),\n+                # 24) Script that expects an input stack of 1001 elements\n+                CScript([OP_DROP] * 1000 + [pub2, OP_CHECKSIG]),\n+                # 25) Script that pushes a 520 byte element\n+                CScript([random_bytes(520), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 26) Script that pushes a 521 byte element\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG]),\n+                # 27) Script that pushes a 521 byte element and OP_SUCCESSX\n+                CScript([random_bytes(521), OP_DROP, pub2, OP_CHECKSIG, random_op_success()]),\n+                # 28) Pushes random CScriptNum value, checks OP_CHECKSIGADD result\n+                CScript([checksigadd_arg, pub2, OP_CHECKSIGADD, checksigadd_result, OP_EQUAL]),\n+                # 30) CHECKSIGADD that succeeds with proper sig because numeric argument number is <=4 bytes\n+                CScript([CScriptNum(oversize_number-1), pub2, OP_CHECKSIGADD]),\n+                # 29) CHECKSIGADD that must fail because numeric argument number is >4 bytes\n+                CScript([CScriptNum(oversize_number), pub2, OP_CHECKSIGADD]),\n+            ]\n+            # For the next test we must predict the exact witness size\n+            witness_size = 141 + (hashtype != 0) + (0 if annex is None else len(annex) + 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954582",
      "id" : 461954582,
      "in_reply_to_id" : 456992780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDU4Mg==",
      "original_commit_id" : "42bda3592c3fc4d5169b2f53e80780ed46a0854c",
      "original_line" : 701,
      "original_position" : 655,
      "original_start_line" : null,
      "path" : "test/functional/feature_taproot.py",
      "position" : null,
      "pull_request_review_id" : 457101241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:40:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461954582",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461954762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops, done now.",
      "commit_id" : "97035a878c4ccbd2bb5d0ee2d9ba24d72c092ecb",
      "created_at" : "2020-07-28T23:41:16Z",
      "diff_hunk" : "@@ -384,3 +420,125 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_pubkey(key, tweak):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954762",
      "id" : 461954762,
      "in_reply_to_id" : 455059451,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDc2Mg==",
      "original_commit_id" : "98ea8e9b9ba27e0b2725f02c92c2e3a64e4fdeab",
      "original_line" : 459,
      "original_position" : 220,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 457101436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-28T23:41:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461954762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
