[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366586660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366586660"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see initializations for these variables anywhere?",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-14T21:40:24Z",
      "diff_hunk" : "@@ -453,6 +454,8 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable uint64_t m_epoch;\n+    mutable bool has_epoch_guard;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366586660",
      "id" : 366586660,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NjY2MA==",
      "original_commit_id" : "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "original_position" : 13,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 342856863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-15T03:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366586660",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366591661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366591661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A bit confusing to have this comment (about a function) right before a class definition, I'm guessing it is leftover from something else (or should be moved a few lines down). \r\n\r\nActually I think it'd make sense to explain here a little bit about what these epochs are and why/how to use them?  (Also, as this would be the first introduction of epochs in the code, it'd be helpful for reviewers of the future PRs that will use it in more places to be able to remember/understand what this construction is.)  Perhaps something like:\r\n\r\n```\r\nEpochGuard: RAII-style guard for using epoch-based graph traversal algorithms\r\nWhen walking ancestors or descendants, we generally want to avoid visiting the \r\nsame transactions twice. In some places we use std::set (or setEntries) to deduplicate\r\n what we visit, but we can do (algorithmically) better by using a counter (\"epoch\") that \r\nwe set on each transaction and comparing against a global epoch to track whether \r\nwe've visited something already during a calculation.\r\n```\r\nOr something like that...",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-14T21:52:02Z",
      "diff_hunk" : "@@ -736,6 +739,34 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    // This function mutates mutable state!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366591661",
      "id" : 366591661,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MTY2MQ==",
      "original_commit_id" : "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "original_position" : 22,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 342856863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-15T03:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366591661",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17786](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17786.html) (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* [#16910](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16910.html) (wallet: reduce loading time by using unordered maps by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-14T22:27:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-574403928",
      "id" : 574403928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17925",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NDQwMzkyOA==",
      "updated_at" : "2020-01-15T07:34:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574403928",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366682083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366682083"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "great comment; rewrote it slightly to a format I think is more clear & also to emphasize that replacement with epochs is ongoing work :)",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-15T03:31:01Z",
      "diff_hunk" : "@@ -736,6 +739,34 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    // This function mutates mutable state!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r366682083",
      "id" : 366682083,
      "in_reply_to_id" : 366591661,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MjA4Mw==",
      "original_commit_id" : "d63d1f3714d805574e23ca49402ed9a75691f0b3",
      "original_position" : 22,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 342972129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-15T03:31:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366682083",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't know what's up with the appveyor build but I think this code is correct, it passes all tests for me locally.  \r\n\r\nAs a sanity check, I verified that this code does give a speedup in a simple scenario where it would be expected to improve things: create a transaction with 2000 outputs that is confirmed in a block; then spend each of those outputs in a separate transaction in the mempool; then disconnect the block and measure the time spent in UpdateTransactionsFromBlock (which must visit each of those 2000 children).  I observed a roughly 12% improvement in runtime in this simple test.\r\n\r\nACK bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-16T15:32:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#issuecomment-575206318",
      "id" : 575206318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17925",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NTIwNjMxOA==",
      "updated_at" : "2020-01-16T15:32:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575206318",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this would be cleaner with the 'epoch' concept split out. I'm thinking:\r\n\r\n```c++\r\nclass Epoch {\r\npublic:\r\n    uint64_t m_epoch;\r\n    bool m_guarded;\r\n\r\n    Epoch() : m_epoch{0}, m_guarded{false} {}\r\n    Epoch(const Epoch&) = delete; // no copy constructor\r\n    Epoch& operator=(const Epoch&) = delete; // not assignable\r\n\r\n    class SCOPED_LOCKABLE Guard {\r\n        Epoch& m_epoch;\r\n    public:\r\n        Guard(Epoch& epoch) EXCLUSIVE_LOCK_FUNCTION(epoch) LOCKS_EXCLUDED(epoch);\r\n        ~Guard() UNLOCK_FUNCTION();\r\n    };\r\n};\r\n#define WITH_EPOCH(epoch) const Epoch::Guard PASTE2(epoch_guard_, __COUNTER__)(epoch)\r\n```\r\nand\r\n\r\n```c++\r\nclass CTxMemPool {\r\n    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\r\n.\r\n    mutable Epoch m_epoch GUARDED_BY(cs);\r\n    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch) { .. }\r\n};\r\n```\r\n\r\nand\r\n\r\n```c++\r\n    WITH_EPOCH(m_epoch); // instead of const auto epoch = GetFreshEpoch()\r\n```\r\n\r\nThis lets clang check `visited()`  is only invoked within an epoch at compile time, which seems nice.\r\n\r\nUsing `LOCKS_EXCLUDED` gets part of the way to ensuring you're not doing `WITH_EPOCH` recursively at compile time (eg, holding it from UpdateTxsFromBlock while calling UpdateForDescendants once UpdForDesc has been epoch-ised), but only works as long as you don't have indirect invocations -- ie if A() calls B() and B() is marked with LOCKS_EXCLUDED, that doesn't cause A() to also be marked with LOCKS_EXCLUDED.\r\n\r\nThis also makes the mutability/constness stuff clearer -- in my opinion, anyway.",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-23T03:06:51Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914044",
      "id" : 369914044,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDA0NA==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 42,
      "path" : "src/txmempool.h",
      "position" : 42,
      "pull_request_review_id" : 347037291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-23T04:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914044",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This function doesn't seem to be needed yet; suggest deferring it until it is.",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-23T03:11:07Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369914759",
      "id" : 369914759,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDc1OQ==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 66,
      "path" : "src/txmempool.h",
      "position" : 66,
      "pull_request_review_id" : 347037291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-23T04:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369914759",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369915441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think:\r\n\r\n```c++\r\nbool visited(txiter it) const {\r\n    assert(m_has_epoch_guard);\r\n    bool visited = it->m_epoch == m_epoch; // only visits this epoch count\r\n    if (!visited) it->m_epoch = m_epoch;\r\n    return visited;\r\n}\r\n```\r\n\r\nwould be clearer. (Also, this could be `const txiter it` since you're only changing what the iter points at)",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-23T03:15:24Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r369915441",
      "id" : 369915441,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNTQ0MQ==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 62,
      "path" : "src/txmempool.h",
      "position" : 62,
      "pull_request_review_id" : 347037291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-23T04:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369915441",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370418775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370418775"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm... I think that you're right that this code is somehow better, but TBH I don't really understand how the clang lock analyzing stuff works & don't know if I could personally maintain this code... Is there anything better to look at than http://releases.llvm.org/3.5.0/tools/clang/docs/ThreadSafetyAnalysis.html on how to understand this clang extension?\r\n\r\nAny objection to this being a follow on PR?\r\n\r\nI also have concern that this isn't compatible with future changes that may recursively use the epoch guard (there are algorithms that are recursive reuse safe, if you want to express a case where A has an epoch which calls B, and B creates a new Epoch which may re-traverse all of the mempool entries but A will not re-traverse anything traversed in B). You could imagine a use for this if I wanted to walk the whole mempool and traverse every connected component once, but at the same time.\r\n\r\nThis requires some modified behavior (e.g., making epoch guards aware of the epoch they are guarding), but can still work.\r\n\r\n```c++\r\nconst auto epoch = GetFreshEpoch();\r\nfor (auto& elt : mapTx) {\r\n    if (epoch.visited(elt)) continue;\r\n    const auto epoch = epoch.SubEpoch();\r\n    vector<txiter> component;\r\n    GetAllAncestorsEpochAlreadyHeld(elt, component);\r\n    GetAllDescendentsEpochAlreadyHeld(elt, component);\r\n    DoSomethingWithComponent(component);\r\n}\r\n```",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-24T00:05:37Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370418775",
      "id" : 370418775,
      "in_reply_to_id" : 369914044,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxODc3NQ==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 42,
      "path" : "src/txmempool.h",
      "position" : 42,
      "pull_request_review_id" : 347688071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-24T00:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370418775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370419851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370419851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "See above for note on future recursive locking -- given that this is a future concern, I agree it could be postponed, but I like that the current version of the code wouldn't have to change if modified.\r\n\r\nIn your version it's also not clear that if `it->m_epoch != m_epoch`, that `!(it->m_epoch > m_epoch)`, which violates the contract that `it->m_epoch` should be monotonic.\r\n\r\nIt's easier IMO to validate this by using std::max, then `it->m_epoch` is guaranteed to weakly increase.",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-24T00:09:38Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370419851",
      "id" : 370419851,
      "in_reply_to_id" : 369915441,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxOTg1MQ==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 62,
      "path" : "src/txmempool.h",
      "position" : 62,
      "pull_request_review_id" : 347689397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-24T00:09:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370419851",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370422247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370422247"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Correct; it's not needed yet. I'm indifferent on if it stays or goes. I figured it's better for it to live in the same commit as the introduction of it's non-optioned version, but unused functions aren't great to introduce.\r\n\r\nGiven that:\r\n1) It will be introduced in later work, relatively soon\r\n2) There's already an ack for this specific revision -- meaning both that this function has already been reviewed and doesn't require re-review in the future, but also that we won't make suhas have to re-ack this change.\r\n3) There's nothing detectable *wrong* with it\r\n\r\nI'd rather just keep it for now and focus on getting out the PR that depends on it sooner.",
      "commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "created_at" : "2020-01-24T00:19:04Z",
      "diff_hunk" : "@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17925#discussion_r370422247",
      "id" : 370422247,
      "in_reply_to_id" : 369914759,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyMjI0Nw==",
      "original_commit_id" : "bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "original_position" : 66,
      "path" : "src/txmempool.h",
      "position" : 66,
      "pull_request_review_id" : 347692275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17925",
      "updated_at" : "2020-01-24T00:19:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370422247",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
