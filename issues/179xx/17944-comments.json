[
   {
      "author_association" : "MEMBER",
      "body" : "cc @EthanHeilman ",
      "created_at" : "2020-01-17T00:32:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#issuecomment-575411753",
      "id" : 575411753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17944",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NTQxMTc1Mw==",
      "updated_at" : "2020-01-17T00:32:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575411753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r369183147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369183147"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't the bias to favor IPv4 announcement over IPv6-tunneled lost with the change ? It may make connection relying on 6to4 routers less reliable..",
      "commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "created_at" : "2020-01-21T18:56:57Z",
      "diff_hunk" : "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();\n+    int theirNet = paddrPartner == nullptr ? NET_UNKNOWN : paddrPartner->GetNetwork();\n \n-    switch(theirNet) {\n+    switch(ourNet) {\n     case NET_IPV4:\n-        switch(ourNet) {\n-        default:       return REACH_DEFAULT;\n-        case NET_IPV4: return REACH_IPV4;\n-        }\n+        return REACH_IPV4;\n     case NET_IPV6:\n-        switch(ourNet) {\n-        default:         return REACH_DEFAULT;\n-        case NET_TEREDO: return REACH_TEREDO;\n-        case NET_IPV4:   return REACH_IPV4;\n-        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunnelled",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r369183147",
      "id" : 369183147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4MzE0Nw==",
      "original_commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "original_position" : 56,
      "path" : "src/netaddress.cpp",
      "position" : 56,
      "pull_request_review_id" : 346113931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944",
      "updated_at" : "2020-01-21T19:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369183147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r369191513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369191513"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If ourNet is `nullptr` you will now mark its reachability to NET_IPV6 which may be the highest-scored one and announce this one (but can we have null entries in mapLocalHost anyway ?)",
      "commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "created_at" : "2020-01-21T19:14:31Z",
      "diff_hunk" : "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r369191513",
      "id" : 369191513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MTUxMw==",
      "original_commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "original_position" : 40,
      "path" : "src/netaddress.cpp",
      "position" : 40,
      "pull_request_review_id" : 346113931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944",
      "updated_at" : "2020-01-21T19:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369191513",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370337904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370337904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps I don't understand C++ well enough but from my understanding, `this` cannot be `nullptr`?",
      "commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "created_at" : "2020-01-23T20:28:12Z",
      "diff_hunk" : "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370337904",
      "id" : 370337904,
      "in_reply_to_id" : 369191513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNzkwNA==",
      "original_commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "original_position" : 40,
      "path" : "src/netaddress.cpp",
      "position" : 40,
      "pull_request_review_id" : 347585655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944",
      "updated_at" : "2020-01-23T20:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370337904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370338770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370338770"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I think we don't want to favor IPv4 over IPv6-tunneled, because it might be the case that the only connection they have is thru IPv6-tunneled.",
      "commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "created_at" : "2020-01-23T20:30:09Z",
      "diff_hunk" : "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();\n+    int theirNet = paddrPartner == nullptr ? NET_UNKNOWN : paddrPartner->GetNetwork();\n \n-    switch(theirNet) {\n+    switch(ourNet) {\n     case NET_IPV4:\n-        switch(ourNet) {\n-        default:       return REACH_DEFAULT;\n-        case NET_IPV4: return REACH_IPV4;\n-        }\n+        return REACH_IPV4;\n     case NET_IPV6:\n-        switch(ourNet) {\n-        default:         return REACH_DEFAULT;\n-        case NET_TEREDO: return REACH_TEREDO;\n-        case NET_IPV4:   return REACH_IPV4;\n-        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunnelled",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370338770",
      "id" : 370338770,
      "in_reply_to_id" : 369183147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzODc3MA==",
      "original_commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "original_position" : 56,
      "path" : "src/netaddress.cpp",
      "position" : 56,
      "pull_request_review_id" : 347586781,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944",
      "updated_at" : "2020-01-23T20:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370338770",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370344620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370344620"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`this` cannot be `nullptr`, because if it was, you're invoking a member of `nullptr` which is UB.",
      "commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "created_at" : "2020-01-23T20:44:19Z",
      "diff_hunk" : "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17944#discussion_r370344620",
      "id" : 370344620,
      "in_reply_to_id" : 369191513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NDYyMA==",
      "original_commit_id" : "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "original_position" : 40,
      "path" : "src/netaddress.cpp",
      "position" : 40,
      "pull_request_review_id" : 347594429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17944",
      "updated_at" : "2020-01-23T20:44:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370344620",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
