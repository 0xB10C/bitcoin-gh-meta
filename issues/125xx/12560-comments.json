[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r170993749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/170993749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Text should also tell user that change addresses will be removed(or not)",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-02-27T17:00:45Z",
      "diff_hunk" : "@@ -3788,6 +3788,71 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r170993749",
      "id" : 170993749,
      "original_commit_id" : "48f09bd64053a3fadbfdf71902470e813ef89acf",
      "original_position" : 20,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 99768912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/170993749",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171005721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171005721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. Also included some more text explaining hd chain split stuff.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-02-27T17:39:08Z",
      "diff_hunk" : "@@ -3788,6 +3788,71 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171005721",
      "id" : 171005721,
      "in_reply_to_id" : 170993749,
      "original_commit_id" : "48f09bd64053a3fadbfdf71902470e813ef89acf",
      "original_position" : 20,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 99783315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171005721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171434437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171434437"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: IMO this inline throw style makes the code less readable, and it's not used elsewhere in the file.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-01T00:48:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) flush_key_pool = request.params[0].get_bool();\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171434437",
      "id" : 171434437,
      "original_commit_id" : "d40de04228426826844ae1cd6539bfb4dec2c487",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 100285856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171434437",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this can be useful, though the following potential risks may be harmful in certain scenarios:\r\n* Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n* seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n* \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.",
      "created_at" : "2018-03-01T12:45:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369580505",
      "id" : 369580505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-01T12:45:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/369580505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n\r\nThe help text could be updated to indicate that only coins sent to newly generated addresses will have keys generated with the new seed.\r\n\r\n> seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n\r\nI could add a rescan option that is disabled by default. It could only be enabled if explicitly set and if the keypool is regenerated.\r\n\r\n> \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.\r\n\r\nAt the time of upgrade, one could send all coins to a new address.",
      "created_at" : "2018-03-01T22:14:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369749811",
      "id" : 369749811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-01T22:14:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/369749811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171712798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171712798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed this and other places that have similar inline ifs that are hard to read.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-01T22:21:13Z",
      "diff_hunk" : "@@ -3788,6 +3788,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) flush_key_pool = request.params[0].get_bool();\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171712798",
      "id" : 171712798,
      "in_reply_to_id" : 171434437,
      "original_commit_id" : "d40de04228426826844ae1cd6539bfb4dec2c487",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 100615884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171712798",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error and another for `params[1].get_str()`.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:39:09Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037363",
      "id" : 175037363,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037363",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:39:48Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037492",
      "id" : 175037492,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037492",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037717"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test `get_bool()`.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:40:47Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037717",
      "id" : 175037717,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 42,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 42,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037717",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037897"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:41:29Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037897",
      "id" : 175037897,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 57,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037897",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175038823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175038823"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This always returns `true` so it's not possible to test the error raised below Ã°ÂÂÂ",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:44:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175038823",
      "id" : 175038823,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 71,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175038823",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175040839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175040839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should test return value (never false). However consider returning an object as per developer notes.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:53:50Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175040839",
      "id" : 175040839,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 76,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175040839",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175041550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175041550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe should be `newkeypool`?",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:57:03Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175041550",
      "id" : 175041550,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175041550",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Return value of `NewkeyPool` ignored and nothing is logged. Maybe that's fine?",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T09:59:05Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042040",
      "id" : 175042040,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 74,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042040",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could have a test for extra parameters. See [example](https://github.com/bitcoin/bitcoin/pull/12083/files#diff-695d736c7d2a38a42ae900546aed52f8).",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T10:01:18Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042553",
      "id" : 175042553,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 12,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 12,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042553",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175043020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175043020"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe:\r\n```cpp\r\nif (request.params[1].isNull()) {\r\n    master_pub_key = pwallet->GenerateNewHDMasterKey();\r\n} else {\r\n```",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-16T10:03:24Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175043020",
      "id" : 175043020,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175043020",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:08:46Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277505",
      "id" : 175277505,
      "in_reply_to_id" : 175037363,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277506"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:08:50Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277506",
      "id" : 175277506,
      "in_reply_to_id" : 175037492,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277506",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277507"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:08:56Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277507",
      "id" : 175277507,
      "in_reply_to_id" : 175037717,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 42,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 42,
      "pull_request_review_id" : 104785730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277507",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:00Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277509",
      "id" : 175277509,
      "in_reply_to_id" : 175037897,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 57,
      "pull_request_review_id" : 104785731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the if block",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:07Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277511",
      "id" : 175277511,
      "in_reply_to_id" : 175038823,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 71,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277511",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `NullUniValue`",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:16Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277515",
      "id" : 175277515,
      "in_reply_to_id" : 175040839,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 76,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277515",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:20Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277516",
      "id" : 175277516,
      "in_reply_to_id" : 175041550,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277516",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's fine. It only returns false when the wallet is locked, and that is caught earlier with `EnsureWalletIsUnlocked`",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277527",
      "id" : 175277527,
      "in_reply_to_id" : 175042040,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 74,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277527",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:09:58Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277529",
      "id" : 175277529,
      "in_reply_to_id" : 175042553,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 12,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 12,
      "pull_request_review_id" : 104785753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277529",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-18T05:10:08Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277533",
      "id" : 175277533,
      "in_reply_to_id" : 175043020,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785757,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Had to rebase this.",
      "created_at" : "2018-03-18T19:30:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-374037539",
      "id" : 374037539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-18T19:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374037539",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176804789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176804789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: also check it's not the same key(not just path)",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-23T17:14:06Z",
      "diff_hunk" : "@@ -118,5 +119,38 @@ def run_test (self):\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n+        # Generate a new HD seed on node 1 and make sure it is set\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        self.nodes[1].sethdseed()\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176804789",
      "id" : 176804789,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 18,
      "path" : "test/functional/wallet_hd.py",
      "position" : 18,
      "pull_request_review_id" : 106578720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176804789",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176808906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176808906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this for invalid named arguments? Without running this I'm not sure what it's doing",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-23T17:28:27Z",
      "diff_hunk" : "@@ -118,5 +119,38 @@ def run_test (self):\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n+        # Generate a new HD seed on node 1 and make sure it is set\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        self.nodes[1].sethdseed()\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n+        self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n+\n+        # Set a new HD seed on node 1 without flushing the keypool\n+        new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        orig_masterkeyid = new_masterkeyid\n+        self.nodes[1].sethdseed(False, new_seed)\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n+\n+        # Check that the next address is from the new seed\n+        self.nodes[1].keypoolrefill(1)\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address continues previous keypool\n+\n+        # Sethdseed parameter validity\n+        assert_raises_rpc_error(-1, 'sethdseed', self.nodes[0].sethdseed, False, new_seed, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176808906",
      "id" : 176808906,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 38,
      "path" : "test/functional/wallet_hd.py",
      "position" : null,
      "pull_request_review_id" : 106578720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176808906",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176812580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176812580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~I think it stands to be noted that Core software will never(?) return this value on a currently running wallet. You can get address' keys, but not the seed itself. I can easily see users getting confused and thinking that backing up some address key will save their wallet in the future.~~\r\n\r\nYou may want to leave a note here saying how this specific key can be extracted from the wallet, through `dumpwallet`->`hdmaster=1` key",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-23T17:41:10Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176812580",
      "id" : 176812580,
      "original_commit_id" : "a5c95dd4b3036b0cfacdb8afd8d885b71928f9e4",
      "original_position" : 25,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 106578720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176812580",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177508595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177508595"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is the reason for disallowing master keys with opposite compressedness? Unless another party knows the master xpubkey, they would not be able to tell that any child keys are related through a shared master key.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-27T17:32:14Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str()), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177508595",
      "id" : 177508595,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 107391924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177508595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177838900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177838900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This just tests that an error is thrown when there are too many arguments",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-28T18:00:39Z",
      "diff_hunk" : "@@ -118,5 +119,38 @@ def run_test (self):\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n+        # Generate a new HD seed on node 1 and make sure it is set\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        self.nodes[1].sethdseed()\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n+        self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n+\n+        # Set a new HD seed on node 1 without flushing the keypool\n+        new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        orig_masterkeyid = new_masterkeyid\n+        self.nodes[1].sethdseed(False, new_seed)\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n+\n+        # Check that the next address is from the new seed\n+        self.nodes[1].keypoolrefill(1)\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address continues previous keypool\n+\n+        # Sethdseed parameter validity\n+        assert_raises_rpc_error(-1, 'sethdseed', self.nodes[0].sethdseed, False, new_seed, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177838900",
      "id" : 177838900,
      "in_reply_to_id" : 176808906,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 38,
      "path" : "test/functional/wallet_hd.py",
      "position" : null,
      "pull_request_review_id" : 107787159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177838900",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177841097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177841097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The seed value is interpreted and saved as private key. We don't want to have a seed where we already have that seed value as a key in the wallet. The only way to check whether we have a given private key is to derive its public key, get the id of that public key, and look it up. So to ensure that we don't have the seed value already, we need to derive both compressed and uncompressed public keys, get their ids, and look them up.\r\n\r\nIt's important to note that the seed is not actually a private key so it doesn't have a corresponding public key. We just use WIF because its a common format.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-28T18:07:55Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str()), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177841097",
      "id" : 177841097,
      "in_reply_to_id" : 177508595,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 107789835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177841097",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177842616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177842616"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-28T18:13:05Z",
      "diff_hunk" : "@@ -118,5 +119,38 @@ def run_test (self):\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n+        # Generate a new HD seed on node 1 and make sure it is set\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        self.nodes[1].sethdseed()\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177842616",
      "id" : 177842616,
      "in_reply_to_id" : 176804789,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 18,
      "path" : "test/functional/wallet_hd.py",
      "position" : 18,
      "pull_request_review_id" : 107791602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177842616",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177843919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177843919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-28T18:17:19Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177843919",
      "id" : 177843919,
      "in_reply_to_id" : 176812580,
      "original_commit_id" : "a5c95dd4b3036b0cfacdb8afd8d885b71928f9e4",
      "original_position" : 25,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 107793208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177843919",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177856375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177856375"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is the problem with having a seed that is the same private key with opposite compressedness? It wouldn't have an existing entry in the the wallet file because the CKeyID is different.\r\n\r\nIf there is a good reason to protect against this, it might make sense to add a `bool HaveKey(CKey& key) const` method on `CKeyStore`.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-28T18:58:54Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str()), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177856375",
      "id" : 177856375,
      "in_reply_to_id" : 177508595,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 107808343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177856375",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "At the risk of expanding the scope, can we fix -upgradewallet to work for HD as well here? The fact that upgradewallet will work to upgrade your wallet to HD-1 and then you have to call sethdseed to upgrade seems....strange.\r\nSeparately, can we either check that we're fully synced before allowing an HD master rotate or keep around old HD keys for key derivation? I'd prefer the second, but its obviously a ton more complicated, so just ensuring that we're at least synced first is likely sufficient to ensure people dont rotate and miss some payments.",
      "created_at" : "2018-03-30T16:47:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377567454",
      "id" : 377567454,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-30T16:47:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377567454",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178436100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178436100"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we use a key that already exists in the wallet but with opposite compressedness, that key could be exportable with `dumpprivkey`. But the user would not necessarily know that the key that is exported is their seed just with opposite compressedness. I don't think that we want the seed to be exportable like that, and if we do want the seed to be exported in some way, it should be via its own RPC and not through `dumpprivkey`.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-03-31T16:33:57Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str()), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178436100",
      "id" : 178436100,
      "in_reply_to_id" : 177508595,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 108496723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-31T19:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178436100",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I changed `-upgradewallet` so it upgrades non-HD wallets to HD and HD chain split. I've updated the OP and title to indicate as such.\r\n\r\nUnfortunately automated tests can't be done with `-upgradewallet`.\r\n\r\n> Separately, can we either check that we're fully synced before allowing an HD master rotate \r\n\r\nThis seems incompatible with `-upgradewallet` as an upgrade method.\r\n\r\n> or keep around old HD keys for key derivation? I'd prefer the second, but its obviously a ton more complicated, so just ensuring that we're at least synced first is likely sufficient to ensure people dont rotate and miss some payments.\r\n\r\nI think this should be done as a separate PR. It's quite a bit of scope creep.",
      "created_at" : "2018-03-31T18:26:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377713319",
      "id" : 377713319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-31T18:26:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377713319",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This seems incompatible with -upgradewallet as an upgrade method.\r\n\r\nI dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective, as long as you dont flush keypool, its just a new way to generate keypool entries), but for HD master *rotation*, I think making sure we dont need any future new keys is pretty easy to add, no?",
      "created_at" : "2018-04-02T13:58:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377934857",
      "id" : 377934857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-04-02T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377934857",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178583204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178583204"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "OK. I'm still not convinced (I could make similar arguments about rejecting keys with the lowest bit toggled), but it doesn't really matter.\r\n\r\nI would prefer to see the lookups moved over to a `HaveKey(CKey& key)` method on KeyStore though.",
      "commit_id" : "618525680fc84521c44ca0d4850e899b55c24ae0",
      "created_at" : "2018-04-02T16:32:40Z",
      "diff_hunk" : "@@ -3815,6 +3815,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str()), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178583204",
      "id" : 178583204,
      "in_reply_to_id" : 177508595,
      "original_commit_id" : "1bc2bf2a3186dee7d98088c2b80ae617d6f6d774",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 108662017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-04-02T16:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178583204",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective\r\n\r\nRight, duh.\r\n\r\n***\r\n\r\nI rebased this and added a check for IBD so it won't set a new seed if we are still in IBD.",
      "created_at" : "2018-04-05T19:55:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-379057314",
      "id" : 379057314,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-04-05T19:55:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379057314",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
