[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r170993749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/170993749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Text should also tell user that change addresses will be removed(or not)",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-02-27T17:00:45Z",
      "diff_hunk" : "@@ -3788,6 +3788,71 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r170993749",
      "id" : 170993749,
      "original_commit_id" : "48f09bd64053a3fadbfdf71902470e813ef89acf",
      "original_position" : 20,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 99768912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/170993749",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171005721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171005721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. Also included some more text explaining hd chain split stuff.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-02-27T17:39:08Z",
      "diff_hunk" : "@@ -3788,6 +3788,71 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171005721",
      "id" : 171005721,
      "in_reply_to_id" : 170993749,
      "original_commit_id" : "48f09bd64053a3fadbfdf71902470e813ef89acf",
      "original_position" : 20,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 99783315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171005721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171434437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171434437"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: IMO this inline throw style makes the code less readable, and it's not used elsewhere in the file.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-01T00:48:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) flush_key_pool = request.params[0].get_bool();\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171434437",
      "id" : 171434437,
      "original_commit_id" : "d40de04228426826844ae1cd6539bfb4dec2c487",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 100285856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171434437",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this can be useful, though the following potential risks may be harmful in certain scenarios:\r\n* Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n* seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n* \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.",
      "created_at" : "2018-03-01T12:45:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369580505",
      "id" : 369580505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-01T12:45:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/369580505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\r\n\r\nThe help text could be updated to indicate that only coins sent to newly generated addresses will have keys generated with the new seed.\r\n\r\n> seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO-set scan should be considered?\r\n\r\nI could add a rescan option that is disabled by default. It could only be enabled if explicitly set and if the keypool is regenerated.\r\n\r\n> \"Upgrading\" existing non-hd wallets: leads to a mix of HD non HD-keys. Hard to \"untangle\" the non HD keys in case one wants to forward all funds to the new hd keyspace.\r\n\r\nAt the time of upgrade, one could send all coins to a new address.",
      "created_at" : "2018-03-01T22:14:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369749811",
      "id" : 369749811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-01T22:14:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/369749811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171712798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171712798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed this and other places that have similar inline ifs that are hard to read.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-01T22:21:13Z",
      "diff_hunk" : "@@ -3788,6 +3788,73 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) flush_key_pool = request.params[0].get_bool();\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171712798",
      "id" : 171712798,
      "in_reply_to_id" : 171434437,
      "original_commit_id" : "d40de04228426826844ae1cd6539bfb4dec2c487",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 100615884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/171712798",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error and another for `params[1].get_str()`.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:39:09Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037363",
      "id" : 175037363,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037363",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:39:48Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037492",
      "id" : 175037492,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 56,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037492",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037717"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test `get_bool()`.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:40:47Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037717",
      "id" : 175037717,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 42,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 42,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037717",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037897"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for this error.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:41:29Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037897",
      "id" : 175037897,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 62,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175037897",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175038823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175038823"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This always returns `true` so it's not possible to test the error raised below Ã°ÂÂÂ",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:44:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175038823",
      "id" : 175038823,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 71,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175038823",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175040839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175040839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should test return value (never false). However consider returning an object as per developer notes.",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:53:50Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175040839",
      "id" : 175040839,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 76,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175040839",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175041550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175041550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe should be `newkeypool`?",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:57:03Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175041550",
      "id" : 175041550,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175041550",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Return value of `NewkeyPool` ignored and nothing is logged. Maybe that's fine?",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T09:59:05Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042040",
      "id" : 175042040,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 74,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042040",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could have a test for extra parameters. See [example](https://github.com/bitcoin/bitcoin/pull/12083/files#diff-695d736c7d2a38a42ae900546aed52f8).",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T10:01:18Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042553",
      "id" : 175042553,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 12,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 12,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175042553",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175043020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175043020"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe:\r\n```cpp\r\nif (request.params[1].isNull()) {\r\n    master_pub_key = pwallet->GenerateNewHDMasterKey();\r\n} else {\r\n```",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-16T10:03:24Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175043020",
      "id" : 175043020,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104502283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175043020",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:08:46Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277505",
      "id" : 175277505,
      "in_reply_to_id" : 175037363,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277506"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:08:50Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277506",
      "id" : 175277506,
      "in_reply_to_id" : 175037492,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 56,
      "pull_request_review_id" : 104785728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277506",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277507"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:08:56Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277507",
      "id" : 175277507,
      "in_reply_to_id" : 175037717,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 42,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 42,
      "pull_request_review_id" : 104785730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277507",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:00Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277509",
      "id" : 175277509,
      "in_reply_to_id" : 175037897,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 62,
      "pull_request_review_id" : 104785731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the if block",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:07Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277511",
      "id" : 175277511,
      "in_reply_to_id" : 175038823,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 71,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277511",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `NullUniValue`",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:16Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277515",
      "id" : 175277515,
      "in_reply_to_id" : 175040839,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 76,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277515",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:20Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277516",
      "id" : 175277516,
      "in_reply_to_id" : 175041550,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277516",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's fine. It only returns false when the wallet is locked, and that is caught earlier with `EnsureWalletIsUnlocked`",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:53Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    // Upgrade the wallet to version FEATURE_HD_SPLIT if it isn't aleady\n+    pwallet->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    }\n+    if (flush_key_pool) pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277527",
      "id" : 175277527,
      "in_reply_to_id" : 175042040,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 74,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277527",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:09:58Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277529",
      "id" : 175277529,
      "in_reply_to_id" : 175042553,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 12,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 12,
      "pull_request_review_id" : 104785753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277529",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e277429a4fbacb55f4f20e9d8624243f60cbc296",
      "created_at" : "2018-03-18T05:10:08Z",
      "diff_hunk" : "@@ -3788,6 +3788,81 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed. Wallets that do\\n\"\n+            \"not support the HD Chain split feature will be upgraded to do so and all new change addresses will come from the internal keychain.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing \\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277533",
      "id" : 175277533,
      "in_reply_to_id" : 175043020,
      "original_commit_id" : "6e8eb0830c40c75d38594dd804ad996b714ad3b4",
      "original_position" : 46,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 104785757,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12560",
      "updated_at" : "2018-03-18T05:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175277533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Had to rebase this.",
      "created_at" : "2018-03-18T19:30:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-374037539",
      "id" : 374037539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12560",
      "updated_at" : "2018-03-18T19:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374037539",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
