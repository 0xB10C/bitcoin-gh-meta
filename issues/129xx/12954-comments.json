[
   {
      "author_association" : "OWNER",
      "body" : "Concept ACK, splitting the logging functionality out of util makes sense, util.cpp is large, haphazard and this is a clearly distinguishable concern from the rest.\r\n",
      "created_at" : "2018-04-12T05:57:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-380687818",
      "id" : 380687818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
      "updated_at" : "2018-04-12T05:57:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380687818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Needs rebase",
      "created_at" : "2018-04-13T13:51:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-381141887",
      "id" : 381141887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
      "updated_at" : "2018-04-13T13:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381141887",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181610827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181610827"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think this should move to logging as well, so the cyclic dependency between logging and util can be avoided.",
      "commit_id" : "f9c5a3e853c522ecc7538e5ba7cb25c89d77f97c",
      "created_at" : "2018-04-16T02:32:19Z",
      "diff_hunk" : "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181610827",
      "id" : 181610827,
      "original_commit_id" : "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
      "original_position" : 144,
      "path" : "src/util.h",
      "position" : 144,
      "pull_request_review_id" : 112266750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
      "updated_at" : "2018-04-16T05:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181610827",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181612082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181612082"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`LogPrintf` is also used in TraceThread, and I don't think either of them actually belong in logging (the whole point of this PR is to create a more cohesive separation). I can very easily imagine another method that gets added to util.h in the future requiring logging as well.\r\n\r\nThe dependency isn't really cyclic -- `logging.cpp` includes `util.h`, and `util.h` includes `logging.h`, but `logging.h` does not include `util.h`.",
      "commit_id" : "f9c5a3e853c522ecc7538e5ba7cb25c89d77f97c",
      "created_at" : "2018-04-16T02:47:39Z",
      "diff_hunk" : "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181612082",
      "id" : 181612082,
      "in_reply_to_id" : 181610827,
      "original_commit_id" : "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
      "original_position" : 144,
      "path" : "src/util.h",
      "position" : 144,
      "pull_request_review_id" : 112268120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
      "updated_at" : "2018-04-16T05:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181612082",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181628843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181628843"
         }
      },
      "author_association" : "OWNER",
      "body" : "My view is that you should always treat the .h and the .cpp file as one unit. While this may indeed not be a cyclic dependency for the compiler, it is certainly one between the two modules semantically: logging can't work without util, and util can't work without logging. Finding out why that is the case helps creating a cleaner separation.\r\n\r\nYou're right that util is going to depend on logging though, as it contains a number of higher level functions. However, It looks like logging only really needs util for finding the debug log path, though. All the rest is in utiltime. This seems easy to fix, by instead having init query the path and call a setter on logging for it for example. If other reviewers are fine with that, we can fix that up in another PR.\r\n\r\n",
      "commit_id" : "f9c5a3e853c522ecc7538e5ba7cb25c89d77f97c",
      "created_at" : "2018-04-16T06:04:15Z",
      "diff_hunk" : "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181628843",
      "id" : 181628843,
      "in_reply_to_id" : 181610827,
      "original_commit_id" : "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
      "original_position" : 144,
      "path" : "src/util.h",
      "position" : 144,
      "pull_request_review_id" : 112287026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
      "updated_at" : "2018-04-16T06:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181628843",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase again. (Since this has some Concept ACKs, but is somewhat largish, it might be easier to merge in two steps. First the move-only commit in a separate pull request and then the refactoring in this pull request)",
      "created_at" : "2018-04-17T15:26:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-382034468",
      "id" : 382034468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
      "updated_at" : "2018-04-17T15:26:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382034468",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
