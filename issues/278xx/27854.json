{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "## Description\r\n                                                                                                                                                                                                                                               \r\nThis is a WIP/draft pull request seeking concept/approach ACK. The goal is to initiate discussion and gather feedback on the proposed changes to see if there is sufficient support for an ACK before finalizing an implementation.\r\n\r\nThis PR initially proposes the addition of a new thread and server to enable Bitcoin Core to run as a Sv2 TP (Stratum V2 Template Provider). This approach is the most direct and naive approach in regards to integrating into the Bitcoin architecture. It builds on https://github.com/bitcoin/bitcoin/pull/23049 but no longer uses the Rust library and implements the server and message de/serialization in C++.\r\n\r\nThis PR branch has been used for testing with the [SRI (Stratum V2 Reference Implementation)](https://github.com/stratum-mining/stratum), but it has been limited to regtest and some tests on testnet. This branch is considered far from complete.\r\n\r\n## Context\r\n\r\nStratum V2 is a proposed evolution of the stratum mining protocol, it has several benefits over its predecessor:\r\n\r\n- By default, it uses secure communication, which can protect against man-in-the-middle-attacks, e.g. [hashrate hijacking](https://braiins.com/blog/hashrate-robbery-stratum-v2-fixes-this-and-more)                                                           \r\n\r\n- It uses a binary protocol instead of JSON, optimizing data transfer between all parties\r\n\r\n- It allows miners/downstream connections to propose their own transaction sets to mining pools                                                                                                                                    \r\n\r\n- It can reduce occurrence of empty mined blocks\r\n\r\nLinks below for further reference:\r\n\r\n- Stratum V2 specification: https://github.com/stratum-mining/sv2-spec\r\n- SRI (Stratum V2 Reference Implementation): https://github.com/stratum-mining/stratum\r\n- Stratum V2 overview: https://stratumprotocol.org/\r\n\r\n## Motivation\r\n                                                                                                                                                                                                                  \r\nThe motivation for this PR and potential future work is to allow Bitcoin Core to run as a Sv2 TP. This will enable downstream Sv2 connections to be able to connect and receive/submit valid work over the Sv2 protocol.\r\n\r\nBelow is an outline of a few pros/cons regarding the Sv2 TP  in Bitcoin Core.\r\n\r\nPros:\r\n\r\n- Running Bitcoin Core with a config flag to enable the Sv2 TP could be arguably easier for adoption. A user would only need to be able to compile and run Bitcoin Core and its dependencies to be able to extract valid work and broadcast legitimate work over the Sv2 protocol\r\n\r\n- The Sv2 TP being as close as possible to the mempool and p2p network benefits downstream connections so that they can start new work quickly. The time between a node learning of a  new best block and then sending new work downstream should be as minimal as possible\r\n\r\n- Implementing the Sv2 TP in C++ means it should be (hopefully) easier for a wider range of contributors/reviewers to be able to maintain and build. The Sv2 TP only uses a small subset of messages from the entire Sv2 Rust library. Therefore, we realized that re-implementing a subset of the messages in C++ and implementing a server carries less external dependency risk and less architectural complexity\r\n\r\n- No additional external dependencies are required\r\n\r\nCons:\r\n\r\n- The Sv2 TP in core will need to be kept up to date with changes in the SRI, coordination would be required to prevent any potential versioning issues\r\n\r\n- Adds  another thread/sub-module that will need to access the mempool to build candidate blocks, so there would be another area of the code attempting to acquire `cs_main` via `BlockAssembler`\r\n\r\n- Another architectural approach other than a new thread and server for the Sv2 TP might be preferred such as the current work in the [multiprocess project](https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Process-Separation)\r\n\r\n\r\n## Build\r\n\r\nTo run the Sv2 TP on this branch, Bitcoin needs to be configured with `./configure --enable-template-provider`.\r\n\r\n## Future work\r\n\r\nIf there is sufficient approach/concept ACK or support in general. Then the below points are outstanding future work and existing nits.\r\n\r\nFuture work:\r\n\r\n- A noise implementation from the noise protocol framework needs to be introduced for secure communication between the Sv2 TP and downstream connections. The [noise spec for Sv2 has been reworked](https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md#43-choice-of-cryptographic-primitives) to accommodate resources currently available in core e.g. `secp256k1` and `BIP 340 schnorrsig`\r\n\r\n- There are current working changes proposed to the Sv2 TP spec, to allow downstream connections to send shorttxid  sets, allowing miners/downstream connections to present their own tx sets \r\n\r\n- Perhaps the Sv2 TP should be adapted to current work in the Bitcoin Core architecture. The new thread has been helpful for testing against the current SRI stack, it seems like the server implementation can adapt easily to different architectural needs\r\n\r\nExisting/known nits:\r\n\r\n- The server implementation has no limit on the number of downstream connections, it needs to be added\r\n\r\n- There could be potential conflict with functional tests. The Sv2 TP responds to the best new block change by reaching into the mempool and building a new block for downstream. My guess is that it would be acceptable to disable the Sv2 TP when running functional tests that asserts mempool state and then enable the Sv2 TP when it needs to specifically run its functional tests\r\n\r\n- Getting the full merkle path is required in the [NewTemplate](https://github.com/stratum-mining/sv2-spec/blob/main/07-Template-Distribution-Protocol.md#72-newtemplate-server---client) message. I noticed that this was previously possible with the old implementation that was moved to [merkle_test.cpp](https://github.com/bitcoin/bitcoin/blob/2026301405f83c925ca68db6a3cd5134ed619ca7/src/test/merkle_tests.cpp#L114) , the current implementation does an in-place calculation to just return the root.  I was wondering if anyone has any suggestions or insight to a preferred solution? e.g. Move back  the old functions from merkle_tests or write a new implementation?\r\n \r\nThank you to all who helped contribute to the process of building this branch including working on the SRI, using this branch for testing and refining the Sv2 specs.\r\n\r\nAny feedback or reviews from nits to overall approach would be very much appreciated.\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854/comments",
   "created_at" : "2023-06-11T08:54:19Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/27854",
   "id" : 1751329317,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585SstkX",
   "number" : 27854,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/27854.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27854",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/27854.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27854"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854/timeline",
   "title" : "[WIP] add a stratum v2 template provider",
   "updated_at" : "2023-06-11T08:54:22Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27854",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/18324680?v=4",
      "events_url" : "https://api.github.com/users/ccdle12/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ccdle12/followers",
      "following_url" : "https://api.github.com/users/ccdle12/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ccdle12/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ccdle12",
      "id" : 18324680,
      "login" : "ccdle12",
      "node_id" : "MDQ6VXNlcjE4MzI0Njgw",
      "organizations_url" : "https://api.github.com/users/ccdle12/orgs",
      "received_events_url" : "https://api.github.com/users/ccdle12/received_events",
      "repos_url" : "https://api.github.com/users/ccdle12/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ccdle12/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ccdle12"
   }
}
