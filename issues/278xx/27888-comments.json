[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591381981) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27255](https://github.com/bitcoin/bitcoin/pull/27255) (MiniTapscript: port Miniscript to Tapscript by darosior)\n* [#26627](https://github.com/bitcoin/bitcoin/pull/26627) (wallet: Migrate non-HD keys with single combo containing a list of keys by achow101)\n* [#26626](https://github.com/bitcoin/bitcoin/pull/26626) (descriptors: Add a KEY expression representing a list of individual keys by achow101)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-14T13:13:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591186541",
      "id" : 1591186541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e15Rt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591186541/reactions"
      },
      "updated_at" : "2023-06-14T15:10:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591186541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like this touches non-fuzz code? No opinion if people want this, but a much simpler implementation would be to just create a copy of the buffer and inject the pre-generated static string into it. (This is basically what a fuzz engine does automatically, with the difference that you can now provide the string dictionary yourself, directly in the fuzz target).\r\n\r\nthe fuzz target would look like:\r\n\r\n```cpp\r\nauto str{fdp.ConsumeString()};\r\nif (fdp.ConsumeBool()) {\r\n  str = MockDescriptor(str);\r\n}\r\nconst auto desc = Parse(str);\r\n```\r\n\r\nWith `MockDescriptor` doing a search of `pk(xx)` and then replacing it with `pk(yy)`, where `yy=raw_pubkeys[int(xx) % raw_pubkeys.size()]` (already hex encoded).\r\n\r\nThis has the benefits of not mocking out the parsing logic, which for `GetXOnlyPubKey` is actually worthy to fuzz? Also, it allows to print the fuzz input, if needed, and use it over RPC for debugging. Finally, it doesn't touch real code, only test code.",
      "created_at" : "2023-06-14T14:09:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591285878",
      "id" : 1591285878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e2Rh2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591285878/reactions"
      },
      "updated_at" : "2023-06-14T14:09:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591285878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In what you suggest `MockDescriptor`Â would basically have to reimplement all of the descriptor parsing logic to be able to detect when is a key expected and replace the hex-encoded byte by an actual key. I figured the slight modification to the descriptor code to make key parsing mockable was preferable. (Note that's what we have already in Miniscript which allows us to have an efficient `miniscript_string` fuzz target.)\r\n\r\nTo be clear this is not only about mocking `pk()` expressions but anywhere we'd expect a key.",
      "created_at" : "2023-06-14T14:20:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591314299",
      "id" : 1591314299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e2Yd7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591314299/reactions"
      },
      "updated_at" : "2023-06-14T14:21:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591314299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, I see. I guess another alternative would be to randomly inject random pre-generated keys at random positions in the string, absent of any logic. Then let the fuzz engine figure out the right positions via coverage feedback.\r\n\r\nNo strong opinion, just leaving random ideas that can be implemented with less code.",
      "created_at" : "2023-06-14T14:49:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591379997",
      "id" : 1591379997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e2ogd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591379997/reactions"
      },
      "updated_at" : "2023-06-14T14:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591379997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nMocking seems fine to me, but I wonder if we could achieve something similar by placing (in)valid encoded keys in a fuzz dictionary (e.g. https://github.com/bitcoin-core/qa-assets/pull/122), which is also almost the same as Marco's suggestion. This would be less efficient compared to what is in this PR but the inputs would still be available for debugging over RPC. We can of course also just do both since adding to the dictionaries is very easy.",
      "created_at" : "2023-06-14T14:50:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591381981",
      "id" : 1591381981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e2o_d",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591381981/reactions"
      },
      "updated_at" : "2023-06-14T14:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591381981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks both for throwing in ideas. Note i don't have strong opinions here either, it's just some review code that i figured could be helpful having in too. However i still don't think the approaches suggested here would be better:\r\n- Inserting valid keys at random positions in the input. I'm assuming you describe something that looks like 1) get the number of keys from the fuzzer output 2) get the positions to insert each at from the fuzzer output. I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\r\n- Including valid keys in a dictionary. Again, i'm not very familiar with the inernals of fuzzing engines but i suspect this would make the fuzzer grind the key with virtually no chance of finding another valid one, wasting a lot of cycles.\r\n- I don't think keeping the raw seed human readable for debugging over RPC should generally be a goal, especially not at the expense of efficiency. To get something readable you can simply run `./src/test/fuzz/fuzz ./crash-XXXXX` with a `ToString()` printed to stdout.",
      "created_at" : "2023-06-14T15:16:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591450310",
      "id" : 1591450310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e25rG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591450310/reactions"
      },
      "updated_at" : "2023-06-14T15:16:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591450310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another alternative may be to just perform search-replace in the fuzz-read string before handing it to the parser? Eg anything of the form \"%XX\" where XX is two hex characters, is replaced by a lookup in a table.",
      "created_at" : "2023-06-14T15:19:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591459495",
      "id" : 1591459495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e276n",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591459495/reactions"
      },
      "updated_at" : "2023-06-14T15:19:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591459495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Hmm good point. Using a distinguishable character fixes the issue of having to \"basically reimplement descriptor parsing logic\".\n------- Original Message -------\nOn Wednesday, June 14th, 2023 at 5:19 PM, Pieter Wuille ***@***.***> wrote:\n\n> Another alternative may be to just perform search-replace in the fuzz-read string before handing it to the parser? Eg anything of the form \"%XX\" where XX is two hex characters, is replaced by a lookup in a table.\n>\n> â\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591459495), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3F3PYOENOE2ZPE75HITXLHI7ZANCNFSM6AAAAAAZGLFYQU).\n> You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "created_at" : "2023-06-14T15:21:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591465134",
      "id" : 1591465134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e29Su",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591465134/reactions"
      },
      "updated_at" : "2023-06-14T15:21:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591465134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\r\n\r\nI am happy to run a bench, if you happen to have a bug laying around :)",
      "created_at" : "2023-06-14T15:31:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591485898",
      "id" : 1591485898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e3CXK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591485898/reactions"
      },
      "updated_at" : "2023-06-14T15:31:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591485898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't, but i think Pieter settled the debate anyways. :)\n------- Original Message -------\nOn Wednesday, June 14th, 2023 at 5:31 PM, MacrabFalke ***@***.***> wrote:\n\n>> I may be underestimating the fuzzer's capabilities but it sounds much less efficient.\n>\n> I am happy to run a bench, if you happen to have a crash+bug laying around :)\n>\n> â\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591485898), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3F75QKRNVW44OITSYKLXLHKO5ANCNFSM6AAAAAAZGLFYQU).\n> You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "created_at" : "2023-06-14T15:35:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1591491404",
      "id" : 1591491404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27888",
      "node_id" : "IC_kwDOABII585e3DtM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591491404/reactions"
      },
      "updated_at" : "2023-06-14T15:35:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591491404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231322655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231322655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 845810d94df83747634a60ff59635a670bba1124 \"fuzz: add a new, more efficient, descriptor parsing target\"\r\n\r\nPerhaps also include uncompressed keys?",
      "commit_id" : "fad60fc6f6486d3b28de4bbe937e293f65d5cbd5",
      "created_at" : "2023-06-15T17:08:30Z",
      "diff_hunk" : "@@ -3,11 +3,109 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{5};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231322655",
      "id" : 1231322655,
      "line" : 48,
      "node_id" : "PRRC_kwDOABII585JZH4f",
      "original_commit_id" : "845810d94df83747634a60ff59635a670bba1124",
      "original_line" : 48,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/fuzz/descriptor_parse.cpp",
      "position" : 46,
      "pull_request_review_id" : 1482059834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231322655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-15T17:12:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231322655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231966560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231966560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good call, done.",
      "commit_id" : "fad60fc6f6486d3b28de4bbe937e293f65d5cbd5",
      "created_at" : "2023-06-16T08:43:54Z",
      "diff_hunk" : "@@ -3,11 +3,109 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <key_io.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n #include <util/chaintype.h>\n \n+//! Types are raw compressed pubkeys, raw xonly pubkeys, raw privkeys (WIF), xpubs, xprvs.\n+static constexpr uint8_t KEY_TYPES_COUNT{5};\n+//! How many keys we'll generate in total.\n+static constexpr uint8_t TOTAL_KEYS_GENERATED{std::numeric_limits<uint8_t>::max()};\n+\n+/**\n+ * Converts a mocked descriptor string to a valid one. Every key in a mocked descriptor key is\n+ * represented by 2 hex characters preceded by the '%' character. We parse the two hex characters\n+ * as an index in a list of pre-generated keys. This list contains keys of the various types\n+ * accepted in descriptor keys expressions.\n+ */\n+class MockedDescriptorConverter {\n+    //! 256 keys of various types.\n+    std::array<std::string, TOTAL_KEYS_GENERATED> keys_str;\n+\n+public:\n+    // We derive the type of key to generate from the 1-byte id parsed from hex.\n+    bool IdIsCPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 0; }\n+    bool IdIsXOnlyPubKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 1; }\n+    bool IdIsConstPrivKey(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 2; }\n+    bool IdIsXpub(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 3; }\n+    bool IdIsXprv(uint8_t idx) const { return idx % KEY_TYPES_COUNT == 4; }\n+\n+    //! When initializing the target, populate the list of keys.\n+    void Init() {\n+        // The data to use as a private key or a seed for an xprv.\n+        uint8_t key_data[32] = {1};\n+        // Generate keys of all kinds and store them in the keys array.\n+        for (uint8_t i{0}; i < TOTAL_KEYS_GENERATED; i++) {\n+            key_data[31] = i;\n+\n+            // If this is a \"raw\" key, generate a normal privkey. Otherwise generate\n+            // an extended one.\n+            if (IdIsCPubKey(i) || IdIsXOnlyPubKey(i) || IdIsConstPrivKey(i)) {\n+                CKey privkey;\n+                privkey.Set(key_data, key_data + 32, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27888#discussion_r1231966560",
      "id" : 1231966560,
      "in_reply_to_id" : 1231322655,
      "line" : 48,
      "node_id" : "PRRC_kwDOABII585JblFg",
      "original_commit_id" : "845810d94df83747634a60ff59635a670bba1124",
      "original_line" : 48,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/fuzz/descriptor_parse.cpp",
      "position" : 46,
      "pull_request_review_id" : 1483016214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27888",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231966560/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-16T08:43:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231966560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   }
]
