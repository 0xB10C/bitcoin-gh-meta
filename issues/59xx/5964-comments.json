[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27684977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27684977"
         }
      },
      "body" : "Does this work when the timestamp of the first item in the queue is in the past?",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-02T18:40:32Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler()\n+{\n+}\n+\n+\n+boost::thread*\n+CScheduler::run()\n+{\n+    boost::thread* t = new boost::thread(boost::bind(&CScheduler::SchedulerLoop, this));\n+    return t;\n+}\n+\n+void\n+CScheduler::SchedulerLoop()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1)\n+    {\n+        if (taskQueue.empty())\n+        {\n+            // Wait until there is something to do.\n+            newTaskScheduled.wait(lock);\n+        }\n+        else\n+        {\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+            while (!taskQueue.empty() &&\n+                   newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27684977",
      "id" : 27684977,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 42,
      "path" : "src/scheduler.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27684977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685089"
         }
      },
      "body" : "Nit: coding style (braces on the same line).",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-02T18:41:32Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler()\n+{\n+}\n+\n+\n+boost::thread*\n+CScheduler::run()\n+{\n+    boost::thread* t = new boost::thread(boost::bind(&CScheduler::SchedulerLoop, this));\n+    return t;\n+}\n+\n+void\n+CScheduler::SchedulerLoop()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1)\n+    {\n+        if (taskQueue.empty())\n+        {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685089",
      "id" : 27685089,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 33,
      "path" : "src/scheduler.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685089",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685145"
         }
      },
      "body" : "Nit: notify_one should be enough (and slightly more efficient, if we'd ever have multiple runner threads).",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-02T18:42:08Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler()\n+{\n+}\n+\n+\n+boost::thread*\n+CScheduler::run()\n+{\n+    boost::thread* t = new boost::thread(boost::bind(&CScheduler::SchedulerLoop, this));\n+    return t;\n+}\n+\n+void\n+CScheduler::SchedulerLoop()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1)\n+    {\n+        if (taskQueue.empty())\n+        {\n+            // Wait until there is something to do.\n+            newTaskScheduled.wait(lock);\n+        }\n+        else\n+        {\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+            while (!taskQueue.empty() &&\n+                   newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout)\n+            {\n+                // Keep waiting until timeout\n+            }\n+            if (taskQueue.empty()) continue;\n+\n+            Function f = taskQueue.begin()->second;\n+            taskQueue.erase(taskQueue.begin());\n+\n+            // Unlock before calling f, so it can reschedule itself or another task\n+            // without deadlocking:\n+            lock.unlock();\n+            f();\n+            lock.lock();\n+        }\n+    }\n+}\n+\n+void\n+CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)\n+{\n+    {\n+        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        taskQueue.insert(std::make_pair(t, f));\n+    }\n+    newTaskScheduled.notify_all();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685145",
      "id" : 27685145,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 67,
      "path" : "src/scheduler.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "concept ACK\r\nCScheduler ACK\r\n\r\n* Yes, DumpAddresses thread is a prime candidate for this\r\n* Ditto ThreadFlushWalletDB\r\n* Disagree on ThreadImport -- ThreadImport is a prime candidate for something to be executed in a long running thread of its own.\r\n",
      "created_at" : "2015-04-02T18:44:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89005975",
      "id" : 89005975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-02T18:44:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89005975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685407"
         }
      },
      "body" : ".wait() may wake spuriously, so it's better to turn the surrounding if into a while loop. I believe that means you also won't have to deal with the queue-empty case in the loop below.",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-02T18:45:16Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler()\n+{\n+}\n+\n+\n+boost::thread*\n+CScheduler::run()\n+{\n+    boost::thread* t = new boost::thread(boost::bind(&CScheduler::SchedulerLoop, this));\n+    return t;\n+}\n+\n+void\n+CScheduler::SchedulerLoop()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1)\n+    {\n+        if (taskQueue.empty())\n+        {\n+            // Wait until there is something to do.\n+            newTaskScheduled.wait(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685407",
      "id" : 27685407,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 35,
      "path" : "src/scheduler.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685862"
         }
      },
      "body" : "Unsure about this, but leaving the thread running forever may cause destruction order issues if a task is running exactly at shutdown. A destructor that sets an 'exit' bool flag (which the scheduler thread checks), and waits for all scheduler threads to exit may be needed. ",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-02T18:50:14Z",
      "diff_hunk" : "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCHEDULER_H\n+#define BITCOIN_SCHEDULER_H\n+\n+//\n+// NOTE:\n+// boost::thread / boost::function / boost::chrono should be ported to\n+// std::thread / std::function / std::chrono when we support C++11.\n+//\n+#include <boost/function.hpp>\n+#include <boost/chrono/chrono.hpp>\n+#include <boost/thread.hpp>\n+#include <map>\n+\n+//\n+// Simple class for background tasks that should be run\n+// periodically or once \"after a while\"\n+//\n+// Usage:\n+//\n+// CScheduler s;\n+// s.scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n+// s.scheduleFromNow(boost::bind(Class::func, this, argument), 3);\n+// boost::thread* t = s.run();\n+//\n+// Thread lifetime management (interruption, joining, deletion) is left up to the caller.\n+//\n+class CScheduler\n+{\n+public:\n+    CScheduler();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685862",
      "id" : 27685862,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 35,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27685862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Agree with @jgarzik; threadimport should not run in the scheduler, as it is expected to take up to hours - blocking several other operations. Wallet flushing is a good candidate.",
      "created_at" : "2015-04-02T18:54:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89008405",
      "id" : 89008405,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-02T18:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89008405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27736643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27736643"
         }
      },
      "body" : "Thread lifetime managment is up to the caller. For Bitcoin, the thread is added to the main thread group, and all the threads are interrupted and joined before shutdown (see WaitForShutdown() in bitcoind.cpp or BitcoinCore::shutdown() in qt/bitcoin.cpp).\r\n\r\n",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-03T15:52:29Z",
      "diff_hunk" : "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCHEDULER_H\n+#define BITCOIN_SCHEDULER_H\n+\n+//\n+// NOTE:\n+// boost::thread / boost::function / boost::chrono should be ported to\n+// std::thread / std::function / std::chrono when we support C++11.\n+//\n+#include <boost/function.hpp>\n+#include <boost/chrono/chrono.hpp>\n+#include <boost/thread.hpp>\n+#include <map>\n+\n+//\n+// Simple class for background tasks that should be run\n+// periodically or once \"after a while\"\n+//\n+// Usage:\n+//\n+// CScheduler s;\n+// s.scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n+// s.scheduleFromNow(boost::bind(Class::func, this, argument), 3);\n+// boost::thread* t = s.run();\n+//\n+// Thread lifetime management (interruption, joining, deletion) is left up to the caller.\n+//\n+class CScheduler\n+{\n+public:\n+    CScheduler();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27736643",
      "id" : 27736643,
      "original_commit_id" : "313bcd909d326985da92d515ec294eaa6f54b9a5",
      "original_position" : 35,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27736643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Fixed @sipa's nits, including running scheduler.cpp/.h through clang-format.\r\n\r\nAnd reverted the ThreadImport change, so it is it's own thread again.\r\n",
      "created_at" : "2015-04-03T15:55:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89336206",
      "id" : 89336206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-03T15:55:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89336206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "```boost::condition_variable::wait_until``` and ```boost::cv_status``` didn't show up until 1.50. Can they be worked around?\r\n\r\nOtherwise, we'll need to enforce >= 1.50 as a build requirement.",
      "created_at" : "2015-04-04T00:52:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89475724",
      "id" : 89475724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-04T00:52:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89475724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "They're easy to work with using timed_wait, I think.",
      "created_at" : "2015-04-04T01:06:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89476358",
      "id" : 89476358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-04T01:06:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89476358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "ut ACK latest rev\r\n",
      "created_at" : "2015-04-05T05:15:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89718333",
      "id" : 89718333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-05T05:15:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/89718333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Three changes:\r\n\r\n1. I decided I didn't like the the asymmetry of CScheduler creating the thread, but the caller managing it. So I replaced CScheduler::run() with CScheduler::ServiceQueue, which the caller thread-ifys. And added code and a destructor that asserts if thread management isn't done correctly. That made it easy to wrap the scheduler trhead in util.h's TraceThread, to get debug.log tracing and handling of exceptions that might be thrown from the scheduled tasks.\r\n\r\n2. Added compatibility code for boost version 1.49 and below.\r\n\r\n3. I fixed a race-condition bug when there are multiple threads servicing the queue.\r\n\r\nI think I'm all done tweaking this now.\r\n",
      "created_at" : "2015-04-07T20:08:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90716311",
      "id" : 90716311,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-07T20:08:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90716311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27916587"
         }
      },
      "body" : "I was wrong earlier. If you want to support multiple runner threads, you need to do this check inside the while loops above, as the item can disappear while they wait.",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:26:52Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916587",
      "id" : 27916587,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 62,
      "path" : "src/scheduler.cpp",
      "position" : 62,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:26:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27916587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27916984"
         }
      },
      "body" : "This doesn't seem to exist anymore.",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:30:43Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCHEDULER_H\n+#define BITCOIN_SCHEDULER_H\n+\n+//\n+// NOTE:\n+// boost::thread / boost::function / boost::chrono should be ported to\n+// std::thread / std::function / std::chrono when we support C++11.\n+//\n+#include <boost/function.hpp>\n+#include <boost/chrono/chrono.hpp>\n+#include <boost/thread.hpp>\n+#include <map>\n+\n+//\n+// Simple class for background tasks that should be run\n+// periodically or once \"after a while\"\n+//\n+// Usage:\n+//\n+// CScheduler* s = new CScheduler();\n+// s->scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n+// s->scheduleFromNow(boost::bind(Class::func, this, argument), 3);\n+// boost::thread* t = new boost::thread(boost::bind(CScheduler::ServiceQueue, s));\n+//\n+// ... then at program shutdown, clean up the thread running ServiceQueue:\n+// t->interrupt();\n+// t->join();\n+// delete t;\n+// delete s; // Must be done after thread is interrupted/joined.\n+//\n+\n+class CScheduler\n+{\n+public:\n+    CScheduler();\n+    ~CScheduler();\n+\n+    // Start a thread to service the task queue.\n+    // Run may be called multiple times to have multiple\n+    // threads servicing the queue.\n+    boost::thread* run();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916984",
      "id" : 27916984,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 45,
      "path" : "src/scheduler.h",
      "position" : 45,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:30:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27916984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27917184"
         }
      },
      "body" : "Do you want the loop to exit if the user function throws an exception?",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:32:53Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;\n+\n+            Function f = taskQueue.begin()->second;\n+            taskQueue.erase(taskQueue.begin());\n+\n+            // Unlock before calling f, so it can reschedule itself or another task\n+            // without deadlocking:\n+            lock.unlock();\n+            f();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917184",
      "id" : 27917184,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 70,
      "path" : "src/scheduler.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:32:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27917184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27917404"
         }
      },
      "body" : "Mmm. I convinced myself an empty check isn't necessary there, but belt&suspenders says I should just put it back.\r\n\r\n(not needed because: if the queue is emptied during timeout, then the wait loop is timed out and exited and the empty queue is caught here. And since there is no unschedule-task, the only other way the wait can exit is if a new task is added to the queue, which wakes up only one thread and so the queue can't be empty).\r\n\r\nI'll add the empty condition to the wait loops.",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:35:22Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917404",
      "id" : 27917404,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 62,
      "path" : "src/scheduler.cpp",
      "position" : 62,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:35:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27917404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27918253"
         }
      },
      "body" : "Ok, you convinced me... but indeed, belt & suspenders.\r\n\r\nYou could even combine the two loops: while (taskQueue.empty() || wait_until(taskQueue.begin()->first)) ?\r\n\r\nEDIT: nevermind. Sorry, ignore my nits here, I'm not thinking clearly.",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:43:50Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918253",
      "id" : 27918253,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 62,
      "path" : "src/scheduler.cpp",
      "position" : 62,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:46:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27918253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27918514"
         }
      },
      "body" : "If it is a thread_interrupted exception, definitely want to exit.\r\n\r\nAny other exception, it seems best to leave it up to the calling code what to do.\r\n\r\nFor Bitcoin, the TraceThread will print any exceptions (other than thread_interrupted) to debug.log and exit the scheduler thread. I think that is the behavior we want -- tasks should catch their own exceptions, if they don't that is a bug.\r\n\r\nI don't feel strongly, though-- instead of wrapping with TraceThread we could bring back LoopForever so uncaught exceptions from tasks are logged to debug.log but the scheduler loop keeps running.\r\n",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T20:46:29Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;\n+\n+            Function f = taskQueue.begin()->second;\n+            taskQueue.erase(taskQueue.begin());\n+\n+            // Unlock before calling f, so it can reschedule itself or another task\n+            // without deadlocking:\n+            lock.unlock();\n+            f();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918514",
      "id" : 27918514,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 70,
      "path" : "src/scheduler.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T20:46:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27918514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27920705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27920705"
         }
      },
      "body" : "Fair enough. I mostly commented because it may make debugging a bit harder, but I agree: tasks should not throw exceptions (except thread_interrupted, perhaps).",
      "commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "created_at" : "2015-04-07T21:09:05Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+        boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::ServiceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n+\n+            // wait_until needs boost 1.50 or later. For older boosts, convert to\n+            // posix time:\n+#if BOOST_VERSION < 105000\n+            while (newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first)) == true) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty()) continue;\n+\n+            Function f = taskQueue.begin()->second;\n+            taskQueue.erase(taskQueue.begin());\n+\n+            // Unlock before calling f, so it can reschedule itself or another task\n+            // without deadlocking:\n+            lock.unlock();\n+            f();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27920705",
      "id" : 27920705,
      "original_commit_id" : "e39578545707e5263e571c641654a2752f36faa0",
      "original_position" : 70,
      "path" : "src/scheduler.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5964",
      "updated_at" : "2015-04-07T21:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/27920705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "extremely-lightly-tested ACK (as in: does not crash).",
      "created_at" : "2015-04-07T21:54:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90743665",
      "id" : 90743665,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-07T21:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90743665",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Final (?) nits picked (got rid of the obsolete run from the .h, added belt&suspenders checks for empty queue, ran through clang-format again), this should be ready for merge.\r\n\r\nI also did some more testing, writing a stress-test that created 4,000 tasks serviced by 100 threads over a couple of milliseconds ( https://github.com/gavinandresen/scheduler/blob/master/main.cpp ), and all is well, including running under valgrind.\r\n\r\n",
      "created_at" : "2015-04-08T15:56:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90958815",
      "id" : 90958815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-08T15:56:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90958815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "lightly tested ACK\r\n",
      "created_at" : "2015-04-08T16:01:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90959928",
      "id" : 90959928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-08T16:01:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90959928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "@gavinandresen See the top 2 commits here: https://github.com/theuni/bitcoin/tree/5964\r\n\r\nWithout the timer fix, using your test program I was flooded with \"Repeat!\" and everything else returned immediately. With the change from https://github.com/theuni/bitcoin/commit/4d0819394249be25c34db28e4c3648a71ab238fa I get:\r\n```\r\nMicrotask counts: 190 198 199 197 196 197 205 201 217 200 \r\nSum: 2000\r\nWait... negative?\r\nOne\r\nTwo\r\nAlsoTwo\r\nThree\r\nGonna start repeating every 2 secs\r\nFive\r\nRepeat!\r\nRepeat!\r\nRepeat!\r\nEleven!\r\nRepeat!\r\nLong-running task, gonna sleep for 11seconds\r\nOne\r\nRepeat!\r\nTwo\r\nRepeat!\r\nRepeat!\r\nRepeat!\r\nRepeat!\r\nDone sleeping\r\nRepeat!\r\n```\r\nEach looks to be taking as long as they should.\r\n\r\nIt'd be great to see that moved into a test. Given boost's wait() problems with 1.50-1.52 iirc, I think there's reason to be cautious.",
      "created_at" : "2015-04-10T00:24:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-91387465",
      "id" : 91387465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5964",
      "updated_at" : "2015-04-10T00:24:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91387465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
