[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40412933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40412933"
         }
      },
      "body" : "travis complains about a missing `mutable bool blockSinceLastRollingFeeUpdate;` here.",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T09:22:40Z",
      "diff_hunk" : "@@ -284,6 +284,13 @@ class CTxMemPool\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n+    mutable int64_t lastRollingFeeUpdate;\n+    mutable bool blockSinceLastRollingFeeBump;\n+    mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n+    static const double ROLLING_FEE_HALFLIFE = 60 * 60 * 24;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40412933",
      "id" : 40412933,
      "original_commit_id" : "7ef6af92b293417515a36a29fb659c9e9c5c8ed2",
      "original_position" : 16,
      "path" : "src/txmempool.h",
      "position" : 28,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40412933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "One thing that I think is maybe not great about the behavior of this, is let's say we have:\r\n\r\nTXs:\r\nA, Fee 10, Size 1\r\nB, Fee 10, Size 1\r\nC, Fee 21, Size 2\r\n\r\nIf A and B are the min in the set, submitting C should kick them out. Now, let's say B wanted to increase their fee, they would need to go above 21 to get in. As implemented, it doesn't seem to me that two TX's could both raise by 1 to, combined, provide more fee (because it seems tx's get added one at a time?)\r\n\r\nPerhaps a better compromise between these two behaviors would be to have a two part mempool, the inclusion set and the to-be ousted set and trigger a \"GC\" with some frequency. The to be ousted-set can be RBF'd or something.\r\n\r\n\r\nLastly justification on who might take advantage of such a behavior, perhaps a major exchange with a bunch of settlements out at once would want to make sure they all go through expediently and can coordinate increasing them all a hair.\r\n",
      "created_at" : "2015-09-25T12:18:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143201072",
      "id" : 143201072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-25T12:18:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143201072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "I think that my earlier comment is not fully needed, because mempool is a large multiple of block size, currently. Perhaps a more future proof implementation would allow setting:\r\n\r\n- an optional hard memory cap\r\n- a (potentially) dynamic size which is a large multiple of the current block size",
      "created_at" : "2015-09-25T13:52:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143229977",
      "id" : 143229977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-25T13:52:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143229977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453419"
         }
      },
      "body" : "You can't call this by itself anymore.  Use removeStaged",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T17:20:39Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    AssertLockHeld(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow))\n+                continue;\n+\n+            const uint256& hashnow = itnow->GetTx().GetHash();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'rootit'.\n+                good = false;\n+                break;\n+            }\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(itnow);\n+            nowfee += itnow->GetFee();\n+            nowsize += itnow->GetTxSize();\n+            nowusage += itnow->DynamicMemoryUsage();\n+            todo.pop_front();\n+\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                txiter nextit = mapTx.find(nexthash);\n+                assert(nextit != mapTx.end());\n+                if (!stage.count(nextit) && !now.count(nextit))\n+                    todo.push_back(nextit);\n+                iter++;\n+            }\n+        }\n+\n+        // Check that we aren't removing a set who's total feerate is below that of the set we're removing\n+        // ... and then add now to stage\n+        if (good && (double)nowfee * toadd.GetTxSize() <= (double)toadd.GetFee() * nowsize) {\n+            stage.insert(now.begin(), now.end());\n+            expsize -= nowusage;\n+            bestFeeRateRemoved = std::max(bestFeeRateRemoved, CFeeRate(nowfee, nowsize));\n+        }\n+        it++;\n+    }\n+\n+    if (expsize <= sizelimit) {\n+        BOOST_FOREACH(const txiter& it, stage)\n+            removeUnchecked(it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453419",
      "id" : 40453419,
      "original_commit_id" : "152dcb6abaa5c218fa98b3d71e3804585ea791a0",
      "original_position" : 152,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453689"
         }
      },
      "body" : "It doesn't make sense to bump the rolling fee for a tx that didn't get in.   A very high fee tx might not make it in if there are large packages or transactions (even of low fee rate) at the bottom of the mempool.  That's a problem in and of itself for the tx that doesn't get in, but it's even worse if you make that the new minimum relay rate.",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T17:23:33Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    AssertLockHeld(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow))\n+                continue;\n+\n+            const uint256& hashnow = itnow->GetTx().GetHash();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'rootit'.\n+                good = false;\n+                break;\n+            }\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(itnow);\n+            nowfee += itnow->GetFee();\n+            nowsize += itnow->GetTxSize();\n+            nowusage += itnow->DynamicMemoryUsage();\n+            todo.pop_front();\n+\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                txiter nextit = mapTx.find(nexthash);\n+                assert(nextit != mapTx.end());\n+                if (!stage.count(nextit) && !now.count(nextit))\n+                    todo.push_back(nextit);\n+                iter++;\n+            }\n+        }\n+\n+        // Check that we aren't removing a set who's total feerate is below that of the set we're removing\n+        // ... and then add now to stage\n+        if (good && (double)nowfee * toadd.GetTxSize() <= (double)toadd.GetFee() * nowsize) {\n+            stage.insert(now.begin(), now.end());\n+            expsize -= nowusage;\n+            bestFeeRateRemoved = std::max(bestFeeRateRemoved, CFeeRate(nowfee, nowsize));\n+        }\n+        it++;\n+    }\n+\n+    if (expsize <= sizelimit) {\n+        BOOST_FOREACH(const txiter& it, stage)\n+            removeUnchecked(it);\n+\n+        trackRemovedOrAddFailed(bestFeeRateRemoved);\n+        return true;\n+    } else {\n+        trackRemovedOrAddFailed(CFeeRate(toadd.GetFee(), toadd.GetTxSize()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453689",
      "id" : 40453689,
      "original_commit_id" : "152dcb6abaa5c218fa98b3d71e3804585ea791a0",
      "original_position" : 157,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453957"
         }
      },
      "body" : "I'd be concerned about the tradeoff here between one-time cost to stuff the mempool full of very high fee txs, and the length of time that stuffing causes the min relay rate to remain high.   Expecially with 100MB mempool, thats only about 30MB of txs.  So for example at 100k sat / kb fee rate, for 30 BTC you can knock the min relay fee up to 100k satoshis and the effect lasts for some time.",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T17:26:05Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453957",
      "id" : 40453957,
      "original_commit_id" : "152dcb6abaa5c218fa98b3d71e3804585ea791a0",
      "original_position" : 61,
      "path" : "src/txmempool.cpp",
      "position" : 61,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40453957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40472178"
         }
      },
      "body" : "Hmm? No a very high fee tx will always evict transactions with lower feerate even if it ends up evicting a very large package to do so.",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T20:29:02Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    AssertLockHeld(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow))\n+                continue;\n+\n+            const uint256& hashnow = itnow->GetTx().GetHash();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'rootit'.\n+                good = false;\n+                break;\n+            }\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(itnow);\n+            nowfee += itnow->GetFee();\n+            nowsize += itnow->GetTxSize();\n+            nowusage += itnow->DynamicMemoryUsage();\n+            todo.pop_front();\n+\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                txiter nextit = mapTx.find(nexthash);\n+                assert(nextit != mapTx.end());\n+                if (!stage.count(nextit) && !now.count(nextit))\n+                    todo.push_back(nextit);\n+                iter++;\n+            }\n+        }\n+\n+        // Check that we aren't removing a set who's total feerate is below that of the set we're removing\n+        // ... and then add now to stage\n+        if (good && (double)nowfee * toadd.GetTxSize() <= (double)toadd.GetFee() * nowsize) {\n+            stage.insert(now.begin(), now.end());\n+            expsize -= nowusage;\n+            bestFeeRateRemoved = std::max(bestFeeRateRemoved, CFeeRate(nowfee, nowsize));\n+        }\n+        it++;\n+    }\n+\n+    if (expsize <= sizelimit) {\n+        BOOST_FOREACH(const txiter& it, stage)\n+            removeUnchecked(it);\n+\n+        trackRemovedOrAddFailed(bestFeeRateRemoved);\n+        return true;\n+    } else {\n+        trackRemovedOrAddFailed(CFeeRate(toadd.GetFee(), toadd.GetTxSize()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472178",
      "id" : 40472178,
      "original_commit_id" : "152dcb6abaa5c218fa98b3d71e3804585ea791a0",
      "original_position" : 157,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40472178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40472516"
         }
      },
      "body" : "Sure, the ROLLING_FEE_HALFLIFE could be dropped a lot. I had originally figured it based on decreasing the mempool right away, but since it now waits at least for one block before it lets the min feerate drop, I think it probably could be dropped a lot. Maybe we even dont want an exponential decrease either.",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-25T20:32:56Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472516",
      "id" : 40472516,
      "original_commit_id" : "152dcb6abaa5c218fa98b3d71e3804585ea791a0",
      "original_position" : 61,
      "path" : "src/txmempool.cpp",
      "position" : 61,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40472516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@JeremyRubin No, you're right, this breaks relaying of child-pays-for-parent when mempool grows large (assuming the package is not already present). The easy solution is to allow fee calulation of packages together when processing orphans, and then you send your package in reverse-dependancy order.",
      "created_at" : "2015-09-25T20:38:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143347863",
      "id" : 143347863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-25T20:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143347863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt re: my comment on high fee txs.  I see now, you aren't doing the overall fee check in order to boot a package.  I just assumed the StageTrimToSize logic was the same.  So how do you think about free relay then?  Could you write up a quick intro describing the algorithm as it would help to know how you think about it.  Is the idea that all even though the tx causing the eviction hasn't covered the fees to pay for the evicted packages relay, by boosting the minRelayRate you're essentially forcing all future transactions to do so?\r\n\r\nIt's an interesting idea, one question is how big a sweet spot there is between having the half-life too long  and worrying about the \"cram relayFee high all of a sudden\" attack vs having it too low and perhaps having some vague concern about free relay.\r\n\r\nWhy does your increased relay fee only apply to low priority transactions?  I think it has to apply to all.\r\n",
      "created_at" : "2015-09-25T23:45:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143378272",
      "id" : 143378272,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-25T23:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143378272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@morcos see the description of the main commit:\r\n\"This limits mempool by walking the lowest-feerate txn in mempool\r\nwhen it goes over -maxmempool in size, removing them.\r\nIt then sets the minimum relay fee to the maximum fee\r\ntransaction-and-dependant-set it removed, plus the default minimum\r\nrelay fee. After the next block is received, the minimum relay fee\r\nis allowed to decrease exponentially (with a half-life of one day).\r\n\r\nThe minimum -maxmempool size is 10*-limitdescendantsize, as it is\r\neasy for an attacker to play games with the cheapest\r\n-limitdescendantsize transactions.\r\n\r\nNote that this effectively disables high-priority transaction relay\r\niff the mempool becomes large.\"\r\n\r\nAs for your specific questions: Yes, the idea is that you can relay some cheap crap for a bit, driving up the min relay fee by the default min relay fee each time (which was always meant as a \"this is what it costs to send a transaction around the network\" constant, though it hasn't always done a good job of being accurate there).\r\n\r\nThe increased relay fee will effectively apply to low priority transactions, as they will be the package selected by the final TrimToSize call. Thus, priority-based relay will effectively remain enabled until people's mempools fill up.",
      "created_at" : "2015-09-26T00:25:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143382724",
      "id" : 143382724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-26T00:25:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143382724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40487766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40487766"
         }
      },
      "body" : "need to pop_front() before continuing, otherwise its an infinite loop",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-26T00:51:29Z",
      "diff_hunk" : "@@ -837,3 +845,109 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    LOCK(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow))\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40487766",
      "id" : 40487766,
      "original_commit_id" : "0ae46697fecbb524ec056ace7005e1c291556c72",
      "original_position" : 113,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40487766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "But in particular the increased relay fee does NOT apply to high priority txs?  That's what I don't understand.  It seems you could use the same stable of high priority inputs over and over to gain free relay.",
      "created_at" : "2015-09-26T00:57:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143386645",
      "id" : 143386645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-26T00:57:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143386645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40488841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40488841"
         }
      },
      "body" : "LOL, oops...",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-26T01:53:09Z",
      "diff_hunk" : "@@ -837,3 +845,109 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    LOCK(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow))\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40488841",
      "id" : 40488841,
      "original_commit_id" : "0ae46697fecbb524ec056ace7005e1c291556c72",
      "original_position" : 113,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40488841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Hmm, indeed, there is an attack there where you can cause lots of relay for free there. You cant really get much into the mempool (only up to the max package size) and you do have to increase the feerate each time, but only by one satoshi per kb...",
      "created_at" : "2015-09-26T01:59:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143390920",
      "id" : 143390920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-26T01:59:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143390920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40495966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40495966"
         }
      },
      "body" : "this is a bug.  rootit is an iterator by txid hash, so decrementing it puts you at a completely random transaction.\r\nthe base iterator needs to be decremented before projecting.\r\n\r\n@sdaftuar and i didn't like this oddness, so the first commit in #6557 reverses the feerate sort.  there was no reason to do it the other way in the first place.  maybe you should just grab that?",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-26T17:30:15Z",
      "diff_hunk" : "@@ -837,3 +845,111 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    LOCK(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it.base());\n+        rootit--;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40495966",
      "id" : 40495966,
      "original_commit_id" : "22d846f57374ffc4a71eaf942d3c9ccd252ae956",
      "original_position" : 94,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40495966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40499037"
         }
      },
      "body" : "Keep in mind this is a ratio of 2 different measurements.  Serialized transaction size for descendant limit and mempool memory usage for maxmempool.  There is about a 3x ratio between those measurements.  So a 25MB mempool would actually only fit about 3 maximum sized packages...  (I used 4x as a conservative ratio, and similarly wanted a 10x difference so ended up with 40x between the arguments.)",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-26T22:22:38Z",
      "diff_hunk" : "@@ -841,6 +842,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n+    // -mempoollimit limits\n+    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 10)\n+        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 100));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499037",
      "id" : 40499037,
      "original_commit_id" : "22d846f57374ffc4a71eaf942d3c9ccd252ae956",
      "original_position" : 16,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40499037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "What's wrong with XT's method of discarding a random transaction so that you can't predictably  manipulate the mempool?",
      "created_at" : "2015-09-26T22:30:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143500720",
      "id" : 143500720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-26T22:30:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143500720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6762681?v=3",
         "events_url" : "https://api.github.com/users/NanoAkron/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NanoAkron/followers",
         "following_url" : "https://api.github.com/users/NanoAkron/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NanoAkron/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NanoAkron",
         "id" : 6762681,
         "login" : "NanoAkron",
         "organizations_url" : "https://api.github.com/users/NanoAkron/orgs",
         "received_events_url" : "https://api.github.com/users/NanoAkron/received_events",
         "repos_url" : "https://api.github.com/users/NanoAkron/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NanoAkron/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NanoAkron/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NanoAkron"
      }
   },
   {
      "body" : "@NanoAkron It makes it trivial to DoS the network, among many other issues.",
      "created_at" : "2015-09-26T22:36:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143501742",
      "id" : 143501742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6722",
      "updated_at" : "2015-09-26T22:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143501742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40499174"
         }
      },
      "body" : "Oops, yea, my notes to fix this from earlier were saying do something like 100MB, for this reason...Last time I ignore my notes and just do what I think when I'm sick :/",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-26T22:38:15Z",
      "diff_hunk" : "@@ -841,6 +842,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n+    // -mempoollimit limits\n+    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 10)\n+        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 100));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499174",
      "id" : 40499174,
      "original_commit_id" : "22d846f57374ffc4a71eaf942d3c9ccd252ae956",
      "original_position" : 16,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-27T03:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40499174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40824946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40824946"
         }
      },
      "body" : "These functions will be called every time through even if the mempool wasn't full to start with",
      "commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "created_at" : "2015-09-30T17:36:38Z",
      "diff_hunk" : "@@ -837,3 +845,110 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee() const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / ROLLING_FEE_HALFLIFE);\n+        lastRollingFeeUpdate = time;\n+    }\n+    return CFeeRate(rollingMinimumFeeRate);\n+}\n+\n+void CTxMemPool::trackRemovedOrAddFailed(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+bool CTxMemPool::TrimToSize(size_t sizelimit, const CTxMemPoolEntry& toadd) {\n+    LOCK(cs);\n+\n+    CFeeRate bestFeeRateRemoved;\n+    setEntries stage;\n+    std::set<uint256> protect;\n+    BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin)\n+        protect.insert(in.prevout.hash);\n+\n+    size_t expsize = DynamicMemoryUsage() + toadd.DynamicMemoryUsage(); // Track the expected resulting memory usage of the mempool.\n+    indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n+    // Iterate from lowest feerate to highest feerate in the mempool:\n+    while (expsize > sizelimit && it != mapTx.get<1>().end()) {\n+        if (CompareTxMemPoolEntryByFee()(*it, toadd)) {\n+            // If the transaction's feerate is worse than what we're looking for, we have processed everything in the mempool\n+            // that could improve the staged set. If we don't have an acceptable solution by now, bail out.\n+            break;\n+        }\n+        txiter rootit = mapTx.project<0>(it);\n+        if (stage.count(rootit)) {\n+            // If the transaction is already staged for deletion, we know its descendants are already processed, so skip it.\n+            it++;\n+            continue;\n+        }\n+\n+        // Iterate breadth-first over all descendants of transaction 'rootit'...\n+        std::deque<txiter> todo; // List of hashes that we still need to process (descendants of 'rootit').\n+        setEntries now; // Set of tx entries that will need to be added to stage if 'rootit' is included.\n+        CAmount nowfee = 0; // Sum of the fees in 'now'.\n+        size_t nowsize = 0; // Sum of the tx sizes in 'now'.\n+        size_t nowusage = 0; // Sum of the memory usages of transactions in 'now'.\n+        todo.push_back(rootit); // Add 'rootit' to the todo list, to initiate processing its children.\n+        bool good = true; // Whether including 'rootit' (and all its descendants) is a good idea.\n+\n+        while (!todo.empty()) {\n+            const txiter& itnow = todo.front();\n+            if (now.count(itnow)) {\n+                todo.pop_front();\n+                continue;\n+            }\n+\n+            const uint256& hashnow = itnow->GetTx().GetHash();\n+            if (protect.count(hashnow)) {\n+                // If this transaction is in the protected set, we're done with 'rootit'.\n+                good = false;\n+                break;\n+            }\n+            // Add 'hashnow' to the 'now' set, and update its statistics.\n+            now.insert(itnow);\n+            nowfee += itnow->GetFee();\n+            nowsize += itnow->GetTxSize();\n+            nowusage += itnow->DynamicMemoryUsage();\n+            todo.pop_front();\n+\n+            // Find dependencies of 'hashnow' and them to todo.\n+            std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hashnow, 0));\n+            while (iter != mapNextTx.end() && iter->first.hash == hashnow) {\n+                const uint256& nexthash = iter->second.ptx->GetHash();\n+                txiter nextit = mapTx.find(nexthash);\n+                assert(nextit != mapTx.end());\n+                if (!stage.count(nextit) && !now.count(nextit))\n+                    todo.push_back(nextit);\n+                iter++;\n+            }\n+        }\n+\n+        // Check that we aren't removing a set who's total feerate is below that of the set we're removing\n+        // ... and then add now to stage\n+        if (good && (double)nowfee * toadd.GetTxSize() <= (double)toadd.GetFee() * nowsize) {\n+            stage.insert(now.begin(), now.end());\n+            expsize -= nowusage;\n+            bestFeeRateRemoved = std::max(bestFeeRateRemoved, CFeeRate(nowfee, nowsize));\n+        }\n+        it++;\n+    }\n+\n+    if (expsize <= sizelimit) {\n+        RemoveStaged(stage);\n+        trackRemovedOrAddFailed(bestFeeRateRemoved);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40824946",
      "id" : 40824946,
      "original_commit_id" : "104c63dad6c3b0a463df1829fe41643f99ac6bd5",
      "original_position" : 153,
      "path" : "src/txmempool.cpp",
      "position" : 153,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6722",
      "updated_at" : "2015-09-30T17:36:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40824946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   }
]
