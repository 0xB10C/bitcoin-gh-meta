{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This is really a continuation of https://github.com/bitcoin/bitcoin/pull/10498\r\n\r\nIn the words of @practicalswift:\r\n```\r\nA C-style cast is equivalent to try casting in the following order:\r\n\r\n    const_cast(...)\r\n    static_cast(...)\r\n    const_cast(static_cast(...))\r\n    reinterpret_cast(...)\r\n    const_cast(reinterpret_cast(...))\r\n\r\nBy using static_cast<T>(...) explicitly we avoid the possibility of an unintentional and \r\ndangerous reinterpret_cast. Furthermore static_cast<T>(...) allows for easier grepping of casts.\r\n\r\nFor a more thorough discussion, see \"ES.49: If you must use a cast, use a named cast\"\r\nin the C++ Core Guidelines (Stroustrup & Sutter).\r\n```\r\n\r\nModern tooling, specifically `-Wold-style-cast` can enable us to enforce never using C-style casts. This PR attempts to accomplish this. I believe this is especially important due to the number of C-style casts the codebase is currently being used as a reinterpret_cast. reinterpret_casts are especially dangerous, and should never be done via C-style casts.\r\n\r\nOf course, this PR is quite large, and will cause conflicts with other PRs. IMO, the ability to grep for these casts is sufficient enough justification for this PR. When adding in the advantage of not having unclear reinterpret casts, I think it's clear the benefits of this changes outweighs the cost of review / conflict. The reason as described by the CppCoreGuidelines \"Readability. Error avoidance. Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors.\"\r\n\r\nMy understanding is that 8171ccb0f1f827f5496bb5ac459ea26a0c1feedd...28888636bc531b1fe426896e94a6db29e28aaa10 will need to be merged into [univalue](https://github.com/bitcoin-core/univalue-subtree), minisketch (not sure upstream), and [leveldb](https://github.com/bitcoin-core/leveldb-subtree). Can someone let me know where minisketch commit should be merged into? Also please confirm the univalue and leveldb commits should go where I indicated.\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/comments",
   "created_at" : "2021-12-18T04:41:01Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/23810",
   "id" : 1083745414,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII584wB0k4",
   "number" : 23810,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/23810.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23810",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/23810.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23810"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/timeline",
   "title" : "refactor: destroy all C-style casts; use modern C++ casts, enforce via `-Wold-style-cast`",
   "updated_at" : "2021-12-18T04:44:23Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23810",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
      "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
      "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
      "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
      "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/PastaPastaPasta",
      "id" : 6443210,
      "login" : "PastaPastaPasta",
      "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
      "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
      "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
      "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/PastaPastaPasta"
   }
}
