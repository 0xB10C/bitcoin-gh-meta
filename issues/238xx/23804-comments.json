[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23804#discussion_r771593019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23804"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you check that the wtxid inside WITNESS_SWAPPED is the wtxid of child1?",
      "commit_id" : "fcc2f91ed48b748c19cb99fad40f57de6cd3a445",
      "created_at" : "2021-12-17T18:13:04Z",
      "diff_hunk" : "@@ -327,4 +327,122 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n }\n+\n+// Tests for packages containing transactions that have same-txid-different-witness equivalents in\n+// the mempool.\n+BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    // Transactions with a same-txid-different-witness transaction in the mempool should be swapped.\n+    CScript witnessScript = CScript() << OP_DROP << OP_TRUE;\n+    CScript scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ scriptPubKey,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef ptx_parent = MakeTransactionRef(mtx_parent);\n+\n+    // Make two children with the same txid but different witnesses.\n+    CScriptWitness witness1;\n+    witness1.stack.push_back(std::vector<unsigned char>(1));\n+    witness1.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+\n+    CScriptWitness witness2(witness1);\n+    witness2.stack.push_back(std::vector<unsigned char>(2));\n+    witness2.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CMutableTransaction mtx_child1;\n+    mtx_child1.nVersion = 1;\n+    mtx_child1.vin.resize(1);\n+    mtx_child1.vin[0].prevout.hash = ptx_parent->GetHash();\n+    mtx_child1.vin[0].prevout.n = 0;\n+    mtx_child1.vin[0].scriptSig = CScript();\n+    mtx_child1.vin[0].scriptWitness = witness1;\n+    mtx_child1.vout.resize(1);\n+    mtx_child1.vout[0].nValue = CAmount(48 * COIN);\n+    mtx_child1.vout[0].scriptPubKey = child_locking_script;\n+\n+    CMutableTransaction mtx_child2{mtx_child1};\n+    mtx_child2.vin[0].scriptWitness = witness2;\n+\n+    CTransactionRef ptx_child1 = MakeTransactionRef(mtx_child1);\n+    CTransactionRef ptx_child2 = MakeTransactionRef(mtx_child2);\n+\n+    // child1 and child2 have the same txid\n+    BOOST_CHECK_EQUAL(ptx_child1->GetHash(), ptx_child2->GetHash());\n+    // child1 and child2 have different wtxids\n+    BOOST_CHECK(ptx_child1->GetWitnessHash() != ptx_child2->GetWitnessHash());\n+\n+    // Try submitting Package1{parent, child1} and Package2{parent, child2} where the children are\n+    // same-txid-different-witness.\n+    {\n+        const auto submit_witness1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                       {ptx_parent, ptx_child1}, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_witness1.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_witness1.m_state.GetRejectReason());\n+        auto it_parent1 = submit_witness1.m_tx_results.find(ptx_parent->GetWitnessHash());\n+        auto it_child1 = submit_witness1.m_tx_results.find(ptx_child1->GetWitnessHash());\n+        BOOST_CHECK(it_parent1 != submit_witness1.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(it_parent1->second.m_state.IsValid(),\n+                            \"Transaction unexpectedly failed: \" << it_parent1->second.m_state.GetRejectReason());\n+        BOOST_CHECK(it_child1 != submit_witness1.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(it_child1->second.m_state.IsValid(),\n+                            \"Transaction unexpectedly failed: \" << it_child1->second.m_state.GetRejectReason());\n+\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_child1->GetHash())));\n+\n+        const auto submit_witness2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                       {ptx_parent, ptx_child2}, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_witness2.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_witness2.m_state.GetRejectReason());\n+        auto it_parent2_deduped = submit_witness2.m_tx_results.find(ptx_parent->GetWitnessHash());\n+        auto it_child2 = submit_witness2.m_tx_results.find(ptx_child2->GetWitnessHash());\n+        BOOST_CHECK(it_parent2_deduped != submit_witness2.m_tx_results.end());\n+        BOOST_CHECK(it_parent2_deduped->second.m_result_type == MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK(it_child2 != submit_witness2.m_tx_results.end());\n+        BOOST_CHECK(it_child2->second.m_result_type == MempoolAcceptResult::ResultType::WITNESS_SWAPPED);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23804#discussion_r771593019",
      "id" : 771593019,
      "line" : 408,
      "node_id" : "PRRC_kwDOABII584t_ZM7",
      "original_commit_id" : "fcc2f91ed48b748c19cb99fad40f57de6cd3a445",
      "original_line" : 408,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 82,
      "pull_request_review_id" : 835515377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23804",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-17T18:15:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23804#discussion_r771593717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23804"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593717"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ":clap: ",
      "commit_id" : "fcc2f91ed48b748c19cb99fad40f57de6cd3a445",
      "created_at" : "2021-12-17T18:14:30Z",
      "diff_hunk" : "@@ -327,4 +327,122 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n }\n+\n+// Tests for packages containing transactions that have same-txid-different-witness equivalents in\n+// the mempool.\n+BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    // Transactions with a same-txid-different-witness transaction in the mempool should be swapped.\n+    CScript witnessScript = CScript() << OP_DROP << OP_TRUE;\n+    CScript scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ scriptPubKey,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef ptx_parent = MakeTransactionRef(mtx_parent);\n+\n+    // Make two children with the same txid but different witnesses.\n+    CScriptWitness witness1;\n+    witness1.stack.push_back(std::vector<unsigned char>(1));\n+    witness1.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+\n+    CScriptWitness witness2(witness1);\n+    witness2.stack.push_back(std::vector<unsigned char>(2));\n+    witness2.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CMutableTransaction mtx_child1;\n+    mtx_child1.nVersion = 1;\n+    mtx_child1.vin.resize(1);\n+    mtx_child1.vin[0].prevout.hash = ptx_parent->GetHash();\n+    mtx_child1.vin[0].prevout.n = 0;\n+    mtx_child1.vin[0].scriptSig = CScript();\n+    mtx_child1.vin[0].scriptWitness = witness1;\n+    mtx_child1.vout.resize(1);\n+    mtx_child1.vout[0].nValue = CAmount(48 * COIN);\n+    mtx_child1.vout[0].scriptPubKey = child_locking_script;\n+\n+    CMutableTransaction mtx_child2{mtx_child1};\n+    mtx_child2.vin[0].scriptWitness = witness2;\n+\n+    CTransactionRef ptx_child1 = MakeTransactionRef(mtx_child1);\n+    CTransactionRef ptx_child2 = MakeTransactionRef(mtx_child2);\n+\n+    // child1 and child2 have the same txid\n+    BOOST_CHECK_EQUAL(ptx_child1->GetHash(), ptx_child2->GetHash());\n+    // child1 and child2 have different wtxids\n+    BOOST_CHECK(ptx_child1->GetWitnessHash() != ptx_child2->GetWitnessHash());\n+\n+    // Try submitting Package1{parent, child1} and Package2{parent, child2} where the children are\n+    // same-txid-different-witness.\n+    {\n+        const auto submit_witness1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                       {ptx_parent, ptx_child1}, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_witness1.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_witness1.m_state.GetRejectReason());\n+        auto it_parent1 = submit_witness1.m_tx_results.find(ptx_parent->GetWitnessHash());\n+        auto it_child1 = submit_witness1.m_tx_results.find(ptx_child1->GetWitnessHash());\n+        BOOST_CHECK(it_parent1 != submit_witness1.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(it_parent1->second.m_state.IsValid(),\n+                            \"Transaction unexpectedly failed: \" << it_parent1->second.m_state.GetRejectReason());\n+        BOOST_CHECK(it_child1 != submit_witness1.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(it_child1->second.m_state.IsValid(),\n+                            \"Transaction unexpectedly failed: \" << it_child1->second.m_state.GetRejectReason());\n+\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_child1->GetHash())));\n+\n+        const auto submit_witness2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                       {ptx_parent, ptx_child2}, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_witness2.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_witness2.m_state.GetRejectReason());\n+        auto it_parent2_deduped = submit_witness2.m_tx_results.find(ptx_parent->GetWitnessHash());\n+        auto it_child2 = submit_witness2.m_tx_results.find(ptx_child2->GetWitnessHash());\n+        BOOST_CHECK(it_parent2_deduped != submit_witness2.m_tx_results.end());\n+        BOOST_CHECK(it_parent2_deduped->second.m_result_type == MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK(it_child2 != submit_witness2.m_tx_results.end());\n+        BOOST_CHECK(it_child2->second.m_result_type == MempoolAcceptResult::ResultType::WITNESS_SWAPPED);\n+\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_child2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_child2->GetWitnessHash())));\n+    }\n+\n+    // Try submitting Package1{child2, grandchild} where child2 is same-txid-different-witness as\n+    // the in-mempool transaction, child1. Since child1 exists in the mempool and its outputs are\n+    // available, child2 should be swapped and granchild should be accepted.\n+    //\n+    // This tests a potential censorship vector in which an attacker broadcasts a competing package\n+    // where a parent's witness is mutated. The honest package should be accepted despite the fact\n+    // that we don't allow witness replacement.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23804#discussion_r771593717",
      "id" : 771593717,
      "line" : 420,
      "node_id" : "PRRC_kwDOABII584t_ZX1",
      "original_commit_id" : "fcc2f91ed48b748c19cb99fad40f57de6cd3a445",
      "original_line" : 420,
      "original_position" : 94,
      "original_start_line" : 414,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 94,
      "pull_request_review_id" : 835515377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23804",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593717/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 414,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-17T18:15:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771593717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fcc2f91ed48b748c19cb99fad40f57de6cd3a445",
      "created_at" : "2021-12-17T18:30:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23804#issuecomment-996932544",
      "id" : 996932544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23804",
      "node_id" : "IC_kwDOABII5847a_vA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996932544/reactions"
      },
      "updated_at" : "2021-12-17T18:30:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996932544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
