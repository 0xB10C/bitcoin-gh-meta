[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16722](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16722.html) (build: Disable warnings for leveldb subtree by default by hebasto)\n* [#16710](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16710.html) (build: Enable -Wsuggest-override if available by hebasto)\n* [#16667](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16667.html) (build: remove mingw linker workaround from win gitian descriptor by fanquake)\n* [#16392](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16392.html) (WIP build: macOS toolchain update by fanquake)\n* [#16367](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16367.html) (Multiprocess build support by ryanofsky)\n* [#16324](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16324.html) (Get cs_main out of the critical path in ProcessMessages by TheBlueMatt)\n* [#16323](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16323.html) (Call ProcessNewBlock() asynchronously by TheBlueMatt)\n* [#15759](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15759.html) (p2p: Add 2 outbound block-relay-only connections by sdaftuar)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n* [#15218](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15218.html) (validation: Flush state after initial sync by andrewtoth)\n* [#10102](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10102.html) ([experimental] Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-29T23:53:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526402501",
      "id" : 526402501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjQwMjUwMQ==",
      "updated_at" : "2019-08-30T07:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526402501",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319390967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16762"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319390967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "AFAICS `--start-group` is not supported in clang (https://bitcoinbuilds.org/index.php?ansilog=6ccfb93d-3437-41c0-99d4-3b6653264739.log#l1705)",
      "commit_id" : "cf221a2410a066fa95f526be343b8fa4c63d5184",
      "created_at" : "2019-08-30T07:38:07Z",
      "diff_hunk" : "@@ -529,7 +537,7 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n bitcoind_SOURCES = bitcoind.cpp\n bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+bitcoind_LDFLAGS = -Wl,--start-group $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319390967",
      "id" : 319390967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTM5MDk2Nw==",
      "original_commit_id" : "cf221a2410a066fa95f526be343b8fa4c63d5184",
      "original_position" : 38,
      "path" : "src/Makefile.am",
      "position" : 38,
      "pull_request_review_id" : 281872721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16762",
      "updated_at" : "2019-08-30T07:38:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319390967",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319393006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16762"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319393006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jonasschnelli Yes `ld` on macOS doesn't support `--start-group` or `--end-group`. This was a bit of a hack to fix a circular dependency issue Matt was seeing on his Debian machine. If you want to compile on macOS you should just be able to drop the `-Wl,--start-group` additions, as that has been working for me. We'll need to fix this **properly** soon.",
      "commit_id" : "cf221a2410a066fa95f526be343b8fa4c63d5184",
      "created_at" : "2019-08-30T07:44:25Z",
      "diff_hunk" : "@@ -529,7 +537,7 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n bitcoind_SOURCES = bitcoind.cpp\n bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+bitcoind_LDFLAGS = -Wl,--start-group $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319393006",
      "id" : 319393006,
      "in_reply_to_id" : 319390967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTM5MzAwNg==",
      "original_commit_id" : "cf221a2410a066fa95f526be343b8fa4c63d5184",
      "original_position" : 38,
      "path" : "src/Makefile.am",
      "position" : 38,
      "pull_request_review_id" : 281875349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16762",
      "updated_at" : "2019-08-30T07:44:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319393006",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Interesting idea: cautious concept ACK -- more redundancy is good and it is hard to see how this would make us worse off in any way as long as the existing P2P logic is kept unchanged. (Intentionally not commenting on the implementation and more specifically the pros and cons of pulling in Rust code: that is an implementation detail that I'm sure will be discussed separately post concept ACK/NACK.)\r\n\r\nCensorship scenarios worth thinking about:\r\n\r\nEven if we do the over-REST block downloads over HTTPS it should be noted that the TLS handshake leaks the hostname of the connected to service to passive eavesdroppers. (Unless TLS 1.3 + Encrypted SNI is used: super rare in practice though.)\r\n\r\nThe hostname is obviously also leaked when doing the DNS lookup. (Unless DoH (DNS over HTTPS) or DoT (DNS over TLS) is used: quite rare in practice.)\r\n\r\nThis allows for active censorship attacks if the hostnames used are **only**  used for Bitcoin purposes (such as in the `cloudflare.deanonymizingseed.com` example â I understand it is just used here as an example).\r\n\r\n(The same obviously goes for the IP-address used: if the IP-address connected to is only used for Bitcoin purposes then access to that IP-address could trivially be null routed without any non-Bitcoin users noticing.)\r\n\r\nI guess one way to achieve (partial) censorship resistance is to download over HTTPS URLs where the hostnames used are mostly used for non-Bitcoin purposes (such as `github.com` â just used here as an example: I'm sure we can come up with other examples). That would leak the hostname but since the hostname and the IP address is used for other purposes it would still be hard for an attacker to block it without having non-Bitcoin users complain.\r\n\r\nAnother route would be to use TLS 1.3 + Encrypted SNI + DoH/DoT to connect to a service whose IP-address(es) are used mostly for non-Bitcoin purposes (such as CloudFlare which luckily supports both TLS 1.3 and Encrypted SNI). That wouldn't leak the hostname and the IP-address would be hard to null route for an attacker without having non-Bitcoin users complain.",
      "created_at" : "2019-08-30T12:46:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526588120",
      "id" : 526588120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjU4ODEyMA==",
      "updated_at" : "2019-08-30T13:13:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526588120",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Intentionally not commenting on the implementation and more specifically the pros and cons of pulling in Rust code: that is an implementation detail that I'm sure will be discussed separately post concept ACK/NACK\r\n\r\nRight, there's a few things that would need to happen to get this in mergeable state (notably buildsystem things), so no need for that just yet.\r\n\r\n> Censorship scenarios worth thinking about:\r\n\r\nRight, two things I'd like to support in the blocks-over-REST module: domain fronting avoids most of the gnarly issues with SNI/DNS lookups breaking your privacy, though sadly many providers don't like it anymore, and Tor support, possibly even with some default onion service recommended as a backup cause privacy is less of a concern there.\r\n\r\nI'd also like to build a whole second P2P implementation (though with an explicit goal of being inefficient and simple, with the same trick as here where you wait 30 seconds before deciding to download anything to avoid wasting bandwidth), but first need to land some bit of rust downloading, and this seemed like an easier target.",
      "created_at" : "2019-08-30T18:33:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526704470",
      "id" : 526704470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcwNDQ3MA==",
      "updated_at" : "2019-08-30T18:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526704470",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "But why Rust not C++?",
      "created_at" : "2019-08-30T19:46:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526725811",
      "id" : 526725811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcyNTgxMQ==",
      "updated_at" : "2019-08-30T19:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526725811",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> But why Rust not C++?\r\n\r\nBecause we can trivially turn on compile-time checking preventing a ton of classes of vulnerabilities (especially for network-facing code), and runtime checking for many other classes (like buffer overflows, at least those the compiler can't prove aren't possible).",
      "created_at" : "2019-08-31T05:59:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526803517",
      "id" : 526803517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjgwMzUxNw==",
      "updated_at" : "2019-08-31T05:59:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526803517",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm fairly Concept ACK on this. It's been in discussion for a little while, and I'm pretty sure it came up at the last Core dev meetup as well?\r\n\r\n> But why Rust not C++?\r\n\r\n@kristapsk This PR isn't really the place to have that discussion and is only going to distract from what's actually trying to be achieved. Although Matt points out one big advantage:\r\n\r\n> plus we can use compile-time checks to catch any overflows and memory corruption bugs to reduce review burden.\r\n\r\n\r\nIf you'd like to discuss Rust inside Bitcoin Core further, I'd suggest taking a look at #15798. Here are Cory's thoughts on Rust from that thread:\r\n\r\n> Why rust? I don't know. Maybe not. But I think it's a fair assumption to say that Rust code will eventually end up in Bitcoin Core as the result of adding a new dependency. Adoption is happing quickly. So, I think it prudent to look ahead and not only be prepared, but actively help usher it in. Already I have a few things that I would like to work on and upstream to rust-lang to make our integration nicer, and I assume that more will be uncovered as it actually gets used.\r\n\r\nI built and tested that this functions using the instructions above. The backup downloader kicked off after a 10 minute wait\r\n```bash\r\nsrc/bitcoind -blockfetchrest=http://cloudflare.deanonymizingseed.com/rest/ -connect=0\r\n\r\n2019-08-31T05:37:06Z nBestHeight = 311015\r\n2019-08-31T05:37:06Z init message: Loading P2P addresses...\r\n2019-08-31T05:37:06Z Imported mempool transactions from disk: 0 succeeded, 0 failed, 0 expired, 0 already there\r\n2019-08-31T05:37:06Z Loaded 63409 addresses from peers.dat  159ms\r\n2019-08-31T05:37:06Z init message: Starting network threads...\r\n2019-08-31T05:37:06Z DNS seeding disabled\r\n2019-08-31T05:37:06Z net thread start\r\n2019-08-31T05:37:06Z msghand thread start\r\n2019-08-31T05:37:06Z addcon thread start\r\n2019-08-31T05:37:06Z init message: Done loading\r\n2019-08-31T05:47:10Z Synchronizing blockheaders, height: 313014 (~53.91%)\r\n2019-08-31T05:47:13Z Synchronizing blockheaders, height: 315013 (~54.23%)\r\n2019-08-31T05:47:15Z Synchronizing blockheaders, height: 317012 (~54.55%)\r\n2019-08-31T05:47:17Z Synchronizing blockheaders, height: 319011 (~54.87%)\r\n< snip >\r\n2019-08-31T05:52:27Z Synchronizing blockheaders, height: 574883 (~97.17%)\r\n2019-08-31T05:52:34Z Synchronizing blockheaders, height: 576882 (~97.49%)\r\n2019-08-31T05:52:36Z Synchronizing blockheaders, height: 578881 (~97.81%)\r\n2019-08-31T05:52:39Z Synchronizing blockheaders, height: 580880 (~98.14%)\r\n2019-08-31T05:52:41Z Synchronizing blockheaders, height: 582879 (~98.46%)\r\n2019-08-31T05:52:44Z Synchronizing blockheaders, height: 584878 (~98.76%)\r\n2019-08-31T05:52:47Z Synchronizing blockheaders, height: 586877 (~99.09%)\r\n2019-08-31T05:52:49Z Synchronizing blockheaders, height: 588876 (~99.40%)\r\n2019-08-31T05:52:56Z Synchronizing blockheaders, height: 590875 (~99.73%)\r\n2019-08-31T05:52:59Z Synchronizing blockheaders, height: 592551 (~100.00%)\r\n2019-08-31T05:53:35Z Pre-allocating up to position 0x3000000 in blk00158.dat\r\n2019-08-31T05:53:35Z Pre-allocating up to position 0x100000 in rev00158.dat\r\n2019-08-31T05:53:35Z UpdateTip: new best=0000000000000000246039d52e90fb6b7cd442dda19861fb948c28e3a44f7a4e height=311016 version=0x00000002 log2_work=79.744641 tx=42644694 date='2014-07-16T13:51:22Z' progress=0.095646 cache=0.5MiB(3475txo)\r\n2019-08-31T05:53:38Z UpdateTip: new best=000000000000000014c552ced25645452a0b8632753e9288e2decedd273c5828 height=311017 version=0x00000002 log2_work=79.744747 tx=42645541 date='2014-07-16T14:10:17Z' progress=0.095648 cache=1.0MiB(7067txo)\r\n2019-08-31T05:53:40Z UpdateTip: new best=0000000000000000260ef522f4875fb0d5207e4e3ac97ce373a47209bcee52b6 height=311018 version=0x00000002 log2_work=79.744853 tx=42645990 date='2014-07-16T14:18:18Z' progress=0.095649 cache=1.2MiB(8621txo)\r\n2019-08-31T05:53:42Z UpdateTip: new best=0000000000000000007dabdebadfde7beaef31d13133600d0d88695146e2fac6 height=311019 version=0x00000002 log2_work=79.744959 tx=42646068 date='2014-07-16T14:19:50Z' progress=0.095649 cache=1.2MiB(8821txo)\r\n2019-08-31T05:53:45Z UpdateTip: new best=00000000000000001fc78d459e2480177ceea92d53f75cdbd856501b60cbdc3a height=311020 version=0x00000002 log2_work=79.745065 tx=42646933 date='2014-07-16T14:34:32Z' progress=0.095651 cache=1.6MiB(11938txo)\r\n< snip >\r\n2019-08-31T06:00:41Z UpdateTip: new best=000000000000000017de2992c0de3e98d711253582fa7ee626645e395e4fd0e5 height=311697 version=0x00000002 log2_work=79.815121 tx=42899222 date='2014-07-20T16:20:21Z' progress=0.096217 cache=67.4MiB(497634txo)\r\n2019-08-31T06:00:44Z UpdateTip: new best=000000000000000022aeedbb76913a3666d997897c23efc8e92fe38ec79728a7 height=311698 version=0x00000002 log2_work=79.815222 tx=42899470 date='2014-07-20T16:25:14Z' progress=0.096217 cache=68.0MiB(502949txo)\r\n2019-08-31T06:00:47Z UpdateTip: new best=000000000000000027a68e70c9c02985173c56e8c8ce210c02eb975530d77f0d height=311699 version=0x00000002 log2_work=79.815323 tx=42899561 date='2014-07-20T16:27:06Z' progress=0.096218 cache=68.3MiB(505709txo)\r\n2019-08-31T06:00:51Z UpdateTip: new best=000000000000000038730cd937f594452e96b97a496afc03a84fc90a18119113 height=311700 version=0x00000002 log2_work=79.815424 tx=42900165 date='2014-07-20T16:40:48Z' progress=0.096219 cache=68.8MiB(509386txo)\r\n```\r\n\r\nFWIW I've also rebased and added another commit for a more recent Rust onto https://github.com/fanquake/bitcoin/tree/theuni-with-rust-example-working-rebased. Will add another commit on top for the `--start-group` workaround. Given that you've dropped `cbindgen` here, I can also maintain a branch with that dropped.",
      "created_at" : "2019-08-31T06:01:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526803615",
      "id" : 526803615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjgwMzYxNQ==",
      "updated_at" : "2019-08-31T06:01:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526803615",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
