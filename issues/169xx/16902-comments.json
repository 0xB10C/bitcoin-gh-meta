[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#10729](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10729.html) (Wrap EvalScript in a ScriptExecution class by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-09-18T05:06:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532520135",
      "id" : 532520135,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16902",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjUyMDEzNQ==",
      "updated_at" : "2019-09-18T08:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532520135",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It might be easier to review if the operations on `vfExec` are pulled out into a separate class first, so that the optimisation just means updating the class from:\r\n\r\n```c++\r\nclass FalseCounter {\r\nprivate:\r\n    std::vector<bool> flags;\r\npublic:\r\n    bool all_true() { return !count(flags.begin(), flags.end(), false); }\r\n    void push_back(bool f) { flags.push_back(f); }\r\n    void pop_back() { flags.pop_back(); }\r\n    bool empty() { return flags.empty(); }\r\n    void toggle_top() { flags.back() = !flags.back(); }\r\n};\r\n```\r\n\r\nto\r\n\r\n```c++\r\nclass FalseCounter {\r\nprivate:\r\n    int depth = 0;\r\n    int first_false = 0;\r\npublic:\r\n    bool all_true() { return first_false == 0; }\r\n    void push_back(bool f) {\r\n        ++depth;\r\n        if (first_false == 0 && !f) first_false = depth;\r\n    }\r\n    void pop_back() {\r\n        if (first_false == depth) first_false = 0;\r\n        --depth;\r\n    }\r\n    bool empty() { return depth == 0; }\r\n    void toggle_top() {\r\n        if (first_false == 0) {\r\n            first_false = depth;\r\n        } else if (first_false == depth) {\r\n            first_false = 0;\r\n        } else {\r\n            // no action needed as change is unobservable\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nwithout changing the usage of the class. I think it'd be plausible to do a coq proof that those implementations are logically equivalent / implement the same API (at least given `!empty()` preconditions for `pop_back()` and `toggle_top()`).\r\n\r\ncf https://github.com/ajtowns/bitcoin/commits/201909-vfexec-optimise",
      "created_at" : "2019-09-18T06:22:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532538012",
      "id" : 532538012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16902",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjUzODAxMg==",
      "updated_at" : "2019-09-18T06:22:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532538012",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns If there's interest in including this patch at some point we should pick up that approach.",
      "created_at" : "2019-09-18T06:28:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532539892",
      "id" : 532539892,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16902",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjUzOTg5Mg==",
      "updated_at" : "2019-09-18T06:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532539892",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Somewhat related issue: https://github.com/sipa/miniscript/issues/7 (\"Policies with too high nesting depth are not rejected: It is possible to create small inputs that cause extreme memory usage (in practice: OOM kill or std::bad_alloc)\")\r\n\r\nContext: Nested `tresh` tend to be very `OP_IF`/`OP_ELSE`/`OP_ENDIF` intensive (`or_i`) when compiled to script :)",
      "created_at" : "2019-09-18T09:22:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-532600356",
      "id" : 532600356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16902",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMjYwMDM1Ng==",
      "updated_at" : "2019-09-18T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532600356",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've modified the code to follow @ajtowns's approach more closely, though with fewer commits, and extra comments.",
      "created_at" : "2019-11-04T18:54:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#issuecomment-549495965",
      "id" : 549495965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16902",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTQ5NTk2NQ==",
      "updated_at" : "2019-11-04T18:54:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549495965",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342439473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342439473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`uint32_t` with a `t` :)",
      "commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "created_at" : "2019-11-05T08:50:42Z",
      "diff_hunk" : "@@ -289,16 +289,51 @@ namespace {\n  * expose whether the stack is empty and whether or not any false values are\n  * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n  * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n  */\n class ConditionStack {\n private:\n-    std::vector<bool> m_flags;\n+    //! The size of the implied stack.\n+    uin32_t m_stack_size = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342439473",
      "id" : 342439473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjQzOTQ3Mw==",
      "original_commit_id" : "d4721cd00b0af1d6a96fc0a43ca72dc55ea490d3",
      "original_position" : 13,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 311574860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902",
      "updated_at" : "2019-11-07T17:12:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342439473",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342441000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342441000"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Using `int32_t` gives \"comparison of integers of different signs\" warnings. Having `uint32_t m_first_false_pos_plus_one = 0` instead avoids that, and seems to make the code simpler (avoids a bunch of decrements/increments). I think you could call it `m_size_of_stack_including_first_false` with 0 as a special value, and have it make sense, maybe?",
      "commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "created_at" : "2019-11-05T08:54:24Z",
      "diff_hunk" : "@@ -289,16 +289,51 @@ namespace {\n  * expose whether the stack is empty and whether or not any false values are\n  * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n  * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n  */\n class ConditionStack {\n private:\n-    std::vector<bool> m_flags;\n+    //! The size of the implied stack.\n+    uin32_t m_stack_size = 0;\n+    //! The position of the first false value on the implied stack, or -1 if all true.\n+    int32_t m_first_false_pos = -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r342441000",
      "id" : 342441000,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjQ0MTAwMA==",
      "original_commit_id" : "d4721cd00b0af1d6a96fc0a43ca72dc55ea490d3",
      "original_position" : 15,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 311574860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902",
      "updated_at" : "2019-11-07T17:12:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342441000",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343318934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343318934"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "created_at" : "2019-11-06T20:47:10Z",
      "diff_hunk" : "@@ -289,16 +289,51 @@ namespace {\n  * expose whether the stack is empty and whether or not any false values are\n  * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n  * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n  */\n class ConditionStack {\n private:\n-    std::vector<bool> m_flags;\n+    //! The size of the implied stack.\n+    uin32_t m_stack_size = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343318934",
      "id" : 343318934,
      "in_reply_to_id" : 342439473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzMxODkzNA==",
      "original_commit_id" : "d4721cd00b0af1d6a96fc0a43ca72dc55ea490d3",
      "original_position" : 13,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 312732017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902",
      "updated_at" : "2019-11-07T17:12:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343318934",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343319188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343319188"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm instead adding a NO_FALSE constant (equal to 0xFFFFFFFF), and reordering operations a bit to avoid some `- 1`s.",
      "commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "created_at" : "2019-11-06T20:47:46Z",
      "diff_hunk" : "@@ -289,16 +289,51 @@ namespace {\n  * expose whether the stack is empty and whether or not any false values are\n  * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n  * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n  */\n class ConditionStack {\n private:\n-    std::vector<bool> m_flags;\n+    //! The size of the implied stack.\n+    uin32_t m_stack_size = 0;\n+    //! The position of the first false value on the implied stack, or -1 if all true.\n+    int32_t m_first_false_pos = -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r343319188",
      "id" : 343319188,
      "in_reply_to_id" : 342441000,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzMxOTE4OA==",
      "original_commit_id" : "d4721cd00b0af1d6a96fc0a43ca72dc55ea490d3",
      "original_position" : 15,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 312732349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902",
      "updated_at" : "2019-11-07T17:12:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343319188",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r370991967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370991967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think an `assert(m_stack_size != NO_FALSE - 1)` is needed.\r\nAlso, does not seems caller are checking this. Unsure if this can realistically taken advantage of, but I think it does not hurt the scriptevaluator to check for it.",
      "commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "created_at" : "2020-01-26T11:36:29Z",
      "diff_hunk" : "@@ -278,6 +278,70 @@ int FindAndDelete(CScript& script, const CScript& b)\n     return nFound;\n }\n \n+namespace {\n+/** A data type to abstract out the condition stack during script execution.\n+ *\n+ * Conceptually it acts like a vector of booleans, one for each level of nested\n+ * IF/THEN/ELSE, indicating whether we're in the active or inactive branch of\n+ * each.\n+ *\n+ * The elements on the stack cannot be observed individually; we only need to\n+ * expose whether the stack is empty and whether or not any false values are\n+ * present at all. To implement OP_ELSE, a toggle_top modifier is added, which\n+ * flips the last value without returning it.\n+ *\n+ * This uses an optimized implementation that does not materialize the\n+ * actual stack. Instead, it just stores the size of the would-be stack,\n+ * and the position of the first false value in it.\n+ */\n+class ConditionStack {\n+private:\n+    //! A constant for m_first_false_pos to indicate there are no falses.\n+    static constexpr uint32_t NO_FALSE = std::numeric_limits<uint32_t>::max();\n+\n+    //! The size of the implied stack.\n+    uint32_t m_stack_size = 0;\n+    //! The position of the first false value on the implied stack, or NO_FALSE if all true.\n+    uint32_t m_first_false_pos = NO_FALSE;\n+\n+public:\n+    bool empty() { return m_stack_size == 0; }\n+    bool all_true() { return m_first_false_pos == NO_FALSE; }\n+    void push_back(bool f)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16902#discussion_r370991967",
      "id" : 370991967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk5MTk2Nw==",
      "original_commit_id" : "e6e622e5a0e22c2ac1b50b96af818e412d67ac54",
      "original_position" : 33,
      "path" : "src/script/interpreter.cpp",
      "position" : 33,
      "pull_request_review_id" : 348373612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16902",
      "updated_at" : "2020-01-26T11:36:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370991967",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   }
]
