[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Running `bitcoind --reindex` causes the client to reread the `.bitcoin/blocks/blknnnnn.dat` files and re-derive all the index and chainstate information. It's similar to IBD but the client uses these local files rather than download blocks from the network. As `LoadExternalBlockFile()` reads each block from disk, it checks to see if its parent has already been seen (and processed). If so, then this block can be immediately processed (by giving it to `AcceptBlock()`). If this block's parent hasn't yet been seen, it cannot be processed until after its parent is seen. Its prev-hash (parent's hash) is put into a map of \"pending\" blocks (called `mapBlocksUnknownParent`). Later, when its parent is encountered and processed, this map is consulted to see it has a child that's already been seen that can now be processed. If so, `LoadExternalBlockFile()` now has to go back and re-read the child block from disk (`ReadBlockFromDisk()`), deserialize it again, and then process (pass it to `AcceptBlock()`).\r\n\r\nPerformance isn't very good because about 90% of blocks are read before their parents are read. (I think this is a result of the headers-first IBD performance enhancement of a few years ago.) This can be seen by running `bitcoind --reindex --debug=reindex`, causing many messages like:\r\n```\r\n2019-09-29T00:29:00Z LoadExternalBlockFile: Out of order block 00000000a2268fb2d4ddc0408fae961a96668db58de415d3c9e0a7694eeb1657, parent 000000005fb53da5c3cda78aef28cbc44fde3e435f1dc2ac04df53387049171f not known\r\n```\r\nthen, a short time later:\r\n```\r\n2019-09-29T00:29:00Z LoadExternalBlockFile: Processing out of order child 00000000a2268fb2d4ddc0408fae961a96668db58de415d3c9e0a7694eeb1657 of 000000005fb53da5c3cda78aef28cbc44fde3e435f1dc2ac04df53387049171f\r\n```\r\nSo 90% of blocks end up being read from disk twice (actually, not twice, since the operating system's buffer cache likely still has the data, but there is still a memory-to-memory copy), and deserialized twice.\r\n\r\nThis PR mitigates this problem by taking advantage of the fact that recent blocks are still in the buffer (`blkdat`) that is used to read from the `blk` files. Since rewinding to an earlier offset in the buffer has been fixed by the recently merged #16577, we can see if the child block is still in memory (the probability is increased by making the buffer somewhat larger), and if so, avoid having to read the child block data from disk. It turns out that the child block is still in the buffer 60% of the time. This depends on some randomness that's introduced during IBD, so it may be different for you. (My IBD was done using all the default settings, nothing special.)\r\n\r\nThe second part of this change initially deserializes only the block header, rather than the entire block. since about 90% of the time we're going to have to process this block later; only the `hashPrevBlock` field of the header is needed to determine if we can process this block immediately (if this block's parent has been seen). This does mean that 10% of the time, we deserialize the header, and then immediately also the full block (where it would have been more efficient to simply deserialize the full block), but overall this is a big performance win.\r\n\r\nOn my system, this PR reduces the time to `--reindex` by 48 minutes. I encourage reviewers to attempt to replicate my findings. Reindexing has two parts, reading the `blocks/blknnnnn.dat` files (which this PR improves), and then connecting the blocks to the blockchain (the `UpdateTip` messages), which this PR doesn't affect. For me, this PR reduces the first part from 123 to 75 minutes. After you start seeing `UpdateTip` messages, you can stop the client, and you will have the time measurement you need from `debug.log`.\r\n\r\nJust an FYI, since about 40% of the blocks are not present in the buffer (and must be re-read from disk), I have an idea for how to increase the \"hit rate\" to close to 100%. But that will be a separate PR.",
      "created_at" : "2019-09-29T01:32:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536238638",
      "id" : 536238638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNjIzODYzOA==",
      "updated_at" : "2019-09-29T01:48:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536238638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This `LogPrint` probably should be combined with the (existing) one a few lines below before merging, but I wanted reviewers to be aware of when the new code is being run.",
      "commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "created_at" : "2019-09-29T01:35:24Z",
      "diff_hunk" : "@@ -4633,14 +4642,31 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n                         std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n+                        // see if the needed child block is still in the buffer\n+                        const FlatFilePos pos = it->second;\n+                        bool haveChildBlock = false;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n-                        {\n+                        // performance optimization -- else path would always work\n+                        if (dbp && pos.nFile == dbp->nFile && blkdat.SetPos(pos.nPos - sizeof(uint32_t))) {\n+                            // block is still in memory, positioned to the start of the size field\n+                            haveChildBlock = true;\n+                            blkdat.SetLimit(pos.nPos);\n+                            blkdat >> nSize;\n+                            CBlock& blockrecursive = *pblockrecursive;\n+                            blkdat.SetLimit(pos.nPos + nSize);\n+                            blkdat >> blockrecursive;\n+                            LogPrint(BCLog::REINDEX, \"%s: Processing in-memory out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n+                                    head.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333473",
      "id" : 329333473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTMzMzQ3Mw==",
      "original_commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "original_position" : 81,
      "path" : "src/validation.cpp",
      "position" : 81,
      "pull_request_review_id" : 294660183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2019-09-29T01:42:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333593"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't know how to write a unit test for this PR (there are no existing unit tests for any of this area of the code), but `test/functional/wallet_basic.py` does run through the new code -- you can add an `assert(false)` here and that test fails, so that's at least something.",
      "commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "created_at" : "2019-09-29T01:40:43Z",
      "diff_hunk" : "@@ -4633,14 +4642,31 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n                         std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n+                        // see if the needed child block is still in the buffer\n+                        const FlatFilePos pos = it->second;\n+                        bool haveChildBlock = false;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n-                        {\n+                        // performance optimization -- else path would always work\n+                        if (dbp && pos.nFile == dbp->nFile && blkdat.SetPos(pos.nPos - sizeof(uint32_t))) {\n+                            // block is still in memory, positioned to the start of the size field\n+                            haveChildBlock = true;\n+                            blkdat.SetLimit(pos.nPos);\n+                            blkdat >> nSize;\n+                            CBlock& blockrecursive = *pblockrecursive;\n+                            blkdat.SetLimit(pos.nPos + nSize);\n+                            blkdat >> blockrecursive;\n+                            LogPrint(BCLog::REINDEX, \"%s: Processing in-memory out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n+                                    head.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333593",
      "id" : 329333593,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTMzMzU5Mw==",
      "original_commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "original_position" : 81,
      "path" : "src/validation.cpp",
      "position" : 81,
      "pull_request_review_id" : 294660183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2019-09-29T01:42:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333593",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   }
]
