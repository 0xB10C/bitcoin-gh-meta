[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Running `bitcoind --reindex` causes the client to reread the `.bitcoin/blocks/blknnnnn.dat` files and re-derive all the index and chainstate information. It's similar to IBD but the client uses these local files rather than download blocks from the network. As `LoadExternalBlockFile()` reads each block from disk, it checks to see if its parent has already been seen (and processed). If so, then this block can be immediately processed (by giving it to `AcceptBlock()`). If this block's parent hasn't yet been seen, it cannot be processed until after its parent is seen. Its prev-hash (parent's hash) is put into a map of \"pending\" blocks (called `mapBlocksUnknownParent`). Later, when its parent is encountered and processed, this map is consulted to see it has a child that's already been seen that can now be processed. If so, `LoadExternalBlockFile()` now has to go back and re-read the child block from disk (`ReadBlockFromDisk()`), deserialize it again, and then process (pass it to `AcceptBlock()`).\r\n\r\nPerformance isn't very good because about 90% of blocks are read before their parents are read. (I think this is a result of the headers-first IBD performance enhancement of a few years ago.) This can be seen by running `bitcoind --reindex --debug=reindex`, causing many messages like:\r\n```\r\n2019-09-29T00:29:00Z LoadExternalBlockFile: Out of order block 00000000a2268fb2d4ddc0408fae961a96668db58de415d3c9e0a7694eeb1657, parent 000000005fb53da5c3cda78aef28cbc44fde3e435f1dc2ac04df53387049171f not known\r\n```\r\nthen, a short time later:\r\n```\r\n2019-09-29T00:29:00Z LoadExternalBlockFile: Processing out of order child 00000000a2268fb2d4ddc0408fae961a96668db58de415d3c9e0a7694eeb1657 of 000000005fb53da5c3cda78aef28cbc44fde3e435f1dc2ac04df53387049171f\r\n```\r\nSo 90% of blocks end up being read from disk twice (actually, not twice, since the operating system's buffer cache likely still has the data, but there is still a memory-to-memory copy), and deserialized twice.\r\n\r\nThis PR mitigates this problem by taking advantage of the fact that recent blocks are still in the buffer (`blkdat`) that is used to read from the `blk` files. Since rewinding to an earlier offset in the buffer has been fixed by the recently merged #16577, we can see if the child block is still in memory (the probability is increased by making the buffer somewhat larger), and if so, avoid having to read the child block data from disk. It turns out that the child block is still in the buffer 60% of the time. This depends on some randomness that's introduced during IBD, so it may be different for you. (My IBD was done using all the default settings, nothing special.)\r\n\r\nThe second part of this change initially deserializes only the block header, rather than the entire block. since about 90% of the time we're going to have to process this block later; only the `hashPrevBlock` field of the header is needed to determine if we can process this block immediately (if this block's parent has been seen). This does mean that 10% of the time, we deserialize the header, and then immediately also the full block (where it would have been more efficient to simply deserialize the full block), but overall this is a big performance win.\r\n\r\nOn my system, this PR reduces the time to `--reindex` on mainnet by 48 minutes. I encourage reviewers to attempt to replicate my findings. Reindexing has two parts, reading the `blocks/blknnnnn.dat` files (which this PR improves), and then connecting the blocks to the blockchain (the `UpdateTip` messages), which this PR doesn't affect. For me, this PR reduces the first part from 123 to 75 minutes. After you start seeing `UpdateTip` messages, you can stop the client, and you will have the time measurement you need from `debug.log`.",
      "created_at" : "2019-09-29T01:32:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536238638",
      "id" : 536238638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNjIzODYzOA==",
      "updated_at" : "2019-09-30T15:40:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536238638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This `LogPrint` probably should be combined with the (existing) one a few lines below before merging, but I wanted reviewers to be aware of when the new code is being run.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-09-29T01:35:24Z",
      "diff_hunk" : "@@ -4633,14 +4642,31 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n                         std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n+                        // see if the needed child block is still in the buffer\n+                        const FlatFilePos pos = it->second;\n+                        bool haveChildBlock = false;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n-                        {\n+                        // performance optimization -- else path would always work\n+                        if (dbp && pos.nFile == dbp->nFile && blkdat.SetPos(pos.nPos - sizeof(uint32_t))) {\n+                            // block is still in memory, positioned to the start of the size field\n+                            haveChildBlock = true;\n+                            blkdat.SetLimit(pos.nPos);\n+                            blkdat >> nSize;\n+                            CBlock& blockrecursive = *pblockrecursive;\n+                            blkdat.SetLimit(pos.nPos + nSize);\n+                            blkdat >> blockrecursive;\n+                            LogPrint(BCLog::REINDEX, \"%s: Processing in-memory out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n+                                    head.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333473",
      "id" : 329333473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTMzMzQ3Mw==",
      "original_commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "original_position" : 81,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 294660183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333593"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't know how to write a unit test for this PR (there are no existing unit tests for any of this area of the code), but `test/functional/wallet_basic.py` does run through the new code -- you can add an `assert(false)` here and that test fails, so that's at least something.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-09-29T01:40:43Z",
      "diff_hunk" : "@@ -4633,14 +4642,31 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n                         std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n+                        // see if the needed child block is still in the buffer\n+                        const FlatFilePos pos = it->second;\n+                        bool haveChildBlock = false;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n-                        {\n+                        // performance optimization -- else path would always work\n+                        if (dbp && pos.nFile == dbp->nFile && blkdat.SetPos(pos.nPos - sizeof(uint32_t))) {\n+                            // block is still in memory, positioned to the start of the size field\n+                            haveChildBlock = true;\n+                            blkdat.SetLimit(pos.nPos);\n+                            blkdat >> nSize;\n+                            CBlock& blockrecursive = *pblockrecursive;\n+                            blkdat.SetLimit(pos.nPos + nSize);\n+                            blkdat >> blockrecursive;\n+                            LogPrint(BCLog::REINDEX, \"%s: Processing in-memory out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n+                                    head.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r329333593",
      "id" : 329333593,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTMzMzU5Mw==",
      "original_commit_id" : "48c0cc724510add8753ff27e6f4a534cb7a37dbb",
      "original_position" : 81,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 294660183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329333593",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the suggestion, @promag, done (force-pushed).",
      "created_at" : "2019-09-30T04:42:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536398435",
      "id" : 536398435,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNjM5ODQzNQ==",
      "updated_at" : "2019-09-30T04:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536398435",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I forgot to update the `CBufferedFile` unit tests, just did that and another force-push.",
      "created_at" : "2019-09-30T05:40:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-536409070",
      "id" : 536409070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNjQwOTA3MA==",
      "updated_at" : "2019-09-30T05:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536409070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I changed this PR to WIP because I thought of a further improvement, which I'll try to push by the end of the week. It will build on the existing two commits, so reviewing those wouldn't be a waste of time. Thanks in advance for any reviews and suggestions.",
      "created_at" : "2019-10-01T14:40:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-537068616",
      "id" : 537068616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNzA2ODYxNg==",
      "updated_at" : "2019-10-01T14:40:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537068616",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-10-03T20:46:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-538121393",
      "id" : 538121393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzODEyMTM5Mw==",
      "updated_at" : "2020-02-22T00:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/538121393",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333082059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333082059"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a much larger buffer (640 mb), but it only exists during the first phase of reindexing (when you see `Reindexing block...` in the debug log); after that, the `bitcoind` memory usage increases for other reasons anyway. During the first phase, memory (`VSZ` in the ps output) is about 2.4 gb on my system; afterwards (when it's logging `UpdateTip: new best...`), it's about 3.5 gb. The benefit of a large buffer is that a larger fraction of the out-of-order blocks (that have to be processed later, when their parents are seen) can be found in memory, rather than having to read them again from disk. The \"hit ratio\" with this buffer size is just under 99%. The difference between 160 (but overall buffer size in max-blocks)) and 140 (the rewind limit) determines the size of disk reads (the larger, the better, more efficient).",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-09T15:29:02Z",
      "diff_hunk" : "@@ -668,6 +668,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n \n     // -reindex\n     if (fReindex) {\n+        CBufferedFile blkdat(160*MAX_BLOCK_SERIALIZED_SIZE, 140*MAX_BLOCK_SERIALIZED_SIZE, SER_DISK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333082059",
      "id" : 333082059,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA4MjA1OQ==",
      "original_commit_id" : "7af058771e3dfc40ee2855a5e5e102b9b2b57361",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 299501549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333082059",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333083169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333083169"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This method is unused, and really doesn't make sense. The buffer contents should match file (or, now, files) content, and this messes that up. If it's needed in the future, it can be re-thought.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-09T15:30:57Z",
      "diff_hunk" : "@@ -816,18 +839,6 @@ class CBufferedFile\n         return true;\n     }\n \n-    bool Seek(uint64_t nPos) {\n-        long nLongPos = nPos;\n-        if (nPos != (uint64_t)nLongPos)\n-            return false;\n-        if (fseek(src, nLongPos, SEEK_SET))\n-            return false;\n-        nLongPos = ftell(src);\n-        nSrcPos = nLongPos;\n-        nReadPos = nLongPos;\n-        return true;\n-    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333083169",
      "id" : 333083169,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA4MzE2OQ==",
      "original_commit_id" : "7af058771e3dfc40ee2855a5e5e102b9b2b57361",
      "original_position" : 108,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 299501549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333083169",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333088941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333088941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These `pim` (out-of-order block found in-memory) and `pom` (out-of-order block not in memory) let reviewers see the effectiveness of the read caching during testing; they can be removed before merging. Here's a typical instance:\r\n```\r\n2019-10-09T15:28:17Z Loaded 839 blocks from external file in 11729ms pim 726 pom 95\r\n```\r\nThis means 821 (726+95) blocks were processed out-of-order, so 18 (839-821) blocks were processed in-order (their parents had already been seen). This is typical, and shows that almost all blocks are processed out-of-order. With this PR, 726 of these out-of-order blocks were recent enough that they were still in the buffer, and 95 had already been pushed out and had to be read again from disk. Overall, 99% of the out-of-order blocks are still in the buffer.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-09T15:41:52Z",
      "diff_hunk" : "@@ -4659,7 +4693,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n         AbortNode(std::string(\"System error: \") + e.what());\n     }\n     if (nLoaded > 0)\n-        LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);\n+        LogPrintf(\"Loaded %i blocks from external file in %dms pim %i pom %i\\n\",\n+            nLoaded, GetTimeMillis() - nStart, nProcessedInMem, nProcessedOutMem);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r333088941",
      "id" : 333088941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA4ODk0MQ==",
      "original_commit_id" : "7af058771e3dfc40ee2855a5e5e102b9b2b57361",
      "original_position" : 129,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 299501549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333088941",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Testnet performance isn't important, but as a sanity check, I verified that the new code runs faster there too on my laptop. The time between `Reindexing block file blk00001.dat...` and `Reindexing finished` reduced from 10m21s to 7m13s.",
      "created_at" : "2019-10-11T16:32:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-541134716",
      "id" : 541134716,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MTEzNDcxNg==",
      "updated_at" : "2019-10-11T16:32:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541134716",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2019-10-11T19:30:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-541194728",
      "id" : 541194728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MTE5NDcyOA==",
      "updated_at" : "2019-10-11T19:30:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541194728",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mzumsande, those are very good thoughts, thank you. I will study this further (and invite others to also). One nice thing about this design is that any amount of memory will work, in that it will be an improvement -- it is one of those classic space-time tradeoffs. The idea of making the buffer not have a hard-coded size is intriguing and promising. I think we would not go back to the pre-second iteration (multiple-files), because even reducing the buffer memory to the original amount would be improved by the multi-file version. (That is to say, there is no downside to the latest version here.) That's because all the multi-file commit means is that we do not discard cached data when switching files.\r\n\r\nOne thing I hope I made clear enough in an earlier comment is that I tried to keep the memory usage during reindexing be strictly _less_ than what is needed during normal operation, so that there would be no overall increase in memory demand. We certainly would not want this design to create a *spike* (high water mark) of memory usage. But I was very likely mistaken, since I was not aware that memory could be \"dialed down\" for small environments.",
      "created_at" : "2019-10-13T06:32:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-541391295",
      "id" : 541391295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MTM5MTI5NQ==",
      "updated_at" : "2019-10-13T06:32:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541391295",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I force-pushed a reorganization of the commits to make reviewing easier. I split the largest commit, **speed up reindex by reading out-of-order blocks from memory**, into two separate commits:\r\n1. Commit message: **initially deserialize only CBlockHeader, not CBlock**. Deserialize only a block header (only 32 bytes) initially, instead of a full block. The block header is all that's needed to tell us if this block's parent has been seen yet; if not, the block will have to be deserialized later, after its parent is found. Nearly all blocks (89% on my system) are seen before their parents, so this is a big improvement.\r\n1. Commit message: **speed up reindex by reading out-of-order blocks from memory**. If we've just processed a block that's the parent of an earlier-seen block, we must now process that earlier block. Instead of always reading that block from disk, see if it happens to still be in the circular disk read memory buffer ('CBufferedFile blkdat`). This saves a disk read.\r\n\r\nWe could merge the first commit without the second. The first commit is pretty simple; the second commit is a little more involved.\r\n\r\nThese two commits have a buffer size unchanged from master, 8mb (`2*MAX_BLOCK_SERIALIZED_SIZE`), so there is no change in memory usage. But with this buffer size, only 29% of the out-of-order blocks are found in the buffer. If we increase the buffer by not too much (as I did in an earlier commit that's now been erased by force-push, 640mb), to 32mb, the \"hit rate\" increases to 50%. This is probably a good space-time balance.\r\n\r\nHere are the block-load times on my system (with all default settings), which is just the first part of reindexing (each row builds on the previous row):\r\n\r\n| version | real time (minutes) |\r\n| ----------- | ----------- |\r\n| master | 130 |\r\n| deserialize only header | 90 |\r\n| look for blocks in buffer, 8mb |84 |\r\n| look for blocks in buffer, 32mb |78 |\r\n| look for blocks in buffer, 640mb |72 |\r\n\r\n(Take with a grain of salt, because the times varied even on identical runs, and a lot probably depends on the specifics of my system.) Keep in mind that this buffer exists only during the block-load part of reindex.",
      "created_at" : "2019-10-15T03:29:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-542020115",
      "id" : 542020115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MjAyMDExNQ==",
      "updated_at" : "2019-10-15T03:32:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/542020115",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336254578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336254578"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it necessary to remove the `FILE` from the constructor? Couldn't you just initialize it with `nullptr` in the multi-file case and call `SetFile()` later, so that there need to be no syntax changes for the single-file case? It is also easy to create a `CBufferedFile` object and forget about `SetFile()`, leading to a memory access violation.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-17T22:30:10Z",
      "diff_hunk" : "@@ -762,12 +763,12 @@ class CBufferedFile\n     }\n \n public:\n-    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit(std::numeric_limits<uint64_t>::max()), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+    CBufferedFile(uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336254578",
      "id" : 336254578,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjI1NDU3OA==",
      "original_commit_id" : "b2919cad00665ee536c4cbb8af21c8ecded01634",
      "original_position" : 14,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 303582448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336254578",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336257157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336257157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: This could be moved into the `if` block (same for -loadblock below)",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-17T22:39:31Z",
      "diff_hunk" : "@@ -689,11 +691,13 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     // hardcoded $DATADIR/bootstrap.dat\n     fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n     if (fs::exists(pathBootstrap)) {\n+        CBufferedFile blkdat(2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336257157",
      "id" : 336257157,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjI1NzE1Nw==",
      "original_commit_id" : "c91b547afb60a5a275b779b79b02c10708ccc95d",
      "original_position" : 22,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 303582448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336257157",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336259458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336259458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the pim/pom statistics is useful, but maybe too special for the main log. You could use a separate `BCLog::REINDEX` message for that information.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-17T22:49:00Z",
      "diff_hunk" : "@@ -4659,7 +4693,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n         AbortNode(std::string(\"System error: \") + e.what());\n     }\n     if (nLoaded > 0)\n-        LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);\n+        LogPrintf(\"Loaded %i blocks from external file in %dms pim %i pom %i\\n\",\n+            nLoaded, GetTimeMillis() - nStart, nProcessedInMem, nProcessedOutMem);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336259458",
      "id" : 336259458,
      "in_reply_to_id" : 333088941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjI1OTQ1OA==",
      "original_commit_id" : "7af058771e3dfc40ee2855a5e5e102b9b2b57361",
      "original_position" : 129,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 303582448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336259458",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Under what circumstances is a `-reindex` needed these days? Only when disabling `-prune`? Though, then you'll download from the network anyway.",
      "created_at" : "2019-10-18T12:58:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-543730430",
      "id" : 543730430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzczMDQzMA==",
      "updated_at" : "2019-10-18T12:58:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543730430",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336794478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336794478"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@mzumsande, good idea, I restored that argument to the constructor.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-20T20:00:54Z",
      "diff_hunk" : "@@ -762,12 +763,12 @@ class CBufferedFile\n     }\n \n public:\n-    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit(std::numeric_limits<uint64_t>::max()), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+    CBufferedFile(uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r336794478",
      "id" : 336794478,
      "in_reply_to_id" : 336254578,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc5NDQ3OA==",
      "original_commit_id" : "b2919cad00665ee536c4cbb8af21c8ecded01634",
      "original_position" : 14,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 304275665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336794478",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke Building new indices is required if upgrading from pre-0.17 to post-0.17 (https://bitcoin.org/en/release/v0.17.0) with a txindex.\r\n\r\n>If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\r\n\r\nI haven't looked into whether this PR speeds up that process, but it is something to consider.",
      "created_at" : "2019-10-21T01:11:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-544313666",
      "id" : 544313666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDMxMzY2Ng==",
      "updated_at" : "2019-10-21T01:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544313666",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3648618?v=4",
         "events_url" : "https://api.github.com/users/leishman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/leishman/followers",
         "following_url" : "https://api.github.com/users/leishman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/leishman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/leishman",
         "id" : 3648618,
         "login" : "leishman",
         "node_id" : "MDQ6VXNlcjM2NDg2MTg=",
         "organizations_url" : "https://api.github.com/users/leishman/orgs",
         "received_events_url" : "https://api.github.com/users/leishman/received_events",
         "repos_url" : "https://api.github.com/users/leishman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/leishman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/leishman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/leishman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r337597803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337597803"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Does it bother anyone else that this is `static`? This is global state, which, in general, equals evil. It must be static, given that it's declared here, since its state must persist across calls to this function (very often, a block and its parent are in different `blk` files). We could eliminate this global state by allocating this map in the caller of this function, `src/init.cpp: ThreadImport()`, and passing it by reference to `LoadExternalBlockFile()`. \r\n\r\nAnother thing that seems missing from the current design is, what happens if there are leftover entries in this map after reindexing has completed? That means we've read blocks from disk but never found their parent blocks. In my testing, this map is empty at the end of reindexing, as expected. But what if it wasn't? That would mean we're missing one or more `blocks/blk00nnn.dat` files, or some blocks from those files. Isn't that worth at least a `LogPrintf()`? Making this change would also require moving the map out to the caller, because this function doesn't know if it will be called again.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2019-10-22T15:43:38Z",
      "diff_hunk" : "@@ -4592,16 +4592,20 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return ::ChainstateActive().LoadGenesisBlock(chainparams);\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, CBufferedFile& blkdat, FlatFilePos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n+    struct unknownParentPos {\n+        FlatFilePos filePos;\n+        uint64_t pos;\n+    };\n+    static std::multimap<uint256, unknownParentPos> mapBlocksUnknownParent;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r337597803",
      "id" : 337597803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzU5NzgwMw==",
      "original_commit_id" : "869aed06b9085f03c24d1b14a546ca333b2eb438",
      "original_position" : 13,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 305312876,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-02-21T17:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337597803",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @MarcoFalke Building new indices is required if upgrading from pre-0.17 to post-0.17 (https://bitcoin.org/en/release/v0.17.0) with a txindex.\r\n\r\nIsn't `-reindex-chainstate` enough in that case? I don't think that requres a rescan of the block files.\r\n",
      "created_at" : "2019-10-30T11:40:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-547861097",
      "id" : 547861097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Nzg2MTA5Nw==",
      "updated_at" : "2019-10-30T11:41:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547861097",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-30T16:19:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-547989447",
      "id" : 547989447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Nzk4OTQ0Nw==",
      "updated_at" : "2019-10-30T16:19:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547989447",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased. I think running `--reindex` is also good when for whatever reason you don't trust your index files; for example, think files may be missing or may have been corrupted. It's true that in that case you could just re-IBD, but this is faster and less disruptive to peers.\r\n\r\nI wasn't sure how much variation there might be in the runtimes I posted here earlier, so to get a few more data points, I added `assert(0)` immediately after printing `Reindexing finished`, and ran `bitcoind --reindex` several times in a shell loop, timing each run (using the standard `time` bash builtin). Here are the real times without this PR (which I reported as 130 minutes in the earlier comment):\r\n```\r\nreal\t131m52.120s\r\nreal\t130m55.904s\r\nreal\t133m20.911s\r\nreal\t134m37.052s\r\nreal\t146m17.564s\r\nreal\t135m17.301s\r\n```\r\nand here are the times for runs with this PR (I ran this a few more times), this is what I reported as 84 minutes above:\r\n```\r\nreal\t79m55.050s\r\nreal\t92m30.341s\r\nreal\t82m44.119s\r\nreal\t80m50.067s\r\nreal\t89m31.793s\r\nreal\t87m36.802s\r\nreal\t97m42.247s\r\nreal\t86m31.999s\r\nreal\t87m13.304s\r\nreal\t82m21.497s\r\n```",
      "created_at" : "2019-10-30T21:34:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-548122336",
      "id" : 548122336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODEyMjMzNg==",
      "updated_at" : "2019-10-30T21:34:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548122336",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-11-05T19:02:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-549970174",
      "id" : 549970174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk3MDE3NA==",
      "updated_at" : "2019-11-05T19:02:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549970174",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased to fix merge conflicts, force-pushed.",
      "created_at" : "2019-11-07T19:34:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-551230310",
      "id" : 551230310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MTIzMDMxMA==",
      "updated_at" : "2019-11-07T19:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551230310",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased, force-pushed",
      "created_at" : "2019-11-21T17:41:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-557195051",
      "id" : 557195051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzE5NTA1MQ==",
      "updated_at" : "2019-11-21T17:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557195051",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Reviewers, please take a fresh look at the latest force-push; this PR is much better than before. I'll explain from scratch, so it's not necessary to read any of the previous comments in this PR.\r\n\r\nThe previous version of this PR included two separate changes (both affecting `-reindex`):\r\n* initially deserializing only the header instead of the entire block\r\n* when we find a block whose child has already been read, attempt to \"rewind\" in the stream memory buffer to access and process the child (instead of always reading it again from disk)\r\n\r\nThese should always have been separate PRs. This PR now contains only the first change, which is the more effective and localized. I'll make a separate PR for the second change if it turns out to be a significant improvement. _This PR no longer has any effect on memory usage_, which reviewers had concerns about. \r\n\r\nTo go over some basics again, for background: During `-reindex`, blocks are read from disk (the `blocks/blk00???.dat` files), deserialized, and processed. But a block can't be processed if its parent hasn't yet been seen (we know this only after deserializing the block). In that case, its disk location is saved in a map and we go on to the next block. \r\n\r\nWhenever we do successfully process a block (we've got its parent), we check to see if its child has already been seen (is present in the map, looked up by block hash), and, if so, we read the child block from disk (again), deserialize it, and process it (and remove it from the map).\r\n\r\nIt turns out that, due to the \"headers first\" initial block download (IBD) algorithm, over 92% of blocks (on my system) are out of order, in the sense that 92% of the time when we first read a block, we haven't yet seen its parent. You can see these by specifying the `-debug=reindex` option (see the second comment in this PR).\r\n\r\nWhat this PR does -- and now all it does -- is to initially deserialize only the _header_ (80 bytes), not the entire block. From the header, we can tell if this block's parent has already been seen (by its prev-hash). If not (92% of the time), we skip over the rest of the block. So the savings are to not deserialize the entire block in the most common case where that's unnecessary. \r\n\r\nIt's true that if all blocks _were_ in order, this would be slightly slower because we'd deserialize the header, discover that the block's parent is already known, then deserialize the full block. (There's no easy way to deserialize the _rest_ of the block.)\r\n\r\nTo test this change,you may want to apply this patch:\r\n```\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -692,6 +692,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\r\n         pblocktree->WriteReindexing(false);\r\n         fReindex = false;\r\n         LogPrintf(\"Reindexing finished\\n\");\r\n+        StartShutdown();\r\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\r\n         LoadGenesisBlock(chainparams);\r\n     }\r\n```\r\nThen you can time the reindexing in isolation (without having to look at timestamps in the log file):\r\n```\r\n$ time src/bitcoind --reindex --maxconnections=0\r\n```\r\nSetting `maxconnections` to zero makes the timing less variable, since you can get very different peers each time.\r\n\r\nWhen I run this, I consistently get 83 minutes with this PR's branch, and 125 minutes without, an improvement of 42 minutes.",
      "created_at" : "2020-02-21T19:07:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-589791783",
      "id" : 589791783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTc5MTc4Mw==",
      "updated_at" : "2020-02-24T03:46:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589791783",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to clarify, the last bullet point in the [review club writeup](https://bitcoincore.reviews/16981.html): \r\n\r\n> Before this PR, we would always read entire blocks from disk into our buffer. If the predecessor of a block was not available, the blocks would have to be read again at a later point. This PR changes behavior such that initially only the 80 byte block header is read into the buffer, and if we canât accept the block yet, the rest of the block is skipped for now\r\n\r\nis slightly incorrect. Even with this PR, we always read entire blocks from disk (most of them twice); the disk read behavior before and after this PR is exactly the same. The difference is that with this PR, only the _header_ is (initially) deserialized, rather than the entire block, which saves CPU.\r\n\r\nThe `CBufferedFile` object does somewhat large reads, around 4 MB (`MAX_BLOCK_SERIALIZED_SIZE`), each of which often includes multiple entire blocks and a partial block (because we don't know where the boundaries are; we don't know how much to read to get exactly a block or blocks). Recent blocks are close to full, so each disk read probably reads in only one or two blocks (plus a partial block). \r\n\r\nBut now I'm wondering if this PR _should_ work as described in the review club comment. We could read only the 80-byte header from disk, and then, if we've seen its parent, read the rest of the block. Two disk reads are less efficient than one large read (a disk read has a fixed overhead and a length-proportional overhead), but that happens only about 8% of the time. If we haven't seen this block's parent (probability 92%), we could _seek_ ahead in the file, instead of reading it into memory. But as explained earlier, there could be _more_ than one block per large read, so we may end up exchanging one large read for 2 or 3 80-byte reads -- hard to say which is better. I'd recommend leaving this PR as is, because it's an (almost) unambiguous improvement on the status quo, and changing it to do 80-byte reads and seeks is more complex than this PR is currently. (The reason I say almost is because, if the blocks are already sorted, this ends up deserializing the header one extra time.)\r\n\r\nI'm just now thinking, we could make `reindex` (part 1) screaming fast by storing the headers in separate \"parallel\" files in the `blocks/` directory: `blk01234.dat` would be the same as now, but there would be a `hdr01234.dat` (similar to the way there's a `rev001234.dat` today) that would be that file's blocks' headers in the same order. Actually, that file would be a sequence of (header, file-offset, size) tuples. The file-offset is the file offset of that block's block in the same-named `blk` file. That's only 100 MB of additional disk space (about 100 bytes times about 1M blocks, this is far less than 1% of the size of the `blocks/` directory). \r\n\r\nThen `-reindex` could do 4 MB reads, same as today except reading the `hdr001234.dat` files, bringing in 50k headers in a single read -- super-efficient. Then loop through each of those, and if the block can be accepted now (its parent has been seen, 8% case), then seek and read from the `blk01234.dat` file (we would know the exact seek offset and the size); that would be slower than today. But the 92% case would be much faster because we wouldn't be reading entire blocks into memory unnecessarily. This would be a significant reduction in the number of disk reads. (Definitely this would be a separate PR.) Opinions?",
      "created_at" : "2020-03-03T19:27:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594125403",
      "id" : 594125403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDEyNTQwMw==",
      "updated_at" : "2020-03-03T19:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594125403",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387491322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387491322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I only understood this comment after I got to L#359.\r\n```suggestion\r\n    // The value at each offset is the byte offset (e.g. byte 1 in the file has the value 0x01, etc).\r\n```",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T07:36:54Z",
      "diff_hunk" : "@@ -335,6 +339,57 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     fs::remove(\"streams_test_tmp\");\n }\n \n+BOOST_AUTO_TEST_CASE(streams_buffered_file_skip)\n+{\n+    FILE* file = fsbridge::fopen(\"streams_test_tmp\", \"w+b\");\n+    // The value at each offset is the offset.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387491322",
      "id" : 387491322,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTMyMg==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 20,
      "path" : "src/test/streams_tests.cpp",
      "position" : 20,
      "pull_request_review_id" : 368556009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T07:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387491322",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387493207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387493207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You could do\r\n```C++\r\nBOOST_CHECK_THROW(bf.Skip(2), std::exception);\r\n```\r\n",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T07:42:28Z",
      "diff_hunk" : "@@ -335,6 +339,57 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     fs::remove(\"streams_test_tmp\");\n }\n \n+BOOST_AUTO_TEST_CASE(streams_buffered_file_skip)\n+{\n+    FILE* file = fsbridge::fopen(\"streams_test_tmp\", \"w+b\");\n+    // The value at each offset is the offset.\n+    for (uint8_t j = 0; j < 40; ++j) {\n+        fwrite(&j, 1, 1, file);\n+    }\n+    rewind(file);\n+\n+    // The buffer is 25 bytes, allow rewinding 10 bytes.\n+    CBufferedFile bf(file, 25, 10, 222, 333);\n+\n+    uint8_t i;\n+    // This is like bf >> (7-byte-variable), in that it will cause data\n+    // to be read from the file into memory, but it's not copied to us.\n+    bf.Skip(7);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 7);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 7);\n+\n+    // The bytes in the buffer up to offset 7 are valid and can be read.\n+    BOOST_CHECK(bf.SetPos(0));\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 0);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 1);\n+\n+    // Skip()'s argument is the number of bytes to move forward in the\n+    // file, not the absolute file position. Since bf is currently\n+    // positioned to 2, this will advance it to 11.\n+    bf.Skip(9);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 11);\n+\n+    // Skip() honors the transfer limit; this allows only one byte\n+    // to be skipped (or read) since we're at position 12.\n+    bf.SetLimit(13);\n+    try {\n+        bf.Skip(2);\n+        BOOST_CHECK(false);\n+    } catch (const std::exception& e) {\n+        BOOST_CHECK(strstr(e.what(),\n+                        \"Read attempted past buffer limit\") != nullptr);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387493207",
      "id" : 387493207,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MzIwNw==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 60,
      "path" : "src/test/streams_tests.cpp",
      "position" : 60,
      "pull_request_review_id" : 368556009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T07:56:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387493207",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "~Btw https://bitcoincore.reviews/16981.html notes that this fixes a bug as well. I would really like if this bug-fix was its own separate commit (followed by the commit doing the actual runtime performance improvement).~",
      "created_at" : "2020-03-04T09:26:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594413086",
      "id" : 594413086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDQxMzA4Ng==",
      "updated_at" : "2020-03-04T10:26:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594413086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems to be a misunderstanding. I don't think that this PR fixes a bug, the sentence in question referred to the older PR #16577 which is already merged.",
      "created_at" : "2020-03-04T10:16:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594436158",
      "id" : 594436158,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDQzNjE1OA==",
      "updated_at" : "2020-03-04T10:16:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594436158",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "OH. Yeah, that's what it says. I wasn't reading carefully enough.",
      "created_at" : "2020-03-04T10:26:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594440844",
      "id" : 594440844,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDQ0MDg0NA==",
      "updated_at" : "2020-03-04T10:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594440844",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387828430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387828430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Could this 80 become a const? The block header might get bigger or smaller in future and this 80 could get missed.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T17:44:04Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387828430",
      "id" : 387828430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODQzMA==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : 17,
      "pull_request_review_id" : 368987724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T17:44:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387828430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387833215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387833215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this call is unnecessary. It's there in the old code to make sure there is consistency between the block length in the file, and the actually serialized data. Headers are always just 80 bytes, though, so this check isn't necessary here.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T17:52:53Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387833215",
      "id" : 387833215,
      "in_reply_to_id" : 387828430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzIxNQ==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : 17,
      "pull_request_review_id" : 368993766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T17:59:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387833215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387834622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387834622"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is incorrect. If the size field of the block was corrupted this would cause us to potentially jump into nowhere. Do things still work (and still give a performance benefit...) if you change this to nBlockPos + 1?",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T17:55:22Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387834622",
      "id" : 387834622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDYyMg==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 368993766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T17:59:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387834622",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387853603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387853603"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Skip() calls read(), which means (IIUC) that this change makes it so we are now doing a disk read while holding cs_main. Given this is reindexing this might not matter but worth noting. Is this a problem?",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T18:30:53Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;\n+                        blkdat.SetLimit(nRewind);\n+                        blkdat.Skip(nRewind - blkdat.GetPos());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387853603",
      "id" : 387853603,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MzYwMw==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 37,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 369019654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T18:30:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387853603",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387929685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387929685"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also, I think this part could be more concise. I mean adding position + size just do subtract position below, seems a bit redundant.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-04T20:57:05Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;\n+                        blkdat.SetLimit(nRewind);\n+                        blkdat.Skip(nRewind - blkdat.GetPos());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r387929685",
      "id" : 387929685,
      "in_reply_to_id" : 387853603,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyOTY4NQ==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 37,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 369116403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-04T20:57:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387929685",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, also reviewed the code and mostly satisfied. I think there is good potential for performance improvement here. I will wait with testing until the current comments are addressed.",
      "created_at" : "2020-03-04T21:02:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-594839172",
      "id" : 594839172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16981",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDgzOTE3Mg==",
      "updated_at" : "2020-03-04T21:02:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594839172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388080048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388080048"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think if `nSize` as read from disk is wrong, then\r\n\r\n(a) if it's smaller than the actual size of the block, `blkdat >> block` will currently throw which will spit out a `Deserialize or I/O error` and start trying again at the end of the `nSize` bytes -- so this behaviour should be near enough to the same, and this is fine\r\n\r\nand (b) if it's larger than the actual size of the block, the `nSize` will be effectively ignored, and we'll pick up at a different, possibly incorrect point, and try to find the next `chainparams.MessageStart()` marker, so we could miss up to, I guess, 8MB worth of block data (4MB due to a bad nSize which is just skipped over, then just under 4MB if the next block was as large as possible and we just missed its start which is read byte-by-byte) due to 4 bytes of corrupted size data, rather than just coping with it. This is worse, but doesn't seem terrible -- if the four bytes that were corrupted were the last bytes of one block and the first bytes of another you'd have lost up to 8MB of data that way too, without any more precise targeting.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-05T05:05:39Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388080048",
      "id" : 388080048,
      "in_reply_to_id" : 387834622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA4MDA0OA==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 369297512,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-05T05:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388080048",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388401714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388401714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This kind of check occurs four places in this file (and was being done before this PR, for example line 256). I like the conciseness of your suggestion, but it loses the check of the exception string. (The test wouldn't detect if a completely different exception occurred.) Another advantage of checking the exception string is that it documents why the exception is thrown (could be in a comment, but code is better).\r\n\r\nIt would be nice if there was a variant of `BOOST_CHECK_THROW` that took a string argument. What do you think about implementing this in this file, or in a more general place:\r\n```\r\n#define BOOST_CHECK_THROW_WHAT(statement, exception, str) \\\r\n    do { \\\r\n        try { \\\r\n            statement; \\\r\n            BOOST_CHECK(false); \\\r\n        } catch (const exception& e) { \\\r\n            BOOST_CHECK(strstr(e.what(), str) != nullptr); \\\r\n        } \\\r\n    } while (false)\r\n```\r\nand then replacing the `try/catch` (here and in 3 other places) with:\r\n```\r\n    BOOST_CHECK_THROW_WHAT(bf.Skip(2),\r\n        std::exception, \"Read attempted past buffer limit\");\r\n```\r\n(I tested this.) It's weird to name this macro `BOOST_*` because it's not part of the Boost library, but what it does is so close to `BOOST_CHECK_THROW()` that it may make sense. If the casual reader thinks this is part of Boost, is that so bad?",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-05T16:16:46Z",
      "diff_hunk" : "@@ -335,6 +339,57 @@ BOOST_AUTO_TEST_CASE(streams_buffered_file)\n     fs::remove(\"streams_test_tmp\");\n }\n \n+BOOST_AUTO_TEST_CASE(streams_buffered_file_skip)\n+{\n+    FILE* file = fsbridge::fopen(\"streams_test_tmp\", \"w+b\");\n+    // The value at each offset is the offset.\n+    for (uint8_t j = 0; j < 40; ++j) {\n+        fwrite(&j, 1, 1, file);\n+    }\n+    rewind(file);\n+\n+    // The buffer is 25 bytes, allow rewinding 10 bytes.\n+    CBufferedFile bf(file, 25, 10, 222, 333);\n+\n+    uint8_t i;\n+    // This is like bf >> (7-byte-variable), in that it will cause data\n+    // to be read from the file into memory, but it's not copied to us.\n+    bf.Skip(7);\n+    BOOST_CHECK_EQUAL(bf.GetPos(), 7);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 7);\n+\n+    // The bytes in the buffer up to offset 7 are valid and can be read.\n+    BOOST_CHECK(bf.SetPos(0));\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 0);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 1);\n+\n+    // Skip()'s argument is the number of bytes to move forward in the\n+    // file, not the absolute file position. Since bf is currently\n+    // positioned to 2, this will advance it to 11.\n+    bf.Skip(9);\n+    bf >> i;\n+    BOOST_CHECK_EQUAL(i, 11);\n+\n+    // Skip() honors the transfer limit; this allows only one byte\n+    // to be skipped (or read) since we're at position 12.\n+    bf.SetLimit(13);\n+    try {\n+        bf.Skip(2);\n+        BOOST_CHECK(false);\n+    } catch (const std::exception& e) {\n+        BOOST_CHECK(strstr(e.what(),\n+                        \"Read attempted past buffer limit\") != nullptr);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388401714",
      "id" : 388401714,
      "in_reply_to_id" : 387493207,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMTcxNA==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 60,
      "path" : "src/test/streams_tests.cpp",
      "position" : 60,
      "pull_request_review_id" : 369710712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-05T21:29:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388401714",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388419751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388419751"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think this call is unnecessary. \r\n\r\nThanks, I'll remove it. (@emilengler's comment is no longer relevant.) It's similar to the way we don't call `SetLimit()` before deserializing into the 4-byte `nSize` just above.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-05T16:44:06Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388419751",
      "id" : 388419751,
      "in_reply_to_id" : 387828430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxOTc1MQ==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : 17,
      "pull_request_review_id" : 369710712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-05T21:29:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388419751",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388542805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388542805"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These comments create a good opportunity for me to ask some questions about the existing design while doing this PR, hope that's okay. Please don't feel an obligation to answer these.\r\n\r\n- What's the purpose of the `MessageStart()` marker? It seems to allow the skipping over some arbitrary junk that follows a block before the start of the next [marker-nSize-block] sequence of bytes. What could cause that? In other projects, I've seen these markers used when a file gets _overwritten_ (such as a journal file that implements a circular log), because after restart, the previous write offset is unknown. Are these `blk` files overwritten?\r\n- Are we trying to be robust against arbitrary file-overwrite corruption? If the file contains 100 blocks, and data corruption overwrote part of the second block, then this design (searching for the marker) will find the start of the third block and pick up from there and correctly parse the remaining 97 blocks. This sounds good, but the second block's child (or children) will never be \"accepted\" (`AcceptBlock()` called on it), recursively (and not just for this file but for all remaining files), so we'll end up with a very truncated blockchain. What happens then? I think we may download blocks from peers (IBD) starting from where the corruption occurred. That great if true (why don't I actually try this?), although a minor problem is that the many entries in `mapBlocksUnknownParent` are never released since that map is static -- which is kind of weird. But since these (following) blocks are never accepted, the rest of this part 1 of reindex is wasted effort. It may be better to just abort the rest of this part 1 of reindexing if we encounter any file corruption.\r\n\r\n> If the size field of the block was corrupted\r\n\r\nIt's true that this PR increases dependence on this field, but If we're assuming the size can be corrupted, I'm not sure what benefit it can be providing, either with or without this PR. Yes, setting `nRewind` to `nBlockPos+1` would work (I haven't tried it but I could), but it would be significantly slower because we'd have to scan for the next marker (a megabyte or 2 away) one byte at a time.\r\n\r\nIt seems to me that if the size field is corrupted, all bets are off, the train's going off the tracks in a hurry.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-05T20:22:56Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388542805",
      "id" : 388542805,
      "in_reply_to_id" : 387834622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MjgwNQ==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 369710712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-05T21:29:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388542805",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388573910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388573910"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Skip() calls read()\r\n\r\nGood catch, and it's actually even worse, because if we process the block immediately (don't take the `Skip()` path), then we deserialize the entire block (`blkdat >> block`, just below), and that calls `read()` which can read the disk. But that's the less common path (only about 8%).\r\n\r\nAs someone said at review club, the node isn't fully up and running during reindexing, so there probably isn't much contention for this lock. But I think we can avoid this problem; I'll push a fix if it doesn't complicate the code too much.\r\n\r\n> this part could be more concise. I mean adding position + size just do subtract position below, seems a bit redundant.\r\n\r\nI don't think it's redundant; note that `nBlockPos` is the start of the current block (whose header we just read), while `blkdat.GetPos()` returns the current position, which is _after_ the header. We don't want to skip `nSize` bytes (which is the length of the block), we want to skip the _remainder_ of the current block, so the distance to move forward is the start of the next block minus the current position. This could have been written `blkdat.Skip(nSize - 80)` but I think that's not as clear.\r\n\r\nI just noticed that the `SetLimit()` here can be removed; it's not needed when doing a `Skip()` (it's only needed when deserializing something of variable length, such as a block). I'll remove it.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-05T21:23:53Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;\n+                        blkdat.SetLimit(nRewind);\n+                        blkdat.Skip(nRewind - blkdat.GetPos());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388573910",
      "id" : 388573910,
      "in_reply_to_id" : 387853603,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MzkxMA==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 37,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 369710712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-05T21:29:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388573910",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388691811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388691811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The main point of `-reindex` now is recovery after on-disk corruption, so I think it makes sense to be as robust to that as we can reasonably be?\r\n\r\nAs well as just random disk corruption, I think you can get problems if (a) you're downloading blocks and your power goes out before the data gets synced; I'd expect you might end up with something like \"...[marker][nSize=1MB][250kB of block data][64kB of zeroes]\" in that case; at which point when you restart you might start writing the next block straight after the zeroes. When running reindex currently, I think your parsing would fail during the 64kB of zeroes, and you'd then scan to the next marker and continue. If so, I guess that means that with this patch, if you ran `-reindex` you'd not see that new block and have to redownload it. That's all speculation though, so don't take my word for it.\r\n\r\nHmm, as an alternative approach, what if you just still read/parse the entire block off the disk, but if it's not one you can immediately accept, you store it into a map for later acceptance? Limit the map to 32MB worth of data, or maybe somehow tie it in to the mempool limit? Keeps the same logic, but reduces the amount of double-reading and double-parsing needed.",
      "commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "created_at" : "2020-03-06T03:05:48Z",
      "diff_hunk" : "@@ -4674,29 +4674,39 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 break;\n             }\n             try {\n-                // read block\n+                // read block header\n                 uint64_t nBlockPos = blkdat.GetPos();\n                 if (dbp)\n                     dbp->nPos = nBlockPos;\n-                blkdat.SetLimit(nBlockPos + nSize);\n-                blkdat.SetPos(nBlockPos);\n-                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-                CBlock& block = *pblock;\n-                blkdat >> block;\n-                nRewind = blkdat.GetPos();\n-\n-                uint256 hash = block.GetHash();\n+                blkdat.SetLimit(nBlockPos + 80);\n+                CBlockHeader header;\n+                blkdat >> header;\n+\n+                const uint256 hash = header.GetHash();\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(header.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                                block.hashPrevBlock.ToString());\n+                                header.hashPrevBlock.ToString());\n                         if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                            mapBlocksUnknownParent.insert(std::make_pair(header.hashPrevBlock, *dbp));\n+\n+                        // Position to the start of the next block.\n+                        nRewind = nBlockPos + nSize;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16981#discussion_r388691811",
      "id" : 388691811,
      "in_reply_to_id" : 387834622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5MTgxMQ==",
      "original_commit_id" : "a50f956e304adc7c75428ec391f1a76a99c1ddde",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 370057230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16981",
      "updated_at" : "2020-03-06T03:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/388691811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
