[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26289](https://github.com/bitcoin/bitcoin/pull/26289) (Use util::Result in for calculating mempool ancestors by stickies-v)\n* [#25685](https://github.com/bitcoin/bitcoin/pull/25685) (wallet: Faster transaction creation by removing pre-set-inputs fetching responsibility from Coin Selection by furszy)\n* [#25273](https://github.com/bitcoin/bitcoin/pull/25273) (wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction by achow101)\n* [#24128](https://github.com/bitcoin/bitcoin/pull/24128) (wallet: BIP 326 sequence based anti-fee-snipe for taproot inputs by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-09-21T23:24:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1254331602",
      "id" : 1254331602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585Kw5TS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602/reactions"
      },
      "updated_at" : "2022-10-26T00:23:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\r\n```",
      "commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "created_at" : "2022-09-22T08:30:02Z",
      "diff_hunk" : "@@ -0,0 +1,219 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else if (mempool.isSpent(outpoint) || !mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist wihout its ancestor MockMempoolEntry, so these sets won't be invalidated.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049",
      "id" : 977356049,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII5846QUUR",
      "original_commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 75,
      "pull_request_review_id" : 1116611222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-22T08:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```bash\r\nFile \"test/functional/wallet_spend_unconfirmed.py\" contains a shebang line, but has the file permission 644 instead of the expected executable permission 755. Do \"chmod 755 test/functional/wallet_spend_unconfirmed.py\" (or remove the shebang line).\r\nERROR: There were 1 failed tests in the lint-files.py lint test. Please resolve the above errors.\r\n```\r\n\r\nThis also needs to be added to the list of tests in `test_runner.py`. Which should deal with:\r\n```bash\r\nï¿½[1mWARNING!ï¿½[0m The following scripts are not being run: ['wallet_spend_unconfirmed.py']. Check the test lists in test_runner.py.\r\n```",
      "commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "created_at" : "2022-09-22T08:32:06Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612",
      "id" : 977359612,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII5846QVL8",
      "original_commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 1,
      "pull_request_review_id" : 1116611222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-22T08:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks @fanquake, I fixed the two issues.\r\n\r\nI also added a test for a transaction using `subtractfeefromamount`",
      "created_at" : "2022-09-22T19:56:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1255484595",
      "id" : 1255484595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585K1Syz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595/reactions"
      },
      "updated_at" : "2022-09-22T19:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, lint error is my fault here\r\n\r\n```suggestion\r\n                        ++i;\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T07:37:55Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744",
      "id" : 978344744,
      "line" : 1245,
      "node_id" : "PRRC_kwDOABII5846UFso",
      "original_commit_id" : "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "original_line" : 1245,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 63,
      "pull_request_review_id" : 1118029972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T07:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "whitespace linter\r\n```suggestion\r\n                        // we still need to process this\r\n```\r\n\r\n------\r\n\r\nEdit (you can set up your editor to highlight these or run `test/lint/lint-whitespace.py` as part of your local scripted prechecks before pushing, with clang-format, etc.):\r\n\r\n```diff\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -1242,10 +1242,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = parent_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(parent_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n@@ -1259,10 +1259,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = child_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(child_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n```\r\n",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T07:52:01Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; \n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993",
      "id" : 978355993,
      "line" : 1248,
      "node_id" : "PRRC_kwDOABII5846UIcZ",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 1248,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 66,
      "pull_request_review_id" : 1118045668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T07:58:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "All struct members are public by default, so can either drop `public` here (and removed the getters), or make the struct a class if any of the data members above are intended to be private (for instance, `tx` and `fee_individual` have public getters and could be private, or just be public and drop the getter).\r\n\r\nAt first look it seems some of the data members need to be public, in which case their getters should be used or removed. This builds:\r\n\r\n```diff\r\n-struct MockMempoolEntry {\r\n+class MockMempoolEntry\r\n+{\r\n     CAmount fee_individual;\r\n-    CAmount fee_with_ancestors;\r\n-    int64_t vsize_individual;\r\n-    int64_t vsize_with_ancestors;\r\n     const CTransaction& tx;\r\n \r\n public:\r\n+    CAmount fee_with_ancestors;\r\n+    int64_t vsize_individual;\r\n+    int64_t vsize_with_ancestors;\r\n     explicit MockMempoolEntry(CTxMemPool::txiter entry) :\r\n         fee_individual{entry->GetModifiedFee()},\r\n         fee_with_ancestors{entry->GetModFeesWithAncestors()},\r\n```\r\n",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:16:33Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196",
      "id" : 978380196,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII5846UOWk",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 24,
      "pull_request_review_id" : 1118076665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:16:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:42:28Z",
      "diff_hunk" : "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242",
      "id" : 978402242,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII5846UTvC",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 226,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 22,
      "pull_request_review_id" : 1118109036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    //  it means the transaction has multiple change outputs or paid the same wallet using multiple\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:43:28Z",
      "diff_hunk" : "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (this should be very rare because\n+    //  the transaction essentially multiple change outputs or paid the same wallet using multiple",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663",
      "id" : 978403663,
      "line" : 230,
      "node_id" : "PRRC_kwDOABII5846UUFP",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 230,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 26,
      "pull_request_review_id" : 1118109036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd say just remove the getters, it's fine to keep these public. This struct is only used by `MiniMiner`.\r\nFor background, I originally was trying to align the interface with `CTxMemPoolEntry` like `CTxMemPoolModifiedEntry` to reuse the `CompareTxMemPoolEntryByAncestorFee` comparator in a multi index container, but then realized using simple `std::map`s was enough.",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-23T10:41:12Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186",
      "id" : 978501186,
      "in_reply_to_id" : 978380196,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII5846Ur5C",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 22,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 22,
      "pull_request_review_id" : 1118249028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:41:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I ran a first set of tests from within eclair against https://github.com/bitcoin/bitcoin/pull/26152/commits/a07ac02d2bc6500a03c29a0413bb913735dca46f, and everything is looking good :+1: ",
      "created_at" : "2022-09-23T15:49:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1256381127",
      "id" : 1256381127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585K4trH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127/reactions"
      },
      "updated_at" : "2022-09-23T15:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack, @t-bast: Thanks for the review and testing. I made an attempt of getting rid of the getters on MockMempoolEntry, but what I did interfered with the calls made on properties of actual mempool entries. Will have to shift my approach.",
      "created_at" : "2022-09-27T19:19:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1259945661",
      "id" : 1259945661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585LGT69",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661/reactions"
      },
      "updated_at" : "2022-09-27T20:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@glozow: Maybe for\r\n\r\n> This needs to obey -maxtxfee\r\n\r\nMaybe we can add a `maxtxfee` check to the filter introduced in #25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and #25729.\r\n\r\n@jonatack, @t-bast:\r\nFixed whitespace issues, applied the propose change to a class for the `struct MockMempoolEntry`, amended comments in Chain interface. Thanks!\r\n",
      "created_at" : "2022-09-27T20:25:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1260008562",
      "id" : 1260008562,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585LGjRy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562/reactions"
      },
      "updated_at" : "2022-09-27T20:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 9b33f5db095c232ac83304c91524f48bf799802f\r\n\r\nThese need to match the order of the members, CI -Wreorder-ctor says",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:45:55Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors()),\n+        tx{entry->GetTx()}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810",
      "id" : 982428810,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jqyK",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 31,
      "original_position" : 31,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in f40b9fe6a83b6668a625e28520456350f2cd98f0\r\n\r\nAs discussed offline, this case can be deleted since it will never be hit (and is also incorrect).",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:46:58Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051",
      "id" : 982430051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jrFj",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 1245,
      "original_position" : 63,
      "original_start_line" : 1239,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this as well in f40b9fe6a83b6668a625e28520456350f2cd98f0",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:47:06Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;\n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this\n+                        ++unprocessed_count;\n+                    }\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    if (child_entry.GetCountWithAncestors() == 1 &&\n+                        child_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = child_it;\n+                        ++i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211",
      "id" : 982430211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jrID",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 1262,
      "original_position" : 80,
      "original_start_line" : 1256,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have 2 concerns with this approach, please let me know what you think:\r\n\r\n(1) The `COutput` constructor really shouldn't need to have a reference the chain interface; it smells a bit weird that coinselection (which I interpret to be a relatively well-modularized component thus far since it doesn't even depend on wallet) has a new dependency on interfaces/chain.h. It's unclear to me why `CalculateBumpFees()` needs to be called *inside* the constructor instead of just having `CAmount ancestor_bump_fees` be a parameter?\r\n\r\n(2) This means `CalculateBumpFees()` will be called over and over again for each `COutput` constructed within the `AvailableCoins` loop. There's not a lot of duplicated work if all the outputs are from independent transactions, but it would definitely be faster to call it once with all the outpoints at once.\r\n\r\nApproach-wise, I think it makes more sense to call `CalculateBumpFees()` just once, with the full list of outpoints. It should be fairly straightforward with preset inputs since you have the list already. For `AvailableCoins`, since they're constructed as you iterate through `mapWallet`, you could populate each output's `ancestor_bump_fees` values at the end. If you want to construct them as-is and then not mutate afterwards, then maybe do 2 passes for filtering and constructing?",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T14:19:24Z",
      "diff_hunk" : "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036",
      "id" : 982470036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846j02U",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 77,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0\r\n\r\nMissing a test for `bumpfee` RPC?",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T14:22:24Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716",
      "id" : 982473716,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII5846j1v0",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 318,
      "original_position" : 318,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 318,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T14:24:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now applying the bumpfees to each output after constructing the output.",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-10-27T18:55:00Z",
      "diff_hunk" : "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469",
      "id" : 1007251469,
      "in_reply_to_id" : 982470036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848CXAN",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 77,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 1158885486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-27T18:55:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- Reordered members vs initialization\r\n- Removed special casing of UTXOs without relatives in CalculateBumpFee\r\n- Call CalculateBumpFee once for the whole UTXO pool instead of introducing chain-interface dependency on every UTXO\r\n\r\nTodos:\r\n- Prevent exceeding `maxtxfee`\r\n- Add test for bumpfee RPC\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat. ",
      "created_at" : "2022-10-27T19:08:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1293951299",
      "id" : 1293951299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NICFD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299/reactions"
      },
      "updated_at" : "2022-10-27T19:08:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-10-27T22:56:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1294211012",
      "id" : 1294211012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NJBfE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211012/reactions"
      },
      "updated_at" : "2022-10-27T22:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
