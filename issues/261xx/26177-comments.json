[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26162](https://github.com/bitcoin/bitcoin/pull/26162) (Remove taproot chain param and list exception blocks in getdeploymentinfo by Sjors)\n* [#25725](https://github.com/bitcoin/bitcoin/pull/25725) (consensus: Remove mainnet checkpoints by sdaftuar)\n* [#25695](https://github.com/bitcoin/bitcoin/pull/25695) (tidy: add modernize-use-using by fanquake)\n* [#25172](https://github.com/bitcoin/bitcoin/pull/25172) (refactor: use std:: prefix for std lib funcs by fanquake)\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-09-24T16:21:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#issuecomment-1257005711",
      "id" : 1257005711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26177",
      "node_id" : "IC_kwDOABII585K7GKP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257005711/reactions"
      },
      "updated_at" : "2022-09-24T16:21:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257005711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980398556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980398556"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it's not really \"SigNetOptions filled with default values\" but rather \"Options for the default signet\". I remember @theuni made a good point offline that it almost never makes sense to override _some_ of the options for the default signet.",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-26T19:01:36Z",
      "diff_hunk" : "@@ -146,6 +146,32 @@ class CChainParams\n     ChainTxData chainTxData;\n };\n \n+/**\n+ * SigNetOptions holds configurations for creating a signet CChainParams.\n+ */\n+struct SigNetOptions {\n+    const std::vector<uint8_t> challenge;\n+    std::vector<std::string> seeds;\n+};\n+\n+/**\n+ * Return SigNetOptions filled with default values.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980398556",
      "id" : 980398556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846b7Hc",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 158,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/chainparams.h",
      "position" : 13,
      "pull_request_review_id" : 1120755316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980398556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-26T19:18:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980398556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980401112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980401112"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ping @ajtowns, could you take a peek? 9929969d3e95197499f2c81c01702f11aa52ff0d",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-26T19:04:41Z",
      "diff_hunk" : "@@ -415,7 +415,8 @@ std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& a\n class CRegTestParams : public CChainParams",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980401112",
      "id" : 980401112,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846b7vY",
      "original_commit_id" : "9929969d3e95197499f2c81c01702f11aa52ff0d",
      "original_line" : 415,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 1,
      "pull_request_review_id" : 1120755316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980401112/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-26T19:18:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980401112",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980405199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405199"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm... Been a while since I last took a look but how hard would it be to have this as a member of `kernel::Context`? What does the caller graph look like?\r\n\r\nIt might be the case that this is a situation where it'd be too intrusive to have the N I C E C O D E as discussed here: https://github.com/bitcoin/bitcoin/pull/25065#pullrequestreview-985450940",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-26T19:10:16Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <kernel/chainparamsbase.h>\n+\n+#include <tinyformat.h>\n+\n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::SIGNET = \"signet\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+\n+/**\n+ * Port numbers for incoming Tor connections (8334, 18334, 38334, 18445) have\n+ * been chosen arbitrarily to keep ranges of used ports tight.\n+ */\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN) {\n+        return std::make_unique<CBaseChainParams>(\"\", 8332, 8334);\n+    } else if (chain == CBaseChainParams::TESTNET) {\n+        return std::make_unique<CBaseChainParams>(\"testnet3\", 18332, 18334);\n+    } else if (chain == CBaseChainParams::SIGNET) {\n+        return std::make_unique<CBaseChainParams>(\"signet\", 38332, 38334);\n+    } else if (chain == CBaseChainParams::REGTEST) {\n+        return std::make_unique<CBaseChainParams>(\"regtest\", 18443, 18445);\n+    }\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+}\n+\n+static std::unique_ptr<CBaseChainParams> globalChainBaseParams;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980405199",
      "id" : 980405199,
      "line" : 34,
      "node_id" : "PRRC_kwDOABII5846b8vP",
      "original_commit_id" : "c00f4f7599b89df8196287176e743a99da1de67f",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/kernel/chainparamsbase.cpp",
      "position" : 32,
      "pull_request_review_id" : 1120755316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-26T19:18:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980405848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405848"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Could use `using` declarations in `.cpp` files (if you want)",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-26T19:11:03Z",
      "diff_hunk" : "@@ -67,10 +67,10 @@ static void SetupCliArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n-    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n-    const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n-    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n+    const auto defaultBaseParams = kernel::CreateBaseChainParams(CBaseChainParams::MAIN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980405848",
      "id" : 980405848,
      "line" : 70,
      "node_id" : "PRRC_kwDOABII5846b85Y",
      "original_commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "original_line" : 70,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 8,
      "pull_request_review_id" : 1120755316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-26T19:18:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980405848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980611417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980611417"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would have expected a `SignetOptions GetSignetOptions(const ArgsManager& args)` function, and then just calling `CreateSignetChainParams(GetSignetOptions(args));`. Makes it a bit clearer that all that's going on is that the args are being translated to a `SignetOptions` structure, and doesn't tempt anyone to put any clever logic outside of the kernel.\r\n\r\nYou could even call it `operator SigNetOptions(const ArgsManager& args)` to have it be implicit, I guess?\r\n\r\n(Be nice to be consistent calling it \"SigNet\" rather than \"Signet\" in some places and \"SigNet\" in others. Apologies if I introduced any of the \"Signet\" instances :)",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T00:06:04Z",
      "diff_hunk" : "@@ -6,145 +6,34 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n+#include <kernel/chainparams.h>\n+\n #include <chainparamsbase.h>\n #include <consensus/params.h>\n+#include <cstdint>\n #include <netaddress.h>\n #include <primitives/block.h>\n #include <protocol.h>\n+#include <unordered_map>\n #include <util/hash_type.h>\n \n #include <memory>\n #include <string>\n #include <vector>\n \n-typedef std::map<int, uint256> MapCheckpoints;\n-\n-struct CCheckpointData {\n-    MapCheckpoints mapCheckpoints;\n-\n-    int GetHeight() const {\n-        const auto& final_checkpoint = mapCheckpoints.rbegin();\n-        return final_checkpoint->first /* height */;\n-    }\n-};\n-\n-struct AssumeutxoHash : public BaseHash<uint256> {\n-    explicit AssumeutxoHash(const uint256& hash) : BaseHash(hash) {}\n-};\n-\n-/**\n- * Holds configuration for use during UTXO snapshot load and validation. The contents\n- * here are security critical, since they dictate which UTXO snapshots are recognized\n- * as valid.\n- */\n-struct AssumeutxoData {\n-    //! The expected hash of the deserialized UTXO set.\n-    const AssumeutxoHash hash_serialized;\n-\n-    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n-    //!\n-    //! We need to hardcode the value here because this is computed cumulatively using block data,\n-    //! which we do not necessarily have at the time of snapshot load.\n-    const unsigned int nChainTx;\n-};\n-\n-using MapAssumeutxo = std::map<int, const AssumeutxoData>;\n-\n /**\n- * Holds various statistics on transactions within a chain. Used to estimate\n- * verification progress during chain sync.\n- *\n- * See also: CChainParams::TxData, GuessVerificationProgress.\n+ * Creates and returns a std::unique_ptr<CChainParams> for signet.\n+ * @returns std::unique_ptr<const CChainParams>.\n+ * @throws a std::runtime_error if multiple signet challenges are passed in through the args.\n  */\n-struct ChainTxData {\n-    int64_t nTime;    //!< UNIX timestamp of last known number of transactions\n-    int64_t nTxCount; //!< total number of transactions between genesis and that timestamp\n-    double dTxRate;   //!< estimated number of transactions per second after that timestamp\n-};\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980611417",
      "id" : 980611417,
      "line" : 29,
      "node_id" : "PRRC_kwDOABII5846cvFZ",
      "original_commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "original_line" : 29,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/chainparams.h",
      "position" : 66,
      "pull_request_review_id" : 1121055600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980611417/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T02:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980611417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980652000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980652000"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would have expected `bool fastprune{false};` here. I don't really think we support any values other than 100 or 1000?",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T01:47:33Z",
      "diff_hunk" : "@@ -0,0 +1,184 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_CHAINPARAMS_H\n+#define BITCOIN_KERNEL_CHAINPARAMS_H\n+\n+#include <kernel/chainparamsbase.h>\n+#include <consensus/params.h>\n+#include <netaddress.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <unordered_map>\n+#include <util/hash_type.h>\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    MapCheckpoints mapCheckpoints;\n+\n+    int GetHeight() const {\n+        const auto& final_checkpoint = mapCheckpoints.rbegin();\n+        return final_checkpoint->first /* height */;\n+    }\n+};\n+\n+struct AssumeutxoHash : public BaseHash<uint256> {\n+    explicit AssumeutxoHash(const uint256& hash) : BaseHash(hash) {}\n+};\n+\n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const AssumeutxoHash hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;\n+\n+/**\n+ * Holds various statistics on transactions within a chain. Used to estimate\n+ * verification progress during chain sync.\n+ *\n+ * See also: CChainParams::TxData, GuessVerificationProgress.\n+ */\n+struct ChainTxData {\n+    int64_t nTime;    //!< UNIX timestamp of last known number of transactions\n+    int64_t nTxCount; //!< total number of transactions between genesis and that timestamp\n+    double dTxRate;   //!< estimated number of transactions per second after that timestamp\n+};\n+\n+/**\n+ * CChainParams defines various tweakable parameters of a given instance of the\n+ * Bitcoin system.\n+ */\n+class CChainParams\n+{\n+public:\n+    enum Base58Type {\n+        PUBKEY_ADDRESS,\n+        SCRIPT_ADDRESS,\n+        SECRET_KEY,\n+        EXT_PUBLIC_KEY,\n+        EXT_SECRET_KEY,\n+\n+        MAX_BASE58_TYPES\n+    };\n+\n+    const Consensus::Params& GetConsensus() const { return consensus; }\n+    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    uint16_t GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort(Network net) const\n+    {\n+        return net == NET_I2P ? I2P_SAM31_PORT : GetDefaultPort();\n+    }\n+    uint16_t GetDefaultPort(const std::string& addr) const\n+    {\n+        CNetAddr a;\n+        return a.SetSpecial(addr) ? GetDefaultPort(a.GetNetwork()) : GetDefaultPort();\n+    }\n+\n+    const CBlock& GenesisBlock() const { return genesis; }\n+    /** Default value for -checkmempool and -checkblockindex argument */\n+    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n+    /** Policy: Filter transactions that do not match well-defined patterns */\n+    bool RequireStandard() const { return fRequireStandard; }\n+    /** If this chain is exclusively used for testing */\n+    bool IsTestChain() const { return m_is_test_chain; }\n+    /** If this chain allows time to be mocked */\n+    bool IsMockableChain() const { return m_is_mockable_chain; }\n+    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n+    /** Minimum free space (in GB) needed for data directory */\n+    uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n+    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n+    uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }\n+    /** Whether it is possible to mine blocks on demand (no retargeting) */\n+    bool MineBlocksOnDemand() const { return consensus.fPowNoRetargeting; }\n+    /** Return the network string */\n+    std::string NetworkIDString() const { return strNetworkID; }\n+    /** Return the list of hostnames to look up for DNS seeds */\n+    const std::vector<std::string>& DNSSeeds() const { return vSeeds; }\n+    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    const std::string& Bech32HRP() const { return bech32_hrp; }\n+    const std::vector<uint8_t>& FixedSeeds() const { return vFixedSeeds; }\n+    const CCheckpointData& Checkpoints() const { return checkpointData; }\n+\n+    //! Get allowed assumeutxo configuration.\n+    //! @see ChainstateManager\n+    const MapAssumeutxo& Assumeutxo() const { return m_assumeutxo_data; }\n+\n+    const ChainTxData& TxData() const { return chainTxData; }\n+protected:\n+    CChainParams() {}\n+\n+    Consensus::Params consensus;\n+    CMessageHeader::MessageStartChars pchMessageStart;\n+    uint16_t nDefaultPort;\n+    uint64_t nPruneAfterHeight;\n+    uint64_t m_assumed_blockchain_size;\n+    uint64_t m_assumed_chain_state_size;\n+    std::vector<std::string> vSeeds;\n+    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n+    std::string bech32_hrp;\n+    std::string strNetworkID;\n+    CBlock genesis;\n+    std::vector<uint8_t> vFixedSeeds;\n+    bool fDefaultConsistencyChecks;\n+    bool fRequireStandard;\n+    bool m_is_test_chain;\n+    bool m_is_mockable_chain;\n+    CCheckpointData checkpointData;\n+    MapAssumeutxo m_assumeutxo_data;\n+    ChainTxData chainTxData;\n+};\n+\n+struct SigNetOptions {\n+    const std::vector<uint8_t> challenge;\n+    std::vector<std::string> seeds;\n+};\n+\n+SigNetOptions GetDefaultSignetOptions();\n+\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const SigNetOptions& options = GetDefaultSignetOptions());\n+\n+struct VersionBitsParameters {\n+    int64_t start_time;\n+    int64_t timeout;\n+    int min_activation_height;\n+};\n+\n+enum class Activations {\n+    SEGWIT,\n+    BIP34,\n+    DERSIG,\n+    CLTV,\n+    CSV,\n+};\n+\n+struct RegTestOptions {\n+    std::unordered_map<Consensus::DeploymentPos, VersionBitsParameters> version_bits_parameters{};\n+    std::unordered_map<Activations, int> activation_heights{};\n+    uint64_t prune_after_height{1000};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980652000",
      "id" : 980652000,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII5846c4_g",
      "original_commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "original_line" : 176,
      "original_position" : 176,
      "original_start_line" : null,
      "path" : "src/kernel/chainparams.h",
      "position" : 176,
      "pull_request_review_id" : 1121055600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980652000/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T02:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980652000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980678183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980678183"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think if you wanted exactly the same behaviour as current, it would be better to write:\r\n\r\n```c++\r\n    if (options.challenge.empty()) { /* use defaults */ } else { /* use values from options */ }\r\n```",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T02:45:42Z",
      "diff_hunk" : "@@ -272,23 +272,32 @@ class CTestNetParams : public CChainParams {\n     }\n };\n \n+const std::vector<uint8_t> SIGNET_DEFAULT_CHALLENGE = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+const std::vector<std::string> SIGNET_DEFAULT_SEEDS{\n+    \"seed.signet.bitcoin.sprovoost.nl.\",\n+    \"178.128.221.177\",\n+    \"v7ajjeirttkbnt32wpy3c6w3emwnfr3fkla7hpxcfokr3ysd3kqtzmqd.onion:38333\"\n+};\n+\n+SigNetOptions GetDefaultSignetOptions()\n+{\n+    return {\n+        SIGNET_DEFAULT_CHALLENGE,\n+        SIGNET_DEFAULT_SEEDS,\n+    };\n+}\n+\n /**\n  * Signet: test network with an additional consensus parameter (see BIP325).\n  */\n class SigNetParams : public CChainParams {\n public:\n-    explicit SigNetParams(const ArgsManager& args) {\n-        std::vector<uint8_t> bin;\n-        vSeeds.clear();\n-\n-        if (!args.IsArgSet(\"-signetchallenge\")) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n-            vSeeds.emplace_back(\"seed.signet.bitcoin.sprovoost.nl.\");\n-\n-            // Hardcoded nodes can be removed once there are more DNS seeds\n-            vSeeds.emplace_back(\"178.128.221.177\");\n-            vSeeds.emplace_back(\"v7ajjeirttkbnt32wpy3c6w3emwnfr3fkla7hpxcfokr3ysd3kqtzmqd.onion:38333\");\n+    explicit SigNetParams(const SigNetOptions& options)\n+    {\n+        std::vector<uint8_t> bin{options.challenge};\n+        vSeeds = options.seeds;\n \n+        if (bin == SIGNET_DEFAULT_CHALLENGE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980678183",
      "id" : 980678183,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846c_Yn",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 300,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 40,
      "pull_request_review_id" : 1121055600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980678183/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T02:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/980678183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981404674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981404674"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Decouple SigNetChainParams from ArgsManager\" (8c0a94f1d56345c45304319e72b7f78626e47061)\r\n\r\n> I think if you wanted exactly the same behaviour as current, it would be better to write:\r\n> \r\n> ```c++\r\n>     if (options.challenge.empty()) { /* use defaults */ } else { /* use values from options */ }\r\n> ```\r\n\r\nI agree with this suggestion. I think a good design goal for most options structs is to make them default constructible, and make default behavior when you pass an empty options struct the same as what would happen if you launched `bitcoind` without the corresponding arguments. Don't introduce a new set of default behaviors, don't require callers to initialize options structs if they are not overriding something, and avoid complications like having some struct members be const and other be non-const. If code is implemented like the suggestion above and accepts empty options, this all happens easily and naturally.",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T15:35:08Z",
      "diff_hunk" : "@@ -272,23 +272,32 @@ class CTestNetParams : public CChainParams {\n     }\n };\n \n+const std::vector<uint8_t> SIGNET_DEFAULT_CHALLENGE = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+const std::vector<std::string> SIGNET_DEFAULT_SEEDS{\n+    \"seed.signet.bitcoin.sprovoost.nl.\",\n+    \"178.128.221.177\",\n+    \"v7ajjeirttkbnt32wpy3c6w3emwnfr3fkla7hpxcfokr3ysd3kqtzmqd.onion:38333\"\n+};\n+\n+SigNetOptions GetDefaultSignetOptions()\n+{\n+    return {\n+        SIGNET_DEFAULT_CHALLENGE,\n+        SIGNET_DEFAULT_SEEDS,\n+    };\n+}\n+\n /**\n  * Signet: test network with an additional consensus parameter (see BIP325).\n  */\n class SigNetParams : public CChainParams {\n public:\n-    explicit SigNetParams(const ArgsManager& args) {\n-        std::vector<uint8_t> bin;\n-        vSeeds.clear();\n-\n-        if (!args.IsArgSet(\"-signetchallenge\")) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n-            vSeeds.emplace_back(\"seed.signet.bitcoin.sprovoost.nl.\");\n-\n-            // Hardcoded nodes can be removed once there are more DNS seeds\n-            vSeeds.emplace_back(\"178.128.221.177\");\n-            vSeeds.emplace_back(\"v7ajjeirttkbnt32wpy3c6w3emwnfr3fkla7hpxcfokr3ysd3kqtzmqd.onion:38333\");\n+    explicit SigNetParams(const SigNetOptions& options)\n+    {\n+        std::vector<uint8_t> bin{options.challenge};\n+        vSeeds = options.seeds;\n \n+        if (bin == SIGNET_DEFAULT_CHALLENGE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981404674",
      "id" : 981404674,
      "in_reply_to_id" : 980678183,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846fwwC",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 300,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 40,
      "pull_request_review_id" : 1122231704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981404674/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T16:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981404674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981410313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981410313"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Decouple SigNetChainParams from ArgsManager\" (8c0a94f1d56345c45304319e72b7f78626e47061)\r\n\r\nAgree but I think having this function at all is a footgun and source of unnecessary complexity and it would be better to drop. Just make a default-constructed `SigNetOptions` struct give default behavior as suggested above so this function doesn't need to exist.\r\n",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T15:40:17Z",
      "diff_hunk" : "@@ -146,6 +146,32 @@ class CChainParams\n     ChainTxData chainTxData;\n };\n \n+/**\n+ * SigNetOptions holds configurations for creating a signet CChainParams.\n+ */\n+struct SigNetOptions {\n+    const std::vector<uint8_t> challenge;\n+    std::vector<std::string> seeds;\n+};\n+\n+/**\n+ * Return SigNetOptions filled with default values.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981410313",
      "id" : 981410313,
      "in_reply_to_id" : 980398556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846fyIJ",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 158,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/chainparams.h",
      "position" : 13,
      "pull_request_review_id" : 1122231704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981410313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T16:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981410313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981416113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981416113"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Decouple SigNetChainParams from ArgsManager\" (8c0a94f1d56345c45304319e72b7f78626e47061)\r\n\r\nThis looks like a change in behavior if `-nosignetseednode` is specified. Previously that would clear the seeds. Now it will use default seeds. I don't know if this is good or bad but I think it would be better not change here.\r\n\r\nI would suggest following aj's suggestion above https://github.com/bitcoin/bitcoin/pull/26177#discussion_r980678183 and just have a literal 1:1 correspondence between arguments and options. Make unset arguments map to unset options. Fill options only when arguments are present. Don't try to be clever and fill options when there are no arguments.\r\n\r\nThe definition of the SigNetOptions struct then would be:\r\n\r\n```c++\r\nstruct SigNetOptions {\r\n    std::vector<uint8_t> challenge;\r\n    std::optional<std::vector<std::string>> seeds;\r\n}\r\n```\r\n\r\nThe default constructed struct would result in default behavior. `-signetchallenge` and `-signetseednode` would override these defaults. `-nosignetchallenge` would be an error like it is currently with no change in behavior. `-nosignetseednode` would set an empty vector and add no seed nodes, which seems to be current behavior.\r\n\r\n\r\n ",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-27T15:45:27Z",
      "diff_hunk" : "@@ -382,11 +381,39 @@ class SigNetParams : public CChainParams {\n     }\n };\n \n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const SigNetOptions& options)\n+{\n+    return std::make_unique<const SigNetParams>(options);\n+}\n+\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& args)\n+{\n+    std::vector<std::string> seeds{};\n+    if (args.IsArgSet(\"-signetseednode\")) {\n+        seeds = args.GetArgs(\"-signetseednode\");\n+    }\n+    if (args.IsArgSet(\"-signetchallenge\")) {\n+        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+        if (signet_challenge.size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+        }\n+        return CreateSignetChainParams(SigNetOptions{ParseHex(signet_challenge[0]), seeds});\n+    } else {\n+        auto opts = GetDefaultSignetOptions();\n+        if (!seeds.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981416113",
      "id" : 981416113,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII5846fzix",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 403,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 93,
      "pull_request_review_id" : 1122231704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981416113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-27T16:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981416113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981822571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981822571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> ... just have a literal 1:1 correspondence between arguments and options.\r\n\r\nI think there's two conflicting goals here? It seems like one idea is that the kernel should be just given the actual data (eg a `map` from buried deployment ids via enum to integer heights) that's needed -- the kernel's meant to be used by software, so why translate into text in the meantime?\r\n\r\nBut if that were really the case, why not just pass a fully fleshed out `const CChainParams&` to the kernel in the first place?\r\n\r\nIn that case, `kernel/chainparams.h` could be a headers only module, with the mainnet/signet/etc setup code staying in `chainparams.cpp`. I'm not sure if I'm missing a design goal here though.",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-28T00:00:06Z",
      "diff_hunk" : "@@ -382,11 +381,39 @@ class SigNetParams : public CChainParams {\n     }\n };\n \n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const SigNetOptions& options)\n+{\n+    return std::make_unique<const SigNetParams>(options);\n+}\n+\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& args)\n+{\n+    std::vector<std::string> seeds{};\n+    if (args.IsArgSet(\"-signetseednode\")) {\n+        seeds = args.GetArgs(\"-signetseednode\");\n+    }\n+    if (args.IsArgSet(\"-signetchallenge\")) {\n+        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+        if (signet_challenge.size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+        }\n+        return CreateSignetChainParams(SigNetOptions{ParseHex(signet_challenge[0]), seeds});\n+    } else {\n+        auto opts = GetDefaultSignetOptions();\n+        if (!seeds.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r981822571",
      "id" : 981822571,
      "in_reply_to_id" : 981416113,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII5846hWxr",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 403,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 93,
      "pull_request_review_id" : 1122848500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981822571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T00:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/981822571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982172311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982172311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The caller graph is kind of annoying, it boils down to users of `SelectBaseParams` (like bitcoin-cli), and more importantly `SelectParams`, which is used all over the place (I count 23 separate files as call site). If I understand the current usage of `kernel::Context` correctly, this would mean that we'd have to construct the context for nearly each call site separately, and many in places where it was previously not required. I currently tend towards handling this in a separate refactor attempt to get rid of these param globals in general.",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-28T09:30:16Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <kernel/chainparamsbase.h>\n+\n+#include <tinyformat.h>\n+\n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::SIGNET = \"signet\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+\n+/**\n+ * Port numbers for incoming Tor connections (8334, 18334, 38334, 18445) have\n+ * been chosen arbitrarily to keep ranges of used ports tight.\n+ */\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN) {\n+        return std::make_unique<CBaseChainParams>(\"\", 8332, 8334);\n+    } else if (chain == CBaseChainParams::TESTNET) {\n+        return std::make_unique<CBaseChainParams>(\"testnet3\", 18332, 18334);\n+    } else if (chain == CBaseChainParams::SIGNET) {\n+        return std::make_unique<CBaseChainParams>(\"signet\", 38332, 38334);\n+    } else if (chain == CBaseChainParams::REGTEST) {\n+        return std::make_unique<CBaseChainParams>(\"regtest\", 18443, 18445);\n+    }\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+}\n+\n+static std::unique_ptr<CBaseChainParams> globalChainBaseParams;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982172311",
      "id" : 982172311,
      "in_reply_to_id" : 980405199,
      "line" : 34,
      "node_id" : "PRRC_kwDOABII5846isKX",
      "original_commit_id" : "c00f4f7599b89df8196287176e743a99da1de67f",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/kernel/chainparamsbase.cpp",
      "position" : 32,
      "pull_request_review_id" : 1123345344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982172311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T09:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982172311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982437167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982437167"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that is taking it a bit far. What I understood from @ryanofsky is something very similar to what was implemented in #25862 , where a default, constructor instantiated option struct is mutated with the values from the args - https://github.com/bitcoin/bitcoin/pull/25862/files#diff-4e268aeb074a176689aace31957a889c1f39c909e6678ca7be8707bda1a7be56 . ",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-28T13:52:51Z",
      "diff_hunk" : "@@ -382,11 +381,39 @@ class SigNetParams : public CChainParams {\n     }\n };\n \n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const SigNetOptions& options)\n+{\n+    return std::make_unique<const SigNetParams>(options);\n+}\n+\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& args)\n+{\n+    std::vector<std::string> seeds{};\n+    if (args.IsArgSet(\"-signetseednode\")) {\n+        seeds = args.GetArgs(\"-signetseednode\");\n+    }\n+    if (args.IsArgSet(\"-signetchallenge\")) {\n+        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+        if (signet_challenge.size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+        }\n+        return CreateSignetChainParams(SigNetOptions{ParseHex(signet_challenge[0]), seeds});\n+    } else {\n+        auto opts = GetDefaultSignetOptions();\n+        if (!seeds.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982437167",
      "id" : 982437167,
      "in_reply_to_id" : 981416113,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII5846js0v",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 403,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 93,
      "pull_request_review_id" : 1123737722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982437167/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T13:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982437167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982525985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982525985"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think that is taking it a bit far. \r\n\r\nRight I'm just talking about a minor change to the `SigNetOptions` struct that would simplify the changes here.\r\n\r\nThe only thing this PR really needs to do is get rid of `ArgsManager` usage in this part of the code, replacing `ArgsManager` lookups with `SigNetOptions` member accesses. I suggested a slightly different version of the `SigNetOptions` struct above that would let it provide the same information `ArgsManager` provides, in a 1:1 way so less code has to change, and so the struct is easier for callers to fill and customize.\r\n\r\n> But if that were really the case, why not just pass a fully fleshed out const CChainParams& to the kernel in the first place?\r\n\r\nThis is fine, and I think it basically already happens later after `CChainParams` are initialized. I'm just looking at the earlier code used to initialize `CChainParams`. I do think alternate approaches are possible. Like instead of `SigNetOptions` being used to initialize `CChainParams` and have  `CChainParams` contain dynamic settings determined at runtime, `CChainParams` could just contain static hardcoded settings, and code that uses `CChainParams` could use combine it with runtime settings. This already happens with chain parameters like `nMinimumChainWork` that can be overridden on the command line.\r\n\r\n> In that case, kernel/chainparams.h could be a headers only module, with the mainnet/signet/etc setup code staying in chainparams.cpp. I'm not sure if I'm missing a design goal here though.\r\n\r\nI'm not sure exactly what this would look like but it does sound fine. Maybe similar to what I was describing above making `CChainParams` not vary depending on runtime options.\r\n\r\nThese alternate approaches are just bigger than changes I was suggesting above. All I was suggesting above was replacing ArgsManager uses with SigNetOptions in a 1:1 way instead of doing more complicated mappings and creating another set of defaults and making it harder to initialize.",
      "commit_id" : "9714fe9160282dc36269b1d16d57dfdd48d0a1f1",
      "created_at" : "2022-09-28T15:04:04Z",
      "diff_hunk" : "@@ -382,11 +381,39 @@ class SigNetParams : public CChainParams {\n     }\n };\n \n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const SigNetOptions& options)\n+{\n+    return std::make_unique<const SigNetParams>(options);\n+}\n+\n+std::unique_ptr<const CChainParams> CreateSignetChainParams(const ArgsManager& args)\n+{\n+    std::vector<std::string> seeds{};\n+    if (args.IsArgSet(\"-signetseednode\")) {\n+        seeds = args.GetArgs(\"-signetseednode\");\n+    }\n+    if (args.IsArgSet(\"-signetchallenge\")) {\n+        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+        if (signet_challenge.size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+        }\n+        return CreateSignetChainParams(SigNetOptions{ParseHex(signet_challenge[0]), seeds});\n+    } else {\n+        auto opts = GetDefaultSignetOptions();\n+        if (!seeds.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26177#discussion_r982525985",
      "id" : 982525985,
      "in_reply_to_id" : 981416113,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII5846kCgh",
      "original_commit_id" : "8c0a94f1d56345c45304319e72b7f78626e47061",
      "original_line" : 403,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 93,
      "pull_request_review_id" : 1123870956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26177",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982525985/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T15:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982525985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
