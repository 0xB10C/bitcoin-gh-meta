[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18796#discussion_r417894805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18796"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417894805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "- Do we want to print `stderr` to `stderr` maybe? (in this case, why `PIPE` it at all)\r\n- I'm not sure `Error opening file` is a good error message here. Might want to print the command that failed with the exit status.\r\n- Launching a command and raising an error on non-zero exit status what `subprocess.check_call` does. This might be good enough instead of defining our own function.",
      "commit_id" : "00dd74a25e573241eb58d646152bd5a26313f6aa",
      "created_at" : "2020-04-30T09:57:59Z",
      "diff_hunk" : "@@ -12,33 +12,37 @@\n import sys\n import os\n \n+from typing import List, Optional\n+\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n-def check_ELF_PIE(executable):\n-    '''\n-    Check for position independent executable (PIE), allowing for address space randomization.\n-    '''\n-    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+def run_command(command) -> str:\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n+        print(stderr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18796#discussion_r417894805",
      "id" : 417894805,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5NDgwNQ==",
      "original_commit_id" : "00dd74a25e573241eb58d646152bd5a26313f6aa",
      "original_line" : 25,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "contrib/devtools/security-check.py",
      "position" : 20,
      "pull_request_review_id" : 403373585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18796",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-30T09:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417894805",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
