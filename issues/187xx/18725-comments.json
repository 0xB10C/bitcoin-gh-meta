[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412569079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412569079"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A 1000vbyte size * 100 seems enough to one party owning multiple carve-out outputs to decrease feerate of unconfirmed parent tx enough to stuck it in the mempool. I think that's already a risk today but right now custodial service, being broadcaster, can iterative batch on its own output to reach first DEFAULT_DESCENDANT_LIMIT and avoid any junk-feerate squatting branch.\r\n\r\nThat said the batching case MAY be far less adversarial that LN one, and worst-case scenario may be just few more blocks to wait instead of a fund loss like in LN.",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-21T23:50:56Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412569079",
      "id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2OTA3OQ==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 397752042,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-21T23:54:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412569079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412951743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412951743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The batching case, AFAICT is less *complicated*, and outright theft is not a result if somehow things go wrong. Instead it may simply result in certain processors not batching, or doing smaller batches to avoid pinning hundreds of user payouts, or simply paying a much higher feerate to avoid the situation.\r\n\r\nIt's a practical problem in real-world deployments today to make sure that the more general case of https://github.com/bitcoin/bitcoin/issues/15046 can be true. To be clear I find these counter-arguments persuasive:\r\n1) We don't have a principled enough view of these changes and it may become a DoS\r\n2) Actually this doesn't work for the stated use-case because X\r\n\r\nThe fact that LN is 1000x more complicated and the original carve-out was insufficient is less persuasive imo.\r\n\r\n",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-22T12:48:29Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412951743",
      "id" : 412951743,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MTc0Mw==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398154241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T12:48:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412951743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
