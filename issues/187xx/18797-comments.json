[
   {
      "author_association" : "MEMBER",
      "body" : "I think it may make sense to export some notion of standardness from libconsensus, but I don't think exporting every individual script flag of the interpreter makes sense.\r\n\r\nWould it be sufficient for your use case if there was just a catch-all libconsensus_SCRIPT_VERIFY_STANDARD (which would always refer to whatever the current version's policy was, with no guarantees for consistency between versions).",
      "created_at" : "2020-04-28T08:20:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620456111",
      "id" : 620456111,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18797",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMDQ1NjExMQ==",
      "updated_at" : "2020-04-28T08:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620456111",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa note I don't target specifically one use case even if issue has been raised in LN context. It should be a good practice to verify any transaction against current version's policy, even for application with lower requirement, to avoid any surprise for user.\r\n\r\nSCRIPT_VERIFY_STANDARD would be fine and that was my intention by defining a SCRIPT_FLAGS_VERIFY_STANDARD. But I'm not sure if such global opaque flag would work everytime as some rule may be either standard or consensus following transaction/witness version. Like MINIMALIF between segwit v0 and v1 and therefore you may need access for flag granularity ?\r\n\r\nYou do want to avoid some application evaluating transaction as non-standard when it's in fact invalid, even when it's malleable and can be corrected like MINIMALIF (\"sending directly your taproot spending to a miner and not being able to respond to its rejection\")",
      "created_at" : "2020-04-28T08:40:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620466453",
      "id" : 620466453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18797",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMDQ2NjQ1Mw==",
      "updated_at" : "2020-04-28T08:47:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620466453",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard I guess a hypothetical SCRIPT_VERIFY_STANDARD flag would automatically also enable all consensus rules. If you care about whether your transaction will be acceptable to full nodes similar to the one whose libconsensus you're using, it doesn't make sense to disable certain consensus checks but still enable standardness ones.\r\n\r\nI don't understand what you're trying to distinguish in your second comment.",
      "created_at" : "2020-04-28T21:30:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620866175",
      "id" : 620866175,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18797",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMDg2NjE3NQ==",
      "updated_at" : "2020-04-28T21:30:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620866175",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18797#discussion_r416950736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416950736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[policy] Extend bitcoinconsensus library with standard script flags\" (e07ecdedc70ea045f98b592d36fdbf543696db28)\r\n\r\nIt seems like the name `VERIFY_ALL` is going to be misleading if it isn't actually going to include every verify flag. Would maybe suggest calling it `VERIFY_CONSENSUS` and changing VERIFY_ALL into a deprecated alias for VERIFY_CONSENSUS",
      "commit_id" : "bed1e9f6ab525441c432ed0722fe76101b3f896f",
      "created_at" : "2020-04-28T22:02:05Z",
      "diff_hunk" : "@@ -48,16 +48,34 @@ typedef enum bitcoinconsensus_error_t\n /** Script verification flags */\n enum\n {\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), // enforce NULLDUMMY (BIP147)\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |\n-                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n-                                                               bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                                  = 0,\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                                  = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_STRICTENC                             = (1U << 1), // enforce strict adhererence to pubkey/sig encoding standards\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG                                = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_LOW_S                                 = (1U << 3), // enforce low-S value in ECDSA sig (BIP 62 rule 5)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY                             = (1U << 4), // enforce NULLDUMMY (BIP147)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_SIGPUSHONLY                           = (1U << 5), // enforce non-push ops in scriptSig (BIP 62 rule 2)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_MINIMALDATA                           = (1U << 6), // enforce minimal push (BIP 62 rules 3 and 4)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DISCOURAGE_UPGRADABLE_NOPS            = (1U << 7), // discourage use of reserved NOPs for upgrades\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CLEANSTACK                            = (1U << 8), // enforce non-superfluous scriptSig ops (BIP 62 rule 6)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY                   = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY                   = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS                               = (1U << 11), // enable WITNESS (BIP141)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12), // discourage use of v1-v16 witness program\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_MINIMALIF                             = (1U << 13), // enforce MINIMALIF (BIP342)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLFAIL                              = (1U << 14), // enforce NULLFAIL (BIP146)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS_PUBKEYTYPE                    = (1U << 15), // enforce compression of pubkey in segwit scripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CONST_SCRIPTCODE                      = (1U << 16), // enforce constant scriptCode policy in non-segwit scripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                                   = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18797#discussion_r416950736",
      "id" : 416950736,
      "line" : 69,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1MDczNg==",
      "original_commit_id" : "e07ecdedc70ea045f98b592d36fdbf543696db28",
      "original_line" : 69,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/script/bitcoinconsensus.h",
      "position" : 32,
      "pull_request_review_id" : 402244233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18797",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-28T22:25:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/416950736",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
