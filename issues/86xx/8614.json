{
   "assignee" : null,
   "assignees" : [],
   "body" : "Please provide a high speed way to enumerate all blocks in their serialized form. The use case is blockchain data analysis. Deserialization can be performed using any number of libraries. Only raw blocks are required.\r\n\r\nThe `blk*` files store the blocks database. As far as I was able to find out there is no official way to access these files. There are various code snippets on the web accessing them. They do not appear to quite work. For example, in my own files I found strange data of the form `<magic><length><magic>`. So the data portion was missing. There was just the header. Apparently, it cannot be assumed that the blocks come contiguously. According to the source code this could happen if the software or OS exits at the right time. This is totally OK as I was accessing undocumented internals, of course. My solution was to search for the magic, then try reading and deserializing. This works but that should not be necessary.\r\n\r\nThe `getblock` API can transmit a block as a hexadecimal string. This is really slow according to my tests. Between 10 and 100 times slower. `getblock(verbose=true)` becomes very slow for high block numbers, too (looks like 10 per second).\r\n\r\nThere should be a fast way to obtain raw blocks. I can think of two approaches:\r\n\r\n1. Add an API that sends the disk positions of the blocks in the blk* files. That way the API only needs to send tiny amounts of data.\r\n2. Add an API to send blocks more efficiently. This precludes the use of JSON and hexadecimal strings. Also, the API would need to be able to send multiple blocks in one go. Otherwise it is too chatty.\r\n\r\nThere's also the issue of orphan blocks. The API should have a mode that makes it send only blocks from the main chain. I'm solving that right now by calling `getblock(verbose=true)` 450k times. This is very slow.\r\n\r\nI think (1) would be far less work and would have less additional concepts (no new endpoint).\r\n\r\nThis is my concrete proposal:\r\n\r\n1. Make getblock(verbose=true) also send the file name and disk position.\r\n2. Add an API to obtain many block headers in one call. This solves the chattiness issue. The API should return all headers subject to the following filter options with defaults: int minBlockHeight = 0, int maxBlockHeight = maxint, bool allowNonMainChain = false, string[] blockHashes = null. These filters would be and-combined. If obtaining headers is costly it would be OK to just return the disk positions. Clients can then deserialize the headers themselves.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8614/comments",
   "created_at" : "2016-08-27T18:40:30Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8614/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/8614",
   "id" : 173609516,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8614/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 8614,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Provide a way to access raw blocks at high speed",
   "updated_at" : "2016-08-27T19:07:34Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8614",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/12032350?v=3",
      "events_url" : "https://api.github.com/users/GSPP/events{/privacy}",
      "followers_url" : "https://api.github.com/users/GSPP/followers",
      "following_url" : "https://api.github.com/users/GSPP/following{/other_user}",
      "gists_url" : "https://api.github.com/users/GSPP/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/GSPP",
      "id" : 12032350,
      "login" : "GSPP",
      "organizations_url" : "https://api.github.com/users/GSPP/orgs",
      "received_events_url" : "https://api.github.com/users/GSPP/received_events",
      "repos_url" : "https://api.github.com/users/GSPP/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/GSPP/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/GSPP/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/GSPP"
   }
}
