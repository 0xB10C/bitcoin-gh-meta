{
   "assignee" : null,
   "assignees" : [],
   "body" : "This replaces #8023 with a solution that moves us directly to std::thread, rather than using an intermediate wrapper.\r\n\r\n### Background\r\n\r\nstd::thread is pretty much a drop-in replacement for boost::thread, except that boost::thread is interruptible. We've used those interruptions, but we'll have to drop them eventually as they didn't become part of the spec.\r\n\r\nWhen an interruption point is hit, it throws an instance of boost::thread_interrupted. boost::thread catches these automatically by default.\r\n\r\nThe interruption points are defined as:\r\n```\r\n\r\n    boost::thread::join()\r\n    boost::thread::timed_join()\r\n    boost::thread::try_join_for(),\r\n    boost::thread::try_join_until(),\r\n    boost::condition_variable::wait()\r\n    boost::condition_variable::timed_wait()\r\n    boost::condition_variable::wait_for()\r\n    boost::condition_variable::wait_until()\r\n    boost::condition_variable_any::wait()\r\n    boost::condition_variable_any::timed_wait()\r\n    boost::condition_variable_any::wait_for()\r\n    boost::condition_variable_any::wait_until()\r\n    boost::thread::sleep()\r\n    boost::this_thread::sleep_for()\r\n    boost::this_thread::sleep_until()\r\n    boost::this_thread::interruption_point()\r\n```\r\nThe ones relevant to us are primarily ```boost::condition_variable_any::wait()```, ```boost::this_thread::sleep_for()```, and of course ```boost::this_thread::interruption_point()```\r\n\r\nAny boost::thread will immediately throw boost::thread_interrupted if those are hit at any point. So we can't simply s/boost::thread/std::thread/g, as we would never be able to exit.\r\n\r\n### Changes\r\n\r\n- All threads are now externally interruptible. Rather than having a single bool for shutting down, I've attempted to notify each relevant subsystem. But because they're not well-defined, the notifications are somewhat arbitrary as well.\r\n- For long-running threads, our own ```thread_interrupted``` and ```interruption_point``` have been added.\r\n- Threads should call TraceThread if they may hit an interruption_point.\r\n- MilliSleep is no longer interruptible.\r\n- boost::thread_group is gone. All threads are now managed individually\r\n\r\n### Future changes\r\nThere is lots of cleanup to be done post-merge. I was very tempted to include cleanups here, but I've elected to keep the changes minimal. Todo:\r\n- s/boost::mutex/std::mutex/\r\n- s/boost::condition_variable/std::condition_variable/\r\n- s/boost::chrono/std::chrono/\r\n- Drop a ton of boost includes\r\n- Drop other boost cruft (like catching ```boost::thread_interrupted```)\r\n\r\nAlso, I started on this by creating a base class for launching threads. Each instance would be responsible for implementing Interrupt() and Stop(). But because this is already a complex set of changes, I think it's best to do that as a separate step.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 19,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8631/comments",
   "created_at" : "2016-08-31T02:33:56Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8631/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/8631",
   "id" : 174170706,
   "labels" : [
      {
         "color" : "E6F6D6",
         "name" : "Refactoring",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8631/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 8631,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/8631.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8631",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/8631.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8631"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Nuke boost::thread and boost::thread_group",
   "updated_at" : "2016-10-04T16:01:26Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8631",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
      "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
      "followers_url" : "https://api.github.com/users/theuni/followers",
      "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/theuni",
      "id" : 417043,
      "login" : "theuni",
      "organizations_url" : "https://api.github.com/users/theuni/orgs",
      "received_events_url" : "https://api.github.com/users/theuni/received_events",
      "repos_url" : "https://api.github.com/users/theuni/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/theuni"
   }
}
