[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195557293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195557293"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this change required? Should be in a separate commit",
      "commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "created_at" : "2018-06-14T20:17:05Z",
      "diff_hunk" : "@@ -116,7 +116,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n         if (0 == num_iters) {\n             num_iters = 1;\n         }\n-        State state(p.first, num_evals, num_iters, printer);\n+        State state(p.first, num_evals, num_iters, scaling, printer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195557293",
      "id" : 195557293,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU1NzI5Mw==",
      "original_commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "original_position" : 5,
      "path" : "src/bench/bench.cpp",
      "position" : 5,
      "pull_request_review_id" : 128952222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
      "updated_at" : "2018-06-14T20:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195557293",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195666958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195666958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I need to disable the effect of the `scaling` setting, see above. The current implementation is a bit of a hack though; once refactored it can go in its own commit.",
      "commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "created_at" : "2018-06-15T08:38:33Z",
      "diff_hunk" : "@@ -116,7 +116,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n         if (0 == num_iters) {\n             num_iters = 1;\n         }\n-        State state(p.first, num_evals, num_iters, printer);\n+        State state(p.first, num_evals, num_iters, scaling, printer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195666958",
      "id" : 195666958,
      "in_reply_to_id" : 195557293,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY2Njk1OA==",
      "original_commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "original_position" : 5,
      "path" : "src/bench/bench.cpp",
      "position" : 5,
      "pull_request_review_id" : 129082000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
      "updated_at" : "2018-06-15T08:38:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195666958",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14224 (Annotate unsigned integer overflows (wraparounds). Add -fsanitize=integer Travis job. by practicalswift)\n* #14156 ([WIP] refactor: Make explicit CMutableTransaction -> CTransaction conversion. by lucash-dev)\n* #13525 (Report reason inputs are nonstandard from AreInputsStandard by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-06-26T11:23:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-400272971",
      "id" : 400272971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMDI3Mjk3MQ==",
      "updated_at" : "2018-09-15T21:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400272971",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 56 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",
      "created_at" : "2018-08-10T12:37:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-412069620",
      "id" : 412069620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMjA2OTYyMA==",
      "updated_at" : "2018-08-10T12:37:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412069620",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `const CTransaction &`?",
      "commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "created_at" : "2018-09-14T16:02:07Z",
      "diff_hunk" : "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762762",
      "id" : 217762762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzc2Mjc2Mg==",
      "original_commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "original_position" : 111,
      "path" : "src/bench/ccoins_caching.cpp",
      "position" : 111,
      "pull_request_review_id" : 155560456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
      "updated_at" : "2018-09-14T16:02:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `const CTransaction &`?",
      "commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "created_at" : "2018-09-14T16:02:31Z",
      "diff_hunk" : "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {\n+        AddCoins(coinsViewCache, tx, 0);\n+        outpoints.push_back(COutPoint(tx.GetHash(), 0));\n+    }\n+    \n+    return outpoints;\n+}\n+\n+// Add coins to cache that doesn't exist on disk.\n+static void CCoinsViewCacheAddCoinFresh(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+\n+    while (state.IsNewEval()) {\n+        CCoinsView coinsView;\n+        CCoinsViewCache coinsViewCache(&coinsView);\n+        \n+        int i = 0;\n+        \n+        state.ResetTimer();\n+                \n+        // Benchmark:\n+        while (state.KeepRunning()) {\n+            AddCoins(coinsViewCache, transactions[i], 0);\n+            \n+            if (state.IsLastIteration()) {\n+                // fprintf(stderr, \"Cached coins: %u\\n\", coinsViewCache.GetCacheSize());\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+                break;\n+            }\n+            \n+            i++;\n+        }\n+    }\n+}\n+\n+// Flush cache\n+static void CCoinsViewCacheFlush(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+    \n+\n+    while (state.IsNewEval()) {\n+        // TODO: dedup from test suite\n+        SelectParams(CBaseChainParams::REGTEST);\n+        // const CChainParams& chainparams = Params();\n+        ClearDatadirCache();\n+        fs::path pathTemp = fs::temp_directory_path() / \"bench_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n+        fs::create_directories(pathTemp);\n+        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+        // fprintf(stderr, \"Path: %s\\n\", pathTemp.string().c_str());\n+\n+        int64_t nCoinDBCache = 50 * N_CACHE_SCALE;\n+        pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, true));\n+        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        CCoinsViewCache coinsViewCache(pcoinsdbview.get());\n+        FastRandomContext rng(true);\n+        coinsViewCache.SetBestBlock(rng.rand256());\n+                \n+        // Add coins to cache:\n+        for (const CTransaction tx : transactions) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762873",
      "id" : 217762873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzc2Mjg3Mw==",
      "original_commit_id" : "8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "original_position" : 196,
      "path" : "src/bench/ccoins_caching.cpp",
      "position" : 196,
      "pull_request_review_id" : 155560591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
      "updated_at" : "2018-09-14T16:02:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762873",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
