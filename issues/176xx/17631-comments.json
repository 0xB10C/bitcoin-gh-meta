[
   {
      "author_association" : "MEMBER",
      "body" : "A test would be nice.",
      "created_at" : "2019-11-29T09:00:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559713149",
      "id" : 559713149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcxMzE0OQ==",
      "updated_at" : "2019-11-29T09:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559713149",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "After reading `doc/REST-interface.md` I'm not entirely clear about the assumed trust boundaries.\r\n\r\nWhat recommendations do we give to our users regarding exposing the REST endpoints publicly? Do the recommendations differ from our recommendations with regards to exposing the JSON-RPC endpoints publicly?\r\n\r\nAs I've understood it we regard the JSON-RPC interface as as an internal control plane only to be accessible by trusted clients. The assumption we're making from a trust boundary perspective seems to be that we assume that an untrusted clients will never be able to connect to the port serving the JSON-RPC interface (which is the same port as the REST interface).",
      "created_at" : "2019-11-29T09:24:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559721048",
      "id" : 559721048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMTA0OA==",
      "updated_at" : "2019-11-29T09:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721048",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> After reading doc/REST-interface.md I'm not entirely clear about the assumed trust boundaries.\r\n\r\nThat's a fair question (FWIW the limit has always been: only public data, no complex queries, do not parse JSON as input), but I'd suggest opening a new issue for it. Please keep this one for review of the code changes.",
      "created_at" : "2019-11-29T09:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792",
      "id" : 559723792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMzc5Mg==",
      "updated_at" : "2019-11-29T09:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723792",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Without knowing if consumers are trusted or not it is pretty hard to review it from a security perspective :)",
      "created_at" : "2019-11-29T09:37:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559725358",
      "id" : 559725358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyNTM1OA==",
      "updated_at" : "2019-11-29T09:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559725358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The REST interface is a lightweight interface for querying public data. Consumers are trusted but less so than on RPC (as they don't authenticate). I still wouldn't recommend exposing it directly to the internet. But maybe it's OK to open it \"publicly\" inside some LAN or VPN that your applications run in.\r\n\r\nThis is my last general comment on this, please open a new issue if you want to continue this discussion.\r\n\r\n> `doc/REST-interface.md`\r\n\r\nSpeaking of which, please update the documentation to mention this new call.",
      "created_at" : "2019-11-29T09:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559726929",
      "id" : 559726929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyNjkyOQ==",
      "updated_at" : "2019-11-29T09:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559726929",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, the use of a single line if statement would be better (including the other one line statements as well)",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-11-29T14:55:44Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265",
      "id" : 352165265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjE2NTI2NQ==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_position" : 32,
      "path" : "src/rest.cpp",
      "position" : 49,
      "pull_request_review_id" : 324757830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would be much too long a line to do that.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-11-29T18:57:58Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089",
      "id" : 352227089,
      "in_reply_to_id" : 352165265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjIyNzA4OQ==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_position" : 32,
      "path" : "src/rest.cpp",
      "position" : 49,
      "pull_request_review_id" : 324833271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-11-29T19:21:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559867818",
      "id" : 559867818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTg2NzgxOA==",
      "updated_at" : "2019-11-29T19:21:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559867818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a basic sanity test, redid the way headers work to make it easy to get many of them just like the /headers/ request.",
      "created_at" : "2019-11-29T19:37:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559869919",
      "id" : 559869919,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTg2OTkxOQ==",
      "updated_at" : "2019-11-29T19:37:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559869919",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh sorry I meant to ignore the brackets...",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-11-29T23:30:54Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960",
      "id" : 352255960,
      "in_reply_to_id" : 352165265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI1NTk2MA==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_position" : 32,
      "path" : "src/rest.cpp",
      "position" : 49,
      "pull_request_review_id" : 324867658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195"
         }
      },
      "author_association" : "NONE",
      "body" : "I think it would be useful if this error message provided the user with the valid range.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-01T07:30:23Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195",
      "id" : 352325195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTE5NQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 47,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211"
         }
      },
      "author_association" : "NONE",
      "body" : "should `2000` be turned into a constant?",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-01T07:31:01Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211",
      "id" : 352325211,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTIxMQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 46,
      "path" : "src/rest.cpp",
      "position" : 64,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362"
         }
      },
      "author_association" : "NONE",
      "body" : "If I'm reading the code right it looks like json is a valid output format too along with binary and hex.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-01T07:35:43Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362",
      "id" : 352325362,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTM2Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 119,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420"
         }
      },
      "author_association" : "NONE",
      "body" : "the code for extracting `filtertype`, `index` and `blockhash` is shared between these two functions. Should this extraction code be pulled out into their own functions?",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-01T07:37:17Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420",
      "id" : 352325420,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQyMA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 149,
      "path" : "src/rest.cpp",
      "position" : 167,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: can the error message be changed to `\"Block \" + uriParts[1] + \" not found\"`?",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-01T07:38:27Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461",
      "id" : 352325461,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQ2MQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 159,
      "path" : "src/rest.cpp",
      "position" : 177,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-12-01T21:06:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029",
      "id" : 560159029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDE1OTAyOQ==",
      "updated_at" : "2019-12-01T21:06:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560159029",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Lets leave DRY'ing up rest.cpp for a separate commit. I played with it a bit and there isn't an obvious solution here that doesn't end up adding more lines, but the whole of REST probably could get DRY'd up a lot especially in the results-providing section.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-02T00:25:23Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152",
      "id" : 352386152,
      "in_reply_to_id" : 352325420,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjE1Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 149,
      "path" : "src/rest.cpp",
      "position" : 167,
      "pull_request_review_id" : 324976238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, its the same limits as for headers (the code was copied from that section above). Not sure where to document this given the lack of equivalent documentation like we have in RPC where we can fail with help text. Maybe we should have some kind of much more informative general help system like we do for RPC, though its obviously out of scope here.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-02T00:28:17Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354",
      "id" : 352386354,
      "in_reply_to_id" : 352325195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM1NA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 47,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324976486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ehh, its the net limit, and dunno where to put it? Not really worth it.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-02T00:28:43Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378",
      "id" : 352386378,
      "in_reply_to_id" : 352325211,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM3OA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 46,
      "path" : "src/rest.cpp",
      "position" : 64,
      "pull_request_review_id" : 324976527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, good catch. Looks like headers is busted too, I fixed both.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-02T00:29:36Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428",
      "id" : 352386428,
      "in_reply_to_id" : 352325362,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQyOA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 119,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324976597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, its coped from the block code, so to keep it the same everywhere I'll leave it.",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-02T00:30:05Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459",
      "id" : 352386459,
      "in_reply_to_id" : 352325461,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQ1OQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 159,
      "path" : "src/rest.cpp",
      "position" : 177,
      "pull_request_review_id" : 324976635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-02T00:31:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "similarly, it'd make sense to define a constant for this, and use it in both places, instead of hardcoding 2000 (which I guess is just a sanity limit)",
      "commit_id" : "8c335332a5787e2b453b392f89b102a6cd07848d",
      "created_at" : "2019-12-03T17:31:58Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872",
      "id" : 353320872,
      "in_reply_to_id" : 352325195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMyMDg3Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_position" : 47,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 326321878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "updated_at" : "2019-12-03T17:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
