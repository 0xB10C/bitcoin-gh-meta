[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi,\r\n\r\nI've implemented a [very basic structure](https://github.com/brakmic/bitcoin/commit/93abc06a73196e3eef2f84fb5dd27e9efd5d0a27) for \"structured fuzzing\".\r\n\r\nAfter I've unsuccessfully tried to integrate this variant with the already existing from **src/test/fuzz**, I moved the code into the sub-dir **src/test/fuzz/structured**. \r\n\r\nHowever, the new code is still based on the existing logic, for example the *transaction* source. The difference here is, that it also includes additional libFuzzer API's *LLVMFuzzerMutate* and *LLVMFuzzerCustomMutator* which execute logic that comes from new mutator classes.\r\n\r\nCurrently, there's only a very **basic mutator** class available, which I have modelled after the original one from [libprotobuf-mutator](https://github.com/google/libprotobuf-mutator/blob/master/src/mutator.h#L45). Although very sophisticated, the code in libprotobuf-mutator is also very complex (at least for me), so that I avoided mindless copy/pasting. \r\n\r\nAt this stage, I think, it's better to start really small and introduce only as much stuff as I can understand (*have never worked with fuzzing before...in fact, I know it for less than 24 hours*).\r\n\r\nIf I am not totally mistaken, a **specialized mutator** class should be able to modify Bitcoin's messages by changing their properties and not only raw \"byte vectors\". For example, a mutator should be able to take a transaction and modify it in some way to check if anything problematic will happen.\r\n\r\n### Example\r\n\r\nThis is how the output looks like (of course, it doesn't go far enough as the current fuzzing capabilities aren't specialized enough)\r\n\r\n```shell\r\n./src/test/fuzz/structured/transaction test/fuzz/qa-assets/fuzz_seed_corpus/transaction/\r\nINFO: Seed: 2167175973\r\nINFO: Loaded 1 modules   (1206386 inline 8-bit counters): 1206386 [0x10f6f1648, 0x10f817eba), \r\nINFO: Loaded 1 PC tables (1206386 PCs): 1206386 [0x10f817ec0,0x110a805e0), \r\nINFO:      295 files found in test/fuzz/qa-assets/fuzz_seed_corpus/transaction/\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 52575 bytes\r\nINFO: seed corpus: files: 295 min: 1b max: 52575b total: 491499b rss: 76Mb\r\n#128    pulse  cov: 4823 ft: 12238 corp: 107/3309b exec/s: 64 rss: 156Mb\r\n#256    pulse  cov: 5691 ft: 23700 corp: 211/46Kb exec/s: 85 rss: 161Mb\r\n#296    INITED cov: 5695 ft: 25566 corp: 243/391Kb exec/s: 74 rss: 173Mb\r\n#512    pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 128 rss: 173Mb\r\n#1024   pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 256 rss: 174Mb\r\n#2048   pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 409 rss: 176Mb\r\n#4096   pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 682 rss: 179Mb\r\n#8192   pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 1024 rss: 186Mb\r\n#16384  pulse  cov: 5695 ft: 25566 corp: 243/391Kb lim: 52575 exec/s: 1365 rss: 199Mb\r\n```\r\n\r\n### Learning Resources\r\n\r\nIf there's someone else also interested in working with structured fuzzing I'd recommend these videos and texts:\r\n\r\n* [Video: Structure-aware fuzzing for Clang and LLVM with libprotobuf-mutator](https://youtu.be/U60hC16HEDY)\r\n* [Video: Fuzz or lose: why and how to make fuzzing a standard practice for C++](https://youtu.be/k-Cv8Q3zWNQ)\r\n* [Awesome Fuzzing](https://github.com/cpuu/awesome-fuzzing/blob/master/README.md)\r\n* [Fuzz-Testing Bitcoin Core](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md)\r\n* [libprotobuf-mutator project](https://github.com/google/libprotobuf-mutator)\r\n\r\nOr, if there's someone else with more experience, please, grab my code, adapt it and share your changes. \r\n\r\nAny help is very much appreciated! ð \r\n\r\n------\r\n### A few words for people out there struggling with macOS. ð± \r\n\r\nI'm working on **macOS Catalina**, so maybe I should also put a few words on compiling the fuzzing capability with it:\r\n\r\n* Take care of having an LLVM/Clang environment that contains fuzzing libraries. The default one from Apple is not enough, so that you will have to install it with **brew**, if not already done. \r\n\r\n* When executing **./configure** you should put **--disable-asm** to avoid errors with certain assembly code from Bitcoin Core's code. [There's an entry about it here](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#sanitizers) and it seems to have something to do with sanitizers you have to compile for fuzzing.\r\n\r\n* Take care of giving the correct path for **clang** and **clang++**, like **CC=/path/to/clang** **CXX=/path/to/clang++**\r\n\r\n* If you run into problems with \"boost sleep\" or some of boost's libraries can't be found, like boost.thread or boost.filesystem, add this to your *configure*: \r\n\r\n```shell\r\nCXXFLAGS=\"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk\"\r\n``` \r\n**Notice**: I am using Catalina 10.15.1, so your SDK might be different and you should adapt the path accordingly. \r\n\r\nHere's my complete **configure**, just in case.\r\n\r\n```shell\r\n./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address,undefined --with-boost CPPFLAGS=\"-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\" CXXFLAGS=\"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk\" CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ LDFLAGS=\"-L/usr/local/lib/darwin/\" --disable-asm\r\n```\r\n\r\nRegards,",
      "created_at" : "2019-12-07T17:17:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17657#issuecomment-562869600",
      "id" : 562869600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17657",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mjg2OTYwMA==",
      "updated_at" : "2019-12-07T17:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562869600",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@brakmic \r\n\r\nI'm very glad to see that you are interested in adding more fuzzing harnesses to the project. Welcome!\r\n\r\nIf you want to work on improving fuzzing coverage in Bitcoin Core there is **a lot** of long-hanging fruit in the form of currently non-fuzz-covered code that could be covered simply by adding small, simple and dumb fuzzing harnesses (without any dependency on `libprotobuf-mutator` or similar). See the simple fuzzers linked below for inspiration.\r\n\r\nCoverage-guided fuzzers like `libFuzzer` are surprisingly good these days, so I think you'll be surprised how deep also simple fuzzing harnesses can reach :)\r\n\r\nAfter adding a few fuzzers to the project you'll get a feel for the limits of simple fuzzing harnesses and you might notice cases where measurements indicate that a fuzzer gets stuck because of the lack of more sophisticated structure awareness. Then it might make sense to look at bringing in `libprotobuf-mutator` or similar, but my suggestion though is to start with the simplest possible fuzzing techniques first and then add complexity only when required.\r\n\r\n**Fuzzing harnesses should be as simple as possible, but not simpler :)**\r\n\r\nIf you are interested in fuzzing Bitcoin Core, please consider reviewing any of the fuzzing PR:s awaiting review:\r\n* https://github.com/bitcoin/bitcoin/pull/17050 â \"tests: Add fuzzing harnesses for functions parsing scripts, numbers, JSON and HD keypaths (bip32)\"\r\n* https://github.com/bitcoin/bitcoin/pull/17071 â \"tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions\"\r\n* https://github.com/bitcoin/bitcoin/pull/17093 â \"tests: Add fuzzing harness for various CTx{In,Out} related functions\"\r\n* https://github.com/bitcoin/bitcoin/pull/17109 â \"tests: Add fuzzing harness for various functions consuming only integrals\"\r\n* https://github.com/bitcoin/bitcoin/pull/17225 â \"tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible.\"\r\n* https://github.com/bitcoin/bitcoin/pull/17229 â \"tests: Add fuzzing harnesses for various Base{32,58,64} and hex related functions\"\r\n\r\nI would be glad to help if you run in to any problems during your fuzzing journey :)  Also, don't hesitate to ping me if you want any fuzzing PR reviewed :)\r\n\r\nAgain: welcome! We need more fuzzing in Bitcoin Core! :)",
      "created_at" : "2019-12-07T21:24:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17657#issuecomment-562888023",
      "id" : 562888023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17657",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mjg4ODAyMw==",
      "updated_at" : "2019-12-07T21:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562888023",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
