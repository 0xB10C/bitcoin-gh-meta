[
   {
      "author_association" : "MEMBER",
      "body" : "I think in general, initializing everything *unless* it's deliberately not done for performance reasons, is a good thing. One company I've worked for even had a strict \"initialize everything\" policy, no exceptions.\r\n\r\nFixing random buffers because of valgrind false positives has some [very bad](https://research.swtch.com/openssl) precedent though, please review carefully.",
      "created_at" : "2019-11-28T09:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559421439",
      "id" : 559421439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyMTQzOQ==",
      "updated_at" : "2019-11-28T09:51:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559421439",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj To be fair this is not a Valgrind false positive? :)  Valgrind false positives are _very_ rare in my experience.\r\n",
      "created_at" : "2019-11-28T09:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559423287",
      "id" : 559423287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyMzI4Nw==",
      "updated_at" : "2019-11-28T09:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559423287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To be fair this is not a Valgrind false positive? :) Valgrind false positives are very rare in my experience.\r\n\r\nIt's a false positive because the buffer is actually filled in by the syscall but ~~valgrind~~ msan doesn't notice. \r\n\r\n> The memory sanitizer cannot see through syscall (see google/sanitizers#852). This caused a false positive use-of-uninitialized-value error for SYS_getrandom.\r\n\r\nOh you're right, wrong tool.",
      "created_at" : "2019-11-28T10:00:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559425791",
      "id" : 559425791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyNTc5MQ==",
      "updated_at" : "2019-11-28T10:01:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559425791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Yes, but the false positive is in MemorySanitizer -- not Valgrind :)",
      "created_at" : "2019-11-28T10:02:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559426538",
      "id" : 559426538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyNjUzOA==",
      "updated_at" : "2019-11-28T10:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559426538",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK.\r\nFrom a quick glance it seems like the only change is initializing the value, and because unlike the openssl/debian fiasco, we *don't* use unintialized memory for generating randomness then there's no logical reason why this can make anything that currently works break (unless it was already broken).\r\n\r\nStill requires close up review but I think it's good to keep that in mind",
      "created_at" : "2019-11-28T10:09:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559429166",
      "id" : 559429166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyOTE2Ng==",
      "updated_at" : "2019-11-28T10:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559429166",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree that it needs careful review. I can replace the `{0}` with \"// intentionally not initialized\" where needed.\r\n\r\nAlso note that the code this touches is relatively new (added by @sipa in #15250 and #17270), and deserves extra scrutiny anyway now that we've dropped the OpenSSL training wheels.\r\n\r\nThe actual initialization before this commit took place in `GetOSRand`, which is different depending on the operating system details. That's probably another good reason to make sure stuff is initialized before it goes in there.",
      "created_at" : "2019-11-28T10:17:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559432380",
      "id" : 559432380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzMjM4MA==",
      "updated_at" : "2019-11-28T10:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559432380",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\n> I think in general, initializing everything _unless_ it's deliberately not done for performance reasons, is a good thing. One company I've worked for even had a strict \"initialize everything\" policy, no exceptions.\r\n\r\nAgree. I think it is worth doing.\r\n\r\nSome background reading that might be of interest regarding the pros/cons of default initialization in general:\r\n* C++ Core Guidelines (Sutter & Stroustrup), \"Always initialize an object\": https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es20-always-initialize-an-object\r\n* Clang automatic variable initialization: https://reviews.llvm.org/D54604 + https://twitter.com/jfbastien/status/1063203517102415872\r\n* Apple has started using automatic variable initialization in iOS kernel builds: https://twitter.com/josephbialek/status/1168930302036762625\r\n* Microsoft has started using MSVC `InitAll` in Windows kernel builds: https://twitter.com/JosephBialek/status/1062774315098112001\r\n* Talk \"Making C Less Dangerous in the Linux kernel\": https://www.youtube.com/watch?v=FY9SbqTO5GQ&feature=youtu.be&t=742\r\n* PDF: \"Fighting Uninitialized Memory in the Kernel\": https://linuxplumbersconf.org/event/4/contributions/426/attachments/338/564/KMSAN_for_LPC_2019\r\n\r\nSome quotes:\r\n* Linus Torvalds: \"So I'd like the zeroing of local variables to be a native compiler option, so that we can (_eventually_ - these things take a long time) just start saying \"ok, we simply consider stack variables to be always initialized\".\r\n* Linus Torvalds: \"Again - I don't think we want a world where everything is force-initialized. There _are_ going to be situations where that just hurts too much. But if we get to a place where we are zero-initialized by default, and have to explicitly mark the unsafe things (and we'll have comments not just about how they get initialized, but also about why that particular thing is so performance-critical), that would be a good place to be.\"\r\n\r\nNote that there is a `clang-tidy` fixup that can rewrite this for us if we want (applies only to integers, booleans, floats, doubles and pointers unfortunately): https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-init-variables.html",
      "created_at" : "2019-11-28T10:29:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559436518",
      "id" : 559436518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzNjUxOA==",
      "updated_at" : "2019-11-28T10:31:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559436518",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors Which subset of these changes are required to make MemorySanitizer happy? Not all these are technically needed, right? (I'm not opposing fixing it generally, but asking to get the full picture :))",
      "created_at" : "2019-11-28T10:33:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559438202",
      "id" : 559438202,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzODIwMg==",
      "updated_at" : "2019-11-28T10:34:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559438202",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r351755307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351755307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@practicalswift once I fixed this one, it ran into unrelated   `use-of-uninitialized-value` problems. That could mean this is the only problem, or the other ones just didn't get a chance to get called before the sanitizer bailed out.",
      "commit_id" : "ccfed8a22536bc5a307cc463a64fc05c7aa18281",
      "created_at" : "2019-11-28T12:30:41Z",
      "diff_hunk" : "@@ -451,7 +451,7 @@ static void SeedFast(CSHA512& hasher) noexcept\n \n static void SeedSlow(CSHA512& hasher) noexcept\n {\n-    unsigned char buffer[32];\n+    unsigned char buffer[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r351755307",
      "id" : 351755307,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTc1NTMwNw==",
      "original_commit_id" : "ccfed8a22536bc5a307cc463a64fc05c7aa18281",
      "original_position" : 32,
      "path" : "src/random.cpp",
      "position" : 32,
      "pull_request_review_id" : 324256095,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-11-28T12:30:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351755307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Initializing this would conceal from valgrind if changes in the code cased the random variable to not get filled which would be a moderately serious problem: Zero is not an acceptable random value. :)\r\n\r\nSince msan is actually incorrect due to a known and documented limitation in msan, might it not be better to use a suppression?  I'm not a fan of suppressing actual errors-- but this isn't an error, it's a tool limit, and suppressing-by-initializing will reduce the effectiveness other tools without the same limit.\r\n",
      "created_at" : "2019-11-28T15:01:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559525797",
      "id" : 559525797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTUyNTc5Nw==",
      "updated_at" : "2019-11-28T15:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559525797",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Initializing this would conceal from valgrind if changes in the code cased the random variable to not get filled which would be a moderately serious problem: Zero is not an acceptable random value. :)\r\n> \r\n> Since msan is actually incorrect due to a known and documented limitation in msan, might it not be better to use a suppression? I'm not a fan of suppressing actual errors-- but this isn't an error, it's a tool limit, and suppressing-by-initializing will reduce the effectiveness other tools without the same limit.\r\n\r\nThat's a good point. does valgrind support syscalls?",
      "created_at" : "2019-11-28T15:09:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559528278",
      "id" : 559528278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTUyODI3OA==",
      "updated_at" : "2019-11-28T15:09:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559528278",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe I can add `assert` statements directly after any buffers are filled  to check that they're not still 0? (though I suppose that could be forgotten in new places)",
      "created_at" : "2019-11-28T15:51:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559541756",
      "id" : 559541756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTU0MTc1Ng==",
      "updated_at" : "2019-11-28T15:51:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559541756",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Clarification regarding my Concept ACK: a suppression would be totally fine too.\r\n\r\nAs long as we make it easier for everyone to use MemorySanitizer I'm happy: we need more MSAN testing :)",
      "created_at" : "2019-11-28T21:11:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559603572",
      "id" : 559603572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTYwMzU3Mg==",
      "updated_at" : "2019-11-28T21:11:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559603572",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
