[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27636](https://github.com/bitcoin/bitcoin/pull/27636) (kernel: Remove interface_ui, util/system from kernel library by TheCharlatan)\n* [#26966](https://github.com/bitcoin/bitcoin/pull/26966) (index: blockfilter initial sync speedup, parallelize process by furszy)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-05-09T14:55:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1540297299",
      "id" : 1540297299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585bzxJT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540297299/reactions"
      },
      "updated_at" : "2023-05-18T01:13:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540297299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the deep review @ryanofsky!\r\n\r\n> Reviewed [86752e0](https://github.com/bitcoin/bitcoin/commit/86752e0cc5bc48f3d4ac1cd07835c37daf078d6a) and it mostly looks good, but does have a null pointer deference currently (see comments and suggested fix). I like this PR because it will simplify #24230 and could potentially improve performance. I'm not actually how sure how much it actually would improve performance in practice though, so I'm curious if that's was the original motivation here or if this is related to one of your other changes.\r\n\r\nYeah, the motivation came from a mix of thoughts actually.\r\n\r\nI was reviewing #24230 and wasn't completely sold by the `hasDataFromTipDown()` call inside the `attachChain` function. It seems odd to call to a chain data verification function in an event registering method.\r\nThen went deeper over the function, realized about the work duplication, and took that argument to simplify #24230 a bit.\r\n\r\nWe could also move the entire `hasDataFromTipDown` from the interface to somewhere else in this way. So there is no `CBlockIndex` dependency in the interface neither here nor in the #24230 intermediate commits.\r\n\r\nPlus, It plays well with #25193.\r\n\r\nAnd.. I'm also thinking that after #24230 and the parallel sync work (#26966), we could have one initial sync thread with a workers pool for all the indexers instead of the current per indexer sync thread.\r\nWhich should speedup the sync process quite a lot. We are currently reading the entire chain block by block from disk on every index thread. So instead, we could read blocks just once, then dispatch events to the indexers. Making indexers purely listeners with no associated thread.\r\n\r\n>  I'm also curious about the todo:\r\n> \r\n> > Pending todo: Fix remaining test by using the block index map instead of the active chain. The active chain is not available at the point where the indexers are started.\r\n> \r\n> Unsure if this is just referring to the null pointer problem, or to something else\r\n\r\nYeah ok. That comment is inaccurate and I forgot to update it.\r\n\r\nI initially thought that the issue was due an initialization ordering, that we werenât having the active chain activated at that point (thought that was done only post load-blk thread completion).\r\nSo I implemented 4738a1d7d46a9dd1f12dfeb047b142ab33c0fa16 and 837acfdbaca430cc5e29b7cdbf61380c33ed1aa2 instead of the current version. Which is better than what we have here currently, but itâs not the solution for the null ptr deference.\r\n\r\nThe issue is that empty indexers donât set the best block to the genesis `CBlockIndex`, they just leave it null. So, the index summary returns a valid height=0 with an empty block hash.. which crashes on the block hash assertion.\r\n\r\nSo, the fix is easy. But.. I havenât done it because have found another possible index sync \"fatal error\" in master and wanted to fix it prior continue moving forward here.\r\n\r\nEssentially, we are not checking whether the node has the post fork point blocks in disk prior starting the index:\r\n\r\nThe pruning violation checks whether we have blocks from the fork point up to the active chain tip. But it does not check if the node has blocks from the fork point up to the fork tip.. which are required by coinstatsindex to reverse its state during the reorg..\r\n\r\nE.g.\r\n\r\nActive chain\r\nA -> B -> C -> D -> E\r\n\r\nIndex chain\r\nA -> B -> C -> G -> F -> H\r\n\r\nThe âfailure errorâ will happen when G or F are not in disk or were pruned.\r\n\r\nSo, if this happens, it causes a âfatal errorâ during the coin stats index reorg process due the impossibility to read the block from disk.",
      "created_at" : "2023-05-11T20:40:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1544648748",
      "id" : 1544648748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585cEXgs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1544648748/reactions"
      },
      "updated_at" : "2023-05-12T01:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1544648748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1544648748\r\n\r\n> We could also move the entire `hasDataFromTipDown` from the interface to somewhere else in this way. So there is no `CBlockIndex` dependency in the interface neither here nor in the #24230 intermediate commits.\r\n\r\nYes I don't think it makes sense to expose that method as part of the `Chain` interface, and even if it did make sense, it wouldn't make sense to put the implementation in the `ChainImpl` class, because the class is mostly meant to hold glue code, not complicated functions. That's the reason for the suggestion to make it a standalone function `bool ChainDataFromTipDown(ChainstateManager& chainman, const CBlockIndex& start_block)` in https://github.com/bitcoin/bitcoin/pull/27607#discussion_r1191396717\r\n\r\n> And.. I'm also thinking that after #24230 and the parallel sync work (#26966), we could have one initial sync thread with a workers pool for all the indexers instead of the current per indexer sync thread. Which should speedup the sync process quite a lot. We are currently reading the entire chain block by block from disk on every index thread. So instead, we could read blocks just once, then dispatch events to the indexers. Making indexers purely listeners with no associated thread.\r\n\r\nYes letting indexes just receive notifications to get in sync and not have to implement sync logic is the goal of #24230. And the threading issue should be orthogonal after that PR. Indexes (and wallets) could read and process blocks in single thread, or read blocks in a single thread and process them in parallel, or read and process blocks in parallel like happens currently, or use some other form of scheduling. But regardless of what ordering is used, the interface an individual index uses to get in sync should not have to change, and indexes shouldn't have to create sync threads or deal with race conditions between the notification threads and sync threads.\r\n\r\n> I initially thought that the issue was due an initialization ordering, that we werenât having the active chain activated at that point (thought that was done only post load-blk thread completion).\r\n\r\nOh, I see. That's also what I concluded from seeing the failure, but I guess it is not the complete picture.\r\n\r\n> The issue is that empty indexers donât set the best block to the genesis `CBlockIndex`, they just leave it null. So, the index summary returns a valid height=0 with an empty block hash.. which crashes on the block hash assertion.\r\n> \r\n> So, the fix is easy.\r\n\r\nI didn't know about this. I guess the fix would be to treat the genesis as the fork point in this case. And to consider the index already synced if there is nochainstate and the genesis pointer is null.\r\n\r\n> But.. I havenât done it because have found another possible index sync \"fatal error\" in master and wanted to fix it prior continue moving forward here.\r\n\r\nIt seems like it would be a good thing to fix this. But this sounds like something that was already broken, so I'm not sure if the fix has to be bundled here, necessarily. I think the \"has data from tip down\" check is a useful check that can run early and warn if any block data is missing. But if the check isn't perfect and doesn't catch missing block, it shouldn't be the worst thing because the missing blocks will just be reported later rather than earlier.",
      "created_at" : "2023-05-15T17:17:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1548248095",
      "id" : 1548248095,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585cSGQf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1548248095/reactions"
      },
      "updated_at" : "2023-05-15T17:17:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1548248095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I can't see how the current approach could work, even if the problems discussed above were solved:\r\n\r\nGood catch noticing Init() was not called! It doesn't seem like it should be that hard to fix, though. The PR was already moving most of the code out of Init(), anyway, so now a little more code needs to move. I didn't look very deeply but I would probably make Init() a public method and call it after constructing the index. Also stop calling Init() from Start() and move the RegisterValidationInterface() from Start() to Init().",
      "created_at" : "2023-05-16T22:09:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1550419574",
      "id" : 1550419574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585caYZ2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550419574/reactions"
      },
      "updated_at" : "2023-05-16T22:09:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550419574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @mzumsande.\r\n\r\nFunny that I pushed a small update at the same time that you were commenting.\r\n\r\nHave few more changes on the pipeline that will be pushing soon. e.g. the `hasDataFromTipDown` entire function can be written in two lines.. just need to re-purpose the `GetFirstStoredBlock` function a bit :).\r\n\r\n> I think the necessary order would be to\r\n>\r\n> create all indexes and read their best block / other data from disk\r\ndetermine the oldest block for all indexes\r\nDo the pruning check once\r\n\r\nYeah.. I was thinking on the other issue and forgot that `Init()` isn't being called in the constructor.. :face_palm:. Will re-order it, Thanks!\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at" : "2023-05-16T22:10:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1550420156",
      "id" : 1550420156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585caYi8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550420156/reactions"
      },
      "updated_at" : "2023-05-16T22:33:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550420156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Looking at current version of the PR 6dfec1b5fbb0f8e95a6134ea8b27e9d6c285d171 it seems to have changed a lot, and the other thing it is doing now is delaying startup of indexes until blocks are loaded, so there is no longer a conflict with `reindex-chainstate`. So it is basically reimplementing #25193 in a different way that doesn't require a `sleep_for(std::chrono::milliseconds(500))` waitloop. I think this approach is cleaner, but also that #25193 is a smaller more targeted change with a test, so I would probably prefer to see #25193 merged first and with this cleanup and rewrite merged later.\r\n\r\n~#25193 also has two ACKs, so I can re-ack and merge it soon.~ EDIT: Never mind, just noticed it needs rebase currently\r\n\r\nOn this PR, I like the approach and thinks the code looks pretty good overall. The only thing I don't like is all the complexity added to AppInitMain(). I think that complexity could go away if you got rid of the `std::set<BaseIndex*> indexers` local variable there and added a `NodeContext` `std::vector<BaseIndex*> indexes` member instead. Then there would be no need for the `func_start_indexes` lambda. The lambda could be replaced with a regular `StartIndexes` function instead.\r\n\r\n",
      "created_at" : "2023-05-17T13:31:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1551406710",
      "id" : 1551406710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585ceJZ2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551406710/reactions"
      },
      "updated_at" : "2023-05-17T13:35:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551406710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Was about to send the updates comment hehe. I was too tired last night to write it. Thanks for the review ryanofsky!\r\n\r\nUpdates list:\r\n\r\n- Decoupled index `Init()` from `Start()`. So indexers can be initialized without spawning the sync thread. \r\n\r\n- Simplified the pruning violation code by re-purposing the `GetFirstStoredBlock` function. Now called `IsBlockDataAvailable`.\r\n\r\n- Fixed a small race, where we set the index `m_synced` flag (which enables `BlockConnected` events) before calling to the child class init function. So, for example, the block filter index could theoretically process a block before initializing the `next filter position` field and end up overwriting the first stored filter.\r\n\r\n-------\r\n\r\nFeedback:\r\n\r\n> Looking at current version of the PR [6dfec1b](https://github.com/bitcoin/bitcoin/commit/6dfec1b5fbb0f8e95a6134ea8b27e9d6c285d171) it seems to have changed a lot, and the other thing it is doing now is delaying startup of indexes until blocks are loaded, so there is no longer a conflict with `reindex-chainstate`. So it is basically reimplementing #25193 in a different way that doesn't require a `sleep_for(std::chrono::milliseconds(500))` waitloop. I think this approach is cleaner, but also that #25193 is a smaller more targeted change with a test, so I would probably prefer to see #25193 merged first and with this cleanup and rewrite merged later.\r\n\r\nYeah, I updated the PR description last night stating that this is now built on top of #25193 (but my slightly modified version of it https://github.com/bitcoin/bitcoin/pull/25193#pullrequestreview-1375021974).\r\n\r\n@mzumsande said that he was going to give them a look and probably take them. So, all good if them get squashed there or here. Either way is fine for me. Happy to re-review #25193 whenever is ready to go again.\r\n\r\n\r\n \r\n> On this PR, I like the approach and thinks the code looks pretty good overall. The only thing I don't like is all the complexity added to AppInitMain(). I think that complexity could go away if you got rid of the `std::set<BaseIndex*> indexers` local variable there and added a `NodeContext` `std::vector<BaseIndex*> indexes` member instead. Then there would be no need for the `func_start_indexes` lambda. The lambda could be replaced with a regular `StartIndexes` function instead.\r\n\r\nSounds great. Was also thinking about moving the lambda to a standalone function but wasn't finding the right place and didn't want to create a new file only for this.\r\n\r\n",
      "created_at" : "2023-05-17T13:54:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1551443566",
      "id" : 1551443566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585ceSZu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551443566/reactions"
      },
      "updated_at" : "2023-05-17T14:00:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551443566",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased post #25193 merge. Conflicts solved.\r\n\r\nOnly change from the last push is on the first commit ca30419, where the index threads active wait and the global flag are replaced by a post-poned indexers start call.",
      "created_at" : "2023-05-17T19:23:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1551934377",
      "id" : 1551934377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585cgKOp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551934377/reactions"
      },
      "updated_at" : "2023-05-18T14:23:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551934377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI failure is not related.",
      "created_at" : "2023-05-18T17:17:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1553369947",
      "id" : 1553369947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585clotb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553369947/reactions"
      },
      "updated_at" : "2023-05-18T17:17:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553369947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/issues/27492#issuecomment-1527772394 about the CI failure",
      "created_at" : "2023-05-18T17:22:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1553376251",
      "id" : 1553376251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585clqP7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553376251/reactions"
      },
      "updated_at" : "2023-05-18T17:23:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553376251",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/27607#issue-1702212340\r\n\r\n>* Fixed a small race, where we set the index `m_synced` flag (which enables `BlockConnected` events) before calling to the child class init function. So, for example, the block filter index could theoretically process a block before initializing the next filter position field and end up overwriting the first stored filter.\r\n\r\nCan you clarify this? I don't see m_synced getting set to true before the index is synced, and don't understand the block filter index example.",
      "created_at" : "2023-05-18T17:25:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1553379017",
      "id" : 1553379017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585clq7J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553379017/reactions"
      },
      "updated_at" : "2023-05-18T17:25:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553379017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> re: [#27607 (comment)](https://github.com/bitcoin/bitcoin/pull/27607#issue-1702212340)\r\n> \r\n> > * Fixed a small race, where we set the index `m_synced` flag (which enables `BlockConnected` events) before calling to the child class init function. So, for example, the block filter index could theoretically process a block before initializing the next filter position field and end up overwriting the first stored filter.\r\n> \r\n> Can you clarify this? I don't see m_synced getting set to true before the index is synced, and don't understand the block filter index example.\r\n\r\nSure. The [BaseIndex::Start()](https://github.com/bitcoin/bitcoin/blob/6cc136bbd36f859a16e469bb5c016d06c19bcd50/src/index/base.cpp#L401) flow in master is the following one:\r\n\r\n1) Calls `RegisterValidationInterface()` --> which registers to the validation interface.\r\n2) Calls [BaseIndex::Init()](https://github.com/bitcoin/bitcoin/blob/6cc136bbd36f859a16e469bb5c016d06c19bcd50/src/index/base.cpp#L409) --> which, prior the pruning check, sets [m_synced](https://github.com/bitcoin/bitcoin/blob/6cc136bbd36f859a16e469bb5c016d06c19bcd50/src/index/base.cpp#L109):\r\n    `m_synced = m_best_block_index.load() == active_chain.Tip()`\r\n3) Calls `CustomInit()`.  --> which, for the block index filter, initializes the [m_next_filter_pos](https://github.com/bitcoin/bitcoin/blob/6cc136bbd36f859a16e469bb5c016d06c19bcd50/src/index/blockfilterindex.cpp#L114) field with the db information.\r\n\r\nSo, if the block filter index is synced, and the index receives a `BlockConnected` event after finish point (2) and before point (3) then `m_next_filter_pos` will not be initialized, so `BlockFIlterIndex::CustomAppend()` will use a null `m_next_filter_pos`. ",
      "created_at" : "2023-05-18T17:42:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1553400917",
      "id" : 1553400917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585clwRV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553400917/reactions"
      },
      "updated_at" : "2023-05-18T17:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553400917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! So the problem is that `m_synced` is set to true before `CustomInit` code runs, instead of after. It looks like this bug was introduced in bef4e405f3de2718dfee279a9abff4daf016da26 from #25494",
      "created_at" : "2023-05-18T17:54:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27607#issuecomment-1553414023",
      "id" : 1553414023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27607",
      "node_id" : "IC_kwDOABII585clzeH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553414023/reactions"
      },
      "updated_at" : "2023-05-18T17:54:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553414023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
