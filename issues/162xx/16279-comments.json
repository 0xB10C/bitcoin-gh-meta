[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16487](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16487.html) (validationinterface: add unused CChainState parameter by jamesob)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-06-25T00:13:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-505227446",
      "id" : 505227446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNTIyNzQ0Ng==",
      "updated_at" : "2019-07-29T22:16:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/505227446",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297034762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it make sense to have a `ProcessAndNotifyNewBlock` to wrap this repeated code?",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-25T07:04:59Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762",
      "id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzAzNDc2Mg==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 253805861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297034762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297421989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297421989"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-25T22:38:45Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297421989",
      "id" : 297421989,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzQyMTk4OQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 254305898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297421989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298737297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298737297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nWhy is this saying \"possibly get feedback\"? If you check CValidationState and wait for BlockChecked, are there still cases where there wouldn't be feedback? If so, it'd be good to give some hint of when or why this would happen. If not, I'd suggest changing \"If you want to *possibly* get feedback\" to \"If you want to get feedback\" and \"you must install\" to \"you must also install\"",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-28T20:25:43Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298737297",
      "id" : 298737297,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODczNzI5Nw==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 8,
      "path" : "src/validation.h",
      "position" : 8,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298737297",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298739909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298739909"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nCould you clarify what malleated means here, or what case this is talking about? When is a block connected but also non valid?",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-28T20:35:31Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298739909",
      "id" : 298739909,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODczOTkwOQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 17,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298739909",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298742380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298742380"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nI don't understand what this is saying. Is it just saying it would be wasteful to call with fForceProcessing set in this case, or something more? Would the recommendation be to call with fForceProcessing unset instead, or try to avoid calls entirely? Probably it would be clearer to say when fForceProcessing should be set rather than when it shouldn't be set (if I'm not just completely misunderstanding point of this).",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-28T20:45:12Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set, barring pruning and a desire to re-download a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298742380",
      "id" : 298742380,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0MjM4MA==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 22,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298742380",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298748875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298748875"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is mapBlockSource.erase call needed here? In not valid case, this should already happen in explicit BlockChecked call. In valid case, I assume it happens in BlockChecked validation callback?\r\n\r\nThis logic is messy and repetitive and seems like it could be simplified by moving more of it out of here into the BlockChecked() function, or breaking BlockChecked up into reusable parts.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-28T21:10:37Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298748875",
      "id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0ODg3NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 35,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298748875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298749945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298749945"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762\r\n\r\nIn commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\n> I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway\r\n\r\nSeems to me deduplicating this code now would only simplify the later PR.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-06-28T21:14:55Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298749945",
      "id" : 298749945,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0OTk0NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298749945",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, but in the full branch I first clean up some cruft, and then merge the now-identical code instead of the currently-partially-identical code. Easier to just leave it as-is.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-07-02T02:22:21Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281017",
      "id" : 299281017,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTAxNw==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 256637736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281755"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe the confusion was the use of the old term \"malleated\" instead of the \"mutated\" term used in ValidationInvalidReason. I changed references to mutated.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-07-02T02:27:26Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281755",
      "id" : 299281755,
      "in_reply_to_id" : 298739909,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTc1NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 17,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 256638637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281755",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281962"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is saying something very specific - if fForceProcessing is set (but deliberately not saying anything about *when* you should set it, as that is a rather complicated topic), unless your goal is to re-download a block, you *never* need to call ProcessNewBlock again with the block. That is to say, \"this copy of the block is good, no need to try to find an alternate source\", hence the somewhat verbose text. Feel free to suggest an alternative.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-07-02T02:28:58Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set, barring pruning and a desire to re-download a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281962",
      "id" : 299281962,
      "in_reply_to_id" : 298742380,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTk2Mg==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 22,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 256638891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281962",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299282275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299282275"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR removes the (now redundant) BlockChecked call in case a block is completely bogus (ie !dos_state.IsValid()), so, no.",
      "commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "created_at" : "2019-07-02T02:30:59Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299282275",
      "id" : 299282275,
      "in_reply_to_id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MjI3NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 35,
      "pull_request_review_id" : 256639245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-07-02T02:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299282275",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
