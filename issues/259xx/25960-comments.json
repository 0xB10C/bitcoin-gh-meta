[
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns @instagibbs These should address the remaining review items that came up in https://github.com/bitcoin/bitcoin/pull/25717#issuecomment-1228795579",
      "created_at" : "2022-08-30T16:49:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25960#issuecomment-1231918353",
      "id" : 1231918353,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25960",
      "node_id" : "IC_kwDOABII585JbZUR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231918353/reactions"
      },
      "updated_at" : "2022-08-30T16:51:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231918353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25960#discussion_r958731326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25960"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958731326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```bash\r\n/tmp/cirrus-ci-build/test/functional/p2p_headers_sync_with_minchainwork.py:57: unused variable 'num_tips' (100% confidence)\r\ntest/functional/p2p_headers_sync_with_minchainwork.py:57:9: E306 expected 1 blank line before a nested definition, found 0\r\n```",
      "commit_id" : "2ad515a9a10fbbf8158606019af2514d9eed5d00",
      "created_at" : "2022-08-30T17:05:21Z",
      "diff_hunk" : "@@ -40,17 +40,32 @@ def setup_network(self):\n     def disconnect_all(self):\n         self.disconnect_nodes(0, 1)\n         self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(0, 3)\n \n     def reconnect_all(self):\n         self.connect_nodes(0, 1)\n         self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n \n     def test_chains_sync_when_long_enough(self):\n         self.log.info(\"Generate blocks on the node with no required chainwork, and verify nodes 1 and 2 have no new headers in their headers tree\")\n         with self.nodes[1].assert_debug_log(expected_msgs=[\"[net] Ignoring low-work chain (height=14)\"]), self.nodes[2].assert_debug_log(expected_msgs=[\"[net] Ignoring low-work chain (height=14)\"]):\n             self.generate(self.nodes[0], NODE1_BLOCKS_REQUIRED-1, sync_fun=self.no_op)\n \n-        for node in self.nodes[1:]:\n+        # Node3 should always allow headers due to noban permissions\n+        self.log.info(\"Check that node3 will sync headers (due to noban permissions)\")\n+        def check_node3_chaintips(num_tips, tip_hash, height):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25960#discussion_r958731326",
      "id" : 958731326,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII5845JRQ-",
      "original_commit_id" : "1206e2deb2f47419dd75300a78315d7964c0e8ee",
      "original_line" : 57,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "test/functional/p2p_headers_sync_with_minchainwork.py",
      "position" : 31,
      "pull_request_review_id" : 1090684091,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25960",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958731326/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T17:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958731326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "<details><summary>Some initial WIP follow-up suggestions on first look-over of #25717.</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 3b97c9252e..96bace65d6 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -632,15 +632,15 @@ private:\r\n      *              acceptance by the caller).\r\n      */\r\n     bool IsContinuationOfLowWorkHeadersSync(Peer& peer, CNode& pfrom,\r\n-            std::vector<CBlockHeader>& headers)\r\n+                                            std::vector<CBlockHeader>& headers)\r\n         EXCLUSIVE_LOCKS_REQUIRED(peer.m_headers_sync_mutex, !m_headers_presync_mutex);\r\n     /** Check work on a headers chain to be processed, and if insufficient,\r\n      * initiate our anti-DoS headers sync mechanism.\r\n      *\r\n-     * @param[in]   peer                The peer whose headers we're processing.\r\n-     * @param[in]   pfrom               CNode of the peer\r\n-     * @param[in]   chain_start_header  Where these headers connect in our index.\r\n-     * @param[in,out]   headers             The headers to be processed.\r\n+     * @param[in]     peer                The peer whose headers we're processing.\r\n+     * @param[in]     pfrom               CNode of the peer\r\n+     * @param[in]     chain_start_header  Where these headers connect in our index.\r\n+     * @param[in,out] headers             The headers to be processed.\r\n      *\r\n      * @return      True if chain was low work and a headers sync was\r\n      *              initiated (and headers will be empty after calling); false\r\n@@ -1467,6 +1467,9 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\r\n \r\n void PeerManagerImpl::FinalizeNode(const CNode& node)\r\n {\r\n+    AssertLockNotHeld(m_headers_presync_mutex);\r\n     NodeId nodeid = node.GetId();\r\n     int misbehavior{0};\r\n     {\r\n@@ -2447,6 +2450,9 @@ bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>&\r\n \r\n bool PeerManagerImpl::IsContinuationOfLowWorkHeadersSync(Peer& peer, CNode& pfrom, std::vector<CBlockHeader>& headers)\r\n {\r\n+    AssertLockNotHeld(m_headers_presync_mutex);\r\n     if (peer.m_headers_sync) {\r\n         auto result = peer.m_headers_sync->ProcessNextHeaders(headers, headers.size() == MAX_HEADERS_RESULTS);\r\n         if (result.request_more) {\r\n@@ -2460,13 +2466,12 @@ bool PeerManagerImpl::IsContinuationOfLowWorkHeadersSync(Peer& peer, CNode& pfro\r\n                 // it may be possible to bypass this via compactblock\r\n                 // processing, so check the result before logging just to be\r\n                 // safe.\r\n-                bool sent_getheaders = MaybeSendGetHeaders(pfrom, locator, peer);\r\n-                if (sent_getheaders) {\r\n+                if (MaybeSendGetHeaders(pfrom, locator, peer)) {\r\n                     LogPrint(BCLog::NET, \"more getheaders (from %s) to peer=%d\\n\",\r\n-                            locator.vHave.front().ToString(), pfrom.GetId());\r\n+                             locator.vHave.front().ToString(), pfrom.GetId());\r\n                 } else {\r\n                     LogPrint(BCLog::NET, \"error sending next getheaders (from %s) to continue sync with peer=%d\\n\",\r\n-                            locator.vHave.front().ToString(), pfrom.GetId());\r\n+                             locator.vHave.front().ToString(), pfrom.GetId());\r\n                 }\r\n             }\r\n         }\r\n@@ -2533,6 +2538,7 @@ bool PeerManagerImpl::IsContinuationOfLowWorkHeadersSync(Peer& peer, CNode& pfro\r\n \r\n bool PeerManagerImpl::TryLowWorkHeadersSync(Peer& peer, CNode& pfrom, const CBlockIndex* chain_start_header, std::vector<CBlockHeader>& headers)\r\n {\r\n+    AssertLockNotHeld(m_headers_presync_mutex);\r\n     // Calculate the total work on this chain.\r\n \r\n@@ -2733,6 +2738,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\r\n                                             std::vector<CBlockHeader>&& headers,\r\n                                             bool via_compact_block)\r\n {\r\n+    AssertLockNotHeld(m_headers_presync_mutex);\r\n     size_t nCount = headers.size();\r\n \r\n     if (nCount == 0) {\r\n@@ -3131,6 +3139,11 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n                                      const std::chrono::microseconds time_received,\r\n                                      const std::atomic<bool>& interruptMsgProc)\r\n {\r\n+    AssertLockNotHeld(m_headers_presync_mutex);\r\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom.GetId());\r\n```\r\n</p></details>\r\n\r\nFeel free to ignore. I also have a branch ready at https://github.com/bitcoin/bitcoin/compare/master...jonatack:bitcoin:net-add-missing-thread-safety-runtime-assertions for all the net and net_processing code and mention above only the runtime lock assertions directly related to changes in #25717.\r\n\r\nEdit: updated with an additonal runtime lock assertion in `PeerManagerImpl::TryLowWorkHeadersSync`.",
      "created_at" : "2022-08-30T17:15:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25960#issuecomment-1231945261",
      "id" : 1231945261,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25960",
      "node_id" : "IC_kwDOABII585Jbf4t",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231945261/reactions"
      },
      "updated_at" : "2022-08-30T17:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231945261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
