[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25796](https://github.com/bitcoin/bitcoin/pull/25796) (rpc: add `descriptorprocesspsbt` rpc by ishaanam)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-08-27T14:26:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25939#issuecomment-1229202496",
      "id" : 1229202496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25939",
      "node_id" : "IC_kwDOABII585JRCRA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229202496/reactions"
      },
      "updated_at" : "2022-08-27T14:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229202496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1019443666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1019443666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 687d6c20a4d6fc99cf4ae5794dd4203ea446a8f2 \"rpc, tests: in `utxoupdatepsbt` also look for the transaction in the txindex\"\r\n\r\nChecking `!coins.empty()` again is redundant. Also, we may still want to add the witness_utxo even if a non_witness_utxo exists.\r\n\r\nWe add the different utxo types depending on the script type. For legacy scripts, only non_witness_utxo should be added. For Segwit v0, both non_witness_utxo and witness_utxo should be added, For Segwit v1+, only witness_utxo should be added. This RPC should (try) to adhere to these guidelines.",
      "commit_id" : "05f4340ac6614a85056039028df5671e01dcd957",
      "created_at" : "2022-11-10T17:47:50Z",
      "diff_hunk" : "@@ -172,44 +172,68 @@ PartiallySignedTransaction ProcessPSBT(const std::string& psbt_string, const std\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Fetch previous transactions (inputs):\n-    CCoinsView viewDummy;\n-    CCoinsViewCache view(&viewDummy);\n-    {\n-        NodeContext& node = EnsureAnyNodeContext(context);\n-        const CTxMemPool& mempool = EnsureMemPool(node);\n-        ChainstateManager& chainman = EnsureChainman(node);\n-        LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+    // Fetch previous transactions:\n+    // First, look in the txindex and the mempool\n+    if (g_txindex) g_txindex->BlockUntilSyncedToCurrentChain();\n+    const NodeContext& node = EnsureAnyNodeContext(context);\n \n-        for (const CTxIn& txin : psbtx.tx->vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n-        }\n-\n-        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n-    }\n+    // If we can't find the corresponding full transaction for all of our inputs,\n+    // this will be used to find just the utxos for the segwit inputs for which\n+    // the full transaction isn't found\n+    std::map<COutPoint, Coin> coins;\n \n-    // Fill the inputs\n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n+        PSBTInput& psbt_input = psbtx.inputs.at(i);\n+        const CTxIn& tx_in = psbtx.tx->vin.at(i);\n \n-        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n-            continue;\n+        if (psbt_input.non_witness_utxo) continue;\n+\n+        CTransactionRef tx;\n+\n+        // Look in the txindex\n+        if (g_txindex) {\n+            uint256 block_hash;\n+            g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx);\n         }\n+        // If we still don't have it look in the mempool\n+        if (!tx) {\n+            tx = node.mempool->get(tx_in.prevout.hash);\n+        }\n+        if (tx) {\n+            psbt_input.non_witness_utxo = tx;\n+        } else {\n+            coins[tx_in.prevout]; // Create empty map entry keyed by prevout\n+        }\n+    }\n \n-        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+    // If we still haven't found all of the inputs, look for the missing ones in the utxo set\n+    if (!coins.empty()) {\n+        FindCoins(node, coins);\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs.at(i);\n+\n+            // If there are still missing utxos, add them if they were found in the utxo set\n+            if (!coins.empty() && !input.non_witness_utxo) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1019443666",
      "id" : 1019443666,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848w3nS",
      "original_commit_id" : "687d6c20a4d6fc99cf4ae5794dd4203ea446a8f2",
      "original_line" : 216,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 1176240619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1019443666/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-10T17:47:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1019443666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1020783886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020783886"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Also, we may still want to add the witness_utxo even if a non_witness_utxo exists.\r\n\r\nIf the `non_witness_utxo` exists and a segwit output is being spent, `SignPSBTInput` will add the `witness_utxo`.\r\n> For Segwit v1+, only witness_utxo should be added.\r\n\r\nI have updated this commit to adhere to this, but this [comment](https://github.com/bitcoin/bitcoin/blob/master/src/psbt.cpp#L417-L419) indicates something a bit different: \r\n> We can remove the non_witness_utxo if and only if there are no non-segwit or segwit v0\r\n    inputs in this transaction.\r\n\r\nSo does the `non_witness_utxo` need to be present for a Segwit v1 input if there is another non-segwit input int he transaction?",
      "commit_id" : "05f4340ac6614a85056039028df5671e01dcd957",
      "created_at" : "2022-11-12T17:03:45Z",
      "diff_hunk" : "@@ -172,44 +172,68 @@ PartiallySignedTransaction ProcessPSBT(const std::string& psbt_string, const std\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Fetch previous transactions (inputs):\n-    CCoinsView viewDummy;\n-    CCoinsViewCache view(&viewDummy);\n-    {\n-        NodeContext& node = EnsureAnyNodeContext(context);\n-        const CTxMemPool& mempool = EnsureMemPool(node);\n-        ChainstateManager& chainman = EnsureChainman(node);\n-        LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+    // Fetch previous transactions:\n+    // First, look in the txindex and the mempool\n+    if (g_txindex) g_txindex->BlockUntilSyncedToCurrentChain();\n+    const NodeContext& node = EnsureAnyNodeContext(context);\n \n-        for (const CTxIn& txin : psbtx.tx->vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n-        }\n-\n-        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n-    }\n+    // If we can't find the corresponding full transaction for all of our inputs,\n+    // this will be used to find just the utxos for the segwit inputs for which\n+    // the full transaction isn't found\n+    std::map<COutPoint, Coin> coins;\n \n-    // Fill the inputs\n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n+        PSBTInput& psbt_input = psbtx.inputs.at(i);\n+        const CTxIn& tx_in = psbtx.tx->vin.at(i);\n \n-        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n-            continue;\n+        if (psbt_input.non_witness_utxo) continue;\n+\n+        CTransactionRef tx;\n+\n+        // Look in the txindex\n+        if (g_txindex) {\n+            uint256 block_hash;\n+            g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx);\n         }\n+        // If we still don't have it look in the mempool\n+        if (!tx) {\n+            tx = node.mempool->get(tx_in.prevout.hash);\n+        }\n+        if (tx) {\n+            psbt_input.non_witness_utxo = tx;\n+        } else {\n+            coins[tx_in.prevout]; // Create empty map entry keyed by prevout\n+        }\n+    }\n \n-        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+    // If we still haven't found all of the inputs, look for the missing ones in the utxo set\n+    if (!coins.empty()) {\n+        FindCoins(node, coins);\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs.at(i);\n+\n+            // If there are still missing utxos, add them if they were found in the utxo set\n+            if (!coins.empty() && !input.non_witness_utxo) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1020783886",
      "id" : 1020783886,
      "in_reply_to_id" : 1019443666,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58481-0O",
      "original_commit_id" : "687d6c20a4d6fc99cf4ae5794dd4203ea446a8f2",
      "original_line" : 216,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 1178143946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020783886/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-12T17:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020783886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1020917822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020917822"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think if there is at least one witv0 or legacy input in a transaction, the non_witness_utxo record of all inputs should be kept.",
      "commit_id" : "f26d600d55d86099206456f394a422436d5f3ec3",
      "created_at" : "2022-11-13T15:05:37Z",
      "diff_hunk" : "@@ -172,44 +172,68 @@ PartiallySignedTransaction ProcessPSBT(const std::string& psbt_string, const std\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Fetch previous transactions (inputs):\n-    CCoinsView viewDummy;\n-    CCoinsViewCache view(&viewDummy);\n-    {\n-        NodeContext& node = EnsureAnyNodeContext(context);\n-        const CTxMemPool& mempool = EnsureMemPool(node);\n-        ChainstateManager& chainman = EnsureChainman(node);\n-        LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+    // Fetch previous transactions:\n+    // First, look in the txindex and the mempool\n+    if (g_txindex) g_txindex->BlockUntilSyncedToCurrentChain();\n+    const NodeContext& node = EnsureAnyNodeContext(context);\n \n-        for (const CTxIn& txin : psbtx.tx->vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n-        }\n-\n-        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n-    }\n+    // If we can't find the corresponding full transaction for all of our inputs,\n+    // this will be used to find just the utxos for the segwit inputs for which\n+    // the full transaction isn't found\n+    std::map<COutPoint, Coin> coins;\n \n-    // Fill the inputs\n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n+        PSBTInput& psbt_input = psbtx.inputs.at(i);\n+        const CTxIn& tx_in = psbtx.tx->vin.at(i);\n \n-        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n-            continue;\n+        if (psbt_input.non_witness_utxo) continue;\n+\n+        CTransactionRef tx;\n+\n+        // Look in the txindex\n+        if (g_txindex) {\n+            uint256 block_hash;\n+            g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx);\n         }\n+        // If we still don't have it look in the mempool\n+        if (!tx) {\n+            tx = node.mempool->get(tx_in.prevout.hash);\n+        }\n+        if (tx) {\n+            psbt_input.non_witness_utxo = tx;\n+        } else {\n+            coins[tx_in.prevout]; // Create empty map entry keyed by prevout\n+        }\n+    }\n \n-        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+    // If we still haven't found all of the inputs, look for the missing ones in the utxo set\n+    if (!coins.empty()) {\n+        FindCoins(node, coins);\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs.at(i);\n+\n+            // If there are still missing utxos, add them if they were found in the utxo set\n+            if (!coins.empty() && !input.non_witness_utxo) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1020917822",
      "id" : 1020917822,
      "in_reply_to_id" : 1019443666,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58482fg-",
      "original_commit_id" : "687d6c20a4d6fc99cf4ae5794dd4203ea446a8f2",
      "original_line" : 216,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 1178255291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020917822/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-13T15:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020917822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1023354480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1023354480"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think if there is at least one witv0 or legacy input in a transaction, the non_witness_utxo record of all inputs should be kept.\r\n\r\nThis is also what `walletprocesspsbt` does, so I have update this PR to do that as well.",
      "commit_id" : "f26d600d55d86099206456f394a422436d5f3ec3",
      "created_at" : "2022-11-15T23:25:13Z",
      "diff_hunk" : "@@ -172,44 +172,68 @@ PartiallySignedTransaction ProcessPSBT(const std::string& psbt_string, const std\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Fetch previous transactions (inputs):\n-    CCoinsView viewDummy;\n-    CCoinsViewCache view(&viewDummy);\n-    {\n-        NodeContext& node = EnsureAnyNodeContext(context);\n-        const CTxMemPool& mempool = EnsureMemPool(node);\n-        ChainstateManager& chainman = EnsureChainman(node);\n-        LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n-        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+    // Fetch previous transactions:\n+    // First, look in the txindex and the mempool\n+    if (g_txindex) g_txindex->BlockUntilSyncedToCurrentChain();\n+    const NodeContext& node = EnsureAnyNodeContext(context);\n \n-        for (const CTxIn& txin : psbtx.tx->vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n-        }\n-\n-        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n-    }\n+    // If we can't find the corresponding full transaction for all of our inputs,\n+    // this will be used to find just the utxos for the segwit inputs for which\n+    // the full transaction isn't found\n+    std::map<COutPoint, Coin> coins;\n \n-    // Fill the inputs\n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n+        PSBTInput& psbt_input = psbtx.inputs.at(i);\n+        const CTxIn& tx_in = psbtx.tx->vin.at(i);\n \n-        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n-            continue;\n+        if (psbt_input.non_witness_utxo) continue;\n+\n+        CTransactionRef tx;\n+\n+        // Look in the txindex\n+        if (g_txindex) {\n+            uint256 block_hash;\n+            g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx);\n         }\n+        // If we still don't have it look in the mempool\n+        if (!tx) {\n+            tx = node.mempool->get(tx_in.prevout.hash);\n+        }\n+        if (tx) {\n+            psbt_input.non_witness_utxo = tx;\n+        } else {\n+            coins[tx_in.prevout]; // Create empty map entry keyed by prevout\n+        }\n+    }\n \n-        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+    // If we still haven't found all of the inputs, look for the missing ones in the utxo set\n+    if (!coins.empty()) {\n+        FindCoins(node, coins);\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs.at(i);\n+\n+            // If there are still missing utxos, add them if they were found in the utxo set\n+            if (!coins.empty() && !input.non_witness_utxo) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25939#discussion_r1023354480",
      "id" : 1023354480,
      "in_reply_to_id" : 1019443666,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848_yZw",
      "original_commit_id" : "687d6c20a4d6fc99cf4ae5794dd4203ea446a8f2",
      "original_line" : 216,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 1181681632,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25939",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1023354480/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-15T23:25:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1023354480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   }
]
