[
   {
      "body" : "Nice feature.  RE -storebanlist, the system should default to storing.   Users may disable.\r\n\r\nOr don't create an option at all -- same as CAddrDB, user may delete file to clear the list.\r\n",
      "created_at" : "2015-06-19T15:53:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-113555161",
      "id" : 113555161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-19T15:53:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113555161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I'd also vote for treating this the same as peers.dat and don't add an option for it.",
      "created_at" : "2015-06-19T19:52:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-113624098",
      "id" : 113624098,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-19T19:52:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113624098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863378"
         }
      },
      "body" : "Not sure if this is best to use an int here... what is file_size returning?",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-19T19:55:25Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863378",
      "id" : 32863378,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 193,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863463"
         }
      },
      "body" : "Maybe you could use std:: so we can get rid of using namespace std; easier :)?",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-19T19:56:33Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);\n+    int dataSize = fileSize - sizeof(uint256);\n+    // Don't try to resize to a negative number if file is small\n+    if (dataSize < 0)\n+        dataSize = 0;\n+    vector<unsigned char> vchData;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863463",
      "id" : 32863463,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 198,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863463",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863654"
         }
      },
      "body" : "Do you expect users with more then 2GB of banned node data?\r\nI have taken this approach from CAddrDB 1:1. But i agree file sizes should be held in `uint64_t` or in `size_t` if they are not serialized/shared anywhere.",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-19T19:58:50Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863654",
      "id" : 32863654,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 193,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863840"
         }
      },
      "body" : "I think it's plenty of space, but we should be 100% sure we don't overflow IMHO? Yeah there are more parts in the code that don't do that.",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-19T20:00:46Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863840",
      "id" : 32863840,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 193,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32863840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "> @jgarzik: RE -storebanlist, the system should default to storing. Users may disable.\r\n\r\nThis seems risky in my opinion, because not all IPs are static, and they don't necessarily always belong to the same node.",
      "created_at" : "2015-06-26T00:08:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115435212",
      "id" : 115435212,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-26T00:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115435212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5836089?v=3",
         "events_url" : "https://api.github.com/users/dexX7/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dexX7/followers",
         "following_url" : "https://api.github.com/users/dexX7/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dexX7/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dexX7",
         "id" : 5836089,
         "login" : "dexX7",
         "organizations_url" : "https://api.github.com/users/dexX7/orgs",
         "received_events_url" : "https://api.github.com/users/dexX7/received_events",
         "repos_url" : "https://api.github.com/users/dexX7/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dexX7/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dexX7"
      }
   },
   {
      "body" : "dexX7: that is why all bans are temporary.\n\njonasschnelli: I think defaulting to storing them is perfectly fine (or\neven not offering the option).\n",
      "created_at" : "2015-06-26T00:47:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115447766",
      "id" : 115447766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-26T00:47:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115447766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@jgarziks way of resetting the banlist (by removing banlist.dat) is very straightforward and doesn't need any explanation. I'd like to avoid another cmd arg option to not end up in having thousands of tiny options.\r\n\r\nNode misbehaving bans are by default 24h. All other bans needs conscious actions from the users.\r\nThe chance that your node accidentally get an IP out of a dynamic range, where the previous owner managed to add his bitcoin-core on a ban-list, is very rar. And then, the chance that all nodes did ban this IP or that you connect to a node which conscious added your new IP to the banlist is even rarer\r\nWe have 3,706,452,992 assignable public IPv4 addresses.",
      "created_at" : "2015-06-26T07:15:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115555420",
      "id" : 115555420,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-26T07:15:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115555420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33347282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33347282"
         }
      },
      "body" : "Right: to be precise, file sizes should be `uint64_t`, not `size_t`. Remember that size_t depends on the address width, it is for in-memory sizes.",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-26T11:20:54Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33347282",
      "id" : 33347282,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 193,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33347282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK, also agree that defaulting to store bans is perfectly fine (so is not offering an option).\r\n\r\nAs any kind of persistence commits to a format it is good to think forward a bit what should be included: would it make sense to add e.g. a \"ban source\" enum field, that specifies whether the ban is automatic or manual?",
      "created_at" : "2015-06-26T11:21:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115650574",
      "id" : 115650574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-26T11:21:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115650574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33354739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33354739"
         }
      },
      "body" : "Agreed. Changed from `int` to `uint64_t` (also in `CAddDB`).",
      "commit_id" : "1fe466170443857196462e704bb07f0dab719989",
      "created_at" : "2015-06-26T13:22:34Z",
      "diff_hunk" : "@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33354739",
      "id" : 33354739,
      "original_commit_id" : "9c4b16b843c25d9741cbae5a7ec9e6ac11fbd846",
      "original_position" : 193,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6310",
      "updated_at" : "2015-06-26T13:22:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33354739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "I like the idea of storing the \"ban source\". Because we now keep/dump a serialized `std::map<CSubNet, int64_t>` everything beyond that would be a bigger change. We should probably introduce a simple class for the banlist entry like `class CBanEntry { int64_t bantime, enum banSource }`. This might also be capable of allowing ban distinction between multiple bans on the same IP but with different ports (but would mean moving from std::map to a vector).",
      "created_at" : "2015-06-26T13:52:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115697741",
      "id" : 115697741,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6310",
      "updated_at" : "2015-06-26T13:52:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115697741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
