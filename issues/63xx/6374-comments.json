[
   {
      "body" : "This has been tested by setting up a node and then connected to it from the same source ip in a loop.\r\n\r\nAdditional testing is needed around multiple source ips.",
      "created_at" : "2015-07-05T07:46:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118594113",
      "id" : 118594113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-05T07:46:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/118594113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "Concept ACK\r\n\r\nThis does need extensive testing in various scenarios - e.g. what happens with Tor hidden service connections, which all appear to come from one IP (localhost) address.",
      "created_at" : "2015-07-05T07:55:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118594345",
      "id" : 118594345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-05T09:14:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/118594345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Tested with multiple inbound connections from 128+ source ips.\r\n\r\nLong lived connections were stable and the newer connections dropped.",
      "created_at" : "2015-07-05T08:47:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118596476",
      "id" : 118596476,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-05T08:47:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/118596476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "@pstratem How did you actually test that?\r\n\r\nWe could make good use of automated scripts to make such testing relocatable.",
      "created_at" : "2015-07-06T22:39:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-119017939",
      "id" : 119017939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-06T22:39:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119017939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd python script that connects to the node in a loop running on top of torify and me sitting there hitting \"new identity\" in vidalia a bunch until i had unique ips connecting...\r\n\r\nnot exactly an automated process",
      "created_at" : "2015-07-06T23:28:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-119026601",
      "id" : 119026601,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-06T23:28:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119026601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "@laanwj Missed the second part of your comment.\r\n\r\nThis wont ever evict localhost connections, so inbound connections to a hidden service wont ever be disconnected by this.\r\n\r\nThat's actually not optimal, but unfortunately getting info on inbound hidden service connections requires interfacing with tors control port.\r\n\r\nThat's definitely out of scope for this patch set.",
      "created_at" : "2015-07-12T21:55:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-120766274",
      "id" : 120766274,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-12T21:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120766274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "@pstratem Absolutely - I wasn't implying that you'd have to interact with Tor's control port in this pull, just that it's a requirement that it didn't make the current situation worse.\r\n\r\nNeeds a trivial rebase in net.cpp due to #5288.\r\n",
      "created_at" : "2015-07-28T09:16:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-125515815",
      "id" : 125515815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6374",
      "updated_at" : "2015-07-28T09:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125515815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36103572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6374"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/36103572"
         }
      },
      "body" : "Deleting CNodes happens in the \"Delete disconnected nodes\" loop, which first makes sure that no one is using the node anymore. Adding a `delete pnode` here seems like a danger for race conditions?\r\n",
      "commit_id" : "e38a20270a63fe4958bb65daf91623853895633f",
      "created_at" : "2015-08-03T16:36:31Z",
      "diff_hunk" : "@@ -943,35 +981,95 @@ void ThreadSocketHandler()\n                             nInbound++;\n                 }\n \n+                CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+                pnode->AddRef();\n+                pnode->fWhitelisted = whitelisted;\n+\n                 if (hSocket == INVALID_SOCKET)\n                 {\n                     int nErr = WSAGetLastError();\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (nInbound >= nMaxInbound)\n+                else if (CNode::IsBanned(addr) && !whitelisted)\n                 {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n+                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+                    pnode->fDisconnect = true;\n                 }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n                 {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n+                    LogPrint(\"net\", \"over connection limit\\n\");\n+                    static std::vector<unsigned char> vSecretKey;\n+\n+                    if (vSecretKey.empty()) {\n+                        vSecretKey.resize(32, 0);\n+                        GetRandBytes(vSecretKey.data(), vSecretKey.size());\n+                    }\n+\n+                    {\n+                        LOCK(cs_vNodes);\n+                        std::vector<CNode*> vEvictionCandidates;\n+\n+                        BOOST_FOREACH(CNode *node, vNodes) {\n+                            if (node->fWhitelisted)\n+                                continue;\n+                            if (!node->fInbound)\n+                                continue;\n+                            if (node->fDisconnect)\n+                                continue;\n+                            if (node->addr.IsLocal())\n+                                continue;\n+                            vEvictionCandidates.push_back(node);\n+                        }\n+\n+                        // Protect connections with certain characteristics\n+\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(64, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        CompareNetGroupKeyed comparerNetGroupKeyed(vSecretKey);\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        if (!vEvictionCandidates.empty()) {\n+                            // Identify CNetAddr with the most connections\n+                            CNetAddr naMostConnections;\n+                            unsigned int nMostConnections = 0;\n+                            std::map<CNetAddr, std::vector<CNode*> > mapAddrCounts;\n+                            BOOST_FOREACH(CNode *node, vEvictionCandidates) {\n+                                mapAddrCounts[node->addr].push_back(node);\n+\n+                                if (mapAddrCounts[node->addr].size() > nMostConnections) {\n+                                    nMostConnections = mapAddrCounts[node->addr].size();\n+                                    naMostConnections = node->addr;\n+                                }\n+                            }\n+\n+                            vEvictionCandidates = mapAddrCounts[naMostConnections];\n+\n+                            // Disconnect the most recent connection from the CNetAddr with the most connections\n+                            std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+                            vEvictionCandidates[0]->fDisconnect = true;\n+\n+                            nInbound--;\n+                        }\n+                    }\n+\n+                    if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS) {\n+                        LogPrint(\"net\", \"no peers to evict, disconnecting new client\\n\");\n+                        pnode->fDisconnect = true;\n+                    }\n                 }\n-                else if (CNode::IsBanned(addr) && !whitelisted)\n-                {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+\n+                if (pnode->fDisconnect) {\n                     CloseSocket(hSocket);\n+                    delete pnode;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36103572",
      "id" : 36103572,
      "original_commit_id" : "5f33e1ec5d735eac9fb881cb02b7833cbd3b9f12",
      "original_position" : 143,
      "path" : "src/net.cpp",
      "position" : 144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6374",
      "updated_at" : "2015-08-03T22:04:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/36103572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36136096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6374"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/36136096"
         }
      },
      "body" : "This is deleting the CNode which was created at 984 and which was not added to vNodes.\r\n\r\nNot deleting it here would be a memory leak.",
      "commit_id" : "e38a20270a63fe4958bb65daf91623853895633f",
      "created_at" : "2015-08-03T21:52:16Z",
      "diff_hunk" : "@@ -943,35 +981,95 @@ void ThreadSocketHandler()\n                             nInbound++;\n                 }\n \n+                CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+                pnode->AddRef();\n+                pnode->fWhitelisted = whitelisted;\n+\n                 if (hSocket == INVALID_SOCKET)\n                 {\n                     int nErr = WSAGetLastError();\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (nInbound >= nMaxInbound)\n+                else if (CNode::IsBanned(addr) && !whitelisted)\n                 {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n+                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+                    pnode->fDisconnect = true;\n                 }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n                 {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n+                    LogPrint(\"net\", \"over connection limit\\n\");\n+                    static std::vector<unsigned char> vSecretKey;\n+\n+                    if (vSecretKey.empty()) {\n+                        vSecretKey.resize(32, 0);\n+                        GetRandBytes(vSecretKey.data(), vSecretKey.size());\n+                    }\n+\n+                    {\n+                        LOCK(cs_vNodes);\n+                        std::vector<CNode*> vEvictionCandidates;\n+\n+                        BOOST_FOREACH(CNode *node, vNodes) {\n+                            if (node->fWhitelisted)\n+                                continue;\n+                            if (!node->fInbound)\n+                                continue;\n+                            if (node->fDisconnect)\n+                                continue;\n+                            if (node->addr.IsLocal())\n+                                continue;\n+                            vEvictionCandidates.push_back(node);\n+                        }\n+\n+                        // Protect connections with certain characteristics\n+\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(64, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        CompareNetGroupKeyed comparerNetGroupKeyed(vSecretKey);\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n+                        vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+                        if (!vEvictionCandidates.empty()) {\n+                            // Identify CNetAddr with the most connections\n+                            CNetAddr naMostConnections;\n+                            unsigned int nMostConnections = 0;\n+                            std::map<CNetAddr, std::vector<CNode*> > mapAddrCounts;\n+                            BOOST_FOREACH(CNode *node, vEvictionCandidates) {\n+                                mapAddrCounts[node->addr].push_back(node);\n+\n+                                if (mapAddrCounts[node->addr].size() > nMostConnections) {\n+                                    nMostConnections = mapAddrCounts[node->addr].size();\n+                                    naMostConnections = node->addr;\n+                                }\n+                            }\n+\n+                            vEvictionCandidates = mapAddrCounts[naMostConnections];\n+\n+                            // Disconnect the most recent connection from the CNetAddr with the most connections\n+                            std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+                            vEvictionCandidates[0]->fDisconnect = true;\n+\n+                            nInbound--;\n+                        }\n+                    }\n+\n+                    if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS) {\n+                        LogPrint(\"net\", \"no peers to evict, disconnecting new client\\n\");\n+                        pnode->fDisconnect = true;\n+                    }\n                 }\n-                else if (CNode::IsBanned(addr) && !whitelisted)\n-                {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+\n+                if (pnode->fDisconnect) {\n                     CloseSocket(hSocket);\n+                    delete pnode;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36136096",
      "id" : 36136096,
      "original_commit_id" : "5f33e1ec5d735eac9fb881cb02b7833cbd3b9f12",
      "original_position" : 143,
      "path" : "src/net.cpp",
      "position" : 144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6374",
      "updated_at" : "2015-08-03T22:04:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/36136096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   }
]
