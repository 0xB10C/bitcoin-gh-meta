[
   {
      "body" : "I've run the extended tests locally and they all pass.",
      "created_at" : "2017-02-27T14:26:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-282734815",
      "id" : 282734815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
      "updated_at" : "2017-02-27T14:26:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282734815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103271383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103271383"
         }
      },
      "body" : "This is fine, but the import list is super long. Did you use a tool to generate this? Wondering if it would be difficult to just replace all this with `from test_framework import mininode` and then add `mininode.` qualifiers where needed.\r\n\r\nAlternately, maybe different formatting would be preferable. I've been using [yapf](https://github.com/google/yapf) for new code I write, which gives\r\n\r\n```\r\n+from test_framework.script import (CScript, CScriptNum, CScriptOp, CTransaction, CTxOut, OP_0, OP_1, OP_16, OP_2DROP,\r\n+                                   OP_CHECKMULTISIG, OP_CHECKSIG, OP_DROP, OP_DUP, OP_ELSE, OP_ENDIF, OP_EQUAL,\r\n+                                   OP_EQUALVERIFY, OP_HASH160, OP_IF, OP_RETURN, OP_TRUE, SIGHASH_ALL,\r\n+                                   SIGHASH_ANYONECANPAY, SIGHASH_NONE, SIGHASH_SINGLE, SegwitVersion1SignatureHash,\r\n+                                   SignatureHash, hash160, hash256, ser_uint256, sha256, uint256_from_str)\r\n```\r\n\r\nwith column_limit=119.",
      "commit_id" : "ed85b6de52395f521280d3baabb8b2ab0d5f4ce8",
      "created_at" : "2017-02-27T18:04:00Z",
      "diff_hunk" : "@@ -4,15 +4,93 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n from binascii import hexlify\n+import random\n+import struct\n+import time\n+\n+from test_framework.blocktools import (create_block,\n+                                       create_coinbase,\n+                                       add_witness_commitment,\n+                                       WITNESS_COMMITMENT_HEADER)\n+from test_framework.key import (CECKey,\n+                                CPubKey)\n+from test_framework.mininode import (CBlock,\n+                                     CBlockHeader,\n+                                     CInv,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxInWitness,\n+                                     CTxOut,\n+                                     CTxWitness,\n+                                     MAX_BLOCK_BASE_SIZE,\n+                                     MSG_WITNESS_FLAG,\n+                                     NODE_NETWORK,\n+                                     NODE_WITNESS,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     NodeConnCB,\n+                                     bytes_to_hex_str,\n+                                     hash256,\n+                                     hex_str_to_bytes,\n+                                     mininode_lock,\n+                                     msg_block,\n+                                     msg_getdata,\n+                                     msg_headers,\n+                                     msg_inv,\n+                                     msg_ping,\n+                                     msg_pong,\n+                                     msg_tx,\n+                                     msg_witness_block,\n+                                     msg_witness_tx,\n+                                     ser_uint256,\n+                                     ser_vector,\n+                                     sha256,\n+                                     uint256_from_str)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103271383",
      "id" : 103271383,
      "original_commit_id" : "f287e8de1edf9a0b342b3e5b98b88e7bb1a2bd47",
      "original_position" : 55,
      "path" : "qa/rpc-tests/p2p-segwit.py",
      "position" : 55,
      "pull_request_review_id" : 24052801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876",
      "updated_at" : "2017-02-27T23:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103271383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103427772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103427772"
         }
      },
      "body" : "One item per line is nice for diff-ing, though. Collapsing them can look somewhat nicer, however imagine having to insert an item in the middle and re-layouting. This will change *all* the lines, causing collisions with other patches.\r\n\r\nFor this reason we also use one-filename-per-line in makefiles, even though it results in long files.",
      "commit_id" : "ed85b6de52395f521280d3baabb8b2ab0d5f4ce8",
      "created_at" : "2017-02-28T10:55:45Z",
      "diff_hunk" : "@@ -4,15 +4,93 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n from binascii import hexlify\n+import random\n+import struct\n+import time\n+\n+from test_framework.blocktools import (create_block,\n+                                       create_coinbase,\n+                                       add_witness_commitment,\n+                                       WITNESS_COMMITMENT_HEADER)\n+from test_framework.key import (CECKey,\n+                                CPubKey)\n+from test_framework.mininode import (CBlock,\n+                                     CBlockHeader,\n+                                     CInv,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxInWitness,\n+                                     CTxOut,\n+                                     CTxWitness,\n+                                     MAX_BLOCK_BASE_SIZE,\n+                                     MSG_WITNESS_FLAG,\n+                                     NODE_NETWORK,\n+                                     NODE_WITNESS,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     NodeConnCB,\n+                                     bytes_to_hex_str,\n+                                     hash256,\n+                                     hex_str_to_bytes,\n+                                     mininode_lock,\n+                                     msg_block,\n+                                     msg_getdata,\n+                                     msg_headers,\n+                                     msg_inv,\n+                                     msg_ping,\n+                                     msg_pong,\n+                                     msg_tx,\n+                                     msg_witness_block,\n+                                     msg_witness_tx,\n+                                     ser_uint256,\n+                                     ser_vector,\n+                                     sha256,\n+                                     uint256_from_str)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103427772",
      "id" : 103427772,
      "original_commit_id" : "f287e8de1edf9a0b342b3e5b98b88e7bb1a2bd47",
      "original_position" : 55,
      "path" : "qa/rpc-tests/p2p-segwit.py",
      "position" : 55,
      "pull_request_review_id" : 24211347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876",
      "updated_at" : "2017-02-28T10:55:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103427772",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK.",
      "created_at" : "2017-02-28T10:55:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283008581",
      "id" : 283008581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
      "updated_at" : "2017-02-28T10:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283008581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I appreciate the desire for using best coding practices in the qa tree, and I certainly would like to improve my own test-writing habits. But I think we should be mindful of the tradeoffs of applying best practices for software that changes infrequently when applied to software that is written iteratively.\r\n\r\nI tend to think of the `test_framework/` directory as the former category; the test frameworks and utilities should not change often, except when we have a better idea of how to do our test writing, and then we should think carefully about the design changes we're making.\r\n\r\nBut I tend to think of the tests themselves as more iterative, because as we make changes to bitcoind, we often find ourselves needing to update existing tests.  And I've personally found that even when I write new tests, I tend to write them iteratively, as I'll tend to test part of a PR, get it working, then continue to add more tests as I review more of a PR.  And I think it'd be tedious to disallow wildcard imports for some of the contents in `test_framework/`, particularly the message types and data structures in `mininode.py` and the script op codes in `script.py`.\r\n\r\nSo I'd propose the following compromise: split the message types and script op codes out into their own files, get rid of all wildcard imports from `test_framework/`, but don't bother getting rid of wildcard imports from the new message type and script op code files.\r\n\r\nOn a related note, if we are going to start instituting style guidelines for the qa tree (which I do think is a good idea, whether we go with my proposal or not), we should write up what those are.\r\n",
      "created_at" : "2017-02-28T14:43:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283057363",
      "id" : 283057363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
      "updated_at" : "2017-02-28T14:43:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283057363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
