[
   {
      "body" : "I'm not 100% sure if we want this. If we, we would need at least to updated the `listsinceblock`'s RPC help message to mention that if one requests tx's from a block outside the main-chain, that the result will also contain transactions not in the main chain.",
      "created_at" : "2017-01-24T08:01:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274734514",
      "id" : 274734514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T08:01:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274734514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli Updated the help output. I am not sure what the reasons for not wanting this are, unless you're referring to resource consumption. I think it's a rare (but important) enough case to warrant it.\r\n\r\nIt would definitely make it easier for RPC applications checking the validity of existing transactions to explicitly provide these when a reorg affects them. The only other alternative right now is to keep a list of transactions with confirmations less than some arbitrary number (100) and to loop through these every time a reorg is encountered to ensure they're actually still present.\r\n\r\nEdit: one concern of my own is whether a naive implementation would ignore the confirmations value and simply think the transaction existed in the chain, even though the opposite is the case. I wondered if maybe a different key for the returned results should be used, e.g. \"reorged\" or something. I.e. you would get `{\"transactions\": [list of txs that changed], \"reorged\": [list of txs that disappeared], \"lastblock\": <hash>}`...",
      "created_at" : "2017-01-24T08:11:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274736218",
      "id" : 274736218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T09:18:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274736218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@kallewoof: I missed the point that if you pass in an orphan block to list since, you also get the transactions upwards the chain-fork on the main chain. At first sight, I though you get only tx from the re-orged-off chain in that case.\r\n\r\nConcept ACK (and I think it would be clever to list them in an extra array element `reorged:[]`.",
      "created_at" : "2017-01-24T12:59:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274796547",
      "id" : 274796547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T12:59:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274796547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli Gotcha. I updated the OP to clarify that it's also including transactions from the fork point to the active chain tip. I also moved the off chain transactions into a new 'reorged' array. (f501acc & 461d5a3)",
      "created_at" : "2017-01-24T13:24:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274801494",
      "id" : 274801494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T13:24:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274801494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97649800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97649800"
         }
      },
      "body" : "I think it would be helpful to add a comment about -depth here. I was staring at this a long time to figure out how it worked. Comment could say: \"Pass -depth as minDepth to prevent any filtering in ListTransactions. (Works because tx can only conflict with transactions after pindex, so GetDepthInMainChain will always return at least (1-depth)).\"",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:03:46Z",
      "diff_hunk" : "@@ -1729,6 +1730,25 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             ListTransactions(tx, \"*\", 0, true, transactions, filter);\n     }\n \n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    while (paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx)\n+        {\n+            if (pwalletMain->mapWallet.count(tx->GetHash()))\n+            {\n+                ListTransactions(pwalletMain->mapWallet[tx->GetHash()], \"*\", -depth, true, transactions, filter);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97649800",
      "id" : 97649800,
      "original_commit_id" : "fff58755318c5654d510eb5a5b3482a296eff7e7",
      "original_position" : 36,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97649800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652282"
         }
      },
      "body" : "Would s/back to the fork point/from blockhash back to the fork point/ to clarify, because it sounds to me like this is referring to transactions between the active tip and the fork point (making the rest of the sentence confusing).",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:14:15Z",
      "diff_hunk" : "@@ -1641,7 +1641,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     if (request.fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet back to the fork point are included, as well as those from \\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652282",
      "id" : 97652282,
      "original_commit_id" : "0c3d1f56f38f7a6cc7fb248804c8c88e53da9c6e",
      "original_position" : 6,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652701"
         }
      },
      "body" : "Need documentation update to accompany this.",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:16:20Z",
      "diff_hunk" : "@@ -1756,6 +1757,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"transactions\", transactions));\n+    ret.push_back(Pair(\"reorged\", reorged));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652701",
      "id" : 97652701,
      "original_commit_id" : "f501acc7b313c309d327546736da5461ea483127",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 73,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97654691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97654691"
         }
      },
      "body" : "Really sending from node 1  here (even if key originally comes from node 2)",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:26:03Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97654691",
      "id" : 97654691,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 56,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97654691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97655014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97655014"
         }
      },
      "body" : "unused variable",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:27:38Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97655014",
      "id" : 97655014,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 91,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97655014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97656509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97656509"
         }
      },
      "body" : "Maybe condense this block to a single line, and add a check for txid2 (untested)\r\n\r\n```\r\nassert_equal(any(tx['txid'] == txid1 for tx in lsbres['reorged']), True)\r\nassert_equal(any(tx['txid'] == txid2 for tx in lsbres['transactions']), True)\r\n```",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-24T21:34:54Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97656509",
      "id" : 97656509,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 95,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T04:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97656509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97709529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97709529"
         }
      },
      "body" : "@ryanofsky Ahh, nice! I didn't know about `any()`.\r\n\r\nSince txid2 is not related to nodes[0], it will not list it anywhere so that second assert_equal will not be true.\r\n\r\nThanks for all the feedback! I believe everything you suggested is in 9caa0ec & 131df5a.",
      "commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "created_at" : "2017-01-25T04:56:54Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97709529",
      "id" : 97709529,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 95,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18326657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-01-25T05:00:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97709529",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   }
]
