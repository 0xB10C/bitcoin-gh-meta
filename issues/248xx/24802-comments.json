[
   {
      "author_association" : "MEMBER",
      "body" : "> There is scope of improvement on how the related files are fetched. In this git grep with subprocess is still used as I found it to be the simplest.\r\n\r\nI think calling out to `git grep` (and git subcommands in general) is fine. The alternative would be to add a dependency on a git python module. Also, git is a single implementation on every platform (besides version differences). I've updated the guidelines in #24783 for this.\r\n\r\n> Removed sort operation on the matching files as I couldn't think of any strong arguments to have it. Any pointers on this are appreciated.\r\n\r\nI don't know the original motivation, the only thing I can think of is that printing errors in with the files in a deterministic sorted order is somewhat-user-friendly. But I don't think it's a big deal.\r\n\r\n",
      "created_at" : "2022-04-08T11:28:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24802#issuecomment-1092763567",
      "id" : 1092763567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24802",
      "node_id" : "IC_kwDOABII585BIj-v",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092763567/reactions"
      },
      "updated_at" : "2022-04-08T11:39:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092763567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24802#discussion_r846019598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24802"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846019598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: the convention is to use `sys.exit` instead of the built-in, which is only meant for interactive use. ",
      "commit_id" : "08de596abe8a5ed49c600438afd4e3c74c7d13bb",
      "created_at" : "2022-04-08T11:32:26Z",
      "diff_hunk" : "@@ -0,0 +1,69 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+\"\"\"\n+Lint format strings: This program checks that the number of arguments passed\n+to a variadic format string function matches the number of format specifiers\n+in the format string.\n+\"\"\"\n+\n+import subprocess\n+import re\n+\n+FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS = [\n+    'FatalError,0',\n+    'fprintf,1',\n+    'tfm::format,1',  # Assuming tfm::::format(std::ostream&, ...\n+    'LogConnectFailure,1',\n+    'LogPrint,1',\n+    'LogPrintf,0',\n+    'printf,0',\n+    'snprintf,2',\n+    'sprintf,1',\n+    'strprintf,0',\n+    'vfprintf,1',\n+    'vprintf,1',\n+    'vsnprintf,1',\n+    'vsprintf,1',\n+    'WalletLogPrintf,0',\n+]\n+\n+def main():\n+    doctest_args = ['python3', '-m', 'doctest', 'test/lint/run-lint-format-strings.py',]\n+    try:\n+        subprocess.check_output(doctest_args, stderr = subprocess.STDOUT)\n+    except subprocess.CalledProcessError:\n+        exit(1)\n+\n+    for s in FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS:\n+\n+        function_name, skip_arguments = s.split(',')\n+\n+        matching_files_args = ['git', 'grep', '--full-name', '-l', function_name, '--','*.c', '*.cpp', '*.h']\n+        try:\n+            all_matching_files = subprocess.check_output(matching_files_args).decode('utf-8').splitlines()\n+        except subprocess.CalledProcessError as e:\n+            if e.returncode > 1: # return code is 1 when match is empty\n+                exit(1)\n+            all_matching_files = []\n+\n+        matching_files = []\n+        for matching_file in all_matching_files:\n+            if not re.search('^src/(leveldb|secp256k1|minisketch|tinyformat|univalue|test/fuzz/strprintf.cpp)', matching_file):\n+                matching_files.append(matching_file)\n+\n+        run_lint_args = ['test/lint/run-lint-format-strings.py',\n+                            '--skip-arguments', skip_arguments, function_name,] + matching_files\n+        try:\n+            subprocess.check_output(run_lint_args, stderr = subprocess.STDOUT)\n+        except subprocess.CalledProcessError:\n+            exit(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24802#discussion_r846019598",
      "id" : 846019598,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584ybTwO",
      "original_commit_id" : "08de596abe8a5ed49c600438afd4e3c74c7d13bb",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "test/lint/lint-format-strings.py",
      "position" : 64,
      "pull_request_review_id" : 936310928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24802",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846019598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-08T11:32:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846019598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24802#discussion_r846677092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24802"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846677092"
         }
      },
      "author_association" : "NONE",
      "body" : "Thank you for reviewing !\r\nI've updated the PR according to your suggestions",
      "commit_id" : "879c83697d772d31d629b885395b42686e9b1b36",
      "created_at" : "2022-04-09T20:20:30Z",
      "diff_hunk" : "@@ -0,0 +1,69 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+\"\"\"\n+Lint format strings: This program checks that the number of arguments passed\n+to a variadic format string function matches the number of format specifiers\n+in the format string.\n+\"\"\"\n+\n+import subprocess\n+import re\n+\n+FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS = [\n+    'FatalError,0',\n+    'fprintf,1',\n+    'tfm::format,1',  # Assuming tfm::::format(std::ostream&, ...\n+    'LogConnectFailure,1',\n+    'LogPrint,1',\n+    'LogPrintf,0',\n+    'printf,0',\n+    'snprintf,2',\n+    'sprintf,1',\n+    'strprintf,0',\n+    'vfprintf,1',\n+    'vprintf,1',\n+    'vsnprintf,1',\n+    'vsprintf,1',\n+    'WalletLogPrintf,0',\n+]\n+\n+def main():\n+    doctest_args = ['python3', '-m', 'doctest', 'test/lint/run-lint-format-strings.py',]\n+    try:\n+        subprocess.check_output(doctest_args, stderr = subprocess.STDOUT)\n+    except subprocess.CalledProcessError:\n+        exit(1)\n+\n+    for s in FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS:\n+\n+        function_name, skip_arguments = s.split(',')\n+\n+        matching_files_args = ['git', 'grep', '--full-name', '-l', function_name, '--','*.c', '*.cpp', '*.h']\n+        try:\n+            all_matching_files = subprocess.check_output(matching_files_args).decode('utf-8').splitlines()\n+        except subprocess.CalledProcessError as e:\n+            if e.returncode > 1: # return code is 1 when match is empty\n+                exit(1)\n+            all_matching_files = []\n+\n+        matching_files = []\n+        for matching_file in all_matching_files:\n+            if not re.search('^src/(leveldb|secp256k1|minisketch|tinyformat|univalue|test/fuzz/strprintf.cpp)', matching_file):\n+                matching_files.append(matching_file)\n+\n+        run_lint_args = ['test/lint/run-lint-format-strings.py',\n+                            '--skip-arguments', skip_arguments, function_name,] + matching_files\n+        try:\n+            subprocess.check_output(run_lint_args, stderr = subprocess.STDOUT)\n+        except subprocess.CalledProcessError:\n+            exit(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24802#discussion_r846677092",
      "id" : 846677092,
      "in_reply_to_id" : 846019598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yd0Rk",
      "original_commit_id" : "08de596abe8a5ed49c600438afd4e3c74c7d13bb",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "test/lint/lint-format-strings.py",
      "position" : null,
      "pull_request_review_id" : 937175013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24802",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846677092/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-09T20:20:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846677092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/33084435?v=4",
         "events_url" : "https://api.github.com/users/Eunoia1729/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunoia1729/followers",
         "following_url" : "https://api.github.com/users/Eunoia1729/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunoia1729/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunoia1729",
         "id" : 33084435,
         "login" : "Eunoia1729",
         "node_id" : "MDQ6VXNlcjMzMDg0NDM1",
         "organizations_url" : "https://api.github.com/users/Eunoia1729/orgs",
         "received_events_url" : "https://api.github.com/users/Eunoia1729/received_events",
         "repos_url" : "https://api.github.com/users/Eunoia1729/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunoia1729/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunoia1729/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunoia1729"
      }
   }
]
