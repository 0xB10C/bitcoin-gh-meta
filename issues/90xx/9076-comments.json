[
   {
      "body" : "Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?",
      "created_at" : "2016-11-03T22:41:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258295814",
      "id" : 258295814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-03T22:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258295814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?\r\n\r\nYes.\r\nA next step could be to support BIP37 bloom filter against authenticated nodes (once we have BIP150).\r\nBIP37 has huge privacy implication while this PRs full block SPV mode does not.\r\n\r\nRight now the `-spvonly` mode is not very bandwidth efficient (if you assume you'll never want to do the full validation of the chain).",
      "created_at" : "2016-11-04T07:21:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258360541",
      "id" : 258360541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T09:34:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258360541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "`getwalletinfo` reports the SPV sync state:\r\n\r\n```\r\n{\r\n  \"walletversion\": 130000,\r\n  \"balance\": 10.00000000,\r\n  \"unconfirmed_balance\": 0.00000000,\r\n  \"immature_balance\": 0.00000000,\r\n  \"txcount\": 1,\r\n  \"keypoololdest\": 1478202465,\r\n  \"keypoolsize\": 10,\r\n  \"paytxfee\": 0.00000010,\r\n  \"hdmasterkeyid\": \"fc2f268240531df6890b66f53141606b7f1f091b\",\r\n  \"spv\": {\r\n    \"enabled\": true,\r\n    \"hybrid_mode\": false,\r\n    \"synced_up_to_height\": 102,\r\n    \"best_known_header_height\": 102,\r\n    \"sync_in_progress\": false\r\n  }\r\n}\r\n```\r\n\r\nIf a sync is in progress, it can look like this:\r\n```\r\n{\r\n  \"walletversion\": 130000,\r\n  \"balance\": 0.00010000,\r\n  \"unconfirmed_balance\": 0.00000000,\r\n  \"immature_balance\": 0.00000000,\r\n  \"txcount\": 1,\r\n  \"keypoololdest\": 1477594751,\r\n  \"keypoolsize\": 100,\r\n  \"paytxfee\": 0.00000000,\r\n  \"hdmasterkeyid\": \"b397c61fb9d18e24d3a42f9c3c7b5d88b15005d3\",\r\n  \"spv\": {\r\n    \"enabled\": true,\r\n    \"hybrid_mode\": true,\r\n    \"synced_up_to_height\": 436884,\r\n    \"best_known_header_height\": 437299,\r\n    \"sync_in_progress\": true,\r\n    \"started\": 1478252299,\r\n    \"is_cancled\": false,\r\n    \"requested_blocks\": 416,\r\n    \"loaded_blocks\": 4,\r\n    \"processed_blocks\": 1\r\n  }\r\n}\r\n```",
      "created_at" : "2016-11-04T09:39:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258383543",
      "id" : 258383543,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T09:39:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258383543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for \"conceptual review\" right now from core developers (the concept does seems great to me).\r\n\r\nI do have one piece of feedback, though. Based on my understanding of the change, I think the following flag / feature descriptions might be more comprehensible to users:\r\n\r\n* **prioritized block download** (instead of \"hybrid SPV\")  - When enabled, bitcoin downloads the full blockchain as usual, but prioritizes downloading of newer blocks (currently all blocks after the earliest wallet transaction date), before older blocks. This causes relevant transactions to show up in the wallet earlier during an initial sync, allowing the wallet to become functional more quickly, but at the cost of revealing some information about the age of addresses in the wallet to peers on the network.\r\n\r\n* **partial sync** (instead of \"full SPV\") - When enabled, bitcoin downloads only part of the blockchain (currently all blocks after the earliest wallet transaction date), but still downloads and stores full blocks. This means less of the blockchain needs to be downloaded and stored locally, but at the cost of not being able to fully validate transactions, and of revealing some information about the age of addresses in the wallet to peers on the network. This mode is also is incompatible with the `-prune` block pruning mode (since bitcoin can't compute the UTXO set), so a node with partial syncing enabled may wind up using more disk space than a node with pruning enabled, despite downloading less data over the network.\r\n\r\nI think I like these names more than \"hybrid SPV\" / \"full SPV\", just because I think the modern usage of the term \"SPV\" refers to the wallets that don't download full blocks, don't validate transactions, barely require any storage, and sync almost immediately, and this is not what is implemented in these new modes. I do understand that historically the term SPV refered to a wider variety of network/storage saving schemes, but I don't think it would be good to go back and muddy the more clear modern meaning of what an SPV wallet is.",
      "created_at" : "2016-11-04T14:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258448467",
      "id" : 258448467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T14:39:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258448467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for \"conceptual review\" right now from core developers (the concept does seems great to me).\r\n\r\nFeels free to comment on the minor things directly in the code.\r\nI don't expect that this will go into master as it is (to big, includes to many risks, lack of reviewers). As always, I'll try to split this into independent sub-PRs. This one is to get an fully running PoC and maybe discuss it on a higher level.\r\n\r\n> prioritized block download\r\n\r\nYes. Seems fine for me. But we just need to make sure that users know that *no validation* happens on the \"prioritized blocks\".\r\n\r\n> partial sync\r\n\r\nYes. Though I think an expected feature would be to drop the part where we store blocks on the disk when using `-spvonly`.\r\nAnd I'm aiming to use some kind of BIP37 mechanism to allow low-bandwidth transaction scan against a trusted full node (after BIP150/151). Maybe we need to choose the wording with that in mind.",
      "created_at" : "2016-11-04T14:46:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258450775",
      "id" : 258450775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T14:46:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258450775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562135"
         }
      },
      "body" : "Remove unused split argument?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T14:56:24Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562135",
      "id" : 86562135,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 24,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 24,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562184"
         }
      },
      "body" : "Seems unused",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T14:56:38Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562184",
      "id" : 86562184,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 10,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 10,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562817"
         }
      },
      "body" : "Can this be dropped? Number of nodes seems to change during the test.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T14:59:20Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562817",
      "id" : 86562817,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 18,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 18,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562993"
         }
      },
      "body" : "Unused?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:00:13Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562993",
      "id" : 86562993,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 20,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 20,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86562993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86566087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86566087"
         }
      },
      "body" : "Sleep probably deserves comment if sync_spv and sync_blocks (in util.py) aren't enough to be able to remove it.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:13:59Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86566087",
      "id" : 86566087,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 58,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 58,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86566087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86567884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86567884"
         }
      },
      "body" : "Curious, why stop 1st node here, instead of just starting a 4th node? Is it to make sure the wallet file is synced to disk? Probably good to have a little comment here describing this part of the test.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:21:53Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)\n+        \n+        node1info = self.nodes[1].getblockchaininfo()\n+        assert_equal(node1info['blocks'], 0)\n+        assert_equal(node1info['headers'], headerheight)\n+        spvinfo = self.nodes[1].getwalletinfo()['spv']\n+        assert_equal(headerheight, spvinfo['best_known_header_height'])\n+        lt = self.nodes[1].listtransactions()\n+        \n+        # node1 is in SPV only mode\n+        # txes should not be present in the wallet with spv\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], True)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        print(\"Restarting nodes without -spvonly (hybrid SPV)\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86567884",
      "id" : 86567884,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 73,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 73,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86567884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86568366"
         }
      },
      "body" : "Check len(lt) is 1?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:23:57Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)\n+        \n+        node1info = self.nodes[1].getblockchaininfo()\n+        assert_equal(node1info['blocks'], 0)\n+        assert_equal(node1info['headers'], headerheight)\n+        spvinfo = self.nodes[1].getwalletinfo()['spv']\n+        assert_equal(headerheight, spvinfo['best_known_header_height'])\n+        lt = self.nodes[1].listtransactions()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568366",
      "id" : 86568366,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 65,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 65,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86568366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86568416"
         }
      },
      "body" : "Check len(lt)?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:24:09Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)\n+        \n+        node1info = self.nodes[1].getblockchaininfo()\n+        assert_equal(node1info['blocks'], 0)\n+        assert_equal(node1info['headers'], headerheight)\n+        spvinfo = self.nodes[1].getwalletinfo()['spv']\n+        assert_equal(headerheight, spvinfo['best_known_header_height'])\n+        lt = self.nodes[1].listtransactions()\n+        \n+        # node1 is in SPV only mode\n+        # txes should not be present in the wallet with spv\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], True)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        print(\"Restarting nodes without -spvonly (hybrid SPV)\")\n+        self.stop_node(1)\n+        os.mkdir(self.options.tmpdir + \"/node3/regtest\")\n+        shutil.copyfile(self.options.tmpdir + \"/node1/regtest/wallet.dat\", self.options.tmpdir + \"/node3/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-spv=1\", \"-debug=net\"])\n+        connect_nodes_bi(self.nodes,0, 1)\n+        connect_nodes_bi(self.nodes,1, 2)\n+    \n+        self.nodes[0].resendwallettransactions()\n+        self.sync_all()\n+        \n+        lt = self.nodes[1].listtransactions()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568416",
      "id" : 86568416,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 84,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 84,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86568416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570301"
         }
      },
      "body" : "Not sure, but maybe it's possible to test this by starting up a new hybrid SPV node with a wallet and no chain data and seeing which blocks it first requests using a stub peer. The `test_getblocktxn_requests` and `test_compactblock_requests` tests in `p2p-compactblocks.py` do something like this using a custom `TestNode` peer.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:32:41Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)\n+        \n+        node1info = self.nodes[1].getblockchaininfo()\n+        assert_equal(node1info['blocks'], 0)\n+        assert_equal(node1info['headers'], headerheight)\n+        spvinfo = self.nodes[1].getwalletinfo()['spv']\n+        assert_equal(headerheight, spvinfo['best_known_header_height'])\n+        lt = self.nodes[1].listtransactions()\n+        \n+        # node1 is in SPV only mode\n+        # txes should not be present in the wallet with spv\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], True)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        print(\"Restarting nodes without -spvonly (hybrid SPV)\")\n+        self.stop_node(1)\n+        os.mkdir(self.options.tmpdir + \"/node3/regtest\")\n+        shutil.copyfile(self.options.tmpdir + \"/node1/regtest/wallet.dat\", self.options.tmpdir + \"/node3/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-spv=1\", \"-debug=net\"])\n+        connect_nodes_bi(self.nodes,0, 1)\n+        connect_nodes_bi(self.nodes,1, 2)\n+    \n+        self.nodes[0].resendwallettransactions()\n+        self.sync_all()\n+        \n+        lt = self.nodes[1].listtransactions()\n+\n+        # tx should now be fully validated\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], False)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        # start another node with initial hyprid SPV mode\n+        # use the wallet from node1\n+        self.nodes.append(start_node(3, self.options.tmpdir, [\"-debug=net\",\"-spv=1\"]))\n+        connect_nodes_bi(self.nodes,0, 3)\n+        connect_nodes_bi(self.nodes,0, 2)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        # make sure we have identical mempools\n+        self.nodes[0].resendwallettransactions()\n+        self.sync_all()\n+        \n+        # currently there is no efficient way to test for the \"SPV first\" wallet listing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570301",
      "id" : 86570301,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 102,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 102,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570358"
         }
      },
      "body" : "Check len(lt)?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:32:59Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from pprint import pprint\n+\n+\n+class WalletSPVTest(BitcoinTestFramework):\n+ \n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+        self.utxo = []\n+        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-debug=net\"], [\"-spv=1\", \"-spvonly=1\", \"-debug=net\"], [\"-debug=net\"]]\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def sync_spv(self, headerheight, wait=1, timeout=20):\n+        \"\"\"\n+        Wait until everybody has the same tip\n+        \"\"\"\n+        maxheight = 0\n+        while timeout > 0:\n+            insync = True\n+            for x in self.nodes:\n+                info = x.getwalletinfo()\n+                if info['spv']['enabled'] == True:\n+                    if not info['spv']['synced_up_to_height'] == headerheight:\n+                        insync = False\n+            if insync == True:\n+                return True\n+            timeout -= wait\n+            time.sleep(wait)\n+        raise AssertionError(\"SPV sync failed\")\n+\n+    def run_test(self):\n+        # Generate some old blocks\n+        addr = self.nodes[1].getnewaddress() #for 1 conf tx\n+        self.nodes[0].generate(130)\n+        self.nodes[0].sendtoaddress(addr, 1.1)\n+        self.nodes[0].generate(1)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        time.sleep(5)\n+        \n+        node1info = self.nodes[1].getblockchaininfo()\n+        assert_equal(node1info['blocks'], 0)\n+        assert_equal(node1info['headers'], headerheight)\n+        spvinfo = self.nodes[1].getwalletinfo()['spv']\n+        assert_equal(headerheight, spvinfo['best_known_header_height'])\n+        lt = self.nodes[1].listtransactions()\n+        \n+        # node1 is in SPV only mode\n+        # txes should not be present in the wallet with spv\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], True)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        print(\"Restarting nodes without -spvonly (hybrid SPV)\")\n+        self.stop_node(1)\n+        os.mkdir(self.options.tmpdir + \"/node3/regtest\")\n+        shutil.copyfile(self.options.tmpdir + \"/node1/regtest/wallet.dat\", self.options.tmpdir + \"/node3/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-spv=1\", \"-debug=net\"])\n+        connect_nodes_bi(self.nodes,0, 1)\n+        connect_nodes_bi(self.nodes,1, 2)\n+    \n+        self.nodes[0].resendwallettransactions()\n+        self.sync_all()\n+        \n+        lt = self.nodes[1].listtransactions()\n+\n+        # tx should now be fully validated\n+        assert_equal(lt[0]['address'], addr)\n+        assert_equal(lt[0]['spv'], False)\n+        assert_equal(lt[0]['confirmations'], 1)\n+        \n+        # start another node with initial hyprid SPV mode\n+        # use the wallet from node1\n+        self.nodes.append(start_node(3, self.options.tmpdir, [\"-debug=net\",\"-spv=1\"]))\n+        connect_nodes_bi(self.nodes,0, 3)\n+        connect_nodes_bi(self.nodes,0, 2)\n+        headerheight = self.nodes[0].getblockchaininfo()['headers']\n+        self.sync_spv(headerheight)\n+        # make sure we have identical mempools\n+        self.nodes[0].resendwallettransactions()\n+        self.sync_all()\n+        \n+        # currently there is no efficient way to test for the \"SPV first\" wallet listing\n+        # but we test that the hybrid modes results with a standard full validated wtxns\n+        lt = self.nodes[3].listtransactions()\n+        assert_equal(lt[0]['address'], addr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570358",
      "id" : 86570358,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 105,
      "path" : "qa/rpc-tests/walletspv.py",
      "position" : 105,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570531"
         }
      },
      "body" : "Spelling of cancelled.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:33:42Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570531",
      "id" : 86570531,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 16,
      "path" : "src/blockrequest.cpp",
      "position" : 16,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570686"
         }
      },
      "body" : "s/multithread save/thread-safe",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:34:19Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570686",
      "id" : 86570686,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 12,
      "path" : "src/blockrequest.cpp",
      "position" : 12,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86570686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86574526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86574526"
         }
      },
      "body" : "Since bitcoin is using c++11 can you just initialize these in the header?",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T15:52:04Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86574526",
      "id" : 86574526,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 18,
      "path" : "src/blockrequest.cpp",
      "position" : 18,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86574526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86577850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86577850"
         }
      },
      "body" : "Should be size_t",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:05:46Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86577850",
      "id" : 86577850,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 99,
      "path" : "src/blockrequest.cpp",
      "position" : 99,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86577850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86580666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86580666"
         }
      },
      "body" : "this is not quite right English and I don't understand what it is saying. Do you mean \"we haven't already downloaded this block nor do we have its data\"?\r\n\r\n\"we don't\" tends to mean \"we should not\".",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:20:18Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86580666",
      "id" : 86580666,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 102,
      "path" : "src/blockrequest.cpp",
      "position" : 102,
      "pull_request_review_id" : 7234423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T16:21:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86580666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86586389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86586389"
         }
      },
      "body" : "Maybe instead of a break just add vBlocks.size() < count as a condition in the for loop. I think that would make it clearer what count is supposed to represent (maximum number of blocks ever allowed in vBlocks as opposed to some limit associated with block state).",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:48:20Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86586389",
      "id" : 86586389,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 104,
      "path" : "src/blockrequest.cpp",
      "position" : 104,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86586389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86587229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86587229"
         }
      },
      "body" : "Can omit nulls since this defines default arguments.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:52:59Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    //try to push already available blocks through the signal\n+    this->processWithPossibleBlock(NULL, NULL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86587229",
      "id" : 86587229,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 111,
      "path" : "src/blockrequest.cpp",
      "position" : 111,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86587229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86588729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86588729"
         }
      },
      "body" : "Maybe call this something like SyncDownloadedTransactions. Since the purpose of this function is to invoke the SyncTransaction signal, seems like it should be named similarly to the signal.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:59:59Z",
      "diff_hunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCKREQUEST_H\n+#define BITCOIN_BLOCKREQUEST_H\n+\n+#include <atomic>\n+#include \"chain.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n+#include <stdint.h>\n+#include <vector>\n+\n+// \"Lock free\" block request\n+class CBlockRequest : public std::enable_shared_from_this<CBlockRequest> {\n+public:\n+    std::atomic<size_t> requestedUpToSize; //requested up to this element in vBlocksToDownload\n+    std::atomic<size_t> processedUpToSize; //processed up to this element in vBlocksToDownload\n+\n+    const std::vector<CBlockIndex*> vBlocksToDownload;\n+    const int64_t created; //!When the request was started\n+\n+    /** Constructor of the lock free CBlockRequest, vBlocksToDownloadIn remains constant */\n+    CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t created, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn);\n+    ~CBlockRequest();\n+\n+    /** Process the request, check if there are blocks available to \"stream\"\n+        over the SyncTransaction signal \n+        Allow to provide an optional block to avoid disk re-loading\n+     */\n+    void processWithPossibleBlock(const CBlock* pblock = NULL, CBlockIndex *pindex = NULL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86588729",
      "id" : 86588729,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 32,
      "path" : "src/blockrequest.h",
      "position" : 32,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86588729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@ryanofsky \r\n\r\n> but at the cost of revealing some information about the age of addresses in the wallet to peers on the network\r\n\r\nThe bigger cost is that the wallet could end up downloading a completely fake chain, since it isn't anchored to the genesis block. Presumably the client has no idea what block height or difficulty to expect and so evil peers could feed the SPV client minimum difficulty blocks of their own construction containing transactions that don't exist on the main chain.",
      "created_at" : "2016-11-04T17:00:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258488676",
      "id" : 258488676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T17:00:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258488676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/573356?v=3",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86589553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86589553"
         }
      },
      "body" : "Should be const (the member function).",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:04:21Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86589553",
      "id" : 86589553,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 83,
      "path" : "src/blockrequest.cpp",
      "position" : 83,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86589553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590493"
         }
      },
      "body" : "Should be const, I think.\r\n\r\nAlso might rename fillInNextBlocks to getNextBlocks to be clearer that this is returning information about the next blocks in the request, not changing the next blocks in the request.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:08:49Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590493",
      "id" : 86590493,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 97,
      "path" : "src/blockrequest.cpp",
      "position" : 97,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590719"
         }
      },
      "body" : "Should be const, and probably use size_t. Also maybe change \"loaded\" in the name to \"downloaded\" or \"have data\" to be consistent with other names here (\"loaded\" by itself is kind of vague).",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:10:08Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    //try to push already available blocks through the signal\n+    this->processWithPossibleBlock(NULL, NULL);\n+}\n+\n+unsigned int CBlockRequest::amountOfBlocksLoaded()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590719",
      "id" : 86590719,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 114,
      "path" : "src/blockrequest.cpp",
      "position" : 114,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590787"
         }
      },
      "body" : "Should be size_t",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:10:32Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    //try to push already available blocks through the signal\n+    this->processWithPossibleBlock(NULL, NULL);\n+}\n+\n+unsigned int CBlockRequest::amountOfBlocksLoaded()\n+{\n+    unsigned int haveData = 0;\n+    for (unsigned int i = 0; i < this->vBlocksToDownload.size() ; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590787",
      "id" : 86590787,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 117,
      "path" : "src/blockrequest.cpp",
      "position" : 117,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86590787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86595525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86595525"
         }
      },
      "body" : "Could do vBlocksToDownload(std::move(vBlocksToDownloadIn)) to avoid copying vector.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:33:33Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86595525",
      "id" : 86595525,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 14,
      "path" : "src/blockrequest.cpp",
      "position" : 14,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86595525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86596587"
         }
      },
      "body" : "Would be nice to name the variable after the command line argument it comes from (currently \"-spvonly\", possibly something else like \"partial sync\" in the future).",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:38:51Z",
      "diff_hunk" : "@@ -88,6 +89,8 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n CTxMemPool mempool(::minRelayTxFee);\n FeeFilterRounder filterRounder(::minRelayTxFee);\n \n+std::atomic<bool> fAutodownloadBlocks(true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596587",
      "id" : 86596587,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 12,
      "path" : "src/main.cpp",
      "position" : 12,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86596587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86596969"
         }
      },
      "body" : "Extra whitespace.",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:40:41Z",
      "diff_hunk" : "@@ -211,6 +214,7 @@ namespace {\n         CBlockIndex* pindex;                                     //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+        std::shared_ptr<CBlockRequest> blockRequest;                  //!< Optional, used for specific block downloads (SPV)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596969",
      "id" : 86596969,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 21,
      "path" : "src/main.cpp",
      "position" : 21,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86596969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86599461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86599461"
         }
      },
      "body" : "Maybe s/check mapBlocksInFlight/exclude blocks in flight/ to be more specific. (I had thought it was doing the opposite the first time reading this).",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T17:52:39Z",
      "diff_hunk" : "@@ -562,6 +573,26 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    // if there is an open CBlockRequest (out-of-band/specific block donwload), privileg it\n+    if (blockRequest && !blockRequest->isCancled()) {\n+        // fill in next blocks to download, pass in a filter function to check mapBlocksInFlight",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86599461",
      "id" : 86599461,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 88,
      "path" : "src/main.cpp",
      "position" : 88,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86599461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86607005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86607005"
         }
      },
      "body" : "Relying on this fHeadersChain argument here is bugging me (the argument is optional and defaults to false), since it seems easy for callers to screw up. I think it would be best to either make it a mandatory argument and/or provide some overload like the following, that would pass in the right value automatically for callers:\r\n\r\n```\r\nbool CheckFinal(const CMerkleTx& mtx, int flags=-1)\r\n{\r\n  return CheckFinal(mtx, flags, mtx.fSPV);\r\n}\r\n```",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T18:31:24Z",
      "diff_hunk" : "@@ -838,8 +869,7 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n-\n+    const int nBlockHeight = ((fHeadersChain && pindexBestHeader) ? pindexBestHeader->nHeight : chainActive.Height()) + 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86607005",
      "id" : 86607005,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 124,
      "path" : "src/main.cpp",
      "position" : 124,
      "pull_request_review_id" : 7215966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T18:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86607005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
