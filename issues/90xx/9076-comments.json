[
   {
      "body" : "Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?",
      "created_at" : "2016-11-03T22:41:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258295814",
      "id" : 258295814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-03T22:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258295814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?\r\n\r\nYes.\r\nA next step could be to support BIP37 bloom filter against authenticated nodes (once we have BIP150).\r\nBIP37 has huge privacy implication while this PRs full block SPV mode does not.\r\n\r\nRight now the `-spvonly` mode is not very bandwidth efficient (if you assume you'll never want to do the full validation of the chain).",
      "created_at" : "2016-11-04T07:21:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258360541",
      "id" : 258360541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T09:34:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258360541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "`getwalletinfo` reports the SPV sync state:\r\n\r\n```\r\n{\r\n  \"walletversion\": 130000,\r\n  \"balance\": 10.00000000,\r\n  \"unconfirmed_balance\": 0.00000000,\r\n  \"immature_balance\": 0.00000000,\r\n  \"txcount\": 1,\r\n  \"keypoololdest\": 1478202465,\r\n  \"keypoolsize\": 10,\r\n  \"paytxfee\": 0.00000010,\r\n  \"hdmasterkeyid\": \"fc2f268240531df6890b66f53141606b7f1f091b\",\r\n  \"spv\": {\r\n    \"enabled\": true,\r\n    \"hybrid_mode\": false,\r\n    \"synced_up_to_height\": 102,\r\n    \"best_known_header_height\": 102,\r\n    \"sync_in_progress\": false\r\n  }\r\n}\r\n```\r\n\r\nIf a sync is in progress, it can look like this:\r\n```\r\n{\r\n  \"walletversion\": 130000,\r\n  \"balance\": 0.00010000,\r\n  \"unconfirmed_balance\": 0.00000000,\r\n  \"immature_balance\": 0.00000000,\r\n  \"txcount\": 1,\r\n  \"keypoololdest\": 1477594751,\r\n  \"keypoolsize\": 100,\r\n  \"paytxfee\": 0.00000000,\r\n  \"hdmasterkeyid\": \"b397c61fb9d18e24d3a42f9c3c7b5d88b15005d3\",\r\n  \"spv\": {\r\n    \"enabled\": true,\r\n    \"hybrid_mode\": true,\r\n    \"synced_up_to_height\": 436884,\r\n    \"best_known_header_height\": 437299,\r\n    \"sync_in_progress\": true,\r\n    \"started\": 1478252299,\r\n    \"is_cancled\": false,\r\n    \"requested_blocks\": 416,\r\n    \"loaded_blocks\": 4,\r\n    \"processed_blocks\": 1\r\n  }\r\n}\r\n```",
      "created_at" : "2016-11-04T09:39:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258383543",
      "id" : 258383543,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T09:39:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258383543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for \"conceptual review\" right now from core developers (the concept does seems great to me).\r\n\r\nI do have one piece of feedback, though. Based on my understanding of the change, I think the following flag / feature descriptions might be more comprehensible to users:\r\n\r\n* **prioritized block download** (instead of \"hybrid SPV\")  - When enabled, bitcoin downloads the full blockchain as usual, but prioritizes downloading of newer blocks (currently all blocks after the earliest wallet transaction date), before older blocks. This causes relevant transactions to show up in the wallet earlier during an initial sync, allowing the wallet to become functional more quickly, but at the cost of revealing some information about the age of addresses in the wallet to peers on the network.\r\n\r\n* **partial sync** (instead of \"full SPV\") - When enabled, bitcoin downloads only part of the blockchain (currently all blocks after the earliest wallet transaction date), but still downloads and stores full blocks. This means less of the blockchain needs to be downloaded and stored locally, but at the cost of not being able to fully validate transactions, and of revealing some information about the age of addresses in the wallet to peers on the network. This mode is also is incompatible with the `-prune` block pruning mode (since bitcoin can't compute the UTXO set), so a node with partial syncing enabled may wind up using more disk space than a node with pruning enabled, despite downloading less data over the network.\r\n\r\nI think I like these names more than \"hybrid SPV\" / \"full SPV\", just because I think the modern usage of the term \"SPV\" refers to the wallets that don't download full blocks, don't validate transactions, barely require any storage, and sync almost immediately, and this is not what is implemented in these new modes. I do understand that historically the term SPV refered to a wider variety of network/storage saving schemes, but I don't think it would be good to go back and muddy the more clear modern meaning of what an SPV wallet is.",
      "created_at" : "2016-11-04T14:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258448467",
      "id" : 258448467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T14:39:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258448467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for \"conceptual review\" right now from core developers (the concept does seems great to me).\r\n\r\nFeels free to comment on the minor things directly in the code.\r\nI don't expect that this will go into master as it is (to big, includes to many risks, lack of reviewers). As always, I'll try to split this into independent sub-PRs. This one is to get an fully running PoC and maybe discuss it on a higher level.\r\n\r\n> prioritized block download\r\n\r\nYes. Seems fine for me. But we just need to make sure that users know that *no validation* happens on the \"prioritized blocks\".\r\n\r\n> partial sync\r\n\r\nYes. Though I think an expected feature would be to drop the part where we store blocks on the disk when using `-spvonly`.\r\nAnd I'm aiming to use some kind of BIP37 mechanism to allow low-bandwidth transaction scan against a trusted full node (after BIP150/151). Maybe we need to choose the wording with that in mind.",
      "created_at" : "2016-11-04T14:46:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258450775",
      "id" : 258450775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T14:46:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258450775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86580666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86580666"
         }
      },
      "body" : "this is not quite right English and I don't understand what it is saying. Do you mean \"we haven't already downloaded this block nor do we have its data\"?\r\n\r\n\"we don't\" tends to mean \"we should not\".",
      "commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "created_at" : "2016-11-04T16:20:18Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+\n+#include <exception>\n+\n+std::shared_ptr<CBlockRequest> currentBlockRequest; //multithread save pointer (CBlockRequest, the object, is also lock-free)\n+\n+CBlockRequest::CBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+CBlockRequest::~CBlockRequest()\n+{\n+    LogPrint(\"net\", \"Deallocating CBlockRequest\\n\");\n+}\n+\n+void CBlockRequest::processWithPossibleBlock(const CBlock* pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if request was cancled\n+    if (this->fCancled)\n+        return;\n+\n+    int MAX_PROCESS = 5;\n+    int loop_processed = 0;\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        CBlock loadBlock;\n+        const CBlock *currentBlock = &loadBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        int cnt = 0;\n+        BOOST_FOREACH(const CTransaction &tx, currentBlock->vtx) {\n+            GetMainSignals().SyncTransaction(tx, pindexRequest, cnt, false);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (loop_processed >= MAX_PROCESS)\n+            break;\n+        loop_processed++;\n+    }\n+}\n+\n+void CBlockRequest::cancel()\n+{\n+    fCancled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CBlockRequest::isCancled()\n+{\n+    return fCancled;\n+}\n+\n+void CBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // we don't already download this block and we don't have its data already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86580666",
      "id" : 86580666,
      "original_commit_id" : "eb13afe4de6c01bc95ca33f85dee964cb4ae8049",
      "original_position" : 102,
      "path" : "src/blockrequest.cpp",
      "position" : 102,
      "pull_request_review_id" : 7234423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9076",
      "updated_at" : "2016-11-04T16:21:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/86580666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "body" : "@ryanofsky \r\n\r\n> but at the cost of revealing some information about the age of addresses in the wallet to peers on the network\r\n\r\nThe bigger cost is that the wallet could end up downloading a completely fake chain, since it isn't anchored to the genesis block. Presumably the client has no idea what block height or difficulty to expect and so evil peers could feed the SPV client minimum difficulty blocks of their own construction containing transactions that don't exist on the main chain.",
      "created_at" : "2016-11-04T17:00:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258488676",
      "id" : 258488676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9076",
      "updated_at" : "2016-11-04T17:00:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/258488676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/573356?v=3",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   }
]
