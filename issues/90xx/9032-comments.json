[
   {
      "body" : "utAck, seems useful!\r\n\r\n",
      "created_at" : "2016-10-27T14:20:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9032#issuecomment-256655094",
      "id" : 256655094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9032",
      "updated_at" : "2016-10-27T14:20:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256655094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "Yes, makes sense. I should have included something like this when I added the json tests.\r\n\r\nI think https://github.com/bitcoin/bitcoin/pull/9023 (which outputs a contextual diff for failing test cases) should make it much easier to track down formatting errors, since it'll point you to the exact line that's different.\r\n\r\nHowever, I think this is still useful for verifying that the output is indeed valid json.\r\n\r\nOnly nit is that `compare_output()` can raise errors which aren't caught anywhere and don't result in useful logging. For example, here's the logging if the output file is invalid json:\r\n\r\n```\r\n~/bitcoin/src$ test/bitcoin-util-test.py --srcdir='.'\r\nTraceback (most recent call last):\r\n  File \"test/bitcoin-util-test.py\", line 32, in <module>\r\n    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)\r\n  File \"/home/vagrant/bitcoin/src/test/bctest.py\", line 72, in bctester\r\n    bctest(testDir, testObj, buildenv.exeext)\r\n  File \"/home/vagrant/bitcoin/src/test/bctest.py\", line 50, in bctest\r\n    if not compare_output(outs[0], outputData, outputType):\r\n  File \"/home/vagrant/bitcoin/src/test/bctest.py\", line 14, in compare_output\r\n    match = (json.loads(a) == json.loads(b))\r\n  File \"/usr/lib/python2.7/json/__init__.py\", line 338, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/usr/lib/python2.7/json/decoder.py\", line 382, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\nValueError: Invalid control character at: line 3 column 14 (char 95)\r\n```\r\n\r\nIt'd be nice to wrap the json calls in try/except, and maybe have the final else branch of `compare_output()` print an error and exit rather than raise an error.",
      "created_at" : "2016-10-27T15:20:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9032#issuecomment-256672957",
      "id" : 256672957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9032",
      "updated_at" : "2016-10-27T15:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256672957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
