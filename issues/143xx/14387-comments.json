[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Can someone debug the linter failure? The warning isn't in my code... ",
      "created_at" : "2018-10-04T06:49:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426904601",
      "id" : 426904601,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNjkwNDYwMQ==",
      "updated_at" : "2018-10-04T06:49:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426904601",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222560971"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: some trailing white space here?\r\n\r\nAlso, I removed all comments about the linter failure, because they are just distracting from the actual pull request.",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-04T07:24:17Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <list>\n+#include <vector>\n+\n+\n+static void DuplicateInputs(benchmark::State& state)\n+{\n+    const std::vector<unsigned char> op_true{OP_TRUE};\n+\n+\n+    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n+\n+    // Switch to regtest so we can mine faster\n+    // Also segwit is active, so we can include witness transactions\n+    SelectParams(CBaseChainParams::REGTEST);\n+\n+    InitScriptExecutionCache();\n+\n+    boost::thread_group thread_group;\n+    CScheduler scheduler;\n+    const CChainParams& chainparams = Params();\n+    {\n+        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+        LoadGenesisBlock(chainparams);\n+        CValidationState state;\n+        ActivateBestChain(state, chainparams);\n+        assert(::chainActive.Tip() != nullptr);\n+        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+        assert(witness_enabled);\n+    }\n+\n+    CBlock block{};\n+    CMutableTransaction coinbaseTx{};\n+    CMutableTransaction naughtyTx{};\n+\n+    CBlockIndex* pindexPrev = ::chainActive.Tip();\n+    assert(pindexPrev != nullptr);\n+    block.nBits          = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+    block.nNonce         = 0;\n+    auto nHeight = pindexPrev->nHeight + 1;\n+    block.nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+\n+    // Make a coinbase TX\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+\n+\n+    naughtyTx.vout.resize(1);\n+    naughtyTx.vout[0].nValue = 0;\n+    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+\n+    int n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE/WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize()))/41) - 100;\n+    for (int x = 0; x < (n_inputs-1); ++x) {\n+        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n+    }\n+    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n+\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n+    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971",
      "id" : 222560971,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjU2MDk3MQ==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 91,
      "path" : "src/bench/duplicate_inputs.cpp",
      "position" : null,
      "pull_request_review_id" : 161475347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222560971",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can you post \"typical\" case benchmark comparisons?",
      "created_at" : "2018-10-04T07:29:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426913811",
      "id" : 426913811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNjkxMzgxMQ==",
      "updated_at" : "2018-10-04T07:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426913811",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222562989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222562989"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could probably just install `clang-format` and run the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script",
      "commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "created_at" : "2018-10-04T07:32:00Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <list>\n+#include <vector>\n+\n+\n+static void DuplicateInputs(benchmark::State& state)\n+{\n+    const std::vector<unsigned char> op_true{OP_TRUE};\n+\n+\n+    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n+\n+    // Switch to regtest so we can mine faster\n+    // Also segwit is active, so we can include witness transactions\n+    SelectParams(CBaseChainParams::REGTEST);\n+\n+    InitScriptExecutionCache();\n+\n+    boost::thread_group thread_group;\n+    CScheduler scheduler;\n+    const CChainParams& chainparams = Params();\n+    {\n+        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+        LoadGenesisBlock(chainparams);\n+        CValidationState state;\n+        ActivateBestChain(state, chainparams);\n+        assert(::chainActive.Tip() != nullptr);\n+        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+        assert(witness_enabled);\n+    }\n+\n+    CBlock block{};\n+    CMutableTransaction coinbaseTx{};\n+    CMutableTransaction naughtyTx{};\n+\n+    CBlockIndex* pindexPrev = ::chainActive.Tip();\n+    assert(pindexPrev != nullptr);\n+    block.nBits          = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+    block.nNonce         = 0;\n+    auto nHeight = pindexPrev->nHeight + 1;\n+    block.nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+\n+    // Make a coinbase TX\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+\n+\n+    naughtyTx.vout.resize(1);\n+    naughtyTx.vout[0].nValue = 0;\n+    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+\n+    int n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE/WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize()))/41) - 100;\n+    for (int x = 0; x < (n_inputs-1); ++x) {\n+        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n+    }\n+    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n+\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n+    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222562989",
      "id" : 222562989,
      "in_reply_to_id" : 222560971,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjU2Mjk4OQ==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 91,
      "path" : "src/bench/duplicate_inputs.cpp",
      "position" : 91,
      "pull_request_review_id" : 161477816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-04T07:32:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222562989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke It seems like comments from @JeremyRubin, @promag and @jamesob were deleted. Why? :-)\r\n\r\nObvious comment spam should be deleted without justification but I think deleted comments from regular contributors deserve a short comment on the reason for the deletion. That adds transparency to the maintainer process and also makes the discussion in the PR easier to understand.",
      "created_at" : "2018-10-04T07:50:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426919505",
      "id" : 426919505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNjkxOTUwNQ==",
      "updated_at" : "2018-10-04T08:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426919505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14400 (Add Benchmark to test input de-duplication worst case by JeremyRubin)\n* #14397 (Faster duplicate input check in CheckTransaction (alternative to #14387) by sipa)\n* #14074 (Use std::unordered_set instead of set in blockfilter interface by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-10-04T08:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426933620",
      "id" : 426933620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNjkzMzYyMA==",
      "updated_at" : "2018-10-05T10:44:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426933620",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin Impressive speedup! What is the risk-reward trade-off we're facing with this change? More specifically: what risks do you see associated with this change to consensus critical code?\r\n\r\nDoes the change in which DoS error gets reported for transactions which have both duplicates and null inputs have any consequences or impose any risks?",
      "created_at" : "2018-10-04T08:58:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426939786",
      "id" : 426939786,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNjkzOTc4Ng==",
      "updated_at" : "2018-10-04T08:58:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426939786",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222660847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222660847"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why 8?",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-04T13:08:53Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222660847",
      "id" : 222660847,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjY2MDg0Nw==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 63,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161600373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222660847",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3648618?v=4",
         "events_url" : "https://api.github.com/users/leishman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/leishman/followers",
         "following_url" : "https://api.github.com/users/leishman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/leishman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/leishman",
         "id" : 3648618,
         "login" : "leishman",
         "node_id" : "MDQ6VXNlcjM2NDg2MTg=",
         "organizations_url" : "https://api.github.com/users/leishman/orgs",
         "received_events_url" : "https://api.github.com/users/leishman/received_events",
         "repos_url" : "https://api.github.com/users/leishman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/leishman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/leishman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/leishman"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anyone measured `-reindex` with and without this change? ",
      "created_at" : "2018-10-04T23:33:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427202088",
      "id" : 427202088,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzIwMjA4OA==",
      "updated_at" : "2018-10-04T23:33:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427202088",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222861377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222861377"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's my favorite number!\r\n\r\nIt's to get the expected work below one for the worst case as shown in the analysis.\r\n\r\nWe could add a 9th hash (we have more bits in the hash computed) but every hash adds more memory accesses in our table.\r\n\r\nWe could also remove a hash or two and the EV would be less than 10, which is probably acceptable 2. At about 4 or 5 hashes is when it blows up a bit more to an \"unacceptable point\" (EV 50 to 500 comparisons).\r\n\r\nSolve for x such that:\r\n\r\nSum  i = 0 to 24390 [ i*( i*x / 2**21)**x ] < 1\r\n\r\n\r\nIt's also possible to modify the algorithm such that if a false positive is hit, you do the current set based algorithm up to the conflict. I'm not sure how to analyze that though, and the current code is sufficiently simple with low enough probability of expensive scan that we don't care that much.\r\n",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-04T23:59:31Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222861377",
      "id" : 222861377,
      "in_reply_to_id" : 222660847,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg2MTM3Nw==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 63,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161852481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222861377",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222886217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222886217"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "More precisely, it's one of two choices (9 hashes or 8) with 21 bits with expected work less than 1.\r\n\r\nExtracting 9 hashes from 3 64 bit integers is a bit more complex code wise, but doable.\r\n\r\n>>> sorted((sum(i*(float(i)*x/ 2.0**y)**x for i in xrange(24930)) if (x*y <= 192) else  ('Inf', 0, 0),y,x) for y in xrange(1,22) for x in xrange(1,20))[:10]\r\n\r\n[(0.10374566662377155, 21, 9), (0.4157347268068221, 21, 8), (1.9074647424172138, 21, 7), (10.226961125517702, 21, 6), (53.11778131137103, 20, 9), (65.8563129753341, 21, 5), (106.42809006254646, 20, 8), (244.15548702940336, 20, 7), (529.481130078109, 21, 4), (654.5255120331329, 20, 6)]\r\n\r\nAnother option would be to increase the number of hashes to 16 and then use a 20 bit table, requiring a 320-bit hash . This makes the expected work about 7 comparisons in the worst case, but makes the table half as large which reduces the constant bloat.",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T03:54:19Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222886217",
      "id" : 222886217,
      "in_reply_to_id" : 222660847,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg4NjIxNw==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 63,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161882460,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222886217",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222902655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222902655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "How does your implementation compare to using `std::unordered_set`?",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T06:27:00Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222902655",
      "id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwMjY1NQ==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161902822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222902655",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3648618?v=4",
         "events_url" : "https://api.github.com/users/leishman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/leishman/followers",
         "following_url" : "https://api.github.com/users/leishman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/leishman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/leishman",
         "id" : 3648618,
         "login" : "leishman",
         "node_id" : "MDQ6VXNlcjM2NDg2MTg=",
         "organizations_url" : "https://api.github.com/users/leishman/orgs",
         "received_events_url" : "https://api.github.com/users/leishman/received_events",
         "repos_url" : "https://api.github.com/users/leishman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/leishman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/leishman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/leishman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222903474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222903474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok cool. Thanks for the analysis. 8 seems like a pretty reasonable choice. I left a comment above, but was wondering how this bloom filter compares to native unordered set implementations in the stdlib.\r\n\r\n",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T06:30:01Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222903474",
      "id" : 222903474,
      "in_reply_to_id" : 222660847,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwMzQ3NA==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 63,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161903780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222903474",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3648618?v=4",
         "events_url" : "https://api.github.com/users/leishman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/leishman/followers",
         "following_url" : "https://api.github.com/users/leishman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/leishman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/leishman",
         "id" : 3648618,
         "login" : "leishman",
         "node_id" : "MDQ6VXNlcjM2NDg2MTg=",
         "organizations_url" : "https://api.github.com/users/leishman/orgs",
         "received_events_url" : "https://api.github.com/users/leishman/received_events",
         "repos_url" : "https://api.github.com/users/leishman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/leishman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/leishman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/leishman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222907779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222907779"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/14397 for a more obvious version that is just the obvious thing.\r\n\r\nFor std::unordered_set, I'm clocking much worse performance for DeserializeAndCheckBlockTest and 2x worse performance for DuplicateInputs.\r\n",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T06:56:00Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222907779",
      "id" : 222907779,
      "in_reply_to_id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwNzc3OQ==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161909222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222907779",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222908232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222908232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@leishman I tried a few alternatives:\r\n* Master: 13.6 ms\r\n* #14397: 6.3 ms\r\n* Using a sorted vector with SipHash'ed prevouts: 3.7 ms\r\n* This PR: 2.7 ms\r\n",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T06:58:09Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222908232",
      "id" : 222908232,
      "in_reply_to_id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwODIzMg==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161909736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222908232",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My immediate reaction is that this seems very complex compared to a naive std::set comparison! This also pulls our SipHash implementation into consensus-critical code, which seems like a big price to pay for a performance win. I lean pretty strongly towards concept NACK.\r\n\r\n@JeremyRubin - your PR description talks about what this PR does, but not why. This makes block propagation faster, but do we have an understanding of how much these milliseconds matter? Is there a way we can determine whether the increased complexity introduced is a reasonable price to pay for the performance win?\r\n\r\nAlso, +1 to @MarcoFalke's comment here: https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971 . Can reviewers *please* not start nitting code before there's been a concept discussion. ",
      "created_at" : "2018-10-05T07:00:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427265702",
      "id" : 427265702,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI2NTcwMg==",
      "updated_at" : "2018-10-05T07:00:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427265702",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222909637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222909637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I like sorting the siphash'd prevouts -- I'm guessing you then do the expensive check if that collides? Or are you tracking the pointers when you sort too?",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T07:05:38Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222909637",
      "id" : 222909637,
      "in_reply_to_id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwOTYzNw==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161911531,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222909637",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222910439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222910439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin Yeah, just delay the expensive check until after the cheap check fails. I haven't PR'ed that because I only have PoC, and I don't want to overload reviewers with a series of PRs without even knowing if we want to increase complexity here at all.",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T07:09:53Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222910439",
      "id" : 222910439,
      "in_reply_to_id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkxMDQzOQ==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161912565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222910439",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Goal was to minimize the performance regression caused by the CVE fix. Understand this is sensitive code for that reason. This code is also generally theoretically useful for several other contexts because it is O(N). An adapted version (different parameters) could be used to check for duplicate inputs across a large number of txns (e.g., mempool syncing context).\r\n\r\n\r\nIt's actually not thaaat complicated; it's basically just a bloom filter. The complexity is also mostly in the performance, the correctness is somewhat easy to check.\r\n\r\nI don't know if the performance win is worth it. I'll leave that for others to determine. Just putting it out there.",
      "created_at" : "2018-10-05T07:10:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427267896",
      "id" : 427267896,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI2Nzg5Ng==",
      "updated_at" : "2018-10-05T07:10:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427267896",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222916084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222916084"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For the expensive check, you can still do it in O(n) per colliding entry FYI, which is less expensive than doing the full O(n log n) expensive check given that we don't expect colliding entries without a duplicate.\r\n",
      "commit_id" : "1f2477364d20cce37249f06a99424169a2326780",
      "created_at" : "2018-10-05T07:37:23Z",
      "diff_hunk" : "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222916084",
      "id" : 222916084,
      "in_reply_to_id" : 222902655,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkxNjA4NA==",
      "original_commit_id" : "5d768bf136e75be7fb2a18dd500f75749f24fb52",
      "original_position" : 54,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 161919724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
      "updated_at" : "2018-10-06T01:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222916084",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin It is sufficiently complicated to introduce undefined behaviour in consensus critical code without any of the reviewers noticing .-)\r\n\r\nI'm afraid the code as it is currently formulated will trigger undefined behaviour due to shift exponents being too large.\r\n",
      "created_at" : "2018-10-05T07:40:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427274569",
      "id" : 427274569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI3NDU2OQ==",
      "updated_at" : "2018-10-05T07:41:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427274569",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift i think I fixed that -- can you confirm? (and also a copy-paste error on which bit was being set :(  )",
      "created_at" : "2018-10-05T07:57:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427278833",
      "id" : 427278833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI3ODgzMw==",
      "updated_at" : "2018-10-05T07:57:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427278833",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift No, I'm afraid the undefined behaviour is still present.\r\n\r\nCheck this code:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4ec7597add35cfc458680fcba2b8fb64931711ef/src/consensus/tx_verify.cpp#L281-L288",
      "created_at" : "2018-10-05T09:24:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427301352",
      "id" : 427301352,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzMwMTM1Mg==",
      "updated_at" : "2018-10-05T09:30:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427301352",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I feel like this is too much review work vs the gain.",
      "created_at" : "2018-10-05T20:32:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427490408",
      "id" : 427490408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzQ5MDQwOA==",
      "updated_at" : "2018-10-05T20:32:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427490408",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   }
]
