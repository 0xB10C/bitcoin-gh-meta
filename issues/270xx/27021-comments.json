[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2023-02-02T00:25:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1412956940",
      "id" : 1412956940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UOAMM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412956940/reactions"
      },
      "updated_at" : "2023-02-17T07:45:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412956940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1095658967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095658967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(IIRC we discussed this offline a while ago) We probably want to check here that `to_process_count` doesn't get too large. It's not really feasible to run MiniMiner with a cluster == entire mempool...\r\nPerhaps add a check here so that if we see a cluster size > 1000 (or something), we maybe want to tell the wallet to calculate bump fees in batches, maybe look at fewer UTXOS, or some kind of safe fallback.",
      "commit_id" : "daf023a49ce812417a36ec201e19d4272abc790a",
      "created_at" : "2023-02-03T10:43:45Z",
      "diff_hunk" : "@@ -1140,3 +1153,47 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector. It does not\n+        // necessarily mean the entry has been processed.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of entries to process starts\n+        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\n+            for (const CTxMemPoolEntry& parent_entry : cluster.at(i)->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++to_process_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1095658967",
      "id" : 1095658967,
      "line" : 1185,
      "node_id" : "PRRC_kwDOABII585BTm3X",
      "original_commit_id" : "daf023a49ce812417a36ec201e19d4272abc790a",
      "original_line" : 1185,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 69,
      "pull_request_review_id" : 1282756155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095658967/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-03T10:47:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095658967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I wrote a fuzz test for the `MiniMiner` and it crashes on some of the `Assume`s: https://github.com/dergoegge/bitcoin/tree/2023-01-fuzz-mini-miner\r\n\r\n```sh\r\n$ echo \"AQEWCQEBAAEACf//////////////CBwAAgAAlRwB7QEA/wAAAAL7AAEAAAEB7QEA/wAAAAL7AAAA\r\nAAAAXAD//w==\" | base64 -d > mini_miner_crash.input\r\n$ FUZZ=mini_miner ./src/test/fuzz/fuzz ./mini_miner_crash.input\r\n```\r\n\r\nNow that could just mean that my assumptions about what should be passed into the `MiniMiner` are wrong (i.e. my fuzz target is using the `MiniMiner` incorrectly). In that case it might make sense to add documentation that outlines what is expected from a `MiniMiner` user.\r\n\r\nTwo questions:\r\n* Are the assumptions (i.e. `Assume`s in mini_miner.cpp) internal to the `MiniMiner` or do they rely on external assumptions as well? e.g. Does the mini miner expect the mempool it receives in its constructor to only hold transactions that passed out ATMP checks?\r\n* Since this is a \"mini\" version of the `BlockAssembler`, would it be possible to differentially fuzz the two? Or using one as an oracle to test the other? e.g. Checking if transactions bumped with the help of `MiniMiner` make it into the next block constructed by the actual `BlockAssembler`.",
      "created_at" : "2023-02-03T15:41:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1416044406",
      "id" : 1416044406,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UZx92",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416044406/reactions"
      },
      "updated_at" : "2023-02-03T15:41:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416044406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In what way does the code added here differ from the real block assembly code?",
      "created_at" : "2023-02-03T16:13:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1416085883",
      "id" : 1416085883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UZ8F7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416085883/reactions"
      },
      "updated_at" : "2023-02-03T16:13:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416085883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for fuzzing :100:\r\nIt's fully possible the crashing is due to real bugs, I hit a crash yesterday while testing as well. I think there is something wrong with the way it's handling to-be-replaced outputs.\r\n\r\n> Does the mini miner expect the mempool it receives in its constructor to only hold transactions that passed out ATMP checks?\r\n\r\nActually no. It just uses what's cached in the mempool entries. The fees don't even need to match inputs - outputs, and mini miner definitely doesn't require ATMP checks.\r\n\r\n> Since this is a \"mini\" version of the BlockAssembler, would it be possible to differentially fuzz the two?\r\n\r\nDifferential fuzzing is perfect for this really.`MiniMiner::BuildMockTemplate(target_feerate)` is supposed to do the exact same thing as `BlockAssembler::addPackageTxs` with `blockmintxfee` = target feerate.\r\n\r\n> Checking if transactions bumped with the help of MiniMiner make it into the next block constructed by the actual BlockAssembler.\r\n\r\nThat would also be a really good way of testing the results (after the wallet stuff is added?). Add the bumping tx, mine another block with the target feerate as min feerate, and see that they all get mined.",
      "created_at" : "2023-02-03T16:14:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1416087441",
      "id" : 1416087441,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UZ8eR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416087441/reactions"
      },
      "updated_at" : "2023-02-03T16:14:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416087441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> In what way does the code added here differ from the real block assembly code?\r\n\r\n- Only operates on the relevant transactions rather than full mempool\r\n- Has the ability to remove transactions that will be replaced so they don't impact their ancestors\r\n- Does not hold mempool lock outside of the constructor, makes copies of the entries it needs instead (though I'm not sure if this has an effect in practice)\r\n- Doesn't do the sanity checks like keeping weight within max block weight and `IsFinalTx()`\r\n- After the block template is built, additionally calculates fees to bump remaining ancestor packages to target feerate",
      "created_at" : "2023-02-03T16:21:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1416097704",
      "id" : 1416097704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UZ--o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416097704/reactions"
      },
      "updated_at" : "2023-02-03T16:21:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416097704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added tests from glozowâs branch",
      "created_at" : "2023-02-03T21:29:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1416422200",
      "id" : 1416422200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UbOM4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416422200/reactions"
      },
      "updated_at" : "2023-02-03T21:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416422200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is there a reason to leave the `CalculateTotalBumpFee` commit out of this PR?",
      "created_at" : "2023-02-06T10:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1418834753",
      "id" : 1418834753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UkbNB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1418834753/reactions"
      },
      "updated_at" : "2023-02-06T10:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1418834753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh good point, that just grew organically, but really it could be part of the mini-miner changes. Iâll squash it in there.",
      "created_at" : "2023-02-06T22:26:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1419869444",
      "id" : 1419869444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585UoX0E",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1419869444/reactions"
      },
      "updated_at" : "2023-02-06T22:26:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1419869444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve amended this branch to include the `CalculateTotalBumpFee` method from #26152 in the mini-miner code here.",
      "created_at" : "2023-02-08T16:58:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1422942684",
      "id" : 1422942684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585U0GHc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1422942684/reactions"
      },
      "updated_at" : "2023-02-08T16:58:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1422942684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I pushed some changes (with @Xekyo's permission, thanks):\r\n- Capped traversal at 500 items in `CalculateCluster()`. Number is arbitrary, open for commentary\r\n- Fixed up a few things in the MiniMiner implementation, mostly shuffling things around and updating comments\r\n- Dropped the chain interface changes (I think those can go in #26152)\r\n- Expanded unit tests\r\n- Added a fuzzer (expanded from @dergoegge's, thanks)\r\n- Added a fuzzer to differentially test block templates built by `BlockAssembler` and `MiniMiner`. Hopefully this gives reviewers a bit more confidence that they are doing the same thing even if the implementations are difficult to review/compare.",
      "created_at" : "2023-02-16T16:06:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1433329273",
      "id" : 1433329273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585Vbt55",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433329273/reactions"
      },
      "updated_at" : "2023-02-16T16:06:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433329273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Awesome, thanks for the reworking this, @glozow, and the work on the fuzzer, @dergoegge. I've fixed a minor `tidy` issue and Iâll pick the chain interface changes into #26152 and rebase on this shortly.\r\n\r\nReady for review\r\n\r\n",
      "created_at" : "2023-02-16T21:29:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1433738562",
      "id" : 1433738562,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585VdR1C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433738562/reactions"
      },
      "updated_at" : "2023-02-16T21:29:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433738562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed again to provide signed commits",
      "created_at" : "2023-02-16T22:26:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1433798783",
      "id" : 1433798783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585Vdgh_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433798783/reactions"
      },
      "updated_at" : "2023-02-16T22:26:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433798783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "review-beg-pinging @LarryRuane @josibake @stickies-v who have looked at `MiniMiner` previously",
      "created_at" : "2023-02-17T16:19:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1434870979",
      "id" : 1434870979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585VhmTD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434870979/reactions"
      },
      "updated_at" : "2023-02-17T16:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434870979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For anyone wanting to review this PR and would like some help with basic mempool concepts, I made a video: https://youtu.be/sQ05azzTp9o -- it mentions 26152 but I think would be helpful for reviewers here as well.",
      "created_at" : "2023-02-17T17:53:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1435034303",
      "id" : 1435034303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
      "node_id" : "IC_kwDOABII585ViOK_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435034303/reactions"
      },
      "updated_at" : "2023-02-17T17:53:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435034303",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119099044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119099044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit\r\n```suggestion\r\n        ret.push_back(it.value());\r\n```\r\nThis may help the reader know that `it` is a `std::optional`; at first, I thought `GetIter()` may be returning a pointer. But if you prefer `*`, which is more concise, that's fine too.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-27T17:57:35Z",
      "diff_hunk" : "@@ -898,6 +899,19 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it{GetIter(txid)};\n+        if (!it) return {};\n+        ret.push_back(*it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119099044",
      "id" : 1119099044,
      "line" : 910,
      "node_id" : "PRRC_kwDOABII585CtBik",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 910,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 20,
      "pull_request_review_id" : 1316134729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119099044/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-27T19:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119099044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119107935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119107935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\nstd::optional<std::vector<CTxMemPool::txiter>> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\r\n```\r\nWould this be better than giving a special meaning to an empty vector? I'm unsure, but may be worth considering.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-27T18:05:53Z",
      "diff_hunk" : "@@ -898,6 +899,19 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119107935",
      "id" : 1119107935,
      "line" : 902,
      "node_id" : "PRRC_kwDOABII585CtDtf",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 902,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 12,
      "pull_request_review_id" : 1316134729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119107935/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-27T19:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119107935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119109899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119109899"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\nstd::optional<std::vector<CTxMemPool::txiter>> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-27T18:07:58Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119109899",
      "id" : 1119109899,
      "line" : 1157,
      "node_id" : "PRRC_kwDOABII585CtEML",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1157,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 41,
      "pull_request_review_id" : 1316134729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119109899/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-27T19:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119109899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119134160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119134160"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this function return `std::nullopt` instead?",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-27T18:28:45Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119134160",
      "id" : 1119134160,
      "line" : 1164,
      "node_id" : "PRRC_kwDOABII585CtKHQ",
      "original_commit_id" : "aad0c09ab6fb38e6d0a3e4d9eb764d84a2913f15",
      "original_line" : 1164,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 48,
      "pull_request_review_id" : 1316134729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119134160/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-27T19:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119134160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119202243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119202243"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm concerned about the possible over-estimation here. In theory, there could be a combinatorial explosion if the DAG is highly interconnected and deep. I would consider removing this code, because vector `push_back()` is highly optimized when growth is needed. Or at least make sure there's a problem before adding this optimization.\r\n\r\nIf you do keep this, consider calling `cluster.shrink_to_fit()` before returning, so at least any high memory usage is temporary.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-27T19:20:02Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1119202243",
      "id" : 1119202243,
      "line" : 1170,
      "node_id" : "PRRC_kwDOABII585CtavD",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1170,
      "original_position" : 54,
      "original_start_line" : 1166,
      "path" : "src/txmempool.cpp",
      "position" : 54,
      "pull_request_review_id" : 1316134729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119202243/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1166,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-27T19:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1119202243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120543538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120543538"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n// Copyright (c) 2023 The Bitcoin Core developers\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-28T18:00:17Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120543538",
      "id" : 1120543538,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII585CyiMy",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 1,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120543538/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120543538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120948639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120948639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, more efficient to not make a copy\r\n```suggestion\r\n                std::vector<COutPoint> outpoints_of_tx({outpoint});\r\n                m_requested_outpoints_by_txid.emplace(outpoint.hash, std::move(outpoints_of_tx));\r\n```\r\nor (I didn't test this, but I'm pretty sure that since the vector argument is an rvalue, the compiler will do a move)\r\n```suggestion\r\n                m_requested_outpoints_by_txid.emplace(outpoint.hash, std::vector<COutPoint>{outpoint});\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-02-28T23:58:17Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120948639",
      "id" : 1120948639,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585C0FGf",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : 51,
      "path" : "src/node/mini_miner.cpp",
      "position" : 52,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120948639/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 51,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120948639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120964573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120964573"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, simpler. I don't know if the comment is necessary (the reader is expected to know this about maps), but it may help to document that we're taking advantage of that behavior.\r\n\r\nThe developer notes do [say](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures) not to use the `std::map []` syntax, but only for reading.\r\n```suggestion\r\n            // This creates the map entry if it doesn't already exist.\r\n            m_requested_outpoints_by_txid[outpoint.hash].push_back(outpoint);\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T00:22:44Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120964573",
      "id" : 1120964573,
      "line" : 53,
      "node_id" : "PRRC_kwDOABII585C0I_d",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 53,
      "original_position" : 53,
      "original_start_line" : 47,
      "path" : "src/node/mini_miner.cpp",
      "position" : 53,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120964573/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 47,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120964573",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120992192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120992192"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not a bug, but I noticed that the only reference to `m_to_be_replaced` outside the constructor is an `Assume` in `SanityCheck()`, I wonder if it's worth `m_to_be_replaced` being a class member. If we give up the `Assume`, which doesn't seem to be doing that much heavy lifting, then `m_to_be_replaced` could be a local variable in the constructor.\r\n\r\nAnother nice thing about making `m_to_be_replaced` a local variable is that its entries can be pointers to transactions, instead of entire txid hashes. I wanted to make sure that would work, so here's a patch that does that and passes the tests. (It includes my other suggestions for the constructor, because I wanted to test all of them.)\r\n\r\n<details>\r\n<summary>patch, click to expand</summary>\r\n\r\n```diff\r\n--- a/src/node/mini_miner.cpp\r\n+++ b/src/node/mini_miner.cpp\r\n@@ -21,6 +21,7 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\r\n {\r\n     LOCK(mempool.cs);\r\n     m_requested_outpoints = outpoints;\r\n+    std::set<const CTransaction*> to_be_replaced;\r\n     // Find which outpoints to calculate bump fees for.\r\n     // Anything that's spent by the mempool is to-be-replaced\r\n     // Anything otherwise unavailable just has a bump fee of 0\r\n@@ -32,25 +33,19 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\r\n             // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\r\n             // removing the to-be-replaced entries. Note that this is only calculating bump fees.\r\n             // RBF fee rules should be handled separately.\r\n-            m_to_be_replaced.insert(ptx->GetHash());\r\n+            to_be_replaced.insert(ptx);\r\n             // Remove descendants because they will be replaced as well. This case should be rare\r\n             // as the wallet won't normally attempt to replace transactions with descendants.\r\n             CTxMemPool::setEntries descendants;\r\n             mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\r\n             for (const auto& desc_txiter : descendants) {\r\n-                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\r\n+                to_be_replaced.insert(&desc_txiter->GetTx());\r\n             }\r\n         }\r\n \r\n         if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\r\n             // This UTXO is unconfirmed and in the mempool.\r\n-            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\r\n-            if (it != m_requested_outpoints_by_txid.end()) {\r\n-                it->second.push_back(outpoint);\r\n-            } else {\r\n-                std::vector<COutPoint> outpoints_of_tx({outpoint});\r\n-                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\r\n-            }\r\n+            m_requested_outpoints_by_txid[outpoint.hash].push_back(outpoint);\r\n         } else {\r\n             // This UTXO is either confirmed or not yet submitted to mempool.\r\n             // If it's confirmed, no bump fee is required.\r\n@@ -77,7 +72,7 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\r\n \r\n     // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\r\n     for (const auto& txiter : cluster) {\r\n-        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\r\n+        if (to_be_replaced.find(&txiter->GetTx()) == to_be_replaced.end()) {\r\n             auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\r\n             m_entries.push_back(mapiter);\r\n         } else {\r\n@@ -95,18 +90,19 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\r\n \r\n     // Build the m_descendant_set_by_txid cache.\r\n     for (const auto& txiter : cluster) {\r\n-        const auto& txid = txiter->GetTx().GetHash();\r\n+        const CTransaction& tx{txiter->GetTx()};\r\n+        const auto& txid{tx.GetHash()};\r\n         // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\r\n         // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\r\n         std::vector<MockEntryMap::iterator> cached_descendants;\r\n-        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();\r\n+        const bool remove{to_be_replaced.find(&tx) != to_be_replaced.end()};\r\n         CTxMemPool::setEntries descendants;\r\n         mempool.CalculateDescendants(txiter, descendants);\r\n         Assume(descendants.find(txiter) != descendants.end());\r\n         for (const auto& desc_txiter : descendants) {\r\n-            const auto txid_desc = desc_txiter->GetTx().GetHash();\r\n-            const bool remove_desc = m_to_be_replaced.find(txid_desc) != m_to_be_replaced.end();\r\n-            auto desc_it{m_entries_by_txid.find(txid_desc)};\r\n+            const CTransaction& tx_desc{desc_txiter->GetTx()};\r\n+            const bool remove_desc{to_be_replaced.find(&tx_desc) != to_be_replaced.end()};\r\n+            auto desc_it{m_entries_by_txid.find(tx_desc.GetHash())};\r\n             Assume((desc_it == m_entries_by_txid.end()) == remove_desc);\r\n             if (remove) Assume(remove_desc);\r\n             // It's possible that remove=false but remove_desc=true.\r\n@@ -194,9 +190,6 @@ void MiniMiner::SanityCheck() const\r\n     Assume(std::all_of(m_entries.begin(), m_entries.end(), [](const auto& entry) {\r\n         return entry->second.GetSizeWithAncestors() >= entry->second.GetTxSize() &&\r\n                entry->second.GetModFeesWithAncestors() >= entry->second.GetModifiedFee();}));\r\n-    // None of the entries should be to-be-replaced transactions\r\n-    Assume(std::all_of(m_to_be_replaced.begin(), m_to_be_replaced.end(),\r\n-        [&](const auto& txid){return m_entries_by_txid.find(txid) == m_entries_by_txid.end();}));\r\n }\r\n \r\n void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\r\n```\r\n</details>",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T01:05:40Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MiniMinerMempoolEntry\n+{\n+    const CAmount fee_individual;\n+    const CTransaction tx;\n+    const int64_t vsize_individual;\n+\n+// This class must be constructed while holding mempool.cs. After construction, the object's\n+// methods can be called without holding that lock.\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_with_ancestors;\n+    explicit MiniMinerMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        vsize_individual(entry->GetTxSize()),\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MiniMinerMempoolEntry& ancestor, const MiniMinerMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // When true, a caller may use CalculateBumpFees(). Becomes false if we failed to retrieve\n+    // mempool entries (i.e. cluster size too large) or bump fees have already been calculated.\n+    bool m_ready_to_calculate{true};\n+\n+    // Original outpoints requested\n+    std::vector<COutPoint> m_requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> m_to_be_replaced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1120992192",
      "id" : 1120992192,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII585C0PvA",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : 66,
      "path" : "src/node/mini_miner.h",
      "position" : 68,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120992192/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 66,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120992192",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121184614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121184614"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can we remove this code? (I prefer avoiding special cases.) The only effect difference I can see by eliminating this is that, with it, `m_ready_to_calculate` will remain `true`, whereas without it, it will be `false`. Does that matter? I'm unsure of the purpose of `m_ready_to_calculate` (in this PR it's only used by test code, although I understand it may be used in the follow-on PR). Seems like once the constructor runs, it should be ready to calculate, no matter what. There's nothing else that can be done to make it ready to calculate.\r\n\r\nIs `m_ready_to_calculate` an error indication, since it seems it can be `false` only If we hit the DoS limit? If so, how might it used? I think in this case we recover by just not bumping any fees, which is not the end of the world (it's what happens today). The error indication may be useful in tests (to verify that we hit the DoS limit when expected), but then maybe it should have a better name, like `dos_limit_reached`.\r\n\r\nBut it may be better still to just test the actual effect, i.e., that all the bump fees are zero.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T05:52:50Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121184614",
      "id" : 1121184614,
      "line" : 63,
      "node_id" : "PRRC_kwDOABII585C0-tm",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : 62,
      "path" : "src/node/mini_miner.cpp",
      "position" : 63,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121184614/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 62,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121184614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121191113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121191113"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe this 500 can be a `constexpr` in the `MiniMiner` class? I probably wouldn't suggest this if this is the only place it occurs, but the tests specify this value too. It might be nice to be able to change this limit by changing a single line of code.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:01:52Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector. It does not\n+        // necessarily mean the entry has been processed.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of entries to process starts\n+        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\n+            // DoS protection: if not finished after processing 500 entries, just quit.\n+            if (to_process_count > 500) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121191113",
      "id" : 1121191113,
      "line" : 1181,
      "node_id" : "PRRC_kwDOABII585C1ATJ",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1181,
      "original_position" : 65,
      "original_start_line" : 1180,
      "path" : "src/txmempool.cpp",
      "position" : 65,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121191113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1180,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121191113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121215437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121215437"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This isn't a very efficient data structure, because each entry's key, the txid, is repeated in all of its vector's entries (because a `COutPoint` includes the txid). All you need is the index (`COutPoint::n`) So this could be:\r\n```\r\n    std::map<uint256, std::vector<uint32_t>> m_requested_outpoints_by_txid;\r\n```\r\nalthough the name would be wrong, it's no longer \"requested outpoints\". Elsewhere in the code where you need a `COutPoint` (I think there are only two places), you can construct it from the key (txid) and this index. ",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:32:29Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MiniMinerMempoolEntry\n+{\n+    const CAmount fee_individual;\n+    const CTransaction tx;\n+    const int64_t vsize_individual;\n+\n+// This class must be constructed while holding mempool.cs. After construction, the object's\n+// methods can be called without holding that lock.\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_with_ancestors;\n+    explicit MiniMinerMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        vsize_individual(entry->GetTxSize()),\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MiniMinerMempoolEntry& ancestor, const MiniMinerMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // When true, a caller may use CalculateBumpFees(). Becomes false if we failed to retrieve\n+    // mempool entries (i.e. cluster size too large) or bump fees have already been calculated.\n+    bool m_ready_to_calculate{true};\n+\n+    // Original outpoints requested\n+    std::vector<COutPoint> m_requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> m_to_be_replaced;\n+\n+    // If multiple argument outpoints correspond to the same transaction, cache them together in\n+    // a single entry indexed by txid. Then we can just work with txids since all outpoints from\n+    // the same tx will have the same bumpfee. Excludes non-mempool transactions.\n+    std::map<uint256, std::vector<COutPoint>> m_requested_outpoints_by_txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121215437",
      "id" : 1121215437,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII585C1GPN",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : 70,
      "path" : "src/node/mini_miner.h",
      "position" : 73,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121215437/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 70,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121215437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121220463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121220463"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        if (!m_to_be_replaced.count(txiter->GetTx().GetHash())) {\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:38:41Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121220463",
      "id" : 1121220463,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585C1Hdv",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 80,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121220463/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121220463",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121222211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121222211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        const bool remove{m_to_be_replaced.count(txid) > 0};\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:40:46Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121222211",
      "id" : 1121222211,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII585C1H5D",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 102,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121222211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121222211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121223393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121223393"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            const bool remove_desc{to_be_replaced.count(&tx_desc) > 0};\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:42:14Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+        Assume(descendants.find(txiter) != descendants.end());\n+        for (const auto& desc_txiter : descendants) {\n+            const auto txid_desc = desc_txiter->GetTx().GetHash();\n+            const bool remove_desc = m_to_be_replaced.find(txid_desc) != m_to_be_replaced.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121223393",
      "id" : 1121223393,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII585C1ILh",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 108,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121223393/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121223393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121225418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121225418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        Assume(descendants.count(txiter) > 0);\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T06:44:43Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+        Assume(descendants.find(txiter) != descendants.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121225418",
      "id" : 1121225418,
      "line" : 105,
      "node_id" : "PRRC_kwDOABII585C1IrK",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 105,
      "pull_request_review_id" : 1318211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121225418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121225418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121483332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121483332"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain why using `count` is better?",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T10:27:18Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121483332",
      "id" : 1121483332,
      "in_reply_to_id" : 1121220463,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585C2HpE",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 80,
      "pull_request_review_id" : 1319542147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121483332/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T10:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121483332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121487831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121487831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree it might just be better to not reserve anything. We have no idea what the cluster size is going to be, so might as well let the stdlib magic do its work.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T10:30:33Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121487831",
      "id" : 1121487831,
      "in_reply_to_id" : 1119202243,
      "line" : 1170,
      "node_id" : "PRRC_kwDOABII585C2IvX",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1170,
      "original_position" : 54,
      "original_start_line" : 1166,
      "path" : "src/txmempool.cpp",
      "position" : 54,
      "pull_request_review_id" : 1319542147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121487831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1166,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T10:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121487831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121488980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121488980"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Marking as resolved as this has been implemented",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T10:31:18Z",
      "diff_hunk" : "@@ -1140,3 +1153,47 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector. It does not\n+        // necessarily mean the entry has been processed.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of entries to process starts\n+        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\n+            for (const CTxMemPoolEntry& parent_entry : cluster.at(i)->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++to_process_count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121488980",
      "id" : 1121488980,
      "in_reply_to_id" : 1095658967,
      "line" : 1187,
      "node_id" : "PRRC_kwDOABII585C2JBU",
      "original_commit_id" : "daf023a49ce812417a36ec201e19d4272abc790a",
      "original_line" : 1187,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 71,
      "pull_request_review_id" : 1319542147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121488980/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T10:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121488980",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121498816"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121498816"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Disagree with txmempool getting this value from mini_miner, as that would create a circular dependency.\r\nThis kind of constant should live in src/kernel/mempool_options.h.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T10:38:37Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector. It does not\n+        // necessarily mean the entry has been processed.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of entries to process starts\n+        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\n+            // DoS protection: if not finished after processing 500 entries, just quit.\n+            if (to_process_count > 500) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121498816",
      "id" : 1121498816,
      "in_reply_to_id" : 1121191113,
      "line" : 1181,
      "node_id" : "PRRC_kwDOABII585C2LbA",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1181,
      "original_position" : 65,
      "original_start_line" : 1180,
      "path" : "src/txmempool.cpp",
      "position" : 65,
      "pull_request_review_id" : 1319542147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121498816/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1180,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T10:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121498816",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121528999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121528999"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `mini_miner` target will always produce a cluster of 500 txs right now, because we always add outputs to `available_coins`. So my suggestion would be to let the fuzzer choose which outputs are added to `available_coins`.\r\n\r\n```suggestion\r\n        for (uint32_t n{0}; n < num_outputs; ++n) {\r\n            if (fuzzed_data_provider.ConsumeBool()) {\r\n                available_coins.push_back(COutPoint{tx->GetHash(), n});\r\n            }\r\n        }\r\n```\r\n ",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T11:02:01Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121528999",
      "id" : 1121528999,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585C2Syn",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 61,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 67,
      "pull_request_review_id" : 1319599774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121528999/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 61,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T11:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121528999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121540528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121540528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            if (fuzzed_data_provider.ConsumeBool()) {\r\n```\r\n\r\nShouldn't really make a difference since the fuzzer picks both bools.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T11:10:25Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);\n+        }\n+\n+    }\n+\n+    node::MiniMiner mini_miner{pool, outpoints};\n+    assert(mini_miner.IsReadyToCalculate());\n+    const CFeeRate target_feerate{CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/1000)}};\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const auto bump_fees = mini_miner.CalculateBumpFees(target_feerate);\n+        assert(bump_fees.size() == outpoints.size());\n+        for (const auto& [outpoint, fee] : bump_fees) assert(fee >= 0);\n+    } else {\n+        const auto bump_fee = mini_miner.CalculateTotalBumpFees(target_feerate);\n+        assert(bump_fee.has_value());\n+    }\n+    assert(!mini_miner.IsReadyToCalculate());\n+}\n+\n+// Test that MiniMiner and BlockAssembler build the same block given the same transactions and constraints.\n+FUZZ_TARGET_INIT(mini_miner_selection, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    // Make a copy to preserve determinism.\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    std::vector<CTransactionRef> transactions;\n+\n+    LOCK2(::cs_main, pool.cs);\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 100)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = 2;\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(2, 5);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+\n+        // First 2 outputs are available to spend. The rest are added to outpoints to calculate bumpfees.\n+        // There is no overlap between spendable coins and outpoints passed to MiniMiner because the\n+        // MiniMiner interprets spent coins as to-be-replaced and excludes them.\n+        for (uint32_t n{0}; n < num_outputs - 1; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool() && fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121540528",
      "id" : 1121540528,
      "line" : 125,
      "node_id" : "PRRC_kwDOABII585C2Vmw",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 125,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 125,
      "pull_request_review_id" : 1319599774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121540528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-01T11:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121540528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121607436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121607436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Alternatively, the `LIMITED_WHILE` condition could be changed.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T12:01:11Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121607436",
      "id" : 1121607436,
      "in_reply_to_id" : 1121528999,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585C2l8M",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 61,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 67,
      "pull_request_review_id" : 1319698544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121607436/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 61,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T12:01:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121607436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121611301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121611301"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, with my suggested modification there is a crash, which I don't think is the modifications fault:\r\n\r\n```\r\n/wCqamFv0GgmkfHCTmPQeMXAul83pioRsGwGcWUbQCYRX/BcVADDAQm0wQAAAAAAAAAAAAAPAAAA\r\nAAAAAA8AAAAAAAAAAAAAAGPQeMXAul83pioRsGwGcWUbKUAGcWUbQCYRX/BcVADDAQm0wQAAAAAA\r\nAAAAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAGPQeMXAul83pioRsGwGcWUbKUAmEV/wVFwAwwG0CQAA\r\nAAAAAAAA//////+mKhGwbAZxZRtAJhFf8FRcAMMBCbTBAAAAAAAAAAAAAA///////////////2Zm\r\nZmZmZmZmZmZmZgAAAAAAAFw=\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-01T12:04:22Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1121611301",
      "id" : 1121611301,
      "in_reply_to_id" : 1121528999,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585C2m4l",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 61,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 67,
      "pull_request_review_id" : 1319704290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121611301/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 61,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-01T12:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121611301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122981731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122981731"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry ignore my previous review, it was wrong. But this should work:\r\n\r\n```suggestion\r\n            if (outpoint.has_value() && std::find(outpoints.begin(), outpoints.end(), *outpoint) == outpoints.end()) {\r\n                outpoints.push_back(*outpoint);\r\n            }\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-02T11:53:40Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122981731",
      "id" : 1122981731,
      "line" : 77,
      "node_id" : "PRRC_kwDOABII585C71dj",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 77,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 77,
      "pull_request_review_id" : 1321674784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122981731/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-02T12:08:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122981731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122983669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122983669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This input produces an `outpoints` vector with 2 of the same outpoint, which is what causes it to crash on the line `assert(bump_fees.size() == outpoints.size()`.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-02T11:55:19Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122983669",
      "id" : 1122983669,
      "in_reply_to_id" : 1121528999,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585C7171",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 61,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 67,
      "pull_request_review_id" : 1321674784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122983669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 61,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-02T12:08:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122983669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122985863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122985863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just noticed this was added for `CalculateTotalBumpFees()` - it is redundant with `m_requested_outpoints_by_txid`, so I think you should remove it and have `CalculateTotalBumpFees()` iterate through `m_requested_outpoints_by_txid`'s keys instead.",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-02T11:57:11Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1122985863",
      "id" : 1122985863,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII585C72eH",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 23,
      "pull_request_review_id" : 1321674784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122985863/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-02T12:08:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122985863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123037832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123037832"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is more precise than making sure the lengths are the same (and would also fix the crash):\r\n```suggestion\r\n        for (const auto& outpoint : outpoints) {\r\n            auto it = bump_fees.find(outpoint);\r\n            assert(it != bump_fees.end());\r\n            assert(it->second >= 0);\r\n        }\r\n```",
      "commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "created_at" : "2023-03-02T12:41:50Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);\n+        }\n+\n+    }\n+\n+    node::MiniMiner mini_miner{pool, outpoints};\n+    assert(mini_miner.IsReadyToCalculate());\n+    const CFeeRate target_feerate{CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/1000)}};\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const auto bump_fees = mini_miner.CalculateBumpFees(target_feerate);\n+        assert(bump_fees.size() == outpoints.size());\n+        for (const auto& [outpoint, fee] : bump_fees) assert(fee >= 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123037832",
      "id" : 1123037832,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII585C8DKI",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 87,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : 88,
      "pull_request_review_id" : 1321745788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123037832/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 87,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-02T12:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123037832",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123754749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123754749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve removed the `reserve(â¦)` call here.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-02T21:48:57Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123754749",
      "id" : 1123754749,
      "in_reply_to_id" : 1119202243,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585C-yL9",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1170,
      "original_position" : 54,
      "original_start_line" : 1166,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123754749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123754749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123811383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123811383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, agreed using an optional would be more explicit, however handling the optional return value would touch a bunch of lines here, and given that the result should never be empty unless something went wrong or the function got called with an empty `txids` input, I feel itâs a bit of a cosmetic improvement here.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-02T22:41:10Z",
      "diff_hunk" : "@@ -898,6 +899,19 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123811383",
      "id" : 1123811383,
      "in_reply_to_id" : 1119107935,
      "line" : 902,
      "node_id" : "PRRC_kwDOABII585C_AA3",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 902,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 12,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123811383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123811383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123812481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123812481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâd probably prefer using `.value()` for new code Iâd write, but the asterisk-variant seems prevalent throughout this code.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-02T22:42:39Z",
      "diff_hunk" : "@@ -898,6 +899,19 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it{GetIter(txid)};\n+        if (!it) return {};\n+        ret.push_back(*it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123812481",
      "id" : 1123812481,
      "in_reply_to_id" : 1119099044,
      "line" : 910,
      "node_id" : "PRRC_kwDOABII585C_ASB",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 910,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 20,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123812481/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123812481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123819758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123819758"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As above with `GetIterVec()`, an empty vector is not a valid outcome for a call, so I tend to leave as is.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-02T22:50:47Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123819758",
      "id" : 1123819758,
      "in_reply_to_id" : 1119109899,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585C_CDu",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1157,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123819758/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123819758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123823270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123823270"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, will consider, change but feel itâs okay at this time.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-02T22:54:02Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1123823270",
      "id" : 1123823270,
      "in_reply_to_id" : 1119134160,
      "line" : 1164,
      "node_id" : "PRRC_kwDOABII585C_C6m",
      "original_commit_id" : "aad0c09ab6fb38e6d0a3e4d9eb764d84a2913f15",
      "original_line" : 1164,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 48,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123823270/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1123823270",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124907930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124907930"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâm not sure in how far this needs to be widely visible, since it only affects one function and the corresponding tests.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T19:10:44Z",
      "diff_hunk" : "@@ -1140,3 +1153,49 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    if (cluster.size() != txids.size()) {\n+        // We can't continue because the caller specified a tx that doesn't exist in the mempool.\n+        // Return an empty vector to let them know this failed.\n+        return {};\n+    }\n+    // Reserve total ancestor + descendant counts of each transaction.  This is an approximation; it\n+    // may overestimate because transactions may share ancestors/descendants, and may underestimate\n+    // because the cluster may include more than just ancestors and descendants.\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants() - 1; }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector. It does not\n+        // necessarily mean the entry has been processed.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of entries to process starts\n+        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\n+            // DoS protection: if not finished after processing 500 entries, just quit.\n+            if (to_process_count > 500) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124907930",
      "id" : 1124907930,
      "in_reply_to_id" : 1121191113,
      "line" : 1176,
      "node_id" : "PRRC_kwDOABII585DDLua",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1176,
      "original_position" : 65,
      "original_start_line" : 1180,
      "path" : "src/txmempool.cpp",
      "position" : 60,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124907930/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1175,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124907930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124908789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124908789"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T19:11:45Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124908789",
      "id" : 1124908789,
      "in_reply_to_id" : 1120543538,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDL71",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124908789/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124908789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124938942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124938942"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed `m_requested_outpoints`",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T19:46:09Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124938942",
      "id" : 1124938942,
      "in_reply_to_id" : 1122985863,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDTS-",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124938942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124938942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124956187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124956187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks thatâs much nicer",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:05:53Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124956187",
      "id" : 1124956187,
      "in_reply_to_id" : 1120964573,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDXgb",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 53,
      "original_position" : 53,
      "original_start_line" : 47,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124956187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124956187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124966759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124966759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me that if we donât use the result of `find`, itâs clearer that we just care about whether a key is present instead of where in the sequence it appears",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:18:19Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124966759",
      "id" : 1124966759,
      "in_reply_to_id" : 1121220463,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDaFn",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124966759/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124966759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124995387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995387"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, adopted",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:49:39Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124995387",
      "id" : 1124995387,
      "in_reply_to_id" : 1121222211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDhE7",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995387/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124995611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:49:46Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+        Assume(descendants.find(txiter) != descendants.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124995611",
      "id" : 1124995611,
      "in_reply_to_id" : 1121225418,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDhIb",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124995611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124997795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124997795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:52:23Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;\n+\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    for (const auto& [txid, outpoints]: m_requested_outpoints_by_txid) {\n+        txids_needed.push_back(txid);\n+    }\n+    const auto cluster = mempool.CalculateCluster(txids_needed);\n+    if (cluster.empty()) {\n+        // An empty cluster means that at least one of the transactions is missing from the mempool\n+        // (should not be possible given processing above) or DoS limit was hit.\n+        m_ready_to_calculate = false;\n+        return;\n+    }\n+\n+    // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n+    for (const auto& txiter : cluster) {\n+        if (m_to_be_replaced.find(txiter->GetTx().GetHash()) == m_to_be_replaced.end()) {\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter));\n+            m_entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = m_requested_outpoints_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != m_requested_outpoints_by_txid.end()) {\n+                // This UTXO is the output of a to-be-replaced transaction. Bump fee is 0; spending\n+                // this UTXO is impossible as it will no longer exist after the replacement.\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    m_bump_fees.emplace(outpoint, 0);\n+                }\n+                m_requested_outpoints_by_txid.erase(outpoints_it);\n+            }\n+        }\n+    }\n+\n+    // Build the m_descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MiniMinerMempoolEntry\n+        // will not exist without its ancestor MiniMinerMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        const bool remove = m_to_be_replaced.find(txid) != m_to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+        Assume(descendants.find(txiter) != descendants.end());\n+        for (const auto& desc_txiter : descendants) {\n+            const auto txid_desc = desc_txiter->GetTx().GetHash();\n+            const bool remove_desc = m_to_be_replaced.find(txid_desc) != m_to_be_replaced.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124997795",
      "id" : 1124997795,
      "in_reply_to_id" : 1121223393,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDhqj",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124997795/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124997795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124999961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124999961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "While true, it seems more readable to use the type in the value that I later want than to remember reconstructing it later.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T20:54:54Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MiniMinerMempoolEntry\n+{\n+    const CAmount fee_individual;\n+    const CTransaction tx;\n+    const int64_t vsize_individual;\n+\n+// This class must be constructed while holding mempool.cs. After construction, the object's\n+// methods can be called without holding that lock.\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_with_ancestors;\n+    explicit MiniMinerMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        vsize_individual(entry->GetTxSize()),\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MiniMinerMempoolEntry& ancestor, const MiniMinerMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // When true, a caller may use CalculateBumpFees(). Becomes false if we failed to retrieve\n+    // mempool entries (i.e. cluster size too large) or bump fees have already been calculated.\n+    bool m_ready_to_calculate{true};\n+\n+    // Original outpoints requested\n+    std::vector<COutPoint> m_requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> m_to_be_replaced;\n+\n+    // If multiple argument outpoints correspond to the same transaction, cache them together in\n+    // a single entry indexed by txid. Then we can just work with txids since all outpoints from\n+    // the same tx will have the same bumpfee. Excludes non-mempool transactions.\n+    std::map<uint256, std::vector<COutPoint>> m_requested_outpoints_by_txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1124999961",
      "id" : 1124999961,
      "in_reply_to_id" : 1121215437,
      "line" : 70,
      "node_id" : "PRRC_kwDOABII585DDiMZ",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 70,
      "original_position" : 73,
      "original_start_line" : 70,
      "path" : "src/node/mini_miner.h",
      "position" : 70,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124999961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 67,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1124999961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125015732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125015732"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I changed it to use outpoints only sometimes depending on the consumed boolean as @dergoegge suggested.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T21:13:53Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125015732",
      "id" : 1125015732,
      "in_reply_to_id" : 1121528999,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDmC0",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 65,
      "original_position" : 67,
      "original_start_line" : 61,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125015732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125015732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125018960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125018960"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, adopted your suggestion.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T21:17:41Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);\n+        }\n+\n+    }\n+\n+    node::MiniMiner mini_miner{pool, outpoints};\n+    assert(mini_miner.IsReadyToCalculate());\n+    const CFeeRate target_feerate{CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/1000)}};\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const auto bump_fees = mini_miner.CalculateBumpFees(target_feerate);\n+        assert(bump_fees.size() == outpoints.size());\n+        for (const auto& [outpoint, fee] : bump_fees) assert(fee >= 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125018960",
      "id" : 1125018960,
      "in_reply_to_id" : 1123037832,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDm1Q",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 87,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125018960/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125018960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125019174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125019174"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for finding this!",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T21:17:55Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125019174",
      "id" : 1125019174,
      "in_reply_to_id" : 1122981731,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDm4m",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 77,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125019174/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125019174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125026197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125026197"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed second boolean",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T21:25:47Z",
      "diff_hunk" : "@@ -0,0 +1,180 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <test/util/mining.h>\n+\n+#include <node/mini_miner.h>\n+#include <node/miner.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+#include <txmempool.h>\n+\n+#include <deque>\n+#include <vector>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::deque<COutPoint> g_available_coins;\n+void initialize_miner()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (uint32_t i = 0; i < uint32_t{100}; ++i) {\n+        g_available_coins.push_back(COutPoint{uint256::ZERO, i});\n+    }\n+}\n+\n+// Test that the MiniMiner can run with various outpoints and feerates.\n+FUZZ_TARGET_INIT(mini_miner, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    std::vector<COutPoint> outpoints;\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    LOCK2(::cs_main, pool.cs);\n+    // Cluster size cannot exceed 500\n+    LIMITED_WHILE(!available_coins.empty(), 500)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, available_coins.size());\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+        TestMemPoolEntryHelper entry;\n+        const CAmount fee{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/100000)};\n+        assert(MoneyRange(fee));\n+        pool.addUnchecked(entry.Fee(fee).FromTx(tx));\n+\n+        // All outputs are available to spend\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                available_coins.push_front(COutPoint{tx->GetHash(), n});\n+            } else {\n+                available_coins.push_back(COutPoint{tx->GetHash(), n});\n+            }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool() && !tx->vout.empty()) {\n+            // Add outpoint from this tx (may or not be spent by a later tx)\n+            outpoints.push_back(COutPoint{tx->GetHash(),\n+                                          (uint32_t)fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, tx->vout.size())});\n+        } else {\n+            // Add some random outpoint (will be interpreted as confirmed or not yet submitted\n+            // to mempool).\n+            auto outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (outpoint) outpoints.push_back(*outpoint);\n+        }\n+\n+    }\n+\n+    node::MiniMiner mini_miner{pool, outpoints};\n+    assert(mini_miner.IsReadyToCalculate());\n+    const CFeeRate target_feerate{CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/MAX_MONEY/1000)}};\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const auto bump_fees = mini_miner.CalculateBumpFees(target_feerate);\n+        assert(bump_fees.size() == outpoints.size());\n+        for (const auto& [outpoint, fee] : bump_fees) assert(fee >= 0);\n+    } else {\n+        const auto bump_fee = mini_miner.CalculateTotalBumpFees(target_feerate);\n+        assert(bump_fee.has_value());\n+    }\n+    assert(!mini_miner.IsReadyToCalculate());\n+}\n+\n+// Test that MiniMiner and BlockAssembler build the same block given the same transactions and constraints.\n+FUZZ_TARGET_INIT(mini_miner_selection, initialize_miner)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CTxMemPool pool{CTxMemPool::Options{}};\n+    // Make a copy to preserve determinism.\n+    std::deque<COutPoint> available_coins = g_available_coins;\n+    std::vector<CTransactionRef> transactions;\n+\n+    LOCK2(::cs_main, pool.cs);\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 100)\n+    {\n+        CMutableTransaction mtx = CMutableTransaction();\n+        const size_t num_inputs = 2;\n+        const size_t num_outputs = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(2, 5);\n+        for (size_t n{0}; n < num_inputs; ++n) {\n+            auto prevout = available_coins.front();\n+            mtx.vin.push_back(CTxIn(prevout, CScript()));\n+            available_coins.pop_front();\n+        }\n+        for (uint32_t n{0}; n < num_outputs; ++n) {\n+            mtx.vout.push_back(CTxOut(100, P2WSH_OP_TRUE));\n+        }\n+        CTransactionRef tx = MakeTransactionRef(mtx);\n+\n+        // First 2 outputs are available to spend. The rest are added to outpoints to calculate bumpfees.\n+        // There is no overlap between spendable coins and outpoints passed to MiniMiner because the\n+        // MiniMiner interprets spent coins as to-be-replaced and excludes them.\n+        for (uint32_t n{0}; n < num_outputs - 1; ++n) {\n+            if (fuzzed_data_provider.ConsumeBool() && fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125026197",
      "id" : 1125026197,
      "in_reply_to_id" : 1121540528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDomV",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 125,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/test/fuzz/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125026197/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125026197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125071450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071450"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Iâm not going to interfere here, because outpoints are tiny anyway, and it seems more readable without the move or constructor.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T22:16:27Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125071450",
      "id" : 1125071450,
      "in_reply_to_id" : 1120948639,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DDzpa",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : 51,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071450/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071450",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125071911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071911"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâll have to revisit this one.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T22:17:00Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125071911",
      "id" : 1125071911,
      "in_reply_to_id" : 1121184614,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585DDzwn",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 57,
      "original_position" : 63,
      "original_start_line" : 62,
      "path" : "src/node/mini_miner.cpp",
      "position" : 57,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071911/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 56,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125071911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125072522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125072522"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the suggestion, going to think about this some more, but donât feel very strongly about it.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-03T22:17:55Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MiniMinerMempoolEntry\n+{\n+    const CAmount fee_individual;\n+    const CTransaction tx;\n+    const int64_t vsize_individual;\n+\n+// This class must be constructed while holding mempool.cs. After construction, the object's\n+// methods can be called without holding that lock.\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_with_ancestors;\n+    explicit MiniMinerMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        vsize_individual(entry->GetTxSize()),\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MiniMinerMempoolEntry& ancestor, const MiniMinerMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // When true, a caller may use CalculateBumpFees(). Becomes false if we failed to retrieve\n+    // mempool entries (i.e. cluster size too large) or bump fees have already been calculated.\n+    bool m_ready_to_calculate{true};\n+\n+    // Original outpoints requested\n+    std::vector<COutPoint> m_requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> m_to_be_replaced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1125072522",
      "id" : 1125072522,
      "in_reply_to_id" : 1120992192,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585DDz6K",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 65,
      "original_position" : 68,
      "original_start_line" : 66,
      "path" : "src/node/mini_miner.h",
      "position" : 65,
      "pull_request_review_id" : 1322708525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125072522/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 63,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-03T22:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1125072522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1126270559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126270559"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Is m_ready_to_calculate an error indication, since it seems it can be false only If we hit the DoS limit?\r\n\r\nNo it's not just for indicating DoS limit reached, notice that it is also set to false after `BuildMockTemplate` is called. It prevents somebody from constructing a `MiniMiner` and calling `CalculateBumpFees()` or `CalculateTotalBumpFees()` multiple times, which could result in very incorrect results if the target feerate changes.",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-06T11:20:53Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    m_requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // This outpoint is already being spent by another transaction in the mempool.\n+            // We assume that the caller wants to replace this transaction (and its descendants).\n+            // If the outpoint is from a mempool transaction, we still need to calculate its\n+            // ancestors bump fees (added to m_requested_outpoints_by_txid below), but after\n+            // removing the to-be-replaced entries. Note that this is only calculating bump fees.\n+            // RBF fee rules should be handled separately.\n+            m_to_be_replaced.insert(ptx->GetHash());\n+            // Remove descendants because they will be replaced as well. This case should be rare\n+            // as the wallet won't normally attempt to replace transactions with descendants.\n+            CTxMemPool::setEntries descendants;\n+            mempool.CalculateDescendants(mempool.GetIter(ptx->GetHash()).value(), descendants);\n+            for (const auto& desc_txiter : descendants) {\n+                m_to_be_replaced.insert(desc_txiter->GetTx().GetHash());\n+            }\n+        }\n+\n+        if (mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is unconfirmed and in the mempool.\n+            auto it = m_requested_outpoints_by_txid.find(outpoint.hash);\n+            if (it != m_requested_outpoints_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                m_requested_outpoints_by_txid.emplace(outpoint.hash, outpoints_of_tx);\n+            }\n+        } else {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // If it's confirmed, no bump fee is required.\n+            // If it's not yet submitted, we have no information, so return 0.\n+            m_bump_fees.emplace(outpoint, 0);\n+        }\n+    }\n+\n+    // No unconfirmed UTXOs, so nothing mempool-related needs to be calculated.\n+    if (m_requested_outpoints_by_txid.empty()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1126270559",
      "id" : 1126270559,
      "in_reply_to_id" : 1121184614,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585DIYZf",
      "original_commit_id" : "ce882ef0cf338d390733dd85e339a1c0da73072c",
      "original_line" : 57,
      "original_position" : 63,
      "original_start_line" : 62,
      "path" : "src/node/mini_miner.cpp",
      "position" : 57,
      "pull_request_review_id" : 1326000785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126270559/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 56,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-06T12:27:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126270559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1126320439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126320439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: It seems the rename to `GatherClusters` should have been squashed into efeee8b51d, but is in 5ee6f89e40 instead?",
      "commit_id" : "32123cfc11ad22cdd7fe5ef26ac0550e1ab2fe7b",
      "created_at" : "2023-03-06T11:59:54Z",
      "diff_hunk" : "@@ -1154,43 +1154,43 @@ std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     assert(false);\n }\n \n-std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uint256>& txids) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1126320439",
      "id" : 1126320439,
      "line" : 1157,
      "node_id" : "PRRC_kwDOABII585DIkk3",
      "original_commit_id" : "5ee6f89e4057e56514a036995a014e2a0fe64166",
      "original_line" : 1157,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 5,
      "pull_request_review_id" : 1326000785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126320439/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-06T12:27:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126320439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
