[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-02-01T20:42:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1412695691",
      "id" : 1412695691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27019",
      "node_id" : "IC_kwDOABII585UNAaL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412695691/reactions"
      },
      "updated_at" : "2023-02-01T20:42:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412695691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094183174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nbench/mempool_eviction.cpp:42:105: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned long'",
      "commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "created_at" : "2023-02-02T08:27:38Z",
      "diff_hunk" : "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094183174",
      "id" : 1094183174,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII585BN-kG",
      "original_commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "original_line" : 42,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 65,
      "pull_request_review_id" : 1280537976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T08:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094629151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151"
         }
      },
      "author_association" : "MEMBER",
      "body" : "found the issue, thanks",
      "commit_id" : "4d5a2ee9aebb8ae779019843acbbac44a7ecf540",
      "created_at" : "2023-02-02T14:47:40Z",
      "diff_hunk" : "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094629151",
      "id" : 1094629151,
      "in_reply_to_id" : 1094183174,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII585BPrcf",
      "original_commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "original_line" : 43,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 66,
      "pull_request_review_id" : 1281207133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T14:47:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
