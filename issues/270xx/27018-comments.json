[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26883](https://github.com/bitcoin/bitcoin/pull/26883) (src/node/miner cleanups, follow-ups for #26695 by stickies-v)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-02-01T19:11:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1412579618",
      "id" : 1412579618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585UMkEi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412579618/reactions"
      },
      "updated_at" : "2023-02-02T00:24:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412579618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @naumenkogs Re: https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1413246009\r\n\r\nJust re-posting the scenario with 2400 extra transactions to evict in an RBF (originally in #26933 description):\r\n\r\n- The mempool contains 100 \"child\" transactions, each spending from 24 unconfirmed parent transactions and 1 confirmed UTXO. - The parents are all 0sat/vB and CPFP'd. If the children are evicted, and the parents no longer bumped, they will be below min relay feerate.\r\n- A replacement transaction spends only confirmed UTXOs. This means it has 100 directly conflicting transactions (the 100 children). There are no descendants, so there are 100 original transactions in total. But accepting the replacement transaction actually invalidates not 100, but 100 * 25 = 2500 mempool transactions.\r\n- We can remove these transactions in TrimToSize(), but 2500 is considerably more than our previous limit of 100.\r\n\r\nA counterargument is that we don't currently have any guarantees that we never `TrimToSize()` more than 2500 entries at a time. We also don't have a good idea of how computationally expensive this really is. For example, it's possible that accepting a large, high-feerate transaction when the mempool is almost full causes just as many evictions. In general, when traffic is high, mempool churn is probably high as well.",
      "created_at" : "2023-02-02T09:47:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1413436773",
      "id" : 1413436773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585UP1Vl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413436773/reactions"
      },
      "updated_at" : "2023-02-02T09:47:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413436773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I guess another similar question is whether we care about the potential reorg handling slowdown. One scenario is a reorg adding below-minrelayfeerate transactions back to mempool, which we then spend time flushing through `TrimToSize()` (I suppose this is bounded by `MAX_DISCONNECTED_TX_POOL_SIZE` and the fact that it's extremely expensive to mine a bunch of free txns so that other people's reorg processing slows down). During this time, we can't build the next block template. Previously, we basically held off on flushing until the next tx was submitted, and blockmintxfee prevented low-feerate things getting into the template. I'm not sure how long this takes, will have to benchmark.",
      "created_at" : "2023-02-02T09:57:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1413454293",
      "id" : 1413454293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585UP5nV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413454293/reactions"
      },
      "updated_at" : "2023-02-02T09:57:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413454293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Adding a trim-under-min-relay directly in `ActivateBestChainStep()` to evict 0-fee parent dangling in the mempool on an observable oracle like block propagation could break some assumptions for chain of transactions, especially if they're coming from multiple spenders. If you assume a collaborative transaction like the dual-funding specified by BOLTs, where the collaborative transaction can be RBF'ed, an old low-federate transaction could be broadcast with a high-federate package, and if this CPFP replaced, stale the opening of the dual-funded channel. I think an improvement could be at least to make the oracle hard to predict from a spying node (and if so we should probably add a filter to prevent 0-fee evicted probing with `GETDATA`).\r\n\r\nTransaction processing not being computationally cheap has already been raised in the context of https://github.com/bitcoin/bitcoin/pull/21224 As of today, I think we would like to ensure second-layers can broadcast significant quantity of pre-signed transactions in a short period of time (e.g a LSP doing splicing with all its spokes to rebalance channels because network mempools are empty), without interferences with our current DoS limits like `MAX_PEER_TX_ANNOUNCEMENTS`. Or if second-layers nodes should deploy multiple \"transaction-relay\" entry points (e.g connect to multiple full-nodes) to do some kind of initial broadcast load-balancing, that something to be thought of, I believe (and if we should modify our transaction-broadcast backend there). I think we would like to be careful to not introduce exploitable synchronicity issues, e.g in the case of massive redeployment of channel types for Lightning (e.g upgrade from anchor outputs to Taproot outputs on the commitment transaction format), see comment https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1405944407\r\n",
      "created_at" : "2023-02-02T20:24:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1414329466",
      "id" : 1414329466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585UTPR6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1414329466/reactions"
      },
      "updated_at" : "2023-02-02T20:24:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1414329466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard Can you tell if my description is correct? When Alice and Bob are not friends, Bob can waste Alice's resources by:\r\n1. Inviting to open a dual-funded channel below-minrelayfeerate\r\n2. Submit it as a package with high-feerate child (solo-Bob)\r\n3. Replace the high-feerate child with another solo-Bob tx which has nothing to do with the initial dual funding transaction\r\n4. Now the dual funding transaction is sitting alone below-minrelayfeerate and is trimmed from the mempool in the end \r\n5. Alice has to double-spend it or keep trying to get it mined\r\n\r\nAnd before this PR, the transaction would sit in the mempool with below-minrelayfeerate waiting for empty blocks? So that's a problem?\r\n(Apart from that, I'm confused by you saying `collaborative transaction can be RBF'ed` âÂ why does this matter?)",
      "created_at" : "2023-02-06T07:53:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1418651833",
      "id" : 1418651833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585Ujui5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1418651833/reactions"
      },
      "updated_at" : "2023-02-06T07:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1418651833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> an old low-federate transaction could be broadcast with a high-federate package, and if this CPFP replaced, stale the opening of the dual-funded channel.\r\n\r\nI'm also not really understanding the comment. The flushing logic only effects things that can't even be relayed on today's network, assuming no one is touching minrelayfeerate defaults?\r\n\r\nI did some basic benchmarking here on eviction, showing that on my machine at least it takes ~0.3s to evict a \"worst case\" scenario. Do note that it also takes roughly the same amount of time to even build up the mempool, and that's without any script checks. So in some sense it at least isn't obviously the wrong thing to do from a CPU exhaustion perspective. https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1413841878\r\n\r\nOne sanity benchmark I didn't run is the speed of the benchmark if only the child transaction of each package is evicted. I suspect it would be quick, but probably should double check.\r\n\r\nThis PR seems to be simpler from a mental model perspective, at the cost of some additional CPU cycles. It would also allow non-V3 transactions to have more reasonable specs.\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/26933 Seems to be more complex from a mental model perspective, but may be more protective of CPU cycles in certain scenarios with non-privileged mempool usage.\r\n\r\n> One scenario is a reorg adding below-minrelayfeerate transactions back to mempool\r\n\r\nI'd consider this roughly equivalent to a mempool user paying to put things in the mempool, then evicting them in terms of attack cost. Am I thinking about this wrong?\r\n",
      "created_at" : "2023-02-07T15:23:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1420957365",
      "id" : 1420957365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
      "node_id" : "IC_kwDOABII585Usha1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1420957365/reactions"
      },
      "updated_at" : "2023-02-07T15:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1420957365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099920977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099920977"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it would be good to rename this -- previously the tx was definitely being removed, but now the removal is conditional. `candidate` maybe?",
      "commit_id" : "bda9da9ea1a089fea0da63260bbbedd4a631bebc",
      "created_at" : "2023-02-08T10:11:46Z",
      "diff_hunk" : "@@ -1043,17 +1043,23 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099920977",
      "id" : 1099920977,
      "line" : 1049,
      "node_id" : "PRRC_kwDOABII585Bj3ZR",
      "original_commit_id" : "98121c61fb8dcc01c4b00ebb99e0c87053ad025c",
      "original_line" : 1049,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 8,
      "pull_request_review_id" : 1288857205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099920977/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-08T10:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099920977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099928025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099928025"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this would have been slightly clearer to me as:\r\n\r\n```c++\r\nif (removed >= m_min_relay_feerate) {\r\n    if (DynamicMemoryUsage() <= sizelimit) {\r\n        break; // normal exit from loop\r\n    }\r\n\r\n    // only track fee rate for txs with descendant feerate above m_min_relay_feerate\r\n    removed += incr; trackPackageRemoved(removed); mFRR = max(mFRR, removed);\r\n}\r\n```",
      "commit_id" : "bda9da9ea1a089fea0da63260bbbedd4a631bebc",
      "created_at" : "2023-02-08T10:17:46Z",
      "diff_hunk" : "@@ -1043,17 +1043,23 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n+        // Skim away everything paying effectively zero fees, regardless of mempool size.\n+        // Above that feerate, just trim until memory is within limits.\n+        if (removed >= m_min_relay_feerate && DynamicMemoryUsage() <= sizelimit) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n-        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099928025",
      "id" : 1099928025,
      "line" : 1058,
      "node_id" : "PRRC_kwDOABII585Bj5HZ",
      "original_commit_id" : "98121c61fb8dcc01c4b00ebb99e0c87053ad025c",
      "original_line" : 1058,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 21,
      "pull_request_review_id" : 1288857205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099928025/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-08T10:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099928025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099939460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099939460"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If we're concerned about the 2500 tx thing, we could limit that here couldn't we? ie:\r\n\r\n```c++\r\nint low_fee_removed = 0;\r\nwhile (!empty() && low_fee_removed < 100) {\r\n    ...\r\n    if (removed < m_min_relay_feerate && DynamicMemoryUsage() <= sizelimit) {\r\n        ++low_fee_removed;\r\n    }\r\n    ...\r\n}\r\n```",
      "commit_id" : "bda9da9ea1a089fea0da63260bbbedd4a631bebc",
      "created_at" : "2023-02-08T10:27:47Z",
      "diff_hunk" : "@@ -1043,17 +1043,23 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n+        // Skim away everything paying effectively zero fees, regardless of mempool size.\n+        // Above that feerate, just trim until memory is within limits.\n+        if (removed >= m_min_relay_feerate && DynamicMemoryUsage() <= sizelimit) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n-        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27018#discussion_r1099939460",
      "id" : 1099939460,
      "in_reply_to_id" : 1099928025,
      "line" : 1058,
      "node_id" : "PRRC_kwDOABII585Bj76E",
      "original_commit_id" : "98121c61fb8dcc01c4b00ebb99e0c87053ad025c",
      "original_line" : 1058,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 21,
      "pull_request_review_id" : 1288857205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099939460/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-08T10:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1099939460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
