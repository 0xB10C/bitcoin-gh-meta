[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "These commands intentionally lock the wallet (and in the case of `getnewaddress` the script pubkey manager being called) in order that their results are guarenteed to be atomic and correct.\r\n\r\n`listunspent` must lock the wallet so that when it returns your list of unspent utxos these are certain to still be unspent by the time the function returns. In fact it will lock the wallet twice, [once while it fetches all available coins](https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpc/coins.cpp#L640-L641) as outputs, and again [as it parses each output](https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpc/coins.cpp#L644-L727) to provide context on it.\r\n\r\nMy understanding is that `getnewaddress` locks the wallet when generating new addresses to avoid e.g. a race between two calls to fetch a new address which could result in the same address being returned twice (or written to the db multiple times).\r\n\r\nI don't think performing either of these operations (nor `fundrawtransaction`) without blocking is avoidable. The remaining issue therefore is whether any of these operations can be sped up in bitcoin core descriptor wallets, to which I defer to others.\r\n\r\nAs an alternative, perhaps you could consider implementing some client side caching either on the `getnewaddress` or the `listunspent` calls to try and circumvent this?",
      "created_at" : "2023-01-31T00:30:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27002#issuecomment-1409570461",
      "id" : 1409570461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27002",
      "node_id" : "IC_kwDOABII585UBFad",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409570461/reactions"
      },
      "updated_at" : "2023-01-31T00:30:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409570461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@willcl-ark thanks for the quick reply.\r\n\r\nHowever, If I run `getnewaddress` in parallel (e.g. using parallel) it fetches 1000 unique addresses without any issues in less than 5 secs:\r\n\r\ne.g. little script like this\r\n```\r\n#!/bin/bash\r\nWALLET=test\r\nUSER=yyy\r\nPASS=xxx\r\nTHREADS=1000\r\n\r\nif [ -z \"$1\" ]; then\r\n echo \"Usage: `basename $0` [threads]\"\r\n exit 1\r\nfi\r\n\r\nTHREADS=$1\r\nulimit -n 65535\r\n\r\nseq $THREADS|parallel -j$THREADS -n0 \"curl -s --user $USER:$PASS --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \\\"method\\\": \\\"getnewaddress\\\", \\\"params\\\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:18332/wallet/$WALLET\"\r\n```\r\nResults in: \r\n```\r\n$ time ./gen_addresses.sh 1000 >/dev/null\r\nreal\t0m4.495s\r\nuser\t0m4.745s\r\nsys\t0m8.019s\r\n```\r\nSo that makes me wonder why `getnewaddress` isn't blocking fetching another address in parallel, whilst `listunspent` blocks entirety of the wallet.\r\n\r\nHow do I implement client side caching of `getnewaddress` or `listunspent`, if `listunspent` still locks wallet for at least 1 minute? That means at least 1 minute bitcoin wallet won't be able to respond to any other calls.\r\n\r\nCurrently my app is very simple:\r\n* it fetches new address by using `getnewaddress`\r\n* and if the user requests withdrawal it collects UTXO and combines them into transaction\r\n\r\nSo my problem is with 2) as it locks the wallet and 1) stops working resulting in service unavailability.\r\n\r\nOf course the best is to generate addresses completely offline, but I've wanted (for now) to use bitcoin wallet's functionality for that.",
      "created_at" : "2023-01-31T07:49:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27002#issuecomment-1409910146",
      "id" : 1409910146,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27002",
      "node_id" : "IC_kwDOABII585UCYWC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409910146/reactions"
      },
      "updated_at" : "2023-01-31T07:54:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409910146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/104405?v=4",
         "events_url" : "https://api.github.com/users/gituser/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gituser/followers",
         "following_url" : "https://api.github.com/users/gituser/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gituser/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gituser",
         "id" : 104405,
         "login" : "gituser",
         "node_id" : "MDQ6VXNlcjEwNDQwNQ==",
         "organizations_url" : "https://api.github.com/users/gituser/orgs",
         "received_events_url" : "https://api.github.com/users/gituser/received_events",
         "repos_url" : "https://api.github.com/users/gituser/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gituser/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gituser/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gituser"
      }
   }
]
