[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe say more about the concrete use case? This seems similar to bash expanding `abc{d,e}` to `abcd abce`, but bash commands are written by people, while I'd expect descriptor strings to be mostly produced and consumed by software, so on the surface it's not clear who would benefit from this feature.\r\n\r\nAlso it's not clear why the syntax wouldn't be `xpub...{0,1}/*` instead of `xpub...{0/*,1/*}` or if expansions into more than 2 descriptors should be allowed, or if first and second descriptors should always be interpreted as nonchange and change descriptors, respectively.",
      "created_at" : "2019-10-18T16:54:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543834253",
      "id" : 543834253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgzNDI1Mw==",
      "updated_at" : "2019-10-18T16:58:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543834253",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My first question is the same: how is this useful? I can imagine that someone might want to include both an xpub.../0/* and an xpub.../1/* into the same wallet, but I expect you'd want one of them to be public and the other to be change. That makes it hard to merge them, as the changeness information would be in another layer?",
      "created_at" : "2019-10-18T17:20:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543845642",
      "id" : 543845642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzg0NTY0Mg==",
      "updated_at" : "2019-10-18T17:20:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543845642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The specific use cases that was mentioned was for the construction of multisig wallets. The idea was that it would be easier in terms of UI/UX for users to be able to just import one descriptor that specified both the receive and change addresses to be used.\r\n\r\nPerhaps @ghost43 can provide some more insight here.\r\n\r\n> That makes it hard to merge them, as the changeness information would be in another layer?\r\n\r\nI agree that changeness should be another layer. I think they were going to just assume that the `0` path is receive, and `1` is change.\r\n\r\n> Also it's not clear why the syntax wouldn't be `xpub...{0,1}/*` instead of `xpub...{0/*,1/*}`\r\n\r\nI agree that that would be a better syntax. Didn't think of it earlier.\r\n\r\n> or if expansions into more than 2 descriptors should be allowed,\r\n\r\nMy initial thinking was to allow expansion into more than 2. So this could be used for things like multiple BIP 44 accounts in `scantxoutset`.\r\n\r\n> or if first and second descriptors should always be interpreted as nonchange and change descriptors, respectively.\r\n\r\nI'm not sure about how to represent changeness, and I'm not sure that it should be represented in the descriptor layer.\r\n\r\n",
      "created_at" : "2019-10-18T17:59:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543862832",
      "id" : 543862832,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzg2MjgzMg==",
      "updated_at" : "2019-10-18T18:02:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543862832",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I agree that changeness should be another layer. I think they were going to just assume that the 0 path is receive, and 1 is change.\r\n\r\nHmm, what do you expect the semantics to be? Do you literally treat the \"xpub...{0,1}/*\" descriptor as a list of two descriptors, which the layer above needs to deal with? Or do you treat it as a single descriptor which expands to a merging of those two descriptors (e.g. by expanding even indices i as index i/2 of the first one, and odd ones i as index (i-1)/2 of the second one)?\r\n\r\nIf you treat them as two descriptors, arguably you're not extending the descriptor syntax, but instead building a language on top that describes lists of descriptors - something that perhaps won't (or even shouldn't) work in all places descriptors are accepted.\r\n\r\nIf you treat them as a single merged descriptor, the layer above can't see which ones are from 0/* and which ones are from 1/*, and shouldn't treat them non-homogeneously.",
      "created_at" : "2019-10-18T18:17:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543869992",
      "id" : 543869992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzg2OTk5Mg==",
      "updated_at" : "2019-10-18T18:17:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543869992",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I would expect it to be treated as two descriptors.",
      "created_at" : "2019-10-18T18:23:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543872887",
      "id" : 543872887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzg3Mjg4Nw==",
      "updated_at" : "2019-10-18T18:23:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543872887",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The specific use cases that was mentioned was for the construction of multisig wallets. \r\n\r\nThat isn't really a use case description. Is the pair of descriptors handcrafted by a user, copied and pasted somewhere, saved in a text file, transmitted over a wire protocol? I know I have a problem not hating json as much as I'm supposed to, but just for example, what would be the drawbacks of a verbose format like:\r\n\r\n```json\r\n{\r\n  \"payment_descriptor\": \"xpub...0/*\",\r\n  \"change_descriptor\": \"xpub...1/*\"\r\n}\r\n```",
      "created_at" : "2019-10-18T18:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543885039",
      "id" : 543885039,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzg4NTAzOQ==",
      "updated_at" : "2019-10-18T18:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543885039",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "See https://github.com/spesmilo/electrum/issues/5694#issuecomment-543544564 and also https://github.com/spesmilo/electrum/issues/5715 (specifically \"point 1\")\r\n\r\nBasically the actual thing that we would need is a way to represent a cosigner; so at the very least the following:\r\n- master fingerprint\r\n- derivation prefix\r\n- xpub\r\n\r\nAll of which you can already do using script descriptor `KEY` expression.\r\nIt would be really nice however if the `KEY` expression could also contain the derivation suffixes to be used as well. Specifically for Electrum's current HD wallets it would be a `m/0/i` (receive), `m/1/j` (change) hierarchy. To do this you however currently need two `KEY` expressions.\r\nI think basically all light wallets use this hierarchy atm (m/0/i, m/1/j), this is also what BIP44 uses.\r\n\r\nAs detailed in first link above, currently in Electrum when constructing a multisig wallet, cosigners share xpubs with each other; other contextual information such as number of required signers are selected in the GUI. To be able to construct an output script descriptor that describes a multisig where cosigners have key origin information for example, instead of xpubs, we could show `KEY` expressions to cosigners that they would share each other. The issue is HOW the cosigners are supposed to create the script descriptor.\r\n\r\nFor now, we would want to support at least the above described receive/change hierarchy, but with the current `KEY` expression syntax cosigners would need to be shown and then expected to share two of these. \r\n\r\nI know there are some undesirable properties of sharing these instead of the xpubs as now not the whole thing is checksummed, but the script descriptor needs to be constructed **somehow**. When looking at the output descriptors doc, I feel like this point has been considered completely out of scope so far, but it is a real UX issue.",
      "created_at" : "2019-10-18T22:16:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-543977613",
      "id" : 543977613,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Mzk3NzYxMw==",
      "updated_at" : "2019-10-18T22:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543977613",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/29142493?v=4",
         "events_url" : "https://api.github.com/users/SomberNight/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SomberNight/followers",
         "following_url" : "https://api.github.com/users/SomberNight/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SomberNight/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SomberNight",
         "id" : 29142493,
         "login" : "SomberNight",
         "node_id" : "MDQ6VXNlcjI5MTQyNDkz",
         "organizations_url" : "https://api.github.com/users/SomberNight/orgs",
         "received_events_url" : "https://api.github.com/users/SomberNight/received_events",
         "repos_url" : "https://api.github.com/users/SomberNight/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SomberNight/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SomberNight/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SomberNight"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "+1 on @SomberNight's comments.  Collaborative multisig requires exchanging xpubs and then agreeing on how to derive & use addresses (script template, derivation paths, &c.).  If these decisions aren't tracked well, this \"contextual information\" becomes hidden state which frustrates users and developers alike.\r\n\r\nDescriptors are *almost* the perfect way to encode these decisions into a concise, robust, portable format.  The ability to specify multiple \"families\" of addresses for (say) receiving vs. change addresses would be extremely useful.\r\n\r\nOne can argue that multiple descriptors are just as good but practically they lack a shared checksum and aesthetically using to almost identical long strings to represent two related families seems wrong.  Related descriptors are extremely similar and differ merely in one derivation path segment.  It would be more natural for the descriptor definition to allow multiple wildcards `.../*/*` or constructs such as `.../{0,1}/*` to enable this use case.",
      "created_at" : "2019-12-19T03:34:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-567316623",
      "id" : 567316623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NzMxNjYyMw==",
      "updated_at" : "2019-12-19T03:34:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/567316623",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6796?v=4",
         "events_url" : "https://api.github.com/users/dhruvbansal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruvbansal/followers",
         "following_url" : "https://api.github.com/users/dhruvbansal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruvbansal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruvbansal",
         "id" : 6796,
         "login" : "dhruvbansal",
         "node_id" : "MDQ6VXNlcjY3OTY=",
         "organizations_url" : "https://api.github.com/users/dhruvbansal/orgs",
         "received_events_url" : "https://api.github.com/users/dhruvbansal/received_events",
         "repos_url" : "https://api.github.com/users/dhruvbansal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruvbansal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruvbansal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruvbansal"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> It would be useful to express a full wallet of external and change scripts derived from the same xpub as one descriptor. Currently this requires two different descriptors where most of the descriptor is the same but only the derivation path at the end is different. So instead, one descriptor could contain multiple derivation paths following the xpub.\r\n\r\nThis is something we are running into at Yeti, which was seen here https://github.com/bitcoin/bitcoin/issues/20831\r\n\r\nThe use case is that it is much easier to create and backup a descriptor-based multisig wallet if you can do it with a single descriptor rather than two.",
      "created_at" : "2021-01-14T00:28:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-759844288",
      "id" : 759844288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTg0NDI4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T00:28:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759844288",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "In the BitBox02, we have arrived at using one descriptor at the account level. Change and receive addresses (scripts) are simply assumed to be at ./1/* and ./0/*, as derived from the xpubs given in the multisig descriptor.\r\n\r\nWe also register the multisig setup in the device. Having one descriptor correspond to one multisig account makes things easier than to register multiple descriptors (one for receive, one for change), as the user has to verify less data. Backup is also simplified - one descriptor is easier to backup and restore than two.\r\n\r\nSince pretty much every wallet deals with changes and receive addresses in this way, I don't see it as very useful track two separate descriptors, or even to put two separate derivation paths into one descriptor. Sounds easiest to stick to the convention of ./1/* and ./0/* for change and receive addresses.",
      "created_at" : "2021-01-15T10:59:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-760867322",
      "id" : 760867322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDg2NzMyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-15T11:25:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760867322",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1225267?v=4",
         "events_url" : "https://api.github.com/users/benma/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benma/followers",
         "following_url" : "https://api.github.com/users/benma/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benma/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benma",
         "id" : 1225267,
         "login" : "benma",
         "node_id" : "MDQ6VXNlcjEyMjUyNjc=",
         "organizations_url" : "https://api.github.com/users/benma/orgs",
         "received_events_url" : "https://api.github.com/users/benma/received_events",
         "repos_url" : "https://api.github.com/users/benma/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benma/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benma/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benma"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Yes, that sounds great! That would be very helpful for us.\r\nI would definitely support a standard being built around this.",
      "created_at" : "2021-01-16T00:43:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-761275877",
      "id" : 761275877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MTI3NTg3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-16T00:43:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761275877",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Sparrow Wallet does the same, stripping off the `/0/*` and `/1/*` when an output descriptor is pasted in to configure a wallet.\r\n\r\nI appreciate that the Core wallet may need to handle arbitrary output descriptors, but from a user experience POV greater adoption of output descriptors is much easier when a single output descriptor can describe a wallet (consistent with most users expectations).\r\n\r\n\r\n",
      "created_at" : "2021-01-16T06:47:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-761517669",
      "id" : 761517669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MTUxNzY2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-16T06:47:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761517669",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/862166?v=4",
         "events_url" : "https://api.github.com/users/craigraw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/craigraw/followers",
         "following_url" : "https://api.github.com/users/craigraw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/craigraw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/craigraw",
         "id" : 862166,
         "login" : "craigraw",
         "node_id" : "MDQ6VXNlcjg2MjE2Ng==",
         "organizations_url" : "https://api.github.com/users/craigraw/orgs",
         "received_events_url" : "https://api.github.com/users/craigraw/received_events",
         "repos_url" : "https://api.github.com/users/craigraw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/craigraw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/craigraw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/craigraw"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> from a user experience POV greater adoption of output descriptors is much easier when a single output descriptor can describe a wallet (consistent with most users expectations).\r\n\r\nThat could be the default, and allowing arbitrary output descriptors could be under expert options?",
      "created_at" : "2021-01-16T22:44:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-761692005",
      "id" : 761692005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MTY5MjAwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-16T22:44:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761692005",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "This seems to have been NACKd by @sipa [here](https://github.com/bitcoin/bitcoin/issues/21199#issuecomment-780772418)\r\n\r\nBut using a [descriptor template](https://github.com/hugohn/bips/blob/bip-hugonguyen-bsms/bip-hugonguyen-bsms.mediawiki#descriptor-template) allows for the same result, using a different layer, as suggested by Sipa.",
      "created_at" : "2021-05-13T07:14:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-840369451",
      "id" : 840369451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0MDM2OTQ1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-13T07:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840369451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See also BIP 88: https://github.com/bitcoin/bips/blob/master/bip-0088.mediawiki ",
      "created_at" : "2021-06-25T11:52:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-868444673",
      "id" : 868444673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2ODQ0NDY3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-25T11:52:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/868444673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "This can probably be closed now?",
      "created_at" : "2021-06-25T22:10:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-868858159",
      "id" : 868858159,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2ODg1ODE1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-25T22:10:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/868858159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I suggest we leave this open until BIP 88 or something like it is implemented.",
      "created_at" : "2021-06-26T13:52:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-869006409",
      "id" : 869006409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2OTAwNjQwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-26T13:52:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/869006409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "stumbled upon this problem while trying to expose output descriptor in BTCPay.\r\n\r\nFrom UX perspective,  the current situation sucks for a user wanting to import descriptor from wallet A to B, where B only follow deposit/change paths.\r\n\r\n* The user goes into his wallet A, and see two, almost identical output descriptor.\r\n* The user then get confused into which one he should copy/paste to import the other wallet B\r\n* Our solution is to just ignore the deposit/change path and making an error if it is anything else that 0/* or 1/*.\r\n\r\nWhen we expose the descriptors of the wallet, this is also confusing: The user wonder why there is two descriptors, when they imported only one previously.\r\n\r\nI don't think this can be solved by now, we need to live with this issue.",
      "created_at" : "2021-08-04T02:53:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892319777",
      "id" : 892319777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841L7gh",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T02:53:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892319777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another question that was posed to me recently was why do we even have split derivation paths in the first place? It seems to me that there isn't really an advantage to having receiving and change addresses be separated. If anything, it is creating more of a problem because it makes backups harder. Unless there is a strong reason to continue to use separate receiving and change descriptors, I think the entire ecosystem should move away from this separation. That would make this entire issue moot.\r\n\r\nFrom reading BIP 32, it seems like the primary reason for recommending split key chains is to allow for an xpub to be given out to people (for some reason) but still maintain some privacy about funds that were sent to change. I don't think xpubs are shared publicly, and there are known issues with unhardened derivation, so I don't think this is a valid use case anymore.",
      "created_at" : "2021-08-04T03:18:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892329475",
      "id" : 892329475,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841L94D",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T03:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892329475",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "yes, though this is one of those thing integrated already so deeply in software dealing with bitcoin that reversing this recommendation will not be possible anytime soon.",
      "created_at" : "2021-08-04T03:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892336731",
      "id" : 892336731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841L_pb",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T03:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892336731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Some benefits of split key chains that I can think of:\r\n\r\n- It reduces the gap limit of the change chain, which guarantees that you'll at least be able to recover all of your change.\r\n- It helps avoid mixing them up (e.g. using addresses that were previously handed out to people and remained unused as change).\r\n- It makes it easier tell change and receive outputs apart, which can be useful to determine if they're 'unsafe' to spend or not (although they could also be told apart by inspecting the transaction that created the output and checking if any of its inputs are wallet-owned).\r\n\r\nI'm not sure if this makes it worth the hassle, though. OTOH it seems like much of the (user-facing) hassle would be gone if something like BIP 88 allowed specifying multiple descriptors as a single copy-paste-able string.",
      "created_at" : "2021-08-04T03:43:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892337834",
      "id" : 892337834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841L_6q",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T03:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892337834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/877904?v=4",
         "events_url" : "https://api.github.com/users/shesek/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shesek/followers",
         "following_url" : "https://api.github.com/users/shesek/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shesek/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shesek",
         "id" : 877904,
         "login" : "shesek",
         "node_id" : "MDQ6VXNlcjg3NzkwNA==",
         "organizations_url" : "https://api.github.com/users/shesek/orgs",
         "received_events_url" : "https://api.github.com/users/shesek/received_events",
         "repos_url" : "https://api.github.com/users/shesek/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shesek/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shesek/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shesek"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "BIP88 is yet one more standard to show almost the same thing. Damn I hate HD :(",
      "created_at" : "2021-08-04T03:54:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892341083",
      "id" : 892341083,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841MAtb",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T03:54:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892341083",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Damn I hate HD :(\n\nBitcoin developer makes emotional plea to revert to 640x480 video resolution.",
      "created_at" : "2021-08-04T04:05:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892345233",
      "id" : 892345233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841MBuR",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T04:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892345233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> * It reduces the gap limit of the change chain, which guarantees that you'll at least be able to recover all of your change.\r\n\r\nI don't think it has a significant effect on that. Gap limits should already be fairly high anyways.\r\n\r\n> * It helps avoid mixing them up (e.g. using addresses that were previously handed out to people and remained unused as change).\r\n\r\nThat shouldn't ever be a problem because wallets shouldn't ever give out already given out addresses.\r\n\r\nThe only issue is with restoring a backup, but I think a consolidated key chain actually makes that better. It is possible that a user has given out several addresses but were never used. If a backup without the metadata indicating that were restored, then the user could end up giving out those same addresses again. This could occur in both split and consolidated key chain cases. However, in the consolidated case, if the user had made a transaction that had a change output in the time between giving out unused addresses and restoring, then the change address would be marked as used, and that would mark all of the addresses up to that change address as being used, and if those were ones given out but unused, then there is no possibility for the user to accidentally reuse those addresses. With a split key chain, the restored wallet would never know that those addresses had been used already.\r\n\r\n> * It makes it easier tell change and receive outputs apart, which can be useful to determine if they're 'unsafe' to spend or not (although they could also be told apart by inspecting the transaction that created the output and checking if any of its inputs are wallet-owned).\r\n\r\nI think all wallets already have some way to track which addresses are change independent of the derivation path used (or at least I hope they do). So this shouldn't be a problem. Even when restoring a wallet, it is obvious which outputs are change through inspection, and restored wallets already have to be doing that to figure out what index to start new addresses at.\r\n\r\n> I'm not sure if this makes it worth the hassle, though. OTOH it seems like much of the (user-facing) hassle would be gone if something like BIP 88 allowed specifying multiple descriptors as a single copy-paste-able string.\r\n\r\nLooking briefly at BIP 88, it seems like it does basically what we want, so perhaps we should just include that into the descriptor spec?\r\n\r\nFinding a way to represent multiple derivation paths and discouraging use of separate receive and change descriptors aren't mutually exclusive. We could do both.",
      "created_at" : "2021-08-04T04:44:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892358643",
      "id" : 892358643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841ME_z",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T04:44:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892358643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> From UX perspective, the current situation sucks for a user wanting to import descriptor from wallet A to B, where B only follow deposit/change paths.\r\n    The user goes into his wallet A, and see two, almost identical output descriptor.\r\n    The user then get confused into which one he should copy/paste to import the other wallet B   \r\n\r\nTwo descriptors from core wallet returned in `listdescriptors`:\r\n```yaml\r\n    {\r\n      \"desc\": \"wpkh([5a448b3e/84'/1'/0']tpubDDmPGDzxy5QDAKVqnZCuXYqAGxLbgKUD5Dms14Xw7kVaMQ4qvyHTc5Dp59b5MJXXBHGB9UgSdAddKDry7rP9zvBMkHjKRTKxmiy7Q4Hpo2f/0/*)#cdpwktpj\",\r\n      \"timestamp\": 1628031603,\r\n      \"active\": true,\r\n      \"internal\": false,\r\n      \"range\": [\r\n        0,\r\n        999\r\n      ],\r\n      \"next\": 0\r\n    },\r\n    {\r\n      \"desc\": \"wpkh([5a448b3e/84'/1'/0']tpubDDmPGDzxy5QDAKVqnZCuXYqAGxLbgKUD5Dms14Xw7kVaMQ4qvyHTc5Dp59b5MJXXBHGB9UgSdAddKDry7rP9zvBMkHjKRTKxmiy7Q4Hpo2f/1/*)#fey0t732\",\r\n      \"timestamp\": 1628031604,\r\n      \"active\": true,\r\n      \"internal\": true,\r\n      \"range\": [\r\n        0,\r\n        999\r\n      ],\r\n      \"next\": 0\r\n    }\r\n```\r\n@NicolasDorier Maybe below thing can be used in BTCPay and other wallets GUI for better UI/UX using above descriptors which look same:\r\n\r\n\r\n<details>\r\n\r\n<summary>5a..2f/0/*)#cdpwktpj</summary>\r\n\r\n<pre>\r\nwpkh([5a448b3e/84'/1'/0']tpubDDmPGDzxy5QDAKVqnZCuXYqAGxLbgKUD5Dms14Xw7kVaMQ4qvyHTc5Dp59b5MJXXBHGB9UgSdAddKDry7rP9zvBMkHjKRTKxmiy7Q4Hpo2f<b>/0/*)#cdpwktpj</b>\r\n\r\n</pre>\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>5a..2f/1/*)#fey0t732</summary>  \r\n<pre>\r\nwpkh([5a448b3e/84'/1'/0']tpubDDmPGDzxy5QDAKVqnZCuXYqAGxLbgKUD5Dms14Xw7kVaMQ4qvyHTc5Dp59b5MJXXBHGB9UgSdAddKDry7rP9zvBMkHjKRTKxmiy7Q4Hpo2f/<b>1/*)#fey0t732</b>\r\n</pre>\r\n\r\n</details>\r\n\r\n",
      "created_at" : "2021-08-04T04:57:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892362741",
      "id" : 892362741,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841MF_1",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T05:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892362741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I too am a big fan of BIP 88 @dgpv \r\n\r\nI have no opinion currently on discouraging use of separate receive and change descriptors - I'll have to think about that more.\r\n\r\n",
      "created_at" : "2021-08-04T06:02:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892387433",
      "id" : 892387433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841MMBp",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T06:02:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892387433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@achow101 \r\n\r\n> I think all wallets already have some way to track which addresses are change independent of the derivation path used (or at least I hope they do). So this shouldn't be a problem. Even when restoring a wallet, it is obvious which outputs are change through inspection, and restored wallets already have to be doing that to figure out what index to start new addresses at.\r\n\r\nThe BitBoxApp, and most other wallets I looked at (e.g. Electrum), use the derivation path to determine which outputs are change and which aren't. How exactly would it be obvious when restoring a wallet which outputs are change if they are not derived on separate derivation paths?\r\n\r\nKnowing which outputs are change is important for the wallet to function properly, e.g. to display the correct balance.\r\n",
      "created_at" : "2021-08-04T11:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892588323",
      "id" : 892588323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841M9Ej",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T11:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892588323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1225267?v=4",
         "events_url" : "https://api.github.com/users/benma/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benma/followers",
         "following_url" : "https://api.github.com/users/benma/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benma/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benma",
         "id" : 1225267,
         "login" : "benma",
         "node_id" : "MDQ6VXNlcjEyMjUyNjc=",
         "organizations_url" : "https://api.github.com/users/benma/orgs",
         "received_events_url" : "https://api.github.com/users/benma/received_events",
         "repos_url" : "https://api.github.com/users/benma/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benma/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benma/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benma"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@benma - I believe it is possible through \"inspecting the transaction that created the output and checking if any of its inputs are wallet-owned\"\r\n\r\n@achow101:\r\n> However, in the consolidated case, if the user had made a transaction that had a change output in the time between giving out unused addresses and restoring, then the change address would be marked as used\r\n\r\nIf the backup doesn't contain metadata, and the address is unused, how would the wallet know to mark the change address used?\r\n\r\nIf that is the case, I agree consolidating is the way to move forward.\r\n\r\nDoes Bitcoin Core currently track which addresses are change independent of the derivation path?",
      "created_at" : "2021-08-04T17:01:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892821264",
      "id" : 892821264,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841N18Q",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T17:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892821264",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> How exactly would it be obvious when restoring a wallet which outputs are change if they are not derived on separate derivation paths?\r\n\r\nBy observing the transactions it is involved in. If a transaction contains inputs from the wallet, and has an output that belongs to the wallet. then that outputs is change.\r\n\r\n> Knowing which outputs are change is important for the wallet to function properly, e.g. to display the correct balance.\r\n\r\nKnowing whether an output belonging to the wallet is receiving or change is not necessary to calculate the correct balance. It is needed to make transaction history and transaction display understandable to users.\r\n\r\n> If the backup doesn't contain metadata, and the address is unused, how would the wallet know to mark the change address used?\r\n\r\nSince the wallet typically does not give change addresses to the user, the only place they appear is in a transaction. When restoring a backup without metadata, the restore process will observe an address used in an output of a transaction which has inputs that belonged to the wallet. This address is then clearly a change address, and because it appears in a transaction, marked as used.\r\n\r\n> Does Bitcoin Core currently track which addresses are change independent of the derivation path?\r\n\r\nYes. It has always done so, especially because prior to HD, there was no other way.",
      "created_at" : "2021-08-04T17:07:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892825623",
      "id" : 892825623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841N3AX",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T17:08:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892825623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Oh yes, of course, that makes sense.\r\n\r\nStrong Concept ACK for BIP 88 and consolidating use of change and receive paths, although the later should probably be discussed on the ML.",
      "created_at" : "2021-08-04T18:58:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-892895979",
      "id" : 892895979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841OILr",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892895979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "#19856 is one case where having split derivation paths is useful. In that issue, the user is making send-to-self transactions with the wallet loaded simultaneously in another node. Those send-to-self txs are detected as change so the txs are not listed. But with split derivation paths (or rather more generally, different descriptors for receiving and change), it becomes possible to distinguish send-to-self from change. This scenario only applies to restored wallets, and wallets loaded in multiple places (which is inadvisable).",
      "created_at" : "2021-08-09T19:53:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895496976",
      "id" : 895496976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841YDMQ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T19:53:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895496976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thinking on BIP 88 (and this idea in general), it seems like having multiple possible derivation paths starts to break down once you get past the basic change and not change aspects, and especially when there are multiple keys and different derivation path patterns.\r\n\r\nIn a single key case, this is pretty obvious, it just becomes a lot of descriptors. So something like\r\n\r\n    wpkh(xpub.../{0-10}/{0-1}/*\r\n\r\nbecomes\r\n\r\n    wpkh(xpub.../0/0/*)\r\n    wpkh(xpub.../0/1/*)\r\n    wpkh(xpub.../1/0/*)\r\n    wpkh(xpub.../1/1/*)\r\n    wpkh(xpub.../2/0/*)\r\n    wpkh(xpub.../2/1/*)\r\n    ... etc.\r\n\r\nBut if there are multiple keys, such as in multisigs, it gets a bit more complicated. For example\r\n\r\n    multi(2, xpub.../{0-1}/*, xpub.../{0-1}/*)\r\n\r\nTo fit with the expectation of change and not change, this would become\r\n\r\n    multi(2, xpub.../0/*, xpub.../0/*)\r\n    multi(2, xpub.../1/*, xpub.../1/*)\r\n\r\nrather than\r\n\r\n    multi(2, xpub.../0/*, xpub.../0/*)\r\n    multi(2, xpub.../0/*, xpub.../1/*)\r\n    multi(2, xpub.../1/*, xpub.../0/*)\r\n    multi(2, xpub.../1/*, xpub.../1/*)\r\n\r\nBut maintaining this pattern for change and not change doesn't quite work if there are multiple of these multipath expressions as BIP 88 allows. For example, how would\r\n\r\n    multi(2,xpub.../48h/0h/{0,1}/*,xpub.../48h/{0-10}/{0,1})`\r\n\r\nbe expanded?\r\n\r\nSo I think perhaps this is not a tenable solution, or it may result in expansions that contain unexpected descriptors. I suppose one method is to just limit this syntax to single key descriptors, but then it isn't quite as useful, and I would prefer to have Key expressions which don't have special syntaxes that only work for certain descriptors.\r\n\r\n***\r\n\r\nInstead of a generic solution like BIP 88, we could implement a specific solution for just the receive and change issue. Perhaps a special path index `{r,c}` that is allowed to appear once per path. `r` is the path to use for receiving addresses, and `c` is the path to use for change addresses. This works for descriptors with multiple keys as this would become two descriptors, one with only the `r` indexes, and one with only the `c` indexes. Since only one is allowed per path specifier, there is no issue with multiple path specifiers as BIP 88 would have. In the common case, it would still be written as `{0,1}`, but other derivation paths could be used for `r` and `c` if desired.\r\n\r\nFor example:\r\n\r\n    multi(2, xpub.../{0,1}/*, xpub.../{2,3}/*)\r\n\r\nwould become\r\n\r\n    multi(2, xpub.../0/*, xpub.../2/*)\r\n    multi(2, xpub.../1/*, xpub.../3/*)",
      "created_at" : "2021-08-09T20:22:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895515768",
      "id" : 895515768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841YHx4",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T20:37:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895515768",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> #19856 is one case where having split derivation paths is useful. \r\n\r\nInteresting.  So there is no way to examine the transaction during restore and differentiate b/w send to self and change? (without separate descriptors). Could this be marked by metadata?\r\n\r\nRe: BIP88:\r\n\r\nI don't believe multisigs would have multi-account path expressions (at least when BIP88 is used with [BIP87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki) and [BIP129](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki)) - or atleast that was my understanding.\r\n \r\nHow would `wsh(sortedmulti(2,[xfpForA/87'/0'/0']XpubA/{0,1}/*,[xfpForB/87'/0'/0']XpubB/{0,1}/*))` work if one of the participants had a BIP88 account range of `{0,10}`?  I don't believe BIP129 would currently support multiple accounts per signer, as it would require multiple signatures per key record.\r\n\r\nI like your `{r,c}` proposal, because then it is explicit about how something like your example of :\r\n\r\n`multi(2, xpub.../{0-1}/*, xpub.../{0-1}/*)` is to be expanded\r\n\r\n",
      "created_at" : "2021-08-09T21:56:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895577114",
      "id" : 895577114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841YWwa",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T21:56:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895577114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Interesting. So there is no way to examine the transaction during restore and differentiate b/w send to self and change? (without separate descriptors).\r\n\r\nThe only case where I think it would be obvious is when the transaction does not have any change. So a tx that spends inputs from the wallet and creates a single output also owned by the wallet can be assumed to be a send to self. But if there is a change (so 2 outputs to self), then we cannot distinguish which is for change and which is the send to self without checking which descriptor was used to generate each address.\r\n\r\n> Could this be marked by metadata?\r\n\r\nYes, and it is. But that doesn't apply when restoring a wallet.\r\n\r\n> Re: BIP88:\r\n> \r\n> I don't believe multisigs would have multi-account path expressions (at least when BIP88 is used with [BIP87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki) and [BIP129](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki)) - or atleast that was my understanding.\r\n> \r\n> How would `wsh(sortedmulti(2,[xfpForA/87'/0'/0']XpubA/{0,1}/*,[xfpForB/87'/0'/0']XpubB/{0,1}/*))` work if one of the participants had a BIP88 account range of `{0,10}`? I don't believe BIP129 would currently support multiple accounts per signer, as it would require multiple signatures per key record.\r\n\r\nWithin the framework of existing BIPs, this scenario is probably not possible. But we can't just think within what already exists. We have to think about all of the other weird stuff that could happen. So that means considering what could happen if a descriptor had multiple multi-path specifiers with multiple keys in the descriptor. That would still be BIP 88 valid, and I don't think the way to expand that would work well with what people actually want.\r\n",
      "created_at" : "2021-08-09T23:00:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895605632",
      "id" : 895605632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841YduA",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T23:00:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895605632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> The only case where I think it would be obvious is when the transaction does not have any change\r\n\r\nGreat point.\r\n\r\n> Yes, and it is. But that doesn't apply when restoring a wallet.\r\n\r\nIf the wallet is restored via descriptor, but if it restored via wallet.dat, it should (and is how documentation recommends) https://github.com/bitcoin/bitcoin/pull/22523\r\n\r\n> we can't just think within what already exists. We have to think about all of the other weird stuff that could happen\r\n\r\nMakes sense, thank you for the explanation.\r\n",
      "created_at" : "2021-08-10T00:57:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895649499",
      "id" : 895649499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841Yobb",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-10T00:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895649499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Perhaps a special path index {r,c} that is allowed to appear once per path.\r\n\r\nNote that if such path is also a valid BIP88 path, the receive index would need to always be the lower one, as indexes should come in increasing order in the index range. You would not be able to express 'receive index 1, change index 0', for example, because receive index would be larger than change index",
      "created_at" : "2021-08-10T06:45:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895771811",
      "id" : 895771811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17190",
      "node_id" : "IC_kwDOABII5841ZGSj",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-10T06:46:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895771811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43240089?v=4",
         "events_url" : "https://api.github.com/users/dgpv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgpv/followers",
         "following_url" : "https://api.github.com/users/dgpv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgpv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgpv",
         "id" : 43240089,
         "login" : "dgpv",
         "node_id" : "MDQ6VXNlcjQzMjQwMDg5",
         "organizations_url" : "https://api.github.com/users/dgpv/orgs",
         "received_events_url" : "https://api.github.com/users/dgpv/received_events",
         "repos_url" : "https://api.github.com/users/dgpv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgpv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgpv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgpv"
      }
   }
]
