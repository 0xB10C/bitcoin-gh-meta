[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-09-16T06:05:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531651205",
      "id" : 531651205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMTY1MTIwNQ==",
      "updated_at" : "2019-09-16T11:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531651205",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice work! If you have the time: consider tackling the remaining `test_deterministic_coverage.sh` suppressions in follow-up PRs. Deterministic line coverage would be great to have! :)",
      "created_at" : "2019-09-16T10:13:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531716989",
      "id" : 531716989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMTcxNjk4OQ==",
      "updated_at" : "2019-09-16T10:13:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531716989",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324598079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could use `std::numeric_limits<uint64_t>::max()` instead of `LARGE_NUMBER`? :)",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T10:15:45Z",
      "diff_hunk" : "@@ -391,7 +418,14 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     // ... and 50 that depend on other orphans:\n     for (int i = 0; i < 50; i++)\n     {\n-        CTransactionRef txPrev = RandomOrphan();\n+        CTransactionRef txPrev;\n+        if (0 == i) {\n+            // This block makes sure that the condition \"if (it == mapOrphanTransactions.end())\" in OrphanByIndex() gets called at least once.\n+            // Otherwise test coverage is non-deterministic.\n+            txPrev = OrphanByIndex(ArithToUint256(arith_uint256(LARGE_NUMBER)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598079",
      "id" : 324598079,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDU5ODA3OQ==",
      "original_commit_id" : "bf2637cc321b911959278837b657a1750194cb8c",
      "original_position" : 69,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 288528958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324598079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324598676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Could avoid non-repo-idiomatic yoda notation :)",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T10:17:27Z",
      "diff_hunk" : "@@ -391,7 +418,14 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     // ... and 50 that depend on other orphans:\n     for (int i = 0; i < 50; i++)\n     {\n-        CTransactionRef txPrev = RandomOrphan();\n+        CTransactionRef txPrev;\n+        if (0 == i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598676",
      "id" : 324598676,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDU5ODY3Ng==",
      "original_commit_id" : "bf2637cc321b911959278837b657a1750194cb8c",
      "original_position" : 66,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 288529722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324598676",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Concept ACK\r\n> \r\n> Nice work! If you have the time: consider tackling the remaining `test_deterministic_coverage.sh` suppressions in follow-up PRs. Deterministic line coverage would be great to have! :)\r\n\r\nThanks for the review! I addressed your remarks in ffd3953. I indeed plan to tackle those in my free time.",
      "created_at" : "2019-09-16T13:20:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531773138",
      "id" : 531773138,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMTc3MzEzOA==",
      "updated_at" : "2019-09-16T13:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531773138",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324672285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324672285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like the wrong location for this. I fail to understand what CPubKey has to do with the orphan map or even DoS?!",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T13:24:56Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324672285",
      "id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDY3MjI4NQ==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 288624423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324672285",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324686941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324686941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review! While trying to understand the non-determinism in the coverage, I used the script `contrib/devtools/test_deterministic_coverage.sh`, which uses `gcovr` to show the diff in which lines were and which ones were not executed between two runs with different coverage. \r\n\r\nOver multiple runs of the script, the only two places where the coverage was non-deterministic were: \r\n\r\n- the function `RandomOrphan` in denialofservice_tests.cpp \r\n- lines 135-136, 147-148 in pubkey.cpp, in the function `ecdsa_signature_parse_der_lax`. \r\n\r\nThe latter function is called implicitly from the test `DoS_mapOrphans` via `SignSignature` (`SignSignature` => `ProduceSignature` => `VerifyScript` => `EvalScript` => `CheckSig` => `VerifySignature` => `Verify` => `ecdsa_signature_parse_der_lax`). The private key which generates the signatures in the test `DoS_mapOrphans` is randomly generated, so the `R` and `S` values of the ECDSA signatures for the inputs of the dependant orphans most of the time do not have leading zeros. The lines 135-136, 147-148 run only when there are leading zeroes in `R`, `S`, respectively. This results in those lines sometimes running and sometimes not. \r\n\r\nMy proposed solution is to create a constant signature with leading zeroes in both `R` and `S` and force the function `ecdsa_signature_parse_der_lax` to run on that signature by calling `CPubkey::Verify` on that signature and a corresponding pubkey and hash. This forces the lines 135-136, 147-148 in pubkey.cpp to always run at least once, resulting in deterministic test coverage.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T13:52:10Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324686941",
      "id" : 324686941,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDY4Njk0MQ==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 288643551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324686941",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324692872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324692872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see. A smaller alternative would be to set the key to a constant?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T14:03:07Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324692872",
      "id" : 324692872,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDY5Mjg3Mg==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 288651530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324692872",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324713835"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324713835"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That could be nice actually if it's acceptable. I didn't want to do it initially because I didn't want to modify the test too much and restricted myself to 'parasitic' changes.\r\nOn the other hand - if I'm not mistaken, this will not work directly, since, if we have transaction B which is using as an input an output from transaction A, part of the data used to calculate the hash of that input for B (this hash is then signed to produce `R` and `S`) is the hash of the transaction A, which contains a random element (the initial non-dependant 50 orphans are created with `tx.vin[0].prevout.hash = InsecureRand256()`), so `R` and `S` would again be random.\r\n\r\nI guess I could use an engineered, non-random value for `tx.vin[0].prevout.hash` for one of the orphans along with an engineered fixed key. But then again, this test would loose the fuzzing feature of making a different key every run.\r\n\r\nWhat do you think?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T14:41:02Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324713835",
      "id" : 324713835,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDcxMzgzNQ==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 288679280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324713835",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324719530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324719530"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`InsecureRand256` is an alias for `g_insecure_rand_ctx.rand256()`, so it can be made deterministic with a call to `SeedInsecureRand(/* deterministic */ true)`.\r\n\r\n> this test would loose the fuzzing feature of making a different key every run.\r\n\r\nThis \"fuzzing feature\" is useless, as a failure could not be reproduced (when it occurs) and thus not debugged, nor fixed.\r\n\r\nWhen fuzzing is desired, the seed would have to be written to a file or stdout.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-16T14:50:51Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324719530",
      "id" : 324719530,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDcxOTUzMA==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 288686677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324719530",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325090401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325090401"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see. Then I can just set a seed which guarantees the widest coverage in the beginning of the test and that should take care of the non-determinism in both `RandomOrphan` and `ecdsa_signature_parse_der_lax`, making the code much simpler.\r\n\r\nStill, I would argue that it's best to leave the fuzzing and write the seed to a file. That would result in an a better coverage over a long period of time. There might be some branches that run very rarely and setting the seed to a constant would prevent them from ever running in the future in the context of this test, reducing it's long-term coverage. As an example the conditions on lines 151, 157, 160 in pubkey.cpp, in `ecdsa_signature_parse_der_lax` may evaluate to false or true. Although their evaluation was deterministic throughout the 1000+ runs I tried and I haven't gone in-depth to try and understand whether they can at all run under this test's conditions or whether they run extremely rarely, but the latter option can be true for other branches I haven't checked.\r\nUnless handling artifacts created by tests involves a lot of overhead, the only disadvantage I see to leaving the fuzzing is more lines of code in the test, some of it being irrelevant to the functionality of the test itself, but I think that is taken care of by a detailed comment explaining the logic for the extra code.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-17T10:20:42Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325090401",
      "id" : 325090401,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTA5MDQwMQ==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289160952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325090401",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325104042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325104042"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, up to you if you feel strongly. My opinion is that we shouldn't mix unit tests with fuzz tests, which are designed and compiled separately, see https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-17T10:56:20Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325104042",
      "id" : 325104042,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTEwNDA0Mg==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289178852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325104042",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325492476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325492476"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree that fuzz tests should be separate and I wasn't familiar with `src/test/fuzz`. Thanks for pointing me there. However, reading through https://github.com/bitcoin/bitcoin/pull/16320, there are some comments about the positive value of non-determinism in tests (I was trying to understand if the direction is to completely eliminate non-determinism). I think that an effort should be made when writing new tests towards determinism and separating the fuzzy parts into the fuzz framework, but since this test already has non-determinism, I think I will stick with writing the seed to stdout. Separating the fuzzy from the non-fuzzy parts should perhaps be a part of another pull request.\r\nThat brings the question - there are a lot of tests that use random values. I completely agree that randomness in tests is practically useless unless the seed is known. What do you think about setting and writing the seed to stdout as part of the `BasicTestingSetup` fixture so that seeds for all tests are known? This would also prevent code duplication when multiple tests require this.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-18T05:54:03Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325492476",
      "id" : 325492476,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQ5MjQ3Ng==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289682474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325492476",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325599568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325599568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We already use `BOOST_TEST_RANDOM` https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html, which is logged. So might as well use that as the seed for our test rng?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-18T10:29:15Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325599568",
      "id" : 325599568,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTU5OTU2OA==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289819288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325599568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325697287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325697287"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds good. Do you suggest seeding the rng with `BOOST_TEST_RANDOM` in `BasicTestingSetup` or only in this test for now? I'm thinking the latter, since otherwise it changes the behaviour of all tests that use random numbers when running them locally and it would require adjusting the test execution scripts, as now the seed must be provided externally. For example, `test_deterministic_coverage.sh` will always show deterministic coverage when run locally unless we provide a different value of `BOOST_TEST_RANDOM` every time it's run. I feel handling those issues would be out of the scope of this pull request and may be done separately?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-18T14:08:47Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325697287",
      "id" : 325697287,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTY5NzI4Nw==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289947887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325697287",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325702113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325702113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> test_deterministic_coverage.sh will always show deterministic coverage when run locally unless we provide a different value of BOOST_TEST_RANDOM every time it's run. I feel handling those issues would be out of the scope of this pull request and may be done separately?\r\n\r\nI think this is the way the script should work (report non-determinism even when the rng seed is pinned to a constant). As suggested by you this should be done in a separate pull request. Are you interested in working on this as well? Otherwise I will create an issue for others to pick up.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-18T14:16:58Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325702113",
      "id" : 325702113,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTcwMjExMw==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289954077,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325702113",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325725391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325725391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, that sounds interesting, since IMO recording the seed for any test that uses random values is important. I'll check whether pinning the seed still results in non determinism between runs and based on that I'll see what can be done about it and about setting the seed to `BOOST_TEST_RANDOM` in `BasicTestingSetup`.\r\nFor now, I guess setting the seed to `BOOST_TEST_RANDOM` just inside this test would be enough?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-18T14:55:44Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325725391",
      "id" : 325725391,
      "in_reply_to_id" : 324672285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTcyNTM5MQ==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 289984858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325725391",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Could somebody explain why it's not allowed to include `boost/test/unit_test_parameters.hpp`?\r\n```\r\nA new Boost dependency in the form of \"boost/test/unit_test_parameters.hpp\" appears to have been introduced:\r\n\r\nsrc/test/denialofservice_tests.cpp:#include <boost/test/unit_test_parameters.hpp>\r\n\r\n^---- failure generated from test/lint/lint-includes.sh\r\n```\r\nI need it to access the `BOOST_TEST_RANDOM` parameter from within a test. Is there a better way to do it?",
      "created_at" : "2019-09-20T11:48:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533520776",
      "id" : 533520776,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzUyMDc3Ng==",
      "updated_at" : "2019-09-20T11:48:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533520776",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I guess, you'd have to add it like this:\r\n\r\n```diff\r\ndiff --git a/test/lint/lint-includes.sh b/test/lint/lint-includes.sh\r\nindex d27e45a23f..c9e1d57ee1 100755\r\n--- a/test/lint/lint-includes.sh\r\n+++ b/test/lint/lint-includes.sh\r\n@@ -68,6 +68,7 @@ EXPECTED_BOOST_INCLUDES=(\r\n     boost/signals2/last_value.hpp\r\n     boost/signals2/signal.hpp\r\n     boost/test/unit_test.hpp\r\n+    boost/test/unit_test_parameters.hpp\r\n     boost/thread.hpp\r\n     boost/thread/condition_variable.hpp\r\n     boost/thread/mutex.hpp\r\n",
      "created_at" : "2019-09-20T12:05:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533525660",
      "id" : 533525660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzUyNTY2MA==",
      "updated_at" : "2019-09-20T12:05:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533525660",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326598869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326598869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess you could move this logic into a helper `SeedInsecureRandWithBoostRandomSeed`?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-20T12:12:22Z",
      "diff_hunk" : "@@ -393,6 +394,8 @@ static void ForceCoverageInPubKeyVerify()\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n {\n+    SeedInsecureRand(ArithToUint256(arith_uint256(boost::unit_test::runtime_config::get<unsigned>( boost::unit_test::runtime_config::btrt_random_seed ))));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326598869",
      "id" : 326598869,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjU5ODg2OQ==",
      "original_commit_id" : "bae45e8ab484002451c84c5e0d1ec57f38def48e",
      "original_position" : 12,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 291123230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326598869",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326675636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326675636"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not sure how stable that boost interface is. They seem to change it every couple of versions",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-20T15:11:08Z",
      "diff_hunk" : "@@ -43,6 +45,16 @@ static inline void SeedInsecureRand(bool deterministic = false)\n     g_insecure_rand_ctx = FastRandomContext(deterministic);\n }\n \n+static inline void SeedInsecureRand(const uint256& seed)\n+{\n+    g_insecure_rand_ctx = FastRandomContext(seed);\n+}\n+\n+static inline void SeedInsecureRandWithBoostRandomSeed()\n+{\n+    SeedInsecureRand(ArithToUint256(arith_uint256(boost::unit_test::runtime_config::get<unsigned>( boost::unit_test::runtime_config::btrt_random_seed ))));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326675636",
      "id" : 326675636,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjY3NTYzNg==",
      "original_commit_id" : "f2e7f8b02b49ca747158b8373f6ea90de9833b38",
      "original_position" : 24,
      "path" : "src/test/setup_common.h",
      "position" : null,
      "pull_request_review_id" : 291226952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326675636",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326857875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326857875"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a better way to access this value? Maybe directly access the environment variable using std::getenv?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-09-21T12:07:22Z",
      "diff_hunk" : "@@ -43,6 +45,16 @@ static inline void SeedInsecureRand(bool deterministic = false)\n     g_insecure_rand_ctx = FastRandomContext(deterministic);\n }\n \n+static inline void SeedInsecureRand(const uint256& seed)\n+{\n+    g_insecure_rand_ctx = FastRandomContext(seed);\n+}\n+\n+static inline void SeedInsecureRandWithBoostRandomSeed()\n+{\n+    SeedInsecureRand(ArithToUint256(arith_uint256(boost::unit_test::runtime_config::get<unsigned>( boost::unit_test::runtime_config::btrt_random_seed ))));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326857875",
      "id" : 326857875,
      "in_reply_to_id" : 326675636,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjg1Nzg3NQ==",
      "original_commit_id" : "f2e7f8b02b49ca747158b8373f6ea90de9833b38",
      "original_position" : 24,
      "path" : "src/test/setup_common.h",
      "position" : null,
      "pull_request_review_id" : 291463001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-09-22T16:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326857875",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke I see that the changes I made regarding setting the seed to `BOOST_TEST_RANDOM` are causing some trouble - some Travis builds fail while succeeding for me locally so I'm not sure how to debug that as well as the fact that the boost interface might change and I also feel that this is going a bit out of scope for this pull request which aims to make DoS_mapOrphans have deterministic coverage.\r\nWould it be ok if I leave the test with a random, unknown seed for now (that was the case before anyway) and just leave the changes that make the coverage deterministic for this test? I will then attempt to tackle the problem of setting the seed to `BOOST_TEST_RANDOM` in `BasicTestingSetup` in a separate pull request?\r\nOverall, I think this would still add positive value, as this test would have deterministic coverage, as opposed to before, with all else being equal.",
      "created_at" : "2019-09-22T07:17:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533856395",
      "id" : 533856395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzg1NjM5NQ==",
      "updated_at" : "2019-09-22T07:17:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533856395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK ffd3953757051ac50cea4129edbd9e9d5be39d0f -- diff looks correct",
      "created_at" : "2019-09-22T19:24:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533910107",
      "id" : 533910107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzkxMDEwNw==",
      "updated_at" : "2019-09-22T19:24:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533910107",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "How can I remove the \"Waiting for author\" label?",
      "created_at" : "2019-09-24T12:00:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-534525858",
      "id" : 534525858,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNDUyNTg1OA==",
      "updated_at" : "2019-09-24T12:00:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534525858",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Have you seen #16978, which should fix the reproducibility issue",
      "created_at" : "2019-10-03T19:45:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-538098710",
      "id" : 538098710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16878",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzODA5ODcxMA==",
      "updated_at" : "2019-10-03T19:45:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/538098710",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331220386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331220386"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Still don't like this, maybe it can be removed after https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-538098710 ?",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-10-03T19:46:58Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331220386",
      "id" : 331220386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIyMDM4Ng==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 297108577,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-10-03T19:46:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331220386",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331741093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331741093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually, I ran the `DoS_mapOrphans` test to test the initial version of #16978 and even though the seed was the same between different runs, I still got non-deterministic behaviour for this test. The non-determinism originated from the size of the `mapOrphanTransactions` map. It was different for each run. I didn't dive into the source code to understand why exactly that is but I suspect that it's due to concurrency issues, since the seed was fixed between runs (I printed some `uint256`'s generated by `InsecureRand256()` to make sure and they were the same between runs),  unless there is another, differently seeded RNG used in the process of populating `mapOrphanTransactions`. In any case, if I understand correctly, #16978  is a great solution for setting the seed externally and for logging it, but it won't remove the non-determinism between test runs of this particular test, since I suspect that the non-determinism in this test arises due to concurrency and not due to seeding of an RNG. Though I agree that the fix is ugly, this is unfortunately the only way I can see of fixing the non-deterministic coverage issue for this particular test.",
      "commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "created_at" : "2019-10-05T09:50:45Z",
      "diff_hunk" : "@@ -356,16 +358,39 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+static CTransactionRef OrphanByIndex(const uint256& orphan_index)\n {\n     std::map<uint256, COrphanTx>::iterator it;\n     LOCK2(cs_main, g_cs_orphans);\n-    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    it = mapOrphanTransactions.lower_bound(orphan_index);\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n }\n \n+static CTransactionRef RandomOrphan()\n+{\n+    return OrphanByIndex(InsecureRand256());\n+}\n+\n+/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n+ * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n+ * would otherwise not. This function is called at the end of the DoS_mapOrphans test to force deterministic coverage.\n+ */\n+static void ForceCoverageInPubKeyVerify()\n+{\n+    std::string coverage_pubkey_str(\"\\x03\\x1c\\xef\\xd3\\xfa\\x1e\\x91\\xd2\\x24\\x7e\\x9d\\x74\\xa1\\xf4\\x31\\x27\\x6e\\xe4\\x74\"\n+        \"\\x5b\\xaf\\x73\\x1d\\xb0\\x0c\\x07\\xa0\\x78\\x81\\xa5\\xca\\x4c\\xc9\", 33);\n+    CPubKey coverage_pubkey(coverage_pubkey_str.begin(), coverage_pubkey_str.end());\n+    std::string vch_sig_str(\"\\x30\\x44\\x02\\x20\\x00\\xa8\\x9f\\x92\\xf4\\x47\\x6e\\x3f\\x0b\\x1f\\x58\\x9f\\x6b\\x3b\\xb9\\xae\\xc0\"\n+        \"\\x99\\x84\\x82\\x22\\x40\\x68\\xf5\\x12\\xf7\\x43\\xbe\\xa7\\x54\\x87\\x7c\\x02\\x20\\x00\\xa1\\x09\\x98\\x60\\x32\\x32\\x71\\x34\"\n+        \"\\xad\\xf6\\x6a\\x9c\\x2f\\xd9\\xd4\\xf3\\xcc\\xf4\\xc8\\x4c\\x38\\xbb\\xd0\\xac\\xde\\xa7\\x3d\\x66\\x28\\xa0\\xe0\", 70);\n+    uint256 hash;\n+    hash.SetHex(std::string(\"6af516422fef8a745aff6acdcc84076c77fb2ecd72bd5711df301230ac58fdd5\"));\n+\n+    coverage_pubkey.Verify(hash, std::vector<unsigned char>(vch_sig_str.begin(), vch_sig_str.end()));\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331741093",
      "id" : 331741093,
      "in_reply_to_id" : 331220386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTc0MTA5Mw==",
      "original_commit_id" : "ffd3953757051ac50cea4129edbd9e9d5be39d0f",
      "original_position" : 46,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 297784620,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16878",
      "updated_at" : "2019-10-05T09:50:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331741093",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/5347350?v=4",
         "events_url" : "https://api.github.com/users/davereikher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/davereikher/followers",
         "following_url" : "https://api.github.com/users/davereikher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/davereikher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/davereikher",
         "id" : 5347350,
         "login" : "davereikher",
         "node_id" : "MDQ6VXNlcjUzNDczNTA=",
         "organizations_url" : "https://api.github.com/users/davereikher/orgs",
         "received_events_url" : "https://api.github.com/users/davereikher/received_events",
         "repos_url" : "https://api.github.com/users/davereikher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/davereikher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/davereikher"
      }
   }
]
