[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16722](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16722.html) (build: Disable warnings for leveldb subtree by default by hebasto)\n* [#16710](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16710.html) (build: Enable -Wsuggest-override if available by hebasto)\n* [#16367](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16367.html) (Multiprocess build support by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-09-08T21:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529242026",
      "id" : 529242026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTI0MjAyNg==",
      "updated_at" : "2019-10-08T10:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529242026",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: really like these ideas/proof-of-concepts on how to improve block/block header transport diversity. Thanks for working on this @TheBlueMatt!\r\n\r\nThis \"headers over DNS\" idea could be combined with DNS over HTTPS (DoH) using widely used DoH servers.\r\n\r\nDNS lookups are trivial to block/filter for a MITM adversary but if the user is instead doing lookups using DoH with a widely used DoH-server (think Mozilla, Google or CloudFlare or similar large scale operation) -- that would be hard to null route/block without upsetting non-Bitcoin users.",
      "created_at" : "2019-09-08T21:28:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529243342",
      "id" : 529243342,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTI0MzM0Mg==",
      "updated_at" : "2019-09-10T04:43:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529243342",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Interesting idea!\r\nI think this needs to be disabled when `-proxy` is in use, as the DNS lookups would bypass the proxy.",
      "created_at" : "2019-09-09T14:14:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529495285",
      "id" : 529495285,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTQ5NTI4NQ==",
      "updated_at" : "2019-09-09T14:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529495285",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tried to test this, but doesn't look like `bitcoinheaders.net` provides headers after 60000, is this still in progress?\r\n````sh\r\n$ host 59999.5.bitcoinheaders.net\r\n59999.5.bitcoinheaders.net has IPv6 address 2001:53ef:f60e:4c5c:670f:1c16:2d0a:300\r\n...\r\n$ host 60000.6.bitcoinheaders.net\r\nHost 60000.6.bitcoinheaders.net not found: 2(SERVFAIL)\r\n````\r\nCan bind (or DNS, for that matter) handle huge numbers of hosts like this?",
      "created_at" : "2019-09-09T17:06:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529575269",
      "id" : 529575269,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTU3NTI2OQ==",
      "updated_at" : "2019-09-09T17:06:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529575269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, I'm currently updating the zones. Bind can't handle huge zones so well hence why it got split up into chunks of 10k, and I'm currently slowly churning through dnssec signing for the larger zones. They should be up in a few hours.",
      "created_at" : "2019-09-09T17:30:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529585032",
      "id" : 529585032,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTU4NTAzMg==",
      "updated_at" : "2019-09-09T17:30:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529585032",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Should be good now. Turns out bind's inline dnssec signing has some hangs on big zones, worked fine once I manually signed them.\n\n> On Sep 9, 2019, at 13:30, Matt Corallo <notifications@github.com> wrote:\n> \n> Right, I'm currently updating the zones. Bind can't handle huge zones so well hence why it got split up into chunks of 10k, and I'm currently slowly churning through dnssec signing for the larger zones. They should be up in a few hours.\n> \n> â\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
      "created_at" : "2019-09-09T22:04:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529685351",
      "id" : 529685351,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTY4NTM1MQ==",
      "updated_at" : "2019-09-09T22:04:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529685351",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "No longer based on #16762 (since this is simpler, so a better first-land), plus the build issue was resolved (thanks to @theuni!). Should be ready for review/merge now!",
      "created_at" : "2019-09-30T23:48:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-536797693",
      "id" : 536797693,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNjc5NzY5Mw==",
      "updated_at" : "2019-09-30T23:48:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536797693",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Discussing with @theuni, there might be the possibility to simplify this even further by dropping the use of `Cargo`.",
      "created_at" : "2019-10-05T11:06:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-538640176",
      "id" : 538640176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzODY0MDE3Ng==",
      "updated_at" : "2019-10-05T11:06:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/538640176",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332487022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332487022"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You use the pointer without checking for nullness, I know that you already asserted that on the C++ side, but I think we should be consistent on which side of the FFI checks for null. (and if the rust side then using `NonNull` everywhere forces you to check)",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-08T12:39:09Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+use std::ffi::c_void;\n+extern \"C\" {\n+    pub fn rusty_IsInitialBlockDownload() -> bool;\n+    pub fn rusty_ShutdownRequested() -> bool;\n+\n+    fn rusty_ProcessNewBlock(blockdata: *const u8, blockdatalen: usize, blockindex_requested: *const c_void);\n+\n+    /// Connects count headers serialized in a block of memory, each stride bytes from each other.\n+    /// Returns the last header which was connected, if any (or NULL).\n+    fn rusty_ConnectHeaders(headers: *const u8, stride: usize, count: usize) -> *const c_void;\n+\n+    // Utilities to work with CBlockIndex pointers. Wrapped in a safe wrapper below.\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the current tip.\n+    /// Guaranteed to never be NULL (but may be genesis)\n+    fn rusty_GetChainTip() -> *const c_void;\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the genesis block.\n+    /// Guaranteed to never be NULL\n+    fn rusty_GetGenesisIndex() -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Finds a CBlockIndex* for a given block hash, or NULL if none is found\n+    fn rusty_HashToIndex(hash: *const u8) -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Gets the height of a given CBlockIndex* pointer\n+    fn rusty_IndexToHeight(index: *const c_void) -> i32;\n+\n+    /// Gets the hash of a given CBlockIndex* pointer\n+    fn rusty_IndexToHash(index: *const c_void) -> *const u8;\n+}\n+\n+/// Connects the given array of (sorted, in chain order) headers (in serialized, 80-byte form).\n+/// Returns the last header which was connected, if any.\n+pub fn connect_headers_flat_bytes(headers: &[u8]) -> Option<BlockIndex> {\n+    if headers.len() % 80 != 0 { return None; }\n+    if headers.is_empty() { return None; }\n+    let index = unsafe { rusty_ConnectHeaders(headers.as_ptr(), 80, headers.len() / 80) };\n+    if index.is_null() { None } else { Some(BlockIndex { index }) }\n+}\n+\n+/// Processes a new block, in serialized form.\n+/// blockindex_requested_by_state shouild be set *only* if the given BlockIndex was provided by\n+/// BlockProviderState::get_next_block_to_download(), and may be set to None always.\n+pub fn connect_block(blockdata: &[u8], blockindex_requested_by_state: Option<BlockIndex>) {\n+    let blockindex = match blockindex_requested_by_state { Some(index) => index.index, None => std::ptr::null(), };\n+    unsafe {\n+        rusty_ProcessNewBlock(blockdata.as_ptr(), blockdata.len(), blockindex);\n+    }\n+}\n+\n+#[derive(PartialEq, Clone, Copy)]\n+pub struct BlockIndex {\n+    index: *const c_void,\n+}\n+\n+impl BlockIndex {\n+    pub fn tip() -> Self {\n+        Self {\n+            index: unsafe { rusty_GetChainTip() },\n+        }\n+    }\n+\n+    #[allow(dead_code)]\n+    pub fn get_from_hash(hash: &[u8; 32]) -> Option<Self> {\n+        let index = unsafe { rusty_HashToIndex(hash.as_ptr()) };\n+        if index.is_null() {\n+            None\n+        } else {\n+            Some(Self { index })\n+        }\n+    }\n+\n+    pub fn genesis() -> Self {\n+        Self {\n+            index: unsafe { rusty_GetGenesisIndex() },\n+        }\n+    }\n+\n+    #[allow(dead_code)]\n+    pub fn height(&self) -> i32 {\n+        unsafe { rusty_IndexToHeight(self.index) }\n+    }\n+\n+    pub fn hash(&self) -> [u8; 32] {\n+        let hashptr = unsafe { rusty_IndexToHash(self.index) };\n+        let mut res = [0u8; 32];\n+        unsafe { std::ptr::copy(hashptr, res.as_mut_ptr(), 32) };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332487022",
      "id" : 332487022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjQ4NzAyMg==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 89,
      "path" : "src/rusty/src/bridge.rs",
      "position" : 94,
      "pull_request_review_id" : 298730345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332487022",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332493772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332493772"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you add a comment on what this sort is doing/for?",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-08T12:54:35Z",
      "diff_hunk" : "@@ -0,0 +1,114 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332493772",
      "id" : 332493772,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjQ5Mzc3Mg==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 16,
      "path" : "src/rusty/src/dns_headers.rs",
      "position" : 24,
      "pull_request_review_id" : 298730345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332493772",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332497060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332497060"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Check for nullness?",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-08T13:01:08Z",
      "diff_hunk" : "@@ -0,0 +1,114 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))\n+    });\n+\n+    let mut offs = 0; // in bytes * 2\n+    'for_ips: for ip in ips {\n+        for i in 1..14*2 {\n+            if i % 2 == 1 {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0x0f) >> 0;\n+            } else {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0xf0) >> 4;\n+            }\n+            if offs % 2 == 0 {\n+                header[offs/2] <<= 4;\n+            }\n+            offs += 1;\n+            if offs == 80*2 {\n+                break 'for_ips;\n+            }\n+        }\n+    }\n+    header\n+}\n+\n+#[test]\n+fn test_map_addrs() {\n+    use std::str::FromStr;\n+\n+    let mut ips = Vec::new();\n+    // The genesis header:\n+    ips.push(Ipv6Addr::from_str(\"2001:5a29:ab5f:49ff:ff00:1d1d:ac2b:7c00\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:41bc:3888:a513:23a9:fb8a:a4b1:e5e4\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:3a7b:12b2:7ac7:2c3e:6776:8f61:7fc8\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:10::\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:2000::3:ba3e:dfd7\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:1000::\").unwrap());\n+\n+    assert_eq!(&map_addrs_to_header(&mut ips)[..],\n+        &[0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32, 0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a, 0x29, 0xab, 0x5f, 0x49, 0xff, 0xff, 0x0, 0x1d, 0x1d, 0xac, 0x2b, 0x7c][..]);\n+}\n+\n+static THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+#[no_mangle]\n+pub extern \"C\" fn init_fetch_dns_headers(domain: *const c_char) -> bool {\n+    let domain_str: String = match unsafe { CStr::from_ptr(domain) }.to_str() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332497060",
      "id" : 332497060,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjQ5NzA2MA==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 60,
      "path" : "src/rusty/src/dns_headers.rs",
      "position" : 68,
      "pull_request_review_id" : 298730345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332497060",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332498919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332498919"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could this also panic somehow? (it calls `atomic_xadd_acqrel` and I can't find the source code for it)",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-08T13:04:59Z",
      "diff_hunk" : "@@ -0,0 +1,114 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))\n+    });\n+\n+    let mut offs = 0; // in bytes * 2\n+    'for_ips: for ip in ips {\n+        for i in 1..14*2 {\n+            if i % 2 == 1 {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0x0f) >> 0;\n+            } else {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0xf0) >> 4;\n+            }\n+            if offs % 2 == 0 {\n+                header[offs/2] <<= 4;\n+            }\n+            offs += 1;\n+            if offs == 80*2 {\n+                break 'for_ips;\n+            }\n+        }\n+    }\n+    header\n+}\n+\n+#[test]\n+fn test_map_addrs() {\n+    use std::str::FromStr;\n+\n+    let mut ips = Vec::new();\n+    // The genesis header:\n+    ips.push(Ipv6Addr::from_str(\"2001:5a29:ab5f:49ff:ff00:1d1d:ac2b:7c00\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:41bc:3888:a513:23a9:fb8a:a4b1:e5e4\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:3a7b:12b2:7ac7:2c3e:6776:8f61:7fc8\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:10::\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:2000::3:ba3e:dfd7\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:1000::\").unwrap());\n+\n+    assert_eq!(&map_addrs_to_header(&mut ips)[..],\n+        &[0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32, 0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a, 0x29, 0xab, 0x5f, 0x49, 0xff, 0xff, 0x0, 0x1d, 0x1d, 0xac, 0x2b, 0x7c][..]);\n+}\n+\n+static THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+#[no_mangle]\n+pub extern \"C\" fn init_fetch_dns_headers(domain: *const c_char) -> bool {\n+    let domain_str: String = match unsafe { CStr::from_ptr(domain) }.to_str() {\n+        Ok(r) => r.to_string(),\n+        Err(_) => return false,\n+    };\n+    std::thread::spawn(move || {\n+        // Always catch panics so that even if we have some bug in our parser we don't take the\n+        // rest of Bitcoin Core down with us:\n+        THREAD_COUNT.fetch_add(1, Ordering::AcqRel);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332498919",
      "id" : 332498919,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjQ5ODkxOQ==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 67,
      "path" : "src/rusty/src/dns_headers.rs",
      "position" : 75,
      "pull_request_review_id" : 298730345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332498919",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332506754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332506754"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: *should",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-08T13:21:03Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+use std::ffi::c_void;\n+extern \"C\" {\n+    pub fn rusty_IsInitialBlockDownload() -> bool;\n+    pub fn rusty_ShutdownRequested() -> bool;\n+\n+    fn rusty_ProcessNewBlock(blockdata: *const u8, blockdatalen: usize, blockindex_requested: *const c_void);\n+\n+    /// Connects count headers serialized in a block of memory, each stride bytes from each other.\n+    /// Returns the last header which was connected, if any (or NULL).\n+    fn rusty_ConnectHeaders(headers: *const u8, stride: usize, count: usize) -> *const c_void;\n+\n+    // Utilities to work with CBlockIndex pointers. Wrapped in a safe wrapper below.\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the current tip.\n+    /// Guaranteed to never be NULL (but may be genesis)\n+    fn rusty_GetChainTip() -> *const c_void;\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the genesis block.\n+    /// Guaranteed to never be NULL\n+    fn rusty_GetGenesisIndex() -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Finds a CBlockIndex* for a given block hash, or NULL if none is found\n+    fn rusty_HashToIndex(hash: *const u8) -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Gets the height of a given CBlockIndex* pointer\n+    fn rusty_IndexToHeight(index: *const c_void) -> i32;\n+\n+    /// Gets the hash of a given CBlockIndex* pointer\n+    fn rusty_IndexToHash(index: *const c_void) -> *const u8;\n+}\n+\n+/// Connects the given array of (sorted, in chain order) headers (in serialized, 80-byte form).\n+/// Returns the last header which was connected, if any.\n+pub fn connect_headers_flat_bytes(headers: &[u8]) -> Option<BlockIndex> {\n+    if headers.len() % 80 != 0 { return None; }\n+    if headers.is_empty() { return None; }\n+    let index = unsafe { rusty_ConnectHeaders(headers.as_ptr(), 80, headers.len() / 80) };\n+    if index.is_null() { None } else { Some(BlockIndex { index }) }\n+}\n+\n+/// Processes a new block, in serialized form.\n+/// blockindex_requested_by_state shouild be set *only* if the given BlockIndex was provided by",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332506754",
      "id" : 332506754,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjUwNjc1NA==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 44,
      "path" : "src/rusty/src/bridge.rs",
      "position" : null,
      "pull_request_review_id" : 298730345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332506754",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Personally I really like https://doc.rust-lang.org/std/ptr/struct.NonNull.html as it gives a little bit more compile time assurance (requires you to check for nullness and after you checked you easily know you don't need to check anymore)\r\n\r\nEdit: I'm actually not sure anymore. Because with NonNull it's hard to identify const VS mut pointers.",
      "created_at" : "2019-10-08T14:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-539546642",
      "id" : 539546642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzOTU0NjY0Mg==",
      "updated_at" : "2019-10-08T15:04:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539546642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "None of the travis jobs built this, nor gitian",
      "created_at" : "2019-10-10T19:59:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540760657",
      "id" : 540760657,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDc2MDY1Nw==",
      "updated_at" : "2019-10-10T19:59:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540760657",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333748767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333748767"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added an if is_null() { unreachable!(); } which I think is the right approach - it clearly isn't allowed to be null, but its safe and will panic inside rust.",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-10T21:44:44Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+use std::ffi::c_void;\n+extern \"C\" {\n+    pub fn rusty_IsInitialBlockDownload() -> bool;\n+    pub fn rusty_ShutdownRequested() -> bool;\n+\n+    fn rusty_ProcessNewBlock(blockdata: *const u8, blockdatalen: usize, blockindex_requested: *const c_void);\n+\n+    /// Connects count headers serialized in a block of memory, each stride bytes from each other.\n+    /// Returns the last header which was connected, if any (or NULL).\n+    fn rusty_ConnectHeaders(headers: *const u8, stride: usize, count: usize) -> *const c_void;\n+\n+    // Utilities to work with CBlockIndex pointers. Wrapped in a safe wrapper below.\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the current tip.\n+    /// Guaranteed to never be NULL (but may be genesis)\n+    fn rusty_GetChainTip() -> *const c_void;\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the genesis block.\n+    /// Guaranteed to never be NULL\n+    fn rusty_GetGenesisIndex() -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Finds a CBlockIndex* for a given block hash, or NULL if none is found\n+    fn rusty_HashToIndex(hash: *const u8) -> *const c_void;\n+\n+    #[allow(dead_code)]\n+    /// Gets the height of a given CBlockIndex* pointer\n+    fn rusty_IndexToHeight(index: *const c_void) -> i32;\n+\n+    /// Gets the hash of a given CBlockIndex* pointer\n+    fn rusty_IndexToHash(index: *const c_void) -> *const u8;\n+}\n+\n+/// Connects the given array of (sorted, in chain order) headers (in serialized, 80-byte form).\n+/// Returns the last header which was connected, if any.\n+pub fn connect_headers_flat_bytes(headers: &[u8]) -> Option<BlockIndex> {\n+    if headers.len() % 80 != 0 { return None; }\n+    if headers.is_empty() { return None; }\n+    let index = unsafe { rusty_ConnectHeaders(headers.as_ptr(), 80, headers.len() / 80) };\n+    if index.is_null() { None } else { Some(BlockIndex { index }) }\n+}\n+\n+/// Processes a new block, in serialized form.\n+/// blockindex_requested_by_state shouild be set *only* if the given BlockIndex was provided by\n+/// BlockProviderState::get_next_block_to_download(), and may be set to None always.\n+pub fn connect_block(blockdata: &[u8], blockindex_requested_by_state: Option<BlockIndex>) {\n+    let blockindex = match blockindex_requested_by_state { Some(index) => index.index, None => std::ptr::null(), };\n+    unsafe {\n+        rusty_ProcessNewBlock(blockdata.as_ptr(), blockdata.len(), blockindex);\n+    }\n+}\n+\n+#[derive(PartialEq, Clone, Copy)]\n+pub struct BlockIndex {\n+    index: *const c_void,\n+}\n+\n+impl BlockIndex {\n+    pub fn tip() -> Self {\n+        Self {\n+            index: unsafe { rusty_GetChainTip() },\n+        }\n+    }\n+\n+    #[allow(dead_code)]\n+    pub fn get_from_hash(hash: &[u8; 32]) -> Option<Self> {\n+        let index = unsafe { rusty_HashToIndex(hash.as_ptr()) };\n+        if index.is_null() {\n+            None\n+        } else {\n+            Some(Self { index })\n+        }\n+    }\n+\n+    pub fn genesis() -> Self {\n+        Self {\n+            index: unsafe { rusty_GetGenesisIndex() },\n+        }\n+    }\n+\n+    #[allow(dead_code)]\n+    pub fn height(&self) -> i32 {\n+        unsafe { rusty_IndexToHeight(self.index) }\n+    }\n+\n+    pub fn hash(&self) -> [u8; 32] {\n+        let hashptr = unsafe { rusty_IndexToHash(self.index) };\n+        let mut res = [0u8; 32];\n+        unsafe { std::ptr::copy(hashptr, res.as_mut_ptr(), 32) };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333748767",
      "id" : 333748767,
      "in_reply_to_id" : 332487022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzc0ODc2Nw==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 89,
      "path" : "src/rusty/src/bridge.rs",
      "position" : 94,
      "pull_request_review_id" : 300369718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333748767",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333750198"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I dont think so? Certainly in practice it can't panic since it just compiles down to a few instructions, but the docs even say it wraps, which seems like the only type of panic I could imagine.",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-10T21:49:17Z",
      "diff_hunk" : "@@ -0,0 +1,114 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))\n+    });\n+\n+    let mut offs = 0; // in bytes * 2\n+    'for_ips: for ip in ips {\n+        for i in 1..14*2 {\n+            if i % 2 == 1 {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0x0f) >> 0;\n+            } else {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0xf0) >> 4;\n+            }\n+            if offs % 2 == 0 {\n+                header[offs/2] <<= 4;\n+            }\n+            offs += 1;\n+            if offs == 80*2 {\n+                break 'for_ips;\n+            }\n+        }\n+    }\n+    header\n+}\n+\n+#[test]\n+fn test_map_addrs() {\n+    use std::str::FromStr;\n+\n+    let mut ips = Vec::new();\n+    // The genesis header:\n+    ips.push(Ipv6Addr::from_str(\"2001:5a29:ab5f:49ff:ff00:1d1d:ac2b:7c00\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:41bc:3888:a513:23a9:fb8a:a4b1:e5e4\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:3a7b:12b2:7ac7:2c3e:6776:8f61:7fc8\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:10::\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:2000::3:ba3e:dfd7\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:1000::\").unwrap());\n+\n+    assert_eq!(&map_addrs_to_header(&mut ips)[..],\n+        &[0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32, 0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a, 0x29, 0xab, 0x5f, 0x49, 0xff, 0xff, 0x0, 0x1d, 0x1d, 0xac, 0x2b, 0x7c][..]);\n+}\n+\n+static THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+#[no_mangle]\n+pub extern \"C\" fn init_fetch_dns_headers(domain: *const c_char) -> bool {\n+    let domain_str: String = match unsafe { CStr::from_ptr(domain) }.to_str() {\n+        Ok(r) => r.to_string(),\n+        Err(_) => return false,\n+    };\n+    std::thread::spawn(move || {\n+        // Always catch panics so that even if we have some bug in our parser we don't take the\n+        // rest of Bitcoin Core down with us:\n+        THREAD_COUNT.fetch_add(1, Ordering::AcqRel);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750198",
      "id" : 333750198,
      "in_reply_to_id" : 332498919,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzc1MDE5OA==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 67,
      "path" : "src/rusty/src/dns_headers.rs",
      "position" : 75,
      "pull_request_review_id" : 300371495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333750198",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333750445"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Meh? I mean its called during init from C++, it would be kinda hard to get a bug here.",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-10T21:50:02Z",
      "diff_hunk" : "@@ -0,0 +1,114 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))\n+    });\n+\n+    let mut offs = 0; // in bytes * 2\n+    'for_ips: for ip in ips {\n+        for i in 1..14*2 {\n+            if i % 2 == 1 {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0x0f) >> 0;\n+            } else {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0xf0) >> 4;\n+            }\n+            if offs % 2 == 0 {\n+                header[offs/2] <<= 4;\n+            }\n+            offs += 1;\n+            if offs == 80*2 {\n+                break 'for_ips;\n+            }\n+        }\n+    }\n+    header\n+}\n+\n+#[test]\n+fn test_map_addrs() {\n+    use std::str::FromStr;\n+\n+    let mut ips = Vec::new();\n+    // The genesis header:\n+    ips.push(Ipv6Addr::from_str(\"2001:5a29:ab5f:49ff:ff00:1d1d:ac2b:7c00\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:41bc:3888:a513:23a9:fb8a:a4b1:e5e4\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:3a7b:12b2:7ac7:2c3e:6776:8f61:7fc8\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:10::\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:2000::3:ba3e:dfd7\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:1000::\").unwrap());\n+\n+    assert_eq!(&map_addrs_to_header(&mut ips)[..],\n+        &[0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32, 0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a, 0x29, 0xab, 0x5f, 0x49, 0xff, 0xff, 0x0, 0x1d, 0x1d, 0xac, 0x2b, 0x7c][..]);\n+}\n+\n+static THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+#[no_mangle]\n+pub extern \"C\" fn init_fetch_dns_headers(domain: *const c_char) -> bool {\n+    let domain_str: String = match unsafe { CStr::from_ptr(domain) }.to_str() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750445",
      "id" : 333750445,
      "in_reply_to_id" : 332497060,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzc1MDQ0NQ==",
      "original_commit_id" : "a4b948b5d105cdfd58a159f5c008ddfc28c16068",
      "original_position" : 60,
      "path" : "src/rusty/src/dns_headers.rs",
      "position" : 68,
      "pull_request_review_id" : 300371808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-10T22:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333750445",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Should be run in travis now, but waiting to see it run.",
      "created_at" : "2019-10-10T22:43:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540828817",
      "id" : 540828817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDgyODgxNw==",
      "updated_at" : "2019-10-10T22:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540828817",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cool, looks like the travis changes successfully ran the in-rust tests:\r\n\r\n```\r\nrunning 1 test\r\n\r\ntest dns_headers::test_map_addrs ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```",
      "created_at" : "2019-10-10T23:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540833632",
      "id" : 540833632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDgzMzYzMg==",
      "updated_at" : "2019-10-10T23:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540833632",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333896217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333896217"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I feel like Core is an end product and thus should commit this (as opposed to libraries). This ensures this project can't be targeted by managers of dependent crates.",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-11T09:06:54Z",
      "diff_hunk" : "@@ -137,3 +137,7 @@ db4/\n osx_volname\n dist/\n *.background.tiff\n+\n+# Rust\n+src/rusty/Cargo.lock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333896217",
      "id" : 333896217,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzg5NjIxNw==",
      "original_commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "original_position" : 6,
      "path" : ".gitignore",
      "position" : 6,
      "pull_request_review_id" : 300557522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-11T09:06:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333896217",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/853468?v=4",
         "events_url" : "https://api.github.com/users/stevenroose/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stevenroose/followers",
         "following_url" : "https://api.github.com/users/stevenroose/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stevenroose/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stevenroose",
         "id" : 853468,
         "login" : "stevenroose",
         "node_id" : "MDQ6VXNlcjg1MzQ2OA==",
         "organizations_url" : "https://api.github.com/users/stevenroose/orgs",
         "received_events_url" : "https://api.github.com/users/stevenroose/received_events",
         "repos_url" : "https://api.github.com/users/stevenroose/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stevenroose/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stevenroose/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stevenroose"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333960506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333960506"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We've dropped using Cargo entirely now, so this line can probably go away.",
      "commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "created_at" : "2019-10-11T12:13:25Z",
      "diff_hunk" : "@@ -137,3 +137,7 @@ db4/\n osx_volname\n dist/\n *.background.tiff\n+\n+# Rust\n+src/rusty/Cargo.lock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333960506",
      "id" : 333960506,
      "in_reply_to_id" : 333896217,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzk2MDUwNg==",
      "original_commit_id" : "129880fcd8c3d9c88cab6919a468a24f8df722c0",
      "original_position" : 6,
      "path" : ".gitignore",
      "position" : 6,
      "pull_request_review_id" : 300643291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16834",
      "updated_at" : "2019-10-11T12:13:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333960506",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
