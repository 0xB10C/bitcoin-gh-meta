[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128332983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128332983"
         }
      },
      "body" : "keypoolemin seems misspelled",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T18:43:31Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128332983",
      "id" : 128332983,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 16,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51003203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128332983",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "There really needs to be some sort of recourse presented to the user upon shutdown.",
      "created_at" : "2017-07-19T20:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316500515",
      "id" : 316500515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-19T20:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316500515",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128363814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128363814"
         }
      },
      "body" : "On test failure happening this line, I think the reason is that encryptwallet generates an entirely new HD master key, so `addr_enc_oldpool` and `addr_enc_extpool` come from a new HD master key which is not part of \"hd.bak\"\r\n\r\nRestoring \"hd.enc.bak\" instead of \"hd.bak\" makes this check pass: https://github.com/ryanofsky/bitcoin/commit/93349ad5d915ee152a1a84920f18cbe0cab8b036",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T20:52:12Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]\n+\n+    def run_test(self):\n+        tmpdir = self.options.tmpdir\n+\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Make backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\")\n+\n+        self.log.info(\"Generate addresses and send funds to addresses in the keypool and extended keypool\")\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        for _ in range(90):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(20):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/1'\")\n+\n+        rawch = self.nodes[1].getrawchangeaddress()\n+        assert_equal(self.nodes[1].validateaddress(rawch)['hdkeypath'], \"m/0'/1'/0'\")\n+\n+        # Send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        # self.nodes[0].sendtoaddress(addr, 1)\n+\n+        # n0addr = self.nodes[0].getnewaddress()\n+        # txdata = self.nodes[0].createrawtransaction([], {rawch: 2.0, n0addr: 3.0})\n+\n+        # txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        # txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        # self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        # self.sync_all()\n+        # self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 15)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128363814",
      "id" : 128363814,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 78,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51037483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128363814",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128368066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128368066"
         }
      },
      "body" : "Call seems unnecessary since keypool variable isn't used.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:10:17Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128368066",
      "id" : 128368066,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 134,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128368066",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128371350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128371350"
         }
      },
      "body" : "FWIW, suggested more detailed wording for the warning message here: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115049299",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:24:22Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128371350",
      "id" : 128371350,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128371350",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128372070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128372070"
         }
      },
      "body" : "Suggested more detailed wording for of this warning, too: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115052129",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:27:38Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128372070",
      "id" : 128372070,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 217,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128372070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128374259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128374259"
         }
      },
      "body" : "I don't see any drawbacks to dropping `DEFAULT_KEYPOOL_MIN` condition here and just treating  keypool_min like a normal value the user can control. Keeping this condition might make sense if the `&&` were `||` (to make warning more paranoid), but currently it seems senseless.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:37:20Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128374259",
      "id" : 128374259,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 216,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128374259",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375131"
         }
      },
      "body" : "Thank you for this insight! Yes - that's what was causing the test to fail.\r\n\r\nI've made some progress with the test. I've pushed what I've got so far, and hope to finish it off tomorrow morning.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:41:24Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]\n+\n+    def run_test(self):\n+        tmpdir = self.options.tmpdir\n+\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Make backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\")\n+\n+        self.log.info(\"Generate addresses and send funds to addresses in the keypool and extended keypool\")\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        for _ in range(90):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(20):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/1'\")\n+\n+        rawch = self.nodes[1].getrawchangeaddress()\n+        assert_equal(self.nodes[1].validateaddress(rawch)['hdkeypath'], \"m/0'/1'/0'\")\n+\n+        # Send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        # self.nodes[0].sendtoaddress(addr, 1)\n+\n+        # n0addr = self.nodes[0].getnewaddress()\n+        # txdata = self.nodes[0].createrawtransaction([], {rawch: 2.0, n0addr: 3.0})\n+\n+        # txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        # txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        # self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        # self.sync_all()\n+        # self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 15)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375131",
      "id" : 128375131,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 78,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51049789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375131",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375201"
         }
      },
      "body" : "Static is a little unusual here, maybe drop it to avoid adding symbols to the binary.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:41:42Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375201",
      "id" : 128375201,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375201",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128377560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128377560"
         }
      },
      "body" : "I'm not 100% clear on this, but if this is an hd wallet, but not an hd-split wallet should we only be checking setExternalKeyPool here because setInternalKeyPool will be empty? See\r\nhttps://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.cpp#L3202",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T21:52:13Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128377560",
      "id" : 128377560,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 80,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128377560",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128380261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128380261"
         }
      },
      "body" : "It seems like this code would more efficient and maybe simpler if instead of making a set of CKeyID's here, we made a map from CKeyID -> (keypool_index, is_internal) and passed it into MarkReserveKeysAsUsed, so the first two loops in that function could be removed.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T22:05:31Z",
      "diff_hunk" : "@@ -1004,6 +1037,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128380261",
      "id" : 128380261,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 57,
      "path" : "src/wallet/wallet.cpp",
      "position" : 57,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128380261",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128381474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128381474"
         }
      },
      "body" : "@sipa's comment about only topping up hd key pools would seem to apply here and maybe to CheckKeypoolMinSize: https://github.com/bitcoin/bitcoin/pull/10240#pullrequestreview-49644483",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T22:12:46Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {\n+                    throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+                }\n+\n+                KeepKey(id);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128381474",
      "id" : 128381474,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 144,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128381474",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128382731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128382731"
         }
      },
      "body" : "Maybe use `index` instead of `id` here and other places to distinguish from pool indices from key ids.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-19T22:18:51Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128382731",
      "id" : 128382731,
      "original_commit_id" : "7f518efcf3d685c24eb870a738f89d15fde418b9",
      "original_position" : 110,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128382731",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545110"
         }
      },
      "body" : "Yes, you're right that this would be much more efficient. However, `GetAllReserveKeys()` is also called elsewhere, which would also need to be modified to accept a map, so I'd prefer not to change it as part of this PR.\r\n\r\nThis can be fixed in a follow-up PR unless you think the performance in `MarkReserveKeysAsUsed()` is unacceptable.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:15:05Z",
      "diff_hunk" : "@@ -1004,6 +1037,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545110",
      "id" : 128545110,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 57,
      "path" : "src/wallet/wallet.cpp",
      "position" : 57,
      "pull_request_review_id" : 51235622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545110",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545184"
         }
      },
      "body" : "I think you're right. Fixed",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:15:19Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545184",
      "id" : 128545184,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 80,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545184",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545209"
         }
      },
      "body" : "yup",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:15:24Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545209",
      "id" : 128545209,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545209",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545225"
         }
      },
      "body" : "done",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:15:29Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545225",
      "id" : 128545225,
      "original_commit_id" : "7f518efcf3d685c24eb870a738f89d15fde418b9",
      "original_position" : 110,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545225",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545266"
         }
      },
      "body" : "removed",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:15:37Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545266",
      "id" : 128545266,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 134,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545478"
         }
      },
      "body" : "Yes. Applies here. I don't think I need to change `CheckKeypoolMinSize()` though. The node should only be shutdown for HD wallets.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:16:24Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {\n+                    throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+                }\n+\n+                KeepKey(id);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545478",
      "id" : 128545478,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 144,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545478",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545561"
         }
      },
      "body" : "Updated. Let me know what you think of the new text.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:16:42Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545561",
      "id" : 128545561,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545561",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545597"
         }
      },
      "body" : "yes - fixed",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:16:49Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545597",
      "id" : 128545597,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 216,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545597",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545616"
         }
      },
      "body" : "Updated. Let me know what you think of the new text.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T15:16:53Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545616",
      "id" : 128545616,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 217,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T15:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545616",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Thanks for the review @ryanofsky . I've addressed all of your concerns except the `GetAllReserveKeys()` refactor which can be done later.\r\n\r\nAll the changes are in separate fixup commits which can be squashed later.",
      "created_at" : "2017-07-20T15:18:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736430",
      "id" : 316736430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T15:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316736430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Test is fixed. It required #10703 since the test involves node1 emitting warnings to stderr.",
      "created_at" : "2017-07-20T15:18:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736706",
      "id" : 316736706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T15:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316736706",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128562939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128562939"
         }
      },
      "body" : "We need to hold the wallet lock here or we fail the assertion at wallet/wallet.cpp:830 in  `CanSupportFeature`.",
      "commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "created_at" : "2017-07-20T16:18:27Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"\n+                                    \"derived keys your wallet may not detect transactions involving those keys. You should manually top-up your wallet keypool.\")));\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128562939",
      "id" : 128562939,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 218,
      "path" : "src/wallet/wallet.cpp",
      "position" : 218,
      "pull_request_review_id" : 51255272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-20T16:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128562939",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
