[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128332983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128332983"
         }
      },
      "body" : "keypoolemin seems misspelled",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T18:43:31Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128332983",
      "id" : 128332983,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 16,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51003203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128332983",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "There really needs to be some sort of recourse presented to the user upon shutdown.",
      "created_at" : "2017-07-19T20:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316500515",
      "id" : 316500515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-19T20:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316500515",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128363814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128363814"
         }
      },
      "body" : "On test failure happening this line, I think the reason is that encryptwallet generates an entirely new HD master key, so `addr_enc_oldpool` and `addr_enc_extpool` come from a new HD master key which is not part of \"hd.bak\"\r\n\r\nRestoring \"hd.enc.bak\" instead of \"hd.bak\" makes this check pass: https://github.com/ryanofsky/bitcoin/commit/93349ad5d915ee152a1a84920f18cbe0cab8b036",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T20:52:12Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]\n+\n+    def run_test(self):\n+        tmpdir = self.options.tmpdir\n+\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Make backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\")\n+\n+        self.log.info(\"Generate addresses and send funds to addresses in the keypool and extended keypool\")\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        for _ in range(90):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(20):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/1'\")\n+\n+        rawch = self.nodes[1].getrawchangeaddress()\n+        assert_equal(self.nodes[1].validateaddress(rawch)['hdkeypath'], \"m/0'/1'/0'\")\n+\n+        # Send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        # self.nodes[0].sendtoaddress(addr, 1)\n+\n+        # n0addr = self.nodes[0].getnewaddress()\n+        # txdata = self.nodes[0].createrawtransaction([], {rawch: 2.0, n0addr: 3.0})\n+\n+        # txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        # txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        # self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        # self.sync_all()\n+        # self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 15)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128363814",
      "id" : 128363814,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 78,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51037483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128363814",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128368066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128368066"
         }
      },
      "body" : "Call seems unnecessary since keypool variable isn't used.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:10:17Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128368066",
      "id" : 128368066,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 134,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128368066",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128371350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128371350"
         }
      },
      "body" : "FWIW, suggested more detailed wording for the warning message here: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115049299",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:24:22Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128371350",
      "id" : 128371350,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128371350",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128372070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128372070"
         }
      },
      "body" : "Suggested more detailed wording for of this warning, too: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115052129",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:27:38Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128372070",
      "id" : 128372070,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 217,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128372070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128374259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128374259"
         }
      },
      "body" : "I don't see any drawbacks to dropping `DEFAULT_KEYPOOL_MIN` condition here and just treating  keypool_min like a normal value the user can control. Keeping this condition might make sense if the `&&` were `||` (to make warning more paranoid), but currently it seems senseless.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:37:20Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128374259",
      "id" : 128374259,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 216,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128374259",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375131"
         }
      },
      "body" : "Thank you for this insight! Yes - that's what was causing the test to fail.\r\n\r\nI've made some progress with the test. I've pushed what I've got so far, and hope to finish it off tomorrow morning.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:41:24Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolemin=20']]\n+\n+    def run_test(self):\n+        tmpdir = self.options.tmpdir\n+\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Make backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\")\n+\n+        self.log.info(\"Generate addresses and send funds to addresses in the keypool and extended keypool\")\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        for _ in range(90):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(20):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/1'\")\n+\n+        rawch = self.nodes[1].getrawchangeaddress()\n+        assert_equal(self.nodes[1].validateaddress(rawch)['hdkeypath'], \"m/0'/1'/0'\")\n+\n+        # Send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        # self.nodes[0].sendtoaddress(addr, 1)\n+\n+        # n0addr = self.nodes[0].getnewaddress()\n+        # txdata = self.nodes[0].createrawtransaction([], {rawch: 2.0, n0addr: 3.0})\n+\n+        # txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        # txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        # self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        # self.sync_all()\n+        # self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 15)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375131",
      "id" : 128375131,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 78,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51049789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375131",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375201"
         }
      },
      "body" : "Static is a little unusual here, maybe drop it to avoid adding symbols to the binary.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:41:42Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375201",
      "id" : 128375201,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128375201",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128377560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128377560"
         }
      },
      "body" : "I'm not 100% clear on this, but if this is an hd wallet, but not an hd-split wallet should we only be checking setExternalKeyPool here because setInternalKeyPool will be empty? See\r\nhttps://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.cpp#L3202",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T21:52:13Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128377560",
      "id" : 128377560,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 80,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128377560",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128380261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128380261"
         }
      },
      "body" : "It seems like this code would more efficient and maybe simpler if instead of making a set of CKeyID's here, we made a map from CKeyID -> (keypool_index, is_internal) and passed it into MarkReserveKeysAsUsed, so the first two loops in that function could be removed.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T22:05:31Z",
      "diff_hunk" : "@@ -1004,6 +1037,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128380261",
      "id" : 128380261,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 57,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128380261",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128381474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128381474"
         }
      },
      "body" : "@sipa's comment about only topping up hd key pools would seem to apply here and maybe to CheckKeypoolMinSize: https://github.com/bitcoin/bitcoin/pull/10240#pullrequestreview-49644483",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T22:12:46Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {\n+                    throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+                }\n+\n+                KeepKey(id);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128381474",
      "id" : 128381474,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 144,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128381474",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128382731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128382731"
         }
      },
      "body" : "Maybe use `index` instead of `id` here and other places to distinguish from pool indices from key ids.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-19T22:18:51Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128382731",
      "id" : 128382731,
      "original_commit_id" : "7f518efcf3d685c24eb870a738f89d15fde418b9",
      "original_position" : 110,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51042220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128382731",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545110"
         }
      },
      "body" : "Yes, you're right that this would be much more efficient. However, `GetAllReserveKeys()` is also called elsewhere, which would also need to be modified to accept a map, so I'd prefer not to change it as part of this PR.\r\n\r\nThis can be fixed in a follow-up PR unless you think the performance in `MarkReserveKeysAsUsed()` is unacceptable.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:15:05Z",
      "diff_hunk" : "@@ -1004,6 +1037,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545110",
      "id" : 128545110,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 57,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545110",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545184"
         }
      },
      "body" : "I think you're right. Fixed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:15:19Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545184",
      "id" : 128545184,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 80,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545184",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545209"
         }
      },
      "body" : "yup",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:15:24Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545209",
      "id" : 128545209,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545209",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545225"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:15:29Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545225",
      "id" : 128545225,
      "original_commit_id" : "7f518efcf3d685c24eb870a738f89d15fde418b9",
      "original_position" : 110,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545225",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545266"
         }
      },
      "body" : "removed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:15:37Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545266",
      "id" : 128545266,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 134,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51235803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545478"
         }
      },
      "body" : "Yes. Applies here. I don't think I need to change `CheckKeypoolMinSize()` though. The node should only be shutdown for HD wallets.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:16:24Z",
      "diff_hunk" : "@@ -3523,18 +3576,78 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && (setInternalKeyPool.size() < keypool_min || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const static std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& id : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, id);\n+                foundIndex = id;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& id = *(it);\n+                if (id > foundIndex) break; // set*KeyPool is ordered\n+\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool)) {\n+                    throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n+                }\n+\n+                KeepKey(id);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545478",
      "id" : 128545478,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 144,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545478",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545561"
         }
      },
      "body" : "Updated. Let me know what you think of the new text.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:16:42Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545561",
      "id" : 128545561,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545561",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545597"
         }
      },
      "body" : "yes - fixed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:16:49Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545597",
      "id" : 128545597,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 216,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545597",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545616"
         }
      },
      "body" : "Updated. Let me know what you think of the new text.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:16:53Z",
      "diff_hunk" : "@@ -3954,6 +4036,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(_(\"You are using an encrypted HD wallet. You may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (keypool_size < keypool_min && keypool_size < DEFAULT_KEYPOOL_MIN) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. You may miss incoming or outgoing transactions.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545616",
      "id" : 128545616,
      "original_commit_id" : "d2d67fdf7d32a562d7d9be06e9c7665ce7139989",
      "original_position" : 217,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51236220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128545616",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Thanks for the review @ryanofsky . I've addressed all of your concerns except the `GetAllReserveKeys()` refactor which can be done later.\r\n\r\nAll the changes are in separate fixup commits which can be squashed later.",
      "created_at" : "2017-07-20T15:18:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736430",
      "id" : 316736430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T15:18:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316736430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Test is fixed. It required #10703 since the test involves node1 emitting warnings to stderr.",
      "created_at" : "2017-07-20T15:18:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736706",
      "id" : 316736706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T15:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316736706",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128554064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128554064"
         }
      },
      "body" : "Maybe declare closer to while loop, also maybe write `it = setKeyPool->begin()`",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:45:27Z",
      "diff_hunk" : "@@ -3523,18 +3576,73 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& index : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(index, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, index);\n+                foundIndex = index;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128554064",
      "id" : 128554064,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 126,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51245557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128554064",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128555192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128555192"
         }
      },
      "body" : "Maybe move TopUpKeyPool & CheckKeypoolMinSize out of MarkReserveKeysAsUsed (to the one caller) so MarkReserveKeysAsUsed only does what the name suggests.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T15:49:33Z",
      "diff_hunk" : "@@ -3523,18 +3576,73 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& index : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(index, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, index);\n+                foundIndex = index;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& index = *(it);\n+                if (index > foundIndex) break; // set*KeyPool is ordered\n+\n+                KeepKey(index);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (!TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128555192",
      "id" : 128555192,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 139,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51245557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128555192",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128558860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128558860"
         }
      },
      "body" : "If keypool size was provided nothing actually happens here so the log message seems misleading. Maybe change SoftSetArg to ForceSetArg or only log this if SoftSetArg returns true.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T16:02:24Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128558860",
      "id" : 128558860,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 206,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51245557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128558860",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128559055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128559055"
         }
      },
      "body" : "Maybe explicitly warn about shutdowns, too",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T16:03:09Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128559055",
      "id" : 128559055,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 209,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51245557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128559055",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128562939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128562939"
         }
      },
      "body" : "We need to hold the wallet lock here or we fail the assertion at wallet/wallet.cpp:830 in  `CanSupportFeature`.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T16:18:27Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"\n+                                    \"derived keys your wallet may not detect transactions involving those keys. You should manually top-up your wallet keypool.\")));\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128562939",
      "id" : 128562939,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 218,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51255272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128562939",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128570097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128570097"
         }
      },
      "body" : "Maybe split this up into test_restore(encrypted=False/True) or test_encrypted_restore/test_unencrypted_restore calls to make the test less repetitive and simpler to understand.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T16:48:44Z",
      "diff_hunk" : "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\n+\n+Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n+\n+- Start node1, shutdown and backup unencrypted wallet. Generate 110 keys (enough to drain the keypool). Store key\n+  90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Restart node, encrypt wallet and backup encrypted wallet. Generate 110 keys (enough to drain the keypool). Store key\n+  90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Stop node1, clear the datadir, move unencrypted wallet back into the datadir and restart node1.\n+- connect node1 to node0. Verify that they sync and node1 receives its funds.\n+- Stop node1, move encrypted wallet back into the datadir and restart node1.\n+- Verify that node1 fails to start up because it can't topup its keypool.\n+\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+    connect_nodes_bi\n+)\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128570097",
      "id" : 128570097,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 35,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51245557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128570097",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Squashed down to 4 commits. Will address @instagibbs and @ryanofsky feedback next.",
      "created_at" : "2017-07-20T17:21:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316772655",
      "id" : 316772655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T17:21:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316772655",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128579380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128579380"
         }
      },
      "body" : "is it ok to lock in `CheckKeypoolMinSize()` instead?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:25:21Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"\n+                                    \"derived keys your wallet may not detect transactions involving those keys. You should manually top-up your wallet keypool.\")));\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128579380",
      "id" : 128579380,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 218,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51273206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128579380",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128580545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128580545"
         }
      },
      "body" : "I think so. You'd be calling for the lock twice in the other path, but that's ok right?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:28:30Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"\n+                                    \"derived keys your wallet may not detect transactions involving those keys. You should manually top-up your wallet keypool.\")));\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128580545",
      "id" : 128580545,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 218,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51274469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128580545",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128585827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128585827"
         }
      },
      "body" : "yes, I don't think there's a problem doing that.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:50:23Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"\n+                                    \"derived keys your wallet may not detect transactions involving those keys. You should manually top-up your wallet keypool.\")));\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128585827",
      "id" : 128585827,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 218,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51280383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128585827",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587367"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:56:28Z",
      "diff_hunk" : "@@ -3523,18 +3576,73 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& index : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(index, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, index);\n+                foundIndex = index;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587367",
      "id" : 128587367,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 126,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51282173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587381"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:56:32Z",
      "diff_hunk" : "@@ -3523,18 +3576,73 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, id));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    for (std::set<int64_t> *setKeyPool : {&setInternalKeyPool, &setExternalKeyPool}) {\n+        int64_t foundIndex = -1;\n+        for (const int64_t& index : *setKeyPool) {\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(index, keypool)) {\n+                throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n+            }\n+\n+            if (keypool.vchPubKey.GetID() == keyId) {\n+                LogPrintf(\"%s: Found keypool index %d\\n\", __func__, index);\n+                foundIndex = index;\n+                if (!keypool.fInternal) {\n+                    SetAddressBook(keyId, \"\", \"receive\");\n+                }\n+                break;\n+            }\n+        }\n+\n+        auto it = std::begin(*setKeyPool);\n+        // mark all keys up to the found key as used\n+        if (foundIndex >= 0) {\n+            while (it != std::end(*setKeyPool)) {\n+                const int64_t& index = *(it);\n+                if (index > foundIndex) break; // set*KeyPool is ordered\n+\n+                KeepKey(index);\n+                it = setKeyPool->erase(it);\n+            }\n+        }\n+    }\n+\n+    if (!TopUpKeyPool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587381",
      "id" : 128587381,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 139,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51282185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587399"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:56:36Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587399",
      "id" : 128587399,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 206,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51282215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587399",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587410"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:56:40Z",
      "diff_hunk" : "@@ -3954,6 +4031,27 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+            InitWarning(strprintf(_(\"You are using an encrypted HD wallet. If you are restoring an old HD wallet that has not been topped up with the most recently \"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587410",
      "id" : 128587410,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 209,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51282232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587430"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T17:56:44Z",
      "diff_hunk" : "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\n+\n+Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n+\n+- Start node1, shutdown and backup unencrypted wallet. Generate 110 keys (enough to drain the keypool). Store key\n+  90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Restart node, encrypt wallet and backup encrypted wallet. Generate 110 keys (enough to drain the keypool). Store key\n+  90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Stop node1, clear the datadir, move unencrypted wallet back into the datadir and restart node1.\n+- connect node1 to node0. Verify that they sync and node1 receives its funds.\n+- Stop node1, move encrypted wallet back into the datadir and restart node1.\n+- Verify that node1 fails to start up because it can't topup its keypool.\n+\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+    connect_nodes_bi\n+)\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587430",
      "id" : 128587430,
      "original_commit_id" : "965594a5528ce74e6a1d51232da729c166d176d3",
      "original_position" : 35,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 51282249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128587430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Can we make this also suppress the relock while scanning ... so that it's viable to just unlock and have it stay unlocked until its done-ish?\r\n\r\nWhat will this do if, without any rescan, I exhaust all the keys in the wallet... will it falsely trigger?",
      "created_at" : "2017-07-20T18:21:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316788732",
      "id" : 316788732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T18:21:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316788732",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128611234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128611234"
         }
      },
      "body" : "Method name should reflect the fact it will shut down upon failure.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T19:35:23Z",
      "diff_hunk" : "@@ -3523,18 +3582,68 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128611234",
      "id" : 128611234,
      "original_commit_id" : "691991b6aa6a190f05bc7653d4054392838796df",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51307943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128611234",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128616867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128616867"
         }
      },
      "body" : "suggested name?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T20:02:34Z",
      "diff_hunk" : "@@ -3523,18 +3582,68 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::CheckKeypoolMinSize() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128616867",
      "id" : 128616867,
      "original_commit_id" : "691991b6aa6a190f05bc7653d4054392838796df",
      "original_position" : 84,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51314401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128616867",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "I've implemented @ryanofsky's suggestion for simplifying `MarkReserveKeysAsUsed()` and improved the error message if the node shuts down.",
      "created_at" : "2017-07-20T20:03:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316814458",
      "id" : 316814458,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T20:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316814458",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "light tACK\r\n\r\nCan confirm the new directions upon failure to topup using Crypted lead to recovery of proper index position.",
      "created_at" : "2017-07-20T20:05:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316814806",
      "id" : 316814806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-20T20:05:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316814806",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128617859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128617859"
         }
      },
      "body" : "The new error message doesn't quite work here, but it's also quite unlikely to happen, so maybe moot.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T20:07:24Z",
      "diff_hunk" : "@@ -3954,6 +4019,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                ForceSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128617859",
      "id" : 128617859,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 226,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51315557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128617859",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128618933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128618933"
         }
      },
      "body" : "Just noting in case I'm underestimating the likelihood/cost: unlikely but this could be painful if they're using more than 1500 keys, as this might trigger multiple times causing them to re-download the chain multiple times.\r\n\r\nThis will go away with proper long-term fix.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T20:12:06Z",
      "diff_hunk" : "@@ -3523,30 +3584,65 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::CheckKeypoolMinSize() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128618933",
      "id" : 128618933,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 101,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51316714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128618933",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128621759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128621759"
         }
      },
      "body" : "~~~This seems safe, but practically speaking shouldn't a manual rescan be unnecessary in most cases, because if the node shuts down when the keypool size is low, restarting should automatically rescan from `ReadBestBlock`.~~~ _EDIT: Never mind, too many race conditions to think about here. Not sure what a good solution is._\r\n\r\nRelatedly, maybe this PR should explicitly avoid calling `WriteBestBlock` when the keypool size is too low, in case shutdown takes a long time or -keypoolmin is set to 0 to recover.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-20T20:24:43Z",
      "diff_hunk" : "@@ -3589,9 +3589,15 @@ void CWallet::CheckKeypoolMinSize() {\n     unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n     if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n         // if the remaining keypool size is below the gap limit, shutdown\n-        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n                   __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n-        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128621759",
      "id" : 128621759,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 14,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51319899,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128621759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128698347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128698347"
         }
      },
      "body" : "> Relatedly, maybe this PR should explicitly avoid calling WriteBestBlock when the keypool size is too low, \r\n\r\nACK. Very much so.  If not for having no mechanism for telling you that your wallet has fallen behind, this would more or less eliminate the need for shutdown.  though it's weird that you'd lower the minimum to bypass the shutdown and inadvertently update the height. ",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T07:17:04Z",
      "diff_hunk" : "@@ -3589,9 +3589,15 @@ void CWallet::CheckKeypoolMinSize() {\n     unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n     if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n         // if the remaining keypool size is below the gap limit, shutdown\n-        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n                   __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n-        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128698347",
      "id" : 128698347,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 14,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51401951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128698347",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128715891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128715891"
         }
      },
      "body" : "Maybe there should be two flags:\r\n\r\n`-keypoolmin` as the threshold for calling `WriteBestBlock`\r\n`-keypoolcriticalmin` or `-keypoolshutdownmin` as the threshold for shutting down\r\n\r\nBoth flags could be set to 500. This still wouldn't provide a safe recovery path that avoids a complete rescan (we would need make walletpassphrase top up and rescan from bestblock after unlocking), but something like that could be added in the future, and in the meantime this would provide a safer way to avoid shutdowns if a rescan can't be done right away.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T09:02:04Z",
      "diff_hunk" : "@@ -3589,9 +3589,15 @@ void CWallet::CheckKeypoolMinSize() {\n     unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n     if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n         // if the remaining keypool size is below the gap limit, shutdown\n-        LogPrintf(\"%s: Keypool is too small. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n                   __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n-        const std::string error_msg = \"Keypool is too small. Shutting down\";\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128715891",
      "id" : 128715891,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 14,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51421441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128715891",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128760962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128760962"
         }
      },
      "body" : "sorry - I don't understand this comment. Can you explain what you mean by the new error message not quite working?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T13:27:43Z",
      "diff_hunk" : "@@ -3954,6 +4019,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                ForceSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128760962",
      "id" : 128760962,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 226,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51473062,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128760962",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761167"
         }
      },
      "body" : "What's special about 1500?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T13:28:42Z",
      "diff_hunk" : "@@ -3523,30 +3584,65 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::CheckKeypoolMinSize() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761167",
      "id" : 128761167,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 101,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51473303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761167",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761402"
         }
      },
      "body" : "Ok my math is off, I think 1000, I just meant the 2nd time this could occur.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T13:29:42Z",
      "diff_hunk" : "@@ -3523,30 +3584,65 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::CheckKeypoolMinSize() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_min);\n+        const std::string error_msg = \"Number of keys in keypool is below minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolmin set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761402",
      "id" : 128761402,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 101,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51473571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761402",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761617"
         }
      },
      "body" : "mistaken, ignore",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T13:30:35Z",
      "diff_hunk" : "@@ -3954,6 +4019,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_min);\n+                ForceSetArg(\"-keypool\", std::to_string(keypool_min));\n+            }\n+        } else {\n+            if (keypool_size < keypool_min) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool minimum size of %d. Using a larger keypool will make it less \"\n+                                        \"likely that your wallet will be missing transactions and funds if it is restored from an old backup.\"), keypool_size, keypool_min));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+        walletInstance->CheckKeypoolMinSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761617",
      "id" : 128761617,
      "original_commit_id" : "b12a6a051a655eef13cbbd7e45fbb559635054ab",
      "original_position" : 226,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51473803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128761617",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "Added two commits:\r\n\r\n1. rename current option `keypoolcritical` - if the keypool falls below this, then shutdown the node\r\n2. add option `keypoolmin` - if the keypool falls below this, don't update the wallet's best block.\r\n\r\nIf people think that's conceptually the right approach, then I'll squash down into sensible commits.",
      "created_at" : "2017-07-21T14:09:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317011192",
      "id" : 317011192,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-21T14:09:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317011192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128781584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128781584"
         }
      },
      "body" : "Do you think there would be drawbacks to dropping the IsHDEnabled check here? Seems like that would be the safer thing to do.\r\n\r\nMight also be good to have a helper method to avoid duplicating logic here and in the shutdown code. e.g.:\r\n\r\n```\r\nbool CWallet::HasUnusedKeys(int min_keys) const\r\n{\r\n    return setExternalKeyPool.size() >= min_keys && (setInternalKeyPool.size() >= min_keys || !CanSupportFeature(FEATURE_HD_SPLIT));\r\n}\r\n```",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T14:52:12Z",
      "diff_hunk" : "@@ -382,6 +415,11 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128781584",
      "id" : 128781584,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 52,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51496986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128781584",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128783168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128783168"
         }
      },
      "body" : "I would maybe define a little struct here to make code calling this more readable.\r\n\r\n```\r\nstruct ReserveKey { int64_t index; bool internal; };\r\nstd::map<CKeyID, ReserveKey> GetAllReserveKeys() const;\r\n```\r\n\r\nReturning the map this way would also let callers loop over it easily or use `auto`.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T14:57:56Z",
      "diff_hunk" : "@@ -988,7 +996,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex, bool fInternal);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n+    void CheckKeypoolMinSize();\n+    void MarkReserveKeysAsUsed(const int64_t keypool_index, const bool internal);\n+    void GetAllReserveKeys(std::map<CKeyID, std::pair<int64_t, bool>>& mapKeyPool) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128783168",
      "id" : 128783168,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 23,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 51496986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128783168",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128787014"
         }
      },
      "body" : "Could s/CheckKeypoolMinSize/CheckKeypoolCriticalSize\r\n\r\nThere was also an old comment about renaming this. https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128611234. Could go with something like `MaybeShutdownForLaggingWallet`",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T15:12:43Z",
      "diff_hunk" : "@@ -3523,30 +3589,65 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::CheckKeypoolMinSize() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787014",
      "id" : 128787014,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 100,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51496986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128787014",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128787959"
         }
      },
      "body" : "Need to add `-keypoolmin` I think too.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T15:16:32Z",
      "diff_hunk" : "@@ -3834,6 +3903,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n \n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-keypoolcritical\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, shutdown (default: %u)\"), DEFAULT_KEYPOOL_CRITICAL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787959",
      "id" : 128787959,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51496986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128787959",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128805995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128805995"
         }
      },
      "body" : "As discussed, if the user is trying to restore from an old non-HD wallet and they drop below keypoolmin/keypoolcritical, there's very little they can do (since topup will generate new random keys). I'll leave this in for now, but if you think we definitely should shutdown or stop advancing best block for non-HD wallets, let me know.\r\n\r\nUnless you strongly feel that I should add the helper method, I'll leave this as explicitly coded in both places.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T16:36:12Z",
      "diff_hunk" : "@@ -382,6 +415,11 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_min) || (setExternalKeyPool.size() < keypool_min))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128805995",
      "id" : 128805995,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 52,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51523938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128805995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128806084"
         }
      },
      "body" : "Good point. Changed name to `ShutdownIfKeypoolCritical()`",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T16:36:33Z",
      "diff_hunk" : "@@ -3523,30 +3589,65 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::CheckKeypoolMinSize() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806084",
      "id" : 128806084,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 100,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51524030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128806084",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128806111"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T16:36:39Z",
      "diff_hunk" : "@@ -3834,6 +3903,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n \n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-keypoolcritical\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, shutdown (default: %u)\"), DEFAULT_KEYPOOL_CRITICAL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806111",
      "id" : 128806111,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 214,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51524058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128806111",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128813288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128813288"
         }
      },
      "body" : "done",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T17:13:18Z",
      "diff_hunk" : "@@ -988,7 +996,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex, bool fInternal);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n+    void CheckKeypoolMinSize();\n+    void MarkReserveKeysAsUsed(const int64_t keypool_index, const bool internal);\n+    void GetAllReserveKeys(std::map<CKeyID, std::pair<int64_t, bool>>& mapKeyPool) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128813288",
      "id" : 128813288,
      "original_commit_id" : "64ef2140f3517fbfd37ed1b03bacff952be68f00",
      "original_position" : 23,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 51532133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128813288",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@ryanofsky I've addressed all of your comments. Let me know if you're happy with the last three commits and I'll squash them down for the benefit of other reviewers,",
      "created_at" : "2017-07-21T17:13:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317059222",
      "id" : 317059222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-21T17:13:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317059222",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128814204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128814204"
         }
      },
      "body" : "Could drop clear, map will already be empty",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T17:17:48Z",
      "diff_hunk" : "@@ -3523,33 +3588,70 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n+static void LoadReserveKeysToMap(std::map<CKeyID, ReserveKey>& mapKeyPool, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    for (const int64_t& index : setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        if (!walletdb.ReadPool(index, keypool))\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n+        mapKeyPool[keyID] = ReserveKey {index, keypool.fInternal};\n     }\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+void CWallet::MarkReserveKeysAsUsed(const int64_t keypool_index, const bool internal)\n {\n-    setAddress.clear();\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : &setExternalKeyPool;\n+    auto it = setKeyPool->begin();\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_index) break; // set*KeyPool is ordered\n+\n+        KeepKey(index);\n+        it = setKeyPool->erase(it);\n+    }\n+}\n+\n+std::map<CKeyID, ReserveKey> CWallet::GetAllReserveKeys() const\n+{\n+    std::map<CKeyID, ReserveKey> mapKeyPool;\n+    mapKeyPool.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128814204",
      "id" : 128814204,
      "original_commit_id" : "89af21ddcd7837c45cf8e261711d227e4f8448db",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51533164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128814204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128818686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128818686"
         }
      },
      "body" : "dropped",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-21T17:38:41Z",
      "diff_hunk" : "@@ -3523,33 +3588,70 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n+static void LoadReserveKeysToMap(std::map<CKeyID, ReserveKey>& mapKeyPool, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    for (const int64_t& index : setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        if (!walletdb.ReadPool(index, keypool))\n+            throw std::runtime_error(strprintf(\"%s: read failed for index %d\", __func__, index));\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n+        mapKeyPool[keyID] = ReserveKey {index, keypool.fInternal};\n     }\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+void CWallet::MarkReserveKeysAsUsed(const int64_t keypool_index, const bool internal)\n {\n-    setAddress.clear();\n+    AssertLockHeld(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : &setExternalKeyPool;\n+    auto it = setKeyPool->begin();\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_index) break; // set*KeyPool is ordered\n+\n+        KeepKey(index);\n+        it = setKeyPool->erase(it);\n+    }\n+}\n+\n+std::map<CKeyID, ReserveKey> CWallet::GetAllReserveKeys() const\n+{\n+    std::map<CKeyID, ReserveKey> mapKeyPool;\n+    mapKeyPool.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128818686",
      "id" : 128818686,
      "original_commit_id" : "89af21ddcd7837c45cf8e261711d227e4f8448db",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 51538145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128818686",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "All comments should now be addressed and changes squashed down into 6 commits:\r\n\r\n- *Allow tests to pass when stderr is non-empty* is #10703 \r\n- *MOVEONLY move CAffectedKeysVisitor* is a code move\r\n- *Add ReserveKey struct and return it from GetAllReserveKeys()* is a slight refactor of existing code\r\n- *Add keypoolcritical* adds the node shutdown functionality\r\n- *Add keypoolmin* adds the don't-advance-wallet-best-block functionality\r\n- *add keypool restore functional test* adds tests\r\n\r\nReady for wider review.",
      "created_at" : "2017-07-21T18:25:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317076902",
      "id" : 317076902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-21T18:25:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317076902",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Locking issue has been resolved. This should now pass Travis.\r\n\r\nI've added a new commit *don't hold cs_LastBlockFile while calling setBestChain*\r\n",
      "created_at" : "2017-07-24T16:44:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317482045",
      "id" : 317482045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-24T16:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317482045",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129397840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129397840"
         }
      },
      "body" : "In commit \"[wallet] Add keypoolcritical\"\r\n\r\nMaybe add & if this isn't an intentional optimization, it's a little more conventional in c++ to pass structs by reference instead of value to avoid potentially slow copies.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-25T19:09:27Z",
      "diff_hunk" : "@@ -3568,15 +3596,50 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToMap(std::map<CKeyID, ReserveKey>& mapKeyPool, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+    for (const int64_t& index : setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n+        if (!walletdb.ReadPool(index, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        mapKeyPool[keyID] = ReserveKey {id, keypool.fInternal};\n+        mapKeyPool[keyID] = ReserveKey {index, keypool.fInternal};\n+    }\n+}\n+\n+void CWallet::MarkReserveKeysAsUsed(const ReserveKey reserve_key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129397840",
      "id" : 129397840,
      "original_commit_id" : "53f32125ee3d3b2f2f6c30154e357a36fefe7d59",
      "original_position" : 81,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52166791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129397840",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129398147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129398147"
         }
      },
      "body" : "In commit \"[wallet] Add keypoolcritical\"\r\n\r\nCould make PR a little smaller by moving these changes to previous commit.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-25T19:10:42Z",
      "diff_hunk" : "@@ -3568,15 +3596,50 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);\n+    }\n+}\n+\n static void LoadReserveKeysToMap(std::map<CKeyID, ReserveKey>& mapKeyPool, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n+    for (const int64_t& index : setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n+        if (!walletdb.ReadPool(index, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        mapKeyPool[keyID] = ReserveKey {id, keypool.fInternal};\n+        mapKeyPool[keyID] = ReserveKey {index, keypool.fInternal};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129398147",
      "id" : 129398147,
      "original_commit_id" : "53f32125ee3d3b2f2f6c30154e357a36fefe7d59",
      "original_position" : 77,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52166791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129398147",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@jnewbery, can you explain the reason for dependency on #10703? It does seem useful to have travis continue checking for unexpected error messages (see https://botbot.me/freenode/bitcoin-core-dev/msg/89036779/)",
      "created_at" : "2017-07-25T19:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317849947",
      "id" : 317849947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-25T19:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317849947",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "After discussion on irc:\r\n\r\nWould it be possible to pipe the stderr into a SpooledTempFile instead? This way one can check that the error string matches.\r\nThe issue with the current approach is that it is active for all tests, even though none of the other tests needs it. This might hide serious bugs by accident.\r\n\r\nOne nit: Please remove the execute bit from util.py",
      "created_at" : "2017-07-25T21:04:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317871742",
      "id" : 317871742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-25T21:04:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317871742",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129491219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129491219"
         }
      },
      "body" : "Nit: space after `for`",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-26T06:38:24Z",
      "diff_hunk" : "@@ -1038,6 +1039,33 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::map<CKeyID, ReserveKey> keyPool = GetAllReserveKeys();\n+\n+            // loop though all outputs\n+            for(const CTxOut& txout: tx.vout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129491219",
      "id" : 129491219,
      "original_commit_id" : "53f32125ee3d3b2f2f6c30154e357a36fefe7d59",
      "original_position" : 20,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52268502,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129491219",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Reworked with stderr capture/checking done within the test.\r\n\r\nAlso addressed @MarcoFalke's nit and rebased.",
      "created_at" : "2017-07-26T07:09:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317968153",
      "id" : 317968153,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-26T07:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317968153",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129513787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129513787"
         }
      },
      "body" : "\"encrytped\"",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-26T08:45:04Z",
      "diff_hunk" : "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\n+\n+Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n+\n+Repeat test twice, once with encrypted wallet and once with unencrypted wallet:\n+\n+- Start node1, shutdown and backup wallet.\n+- Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n+- if wallet is unencrypted:\n+    - connect node1 to node0. Verify that they sync and node1 receives its funds.\n+- else wallet is encrypted:\n+    - connect node1 to node0. Verify that node1 shuts down to avoid loss of funds.\n+\"\"\"\n+import os\n+import shutil\n+import tempfile\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+    connect_nodes_bi\n+)\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolcritical=20']]\n+\n+    def run_test(self):\n+        self.tmpdir = self.options.tmpdir\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Test keypool restore (unencrypted wallet)\")\n+        self._test_restore(encrypted=False)\n+\n+        self.log.info(\"Test keypool restore (encrypted wallet)\")\n+        self._test_restore(encrypted=True)\n+\n+    def _test_restore(self, encrypted):\n+\n+        self.log.info(\"Make backup of wallet\")\n+\n+        if encrypted:\n+            self.nodes[1].encryptwallet('test')\n+            self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        else:\n+            self.stop_node(1)\n+\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+\n+        self.log.info(\"Generate keys for wallet\")\n+\n+        for _ in range(90):\n+            addr_oldpool = self.nodes[1].getnewaddress()\n+        for _ in range(10):\n+            self.nodes[1].getnewaddress()\n+        if encrypted:\n+            # Keypool can't top up because the wallet is encrypted\n+            assert_raises_jsonrpc(-12, \"Keypool ran out\", self.nodes[1].getnewaddress)\n+            self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(10):\n+            addr_extpool = self.nodes[1].getnewaddress()\n+\n+        self.stop_node(1)\n+\n+        self.log.info(\"Send funds to wallet\")\n+\n+        self.nodes[0].sendtoaddress(addr_oldpool, 10)\n+        self.nodes[0].sendtoaddress(addr_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Empty datadir and restart node\")\n+\n+        # self.stop_node(1)\n+        shutil.rmtree(self.tmpdir + \"/node1/regtest/chainstate\")\n+        shutil.rmtree(self.tmpdir + \"/node1/regtest/blocks\")\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+\n+        if encrypted:\n+            self.log.info(\"Encrypted wallet - verify node shuts down to avoid loss of funds\")\n+\n+            with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+                self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1], stderr=log_stderr)\n+                connect_nodes(self.nodes[0], 1)\n+\n+                # node1 should shutdown because it can't topup its keypool\n+                self.bitcoind_processes[1].wait(2)\n+\n+                log_stderr.seek(0)\n+                stderr = log_stderr.read().decode('utf-8')\n+                assert \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\" in stderr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129513787",
      "id" : 129513787,
      "original_commit_id" : "ec59b2eaaccd4d42d98345e9719265f102494e46",
      "original_position" : 101,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 52293139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129513787",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129520520"
         }
      },
      "body" : "fixed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-26T09:14:52Z",
      "diff_hunk" : "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\n+\n+Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n+\n+Repeat test twice, once with encrypted wallet and once with unencrypted wallet:\n+\n+- Start node1, shutdown and backup wallet.\n+- Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n+- if wallet is unencrypted:\n+    - connect node1 to node0. Verify that they sync and node1 receives its funds.\n+- else wallet is encrypted:\n+    - connect node1 to node0. Verify that node1 shuts down to avoid loss of funds.\n+\"\"\"\n+import os\n+import shutil\n+import tempfile\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+    connect_nodes_bi\n+)\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolcritical=20']]\n+\n+    def run_test(self):\n+        self.tmpdir = self.options.tmpdir\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Test keypool restore (unencrypted wallet)\")\n+        self._test_restore(encrypted=False)\n+\n+        self.log.info(\"Test keypool restore (encrypted wallet)\")\n+        self._test_restore(encrypted=True)\n+\n+    def _test_restore(self, encrypted):\n+\n+        self.log.info(\"Make backup of wallet\")\n+\n+        if encrypted:\n+            self.nodes[1].encryptwallet('test')\n+            self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        else:\n+            self.stop_node(1)\n+\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+\n+        self.log.info(\"Generate keys for wallet\")\n+\n+        for _ in range(90):\n+            addr_oldpool = self.nodes[1].getnewaddress()\n+        for _ in range(10):\n+            self.nodes[1].getnewaddress()\n+        if encrypted:\n+            # Keypool can't top up because the wallet is encrypted\n+            assert_raises_jsonrpc(-12, \"Keypool ran out\", self.nodes[1].getnewaddress)\n+            self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(10):\n+            addr_extpool = self.nodes[1].getnewaddress()\n+\n+        self.stop_node(1)\n+\n+        self.log.info(\"Send funds to wallet\")\n+\n+        self.nodes[0].sendtoaddress(addr_oldpool, 10)\n+        self.nodes[0].sendtoaddress(addr_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Empty datadir and restart node\")\n+\n+        # self.stop_node(1)\n+        shutil.rmtree(self.tmpdir + \"/node1/regtest/chainstate\")\n+        shutil.rmtree(self.tmpdir + \"/node1/regtest/blocks\")\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+\n+        if encrypted:\n+            self.log.info(\"Encrypted wallet - verify node shuts down to avoid loss of funds\")\n+\n+            with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+                self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1], stderr=log_stderr)\n+                connect_nodes(self.nodes[0], 1)\n+\n+                # node1 should shutdown because it can't topup its keypool\n+                self.bitcoind_processes[1].wait(2)\n+\n+                log_stderr.seek(0)\n+                stderr = log_stderr.read().decode('utf-8')\n+                assert \"Number of keys in keypool is below critical minimum and the wallet is encrytped. Bitcoin will now shutdown to avoid loss of funds.\" in stderr",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520520",
      "id" : 129520520,
      "original_commit_id" : "ec59b2eaaccd4d42d98345e9719265f102494e46",
      "original_position" : 101,
      "path" : "test/functional/keypool-restore.py",
      "position" : null,
      "pull_request_review_id" : 52300359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129520520",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129520586"
         }
      },
      "body" : "fixed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-26T09:15:11Z",
      "diff_hunk" : "@@ -1038,6 +1039,33 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::map<CKeyID, ReserveKey> keyPool = GetAllReserveKeys();\n+\n+            // loop though all outputs\n+            for(const CTxOut& txout: tx.vout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520586",
      "id" : 129520586,
      "original_commit_id" : "53f32125ee3d3b2f2f6c30154e357a36fefe7d59",
      "original_position" : 20,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52300432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129520586",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase. Alternatively, it would be an equivalently simple change to just keep the reserved keys map created in GetAllReserveKeys in memory, and probably even remove more lines than it adds.",
      "created_at" : "2017-07-26T19:15:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318154266",
      "id" : 318154266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-26T19:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318154266",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "> As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase. Alternatively, it would be an equivalently simple change to just keep the reserved keys map created in GetAllReserveKeys in memory, and probably even remove more lines than it adds.\r\n\r\nhttps://github.com/ryanofsky/bitcoin/commit/79e2411e6fcc544326a02de2b0b5756c17c3531f is a straightforward, though not very good-looking way of avoiding GetAllReserveKeys calls on each matching transaction. Probably a nicer approach would be to keep an updated map in memory like you suggest, but I wanted to post this just in case the other approach leads to bugs or delays.",
      "created_at" : "2017-07-26T20:10:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318168079",
      "id" : 318168079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-26T20:10:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318168079",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129686224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129686224"
         }
      },
      "body" : "could you rename this to be something that isn't so easily confused with `CReserveKey`",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-26T20:24:34Z",
      "diff_hunk" : "@@ -82,6 +82,7 @@ class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n+struct ReserveKey { int64_t index; bool internal; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129686224",
      "id" : 129686224,
      "original_commit_id" : "c3c9224c045e2bd7f50f5f5e18cc78dcf1d79fb4",
      "original_position" : 4,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 52486681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129686224",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "I did https://github.com/TheBlueMatt/bitcoin/commits/2017-07-keypool-topup-no-perf-regression to fix the performance regression, it looks fine to me (note minor changes in \"[wallet] Add keypoolcritical\" which is a bit slower - now must read keypool before erasing, but it shouldn't be nearly as bad and #10238 should fix it) and is really pretty simple.",
      "created_at" : "2017-07-26T20:58:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318180585",
      "id" : 318180585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-26T20:58:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318180585",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "> We instead changed the check for updating SetBestBlock to recognize the condition of the first restart and continue to not update the best block in the wallet. This could detect a separate command line argument such as -bypasskeypoolcritical which is used in that check and the shutdown check.\r\n\r\nMaybe we could avoid the need for a -bypasskeypoolcritical command line option with a CWallet \"bool m_update_best_block\" member that starts off true, gets set to false whenever the number of keys falls below GetArg(\"-keypoolmin\"), and only gets set to back to true when there is a rescan from at or before the best block while there are more than -keypoolmin keys.",
      "created_at" : "2017-07-26T21:06:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318182682",
      "id" : 318182682,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-26T21:06:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318182682",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase.\r\n\r\nOuch, I wasn't aware that `GetAllReserveKeys` read all the keys from disk. #10283 looks like the right solution, and shouldn't be hard to rebase?",
      "created_at" : "2017-07-27T00:41:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318223556",
      "id" : 318223556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-27T00:41:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318223556",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I don't believe #10238 fixes the issue directly (doesn't provide the bidirectional mapping, I was incorrect), but is also a nice cleanup.\n\nOn July 26, 2017 8:42:03 PM EDT, Pieter Wuille <notifications@github.com> wrote:\n>> As it is this looks to me to be a major performance regression due to\n>calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe.\n>#10238 is a relatively simple patch to avoid the massive disk churn,\n>but would need rebase.\n>\n>Ouch, I wasn't aware that `GetAllReserveKeys` read all the keys from\n>disk. #10283 looks like the right solution, and shouldn't be hard to\n>rebase?\n>\n>-- \n>You are receiving this because you commented.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318223556\n",
      "created_at" : "2017-07-27T00:46:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318224220",
      "id" : 318224220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-27T00:46:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318224220",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129752910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129752910"
         }
      },
      "body" : "any suggestions? Is `ReserveKeyIndex` better? `ReserveKeyIndexChain`?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-27T04:46:59Z",
      "diff_hunk" : "@@ -82,6 +82,7 @@ class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n+struct ReserveKey { int64_t index; bool internal; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129752910",
      "id" : 129752910,
      "original_commit_id" : "c3c9224c045e2bd7f50f5f5e18cc78dcf1d79fb4",
      "original_position" : 4,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 52556721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129752910",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Thanks @TheBlueMatt . I've force pushed your branch here.\r\n\r\n@morcos - I've added your suggested `bypasskeypoolcritical` option. Can you take a look at the *[wallet] add bypasskeypoolcritical* commit and see if it captures what you were suggesting accurately?\r\n\r\n@ryanofsky - I think your solution would involve storing a new key in the wallet DB, since at the moment the only way to rescan is to restart the node. Am I understanding correctly?",
      "created_at" : "2017-07-27T06:42:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318273491",
      "id" : 318273491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-27T06:42:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318273491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "> @ryanofskyÃÂ - I think your solution would involve storing a new key in the wallet DB, since at the moment the only way to rescan is to restart the node. Am I understanding correctly?\r\n\r\nNo, you don't need to add anything new to the database, best block is all you need (because bitcoin automatically rescans from best block on startup, and you can initialize `m_update_best_block` based on keypool size). I included the part about setting `m_update_best_block` back to true again when there's a rescan with sufficient keys just because in the future we will have good rescan RPC. For now, the only way to get `m_update_best_block` set back to true would be to restart like the instructions say (or import a key in some clever way to trigger a rescan).\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at" : "2017-07-27T10:20:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318322124",
      "id" : 318322124,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-27T19:36:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318322124",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129887557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129887557"
         }
      },
      "body" : "Access the member directly to avoid a copy?\r\n\r\nAlso this will avoid running out of the keypool inside of one scriptPubKey :)\r\n",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-27T16:13:47Z",
      "diff_hunk" : "@@ -1006,6 +1046,33 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::map<CKeyID, int64_t> keyPool = GetAllReserveKeys();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129887557",
      "id" : 129887557,
      "original_commit_id" : "00b3b74fd8dc2bd79a9185a0604c497520eb801e",
      "original_position" : 70,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52707650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129887557",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129892032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129892032"
         }
      },
      "body" : "Maybe:  \"- restart without -bypasskeypoolcritical.\" followed by:\r\n\"NOTE: if you have a pruned node that prunes blocks your wallet hasn't scanned yet when restarting with -bypasskeypoolcritical then you may need to do a complete reindex.  Consider raising the prune limit temporarily for both restarts to avoid this.\" ",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-27T16:31:46Z",
      "diff_hunk" : "@@ -3530,38 +3624,53 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1) {\n-        pwallet->ReturnKey(nIndex, fInternal);\n+        pwallet->ReturnKey(nIndex, fInternal, vchPubKey);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        assert(keypool.vchPubKey.IsValid());\n-        CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n-    }\n-}\n-\n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (!GetBoolArg(\"-bypasskeypoolcritical\", false) &&\n+        IsHDEnabled() &&\n+        ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -bypasskeypoolcritical\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart without -bypasskeypoolcritical. This may redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129892032",
      "id" : 129892032,
      "original_commit_id" : "00b3b74fd8dc2bd79a9185a0604c497520eb801e",
      "original_position" : 235,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52707650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129892032",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130030865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130030865"
         }
      },
      "body" : "I believe Matt's commit 64dc2dddf52a48c9cef158951f46395683a26595 resolves your concern about copying. `GetAllReserveKeys()` returns a const reference \r\n\r\nI don't understand your comment about running out of the keypool. Is it still an issue?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-28T07:44:16Z",
      "diff_hunk" : "@@ -1006,6 +1046,33 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::map<CKeyID, int64_t> keyPool = GetAllReserveKeys();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130030865",
      "id" : 130030865,
      "original_commit_id" : "00b3b74fd8dc2bd79a9185a0604c497520eb801e",
      "original_position" : 70,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52863699,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130030865",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130032097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130032097"
         }
      },
      "body" : "Yes, makes sense. Changed",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-28T07:52:39Z",
      "diff_hunk" : "@@ -3530,38 +3624,53 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1) {\n-        pwallet->ReturnKey(nIndex, fInternal);\n+        pwallet->ReturnKey(nIndex, fInternal, vchPubKey);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        assert(keypool.vchPubKey.IsValid());\n-        CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n-    }\n-}\n-\n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (!GetBoolArg(\"-bypasskeypoolcritical\", false) &&\n+        IsHDEnabled() &&\n+        ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -bypasskeypoolcritical\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart without -bypasskeypoolcritical. This may redownload the blockchain if you are running a pruned node.\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130032097",
      "id" : 130032097,
      "original_commit_id" : "00b3b74fd8dc2bd79a9185a0604c497520eb801e",
      "original_position" : 235,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52865026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130032097",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@TheBlueMatt - I don't fully understand the implications of `m_pool_key_to_id` and returning a const references to the internal cache in `GetAllReserveKeys()`. For example, Cory has suggested that this might not be thread-safe, but perhaps that's ok in wallet code?\r\n\r\nReviewers who have previously ACKed this PR - please be aware of the additional commits.",
      "created_at" : "2017-07-28T07:56:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318587360",
      "id" : 318587360,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-28T07:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318587360",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery I just kind of assumed it was protected by cs_wallet, but we should verify.  \r\n\r\nNo my concern still exists.  It returns a const reference but then you immediately copy it to your local variable.  Also in that same code path you call TopUpKeyPool so now there will be more reserved keys but the next time you lookup you are still looking up in your stale copy",
      "created_at" : "2017-07-28T09:53:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318611517",
      "id" : 318611517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-28T09:53:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318611517",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130054057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130054057"
         }
      },
      "body" : "No my concern still exists. It returns a const reference but then you immediately copy it to your local variable. Also in that same code path you call TopUpKeyPool so now there will be more reserved keys but the next time you lookup you are still looking up in your stale copy",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-07-28T09:54:06Z",
      "diff_hunk" : "@@ -1006,6 +1046,33 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::map<CKeyID, int64_t> keyPool = GetAllReserveKeys();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130054057",
      "id" : 130054057,
      "original_commit_id" : "00b3b74fd8dc2bd79a9185a0604c497520eb801e",
      "original_position" : 70,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 52889752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-07-31T00:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130054057",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@jnewbery heh, yea, I just generally always assume everything in wallet takes LOCK2(cs_main, cs_wallet). The GetAllReserveKeys call in rpcdump as well as AddToWalletIfInvolvingMe both take/require cs_wallet, so it looks fine to me?",
      "created_at" : "2017-07-30T13:57:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318903438",
      "id" : 318903438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-30T13:57:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318903438",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@morcos - please look at commit *fixup: don't make local copy of m_pool_key_to_id*. I think that addresses your point above.\r\n\r\n@TheBlueMatt - yes, all access to `m_pool_key_to_id` is protected by cs_wallet. The only place that isn't explicit is in `LoadKeyPool()`. I've added an `AssertLockHeld()` in *fixup: explicitly check lock is held in LoadKeyPool*.\r\n\r\nI'll squash both commits if you're happy with them.",
      "created_at" : "2017-07-31T00:08:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318939872",
      "id" : 318939872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-31T00:08:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318939872",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery looks good i think!\r\n",
      "created_at" : "2017-07-31T15:10:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319097067",
      "id" : 319097067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10882",
      "updated_at" : "2017-07-31T15:10:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/319097067",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130682453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130682453"
         }
      },
      "body" : "Wait, why is this safe? I'm both highly skeptical that throwing here doesn't blow up all kinds of potential callers and that this is neccessary. Better to just call StartShutdown() and then avoid writing wallet best block.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-08-01T18:02:55Z",
      "diff_hunk" : "@@ -3595,6 +3623,48 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && ((CanSupportFeature(FEATURE_HD_SPLIT) && setInternalKeyPool.size() < keypool_critical) || (setExternalKeyPool.size() < keypool_critical))) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0\\n\"\n+                                      \" - unlock the wallet using walletpassphrase\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+        throw std::runtime_error(error_msg);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130682453",
      "id" : 130682453,
      "original_commit_id" : "c83673b9ecdb87d807e73b51a4f1da62e4dfff7d",
      "original_position" : 62,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 53585206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-08-01T18:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130682453",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130684101"
         }
      },
      "body" : "I think this needs to be more than a warning, no? There is no check in ShutdownIfKeypoolCritical to only exit if we failed to top up (ie if we hit this warning, the first time we see ShutdownIfKeypoolCritical we will exit, no?",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-08-01T18:08:54Z",
      "diff_hunk" : "@@ -3968,6 +4039,25 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+        if (walletInstance->IsCrypted()) {\n+            if (keypool_size < keypool_critical) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool critical size for encrypted wallets (%d)\\n\", keypool_size, keypool_critical);\n+                ForceSetArg(\"-keypool\", std::to_string(keypool_critical));\n+            }\n+        } else {\n+            if (keypool_size < keypool_critical) {\n+                InitWarning(strprintf(_(\"Your keypool is configured to store %d keys, which is below the keypool critical size of %d. Using a larger keypool will make it less \"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684101",
      "id" : 130684101,
      "original_commit_id" : "c83673b9ecdb87d807e73b51a4f1da62e4dfff7d",
      "original_position" : 114,
      "path" : "src/wallet/wallet.cpp",
      "position" : 340,
      "pull_request_review_id" : 53585206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-08-01T18:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130684101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130684893"
         }
      },
      "body" : "The doc is wrong (we do advance the best block), but I prefer the doc version, so maybe just remove the check in SetBestChain.",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-08-01T18:12:09Z",
      "diff_hunk" : "@@ -3922,6 +3927,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     {\n         strUsage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n \n+        strUsage += HelpMessageOpt(\"-bypasskeypoolcritical\", _(\"Bypass keypool critical limit. Don't shutdown the node if keypool drops below keypoolcritical limit (but don't advance BestBlock)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684893",
      "id" : 130684893,
      "original_commit_id" : "667f98454e71a82ec548b34c7c270f6bae0b0b6f",
      "original_position" : 39,
      "path" : "src/wallet/wallet.cpp",
      "position" : 317,
      "pull_request_review_id" : 53585206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-08-01T18:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130684893",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130695850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130695850"
         }
      },
      "body" : "huh? @TheBlueMatt ",
      "commit_id" : "1f51da6b8dde43d404b91da83bd336002f517630",
      "created_at" : "2017-08-01T18:52:14Z",
      "diff_hunk" : "@@ -3922,6 +3927,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     {\n         strUsage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n \n+        strUsage += HelpMessageOpt(\"-bypasskeypoolcritical\", _(\"Bypass keypool critical limit. Don't shutdown the node if keypool drops below keypoolcritical limit (but don't advance BestBlock)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130695850",
      "id" : 130695850,
      "original_commit_id" : "667f98454e71a82ec548b34c7c270f6bae0b0b6f",
      "original_position" : 39,
      "path" : "src/wallet/wallet.cpp",
      "position" : 317,
      "pull_request_review_id" : 53599982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10882",
      "updated_at" : "2017-08-01T18:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130695850",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   }
]
